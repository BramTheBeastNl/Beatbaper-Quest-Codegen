// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.LockRecursionException
#include "System/Threading/LockRecursionException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LockRecursionException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)()>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)()>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LockRecursionException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)(::Il2CppString*)>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)(::Il2CppString*)>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LockRecursionException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LockRecursionException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&LockRecursionException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LockRecursionException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ManualResetEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualResetEvent::*)(bool)>(&ManualResetEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualResetEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualResetEvent::*)(bool)>(&ManualResetEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualResetEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Monitor
#include "System/Threading/Monitor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, lockTaken);
}
// Autogenerated method: System.Threading.Monitor.ThrowLockTakenException
void System::Threading::Monitor::ThrowLockTakenException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ThrowLockTakenException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ThrowLockTakenException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Monitor.Exit
void System::Threading::Monitor::Exit(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Monitor.Pulse
void System::Threading::Monitor::Pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.PulseAll
void System::Threading::Monitor::PulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::PulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "PulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_test_synchronised
bool System::Threading::Monitor::Monitor_test_synchronised(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Monitor_test_synchronised");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_test_synchronised", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse
void System::Threading::Monitor::Monitor_pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Monitor_pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulse
void System::Threading::Monitor::ObjPulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ObjPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse_all
void System::Threading::Monitor::Monitor_pulse_all(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Monitor_pulse_all");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse_all", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulseAll
void System::Threading::Monitor::ObjPulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ObjPulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_wait
bool System::Threading::Monitor::Monitor_wait(::Il2CppObject* obj, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::Monitor_wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, ms);
}
// Autogenerated method: System.Threading.Monitor.ObjWait
bool System::Threading::Monitor::ObjWait(bool exitContext, int millisecondsTimeout, ::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ObjWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, exitContext, millisecondsTimeout, obj);
}
// Autogenerated method: System.Threading.Monitor.try_enter_with_atomic_var
void System::Threading::Monitor::try_enter_with_atomic_var(::Il2CppObject* obj, int millisecondsTimeout, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::try_enter_with_atomic_var");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "try_enter_with_atomic_var", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, millisecondsTimeout, lockTaken);
}
// Autogenerated method: System.Threading.Monitor.ReliableEnterTimeout
void System::Threading::Monitor::ReliableEnterTimeout(::Il2CppObject* obj, int timeout, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ReliableEnterTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnterTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, timeout, lockTaken);
}
// Autogenerated method: System.Threading.Monitor.ReliableEnter
void System::Threading::Monitor::ReliableEnter(::Il2CppObject* obj, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Monitor::ReliableEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, lockTaken);
}
// Writing MetadataGetter for method: Monitor::Enter
// Il2CppName: Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Enter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Enter
// Il2CppName: Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, bool&)>(&Monitor::Enter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: Monitor::ThrowLockTakenException
// Il2CppName: ThrowLockTakenException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Monitor::ThrowLockTakenException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ThrowLockTakenException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Monitor::Exit
// Il2CppName: Exit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Exit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Exit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int, bool)>(&Monitor::Wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Monitor::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int)>(&Monitor::Wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Monitor::Pulse
// Il2CppName: Pulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Pulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::PulseAll
// Il2CppName: PulseAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::PulseAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "PulseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Monitor_test_synchronised
// Il2CppName: Monitor_test_synchronised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&Monitor::Monitor_test_synchronised)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_test_synchronised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Monitor_pulse
// Il2CppName: Monitor_pulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Monitor_pulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::ObjPulse
// Il2CppName: ObjPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::ObjPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Monitor_pulse_all
// Il2CppName: Monitor_pulse_all
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Monitor_pulse_all)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_pulse_all", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::ObjPulseAll
// Il2CppName: ObjPulseAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::ObjPulseAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjPulseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::Monitor_wait
// Il2CppName: Monitor_wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int)>(&Monitor::Monitor_wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Monitor::ObjWait
// Il2CppName: ObjWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, int, ::Il2CppObject*)>(&Monitor::ObjWait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Monitor::try_enter_with_atomic_var
// Il2CppName: try_enter_with_atomic_var
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, int, bool&)>(&Monitor::try_enter_with_atomic_var)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "try_enter_with_atomic_var", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: Monitor::ReliableEnterTimeout
// Il2CppName: ReliableEnterTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, int, bool&)>(&Monitor::ReliableEnterTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ReliableEnterTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: Monitor::ReliableEnter
// Il2CppName: ReliableEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, bool&)>(&Monitor::ReliableEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Monitor*), "ReliableEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ParameterizedThreadStart.Invoke
void System::Threading::ParameterizedThreadStart::Invoke(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ParameterizedThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ParameterizedThreadStart.BeginInvoke
System::IAsyncResult* System::Threading::ParameterizedThreadStart::BeginInvoke(::Il2CppObject* obj, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ParameterizedThreadStart::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, obj, callback, object);
}
// Autogenerated method: System.Threading.ParameterizedThreadStart.EndInvoke
void System::Threading::ParameterizedThreadStart::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ParameterizedThreadStart::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ParameterizedThreadStart::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterizedThreadStart::*)(::Il2CppObject*, System::IntPtr)>(&ParameterizedThreadStart::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterizedThreadStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterizedThreadStart::*)(::Il2CppObject*, System::IntPtr)>(&ParameterizedThreadStart::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterizedThreadStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ParameterizedThreadStart::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterizedThreadStart::*)(::Il2CppObject*)>(&ParameterizedThreadStart::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterizedThreadStart*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ParameterizedThreadStart::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ParameterizedThreadStart::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&ParameterizedThreadStart::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterizedThreadStart*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ParameterizedThreadStart::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterizedThreadStart::*)(System::IAsyncResult*)>(&ParameterizedThreadStart::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterizedThreadStart*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SemaphoreFullException
#include "System/Threading/SemaphoreFullException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SemaphoreFullException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SemaphoreFullException::*)()>(&SemaphoreFullException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SemaphoreFullException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SemaphoreFullException::*)()>(&SemaphoreFullException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SemaphoreFullException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SemaphoreFullException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SemaphoreFullException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&SemaphoreFullException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SemaphoreFullException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SemaphoreFullException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&SemaphoreFullException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SemaphoreFullException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.SendOrPostCallback.Invoke
void System::Threading::SendOrPostCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SendOrPostCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.SendOrPostCallback.BeginInvoke
System::IAsyncResult* System::Threading::SendOrPostCallback::BeginInvoke(::Il2CppObject* state, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SendOrPostCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.SendOrPostCallback.EndInvoke
void System::Threading::SendOrPostCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SendOrPostCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: SendOrPostCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SendOrPostCallback::*)(::Il2CppObject*, System::IntPtr)>(&SendOrPostCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SendOrPostCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SendOrPostCallback::*)(::Il2CppObject*, System::IntPtr)>(&SendOrPostCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SendOrPostCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SendOrPostCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SendOrPostCallback::*)(::Il2CppObject*)>(&SendOrPostCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SendOrPostCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SendOrPostCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (SendOrPostCallback::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&SendOrPostCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SendOrPostCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SendOrPostCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SendOrPostCallback::*)(System::IAsyncResult*)>(&SendOrPostCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SendOrPostCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationContextProperties
#include "System/Threading/SynchronizationContextProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties None
System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContextProperties::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties None
void System::Threading::SynchronizationContextProperties::_set_None(System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContextProperties::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
void System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification(System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType1
System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_get_s_cachedPreparedType1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType1"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType1
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType1(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_set_s_cachedPreparedType1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType1", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType2
System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_get_s_cachedPreparedType2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType2"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType2
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType2(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_set_s_cachedPreparedType2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType3
System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType3() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_get_s_cachedPreparedType3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType3"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType3
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType3(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_set_s_cachedPreparedType3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType3", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType4
System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType4() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_get_s_cachedPreparedType4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType4"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType4
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType4(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_set_s_cachedPreparedType4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType4", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType5
System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType5() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_get_s_cachedPreparedType5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType5"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType5
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType5(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::_set_s_cachedPreparedType5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType5", value));
}
// Autogenerated method: System.Threading.SynchronizationContext.Send
void System::Threading::SynchronizationContext::Send(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.Post
void System::Threading::SynchronizationContext::Post(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationStarted
void System::Threading::SynchronizationContext::OperationStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::OperationStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationCompleted
void System::Threading::SynchronizationContext::OperationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::OperationCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.SetSynchronizationContext
void System::Threading::SynchronizationContext::SetSynchronizationContext(System::Threading::SynchronizationContext* syncContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::SetSynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "SetSynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncContext)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, syncContext);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_Current
System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_CurrentNoFlow
System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_CurrentNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::get_CurrentNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_CurrentNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.GetThreadLocalContext
System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::GetThreadLocalContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::GetThreadLocalContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "GetThreadLocalContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.CreateCopy
System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SynchronizationContext::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&SynchronizationContext::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&SynchronizationContext::Post)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::OperationStarted
// Il2CppName: OperationStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)()>(&SynchronizationContext::OperationStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "OperationStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::OperationCompleted
// Il2CppName: OperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)()>(&SynchronizationContext::OperationCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "OperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::SetSynchronizationContext
// Il2CppName: SetSynchronizationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::SynchronizationContext*)>(&SynchronizationContext::SetSynchronizationContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "SetSynchronizationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SynchronizationContext*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (*)()>(&SynchronizationContext::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::get_CurrentNoFlow
// Il2CppName: get_CurrentNoFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (*)()>(&SynchronizationContext::get_CurrentNoFlow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "get_CurrentNoFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::GetThreadLocalContext
// Il2CppName: GetThreadLocalContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (*)()>(&SynchronizationContext::GetThreadLocalContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "GetThreadLocalContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (SynchronizationContext::*)()>(&SynchronizationContext::CreateCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)()>(&SynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContext::*)()>(&SynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext
#include "System/Threading/OSSpecificSynchronizationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/MonoPInvokeCallbackAttribute
#include "System/Threading/OSSpecificSynchronizationContext_MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>* System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>*>("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
void System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache(System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache", value));
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Get
System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::OSSpecificSynchronizationContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.InvocationEntry
void System::Threading::OSSpecificSynchronizationContext::InvocationEntry(System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::InvocationEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "InvocationEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.GetOSContext
::Il2CppObject* System::Threading::OSSpecificSynchronizationContext::GetOSContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::GetOSContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "GetOSContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.PostInternal
void System::Threading::OSSpecificSynchronizationContext::PostInternal(::Il2CppObject* osSynchronizationContext, System::IntPtr callback, System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::PostInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "PostInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(osSynchronizationContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, osSynchronizationContext, callback, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext..cctor
void System::Threading::OSSpecificSynchronizationContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.CreateCopy
System::Threading::SynchronizationContext* System::Threading::OSSpecificSynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Send
void System::Threading::OSSpecificSynchronizationContext::Send(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Post
void System::Threading::OSSpecificSynchronizationContext::Post(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, d, state);
}
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::*)(::Il2CppObject*)>(&OSSpecificSynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::*)(::Il2CppObject*)>(&OSSpecificSynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::OSSpecificSynchronizationContext* (*)()>(&OSSpecificSynchronizationContext::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationEntry
// Il2CppName: InvocationEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&OSSpecificSynchronizationContext::InvocationEntry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "InvocationEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::GetOSContext
// Il2CppName: GetOSContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&OSSpecificSynchronizationContext::GetOSContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "GetOSContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::PostInternal
// Il2CppName: PostInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, System::IntPtr, System::IntPtr)>(&OSSpecificSynchronizationContext::PostInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "PostInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OSSpecificSynchronizationContext::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (OSSpecificSynchronizationContext::*)()>(&OSSpecificSynchronizationContext::CreateCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&OSSpecificSynchronizationContext::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&OSSpecificSynchronizationContext::Post)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke(System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate.BeginInvoke
System::IAsyncResult* System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke(System::IntPtr arg, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, arg, callback, object);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate.EndInvoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationEntryDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationEntryDelegate::*)(::Il2CppObject*, System::IntPtr)>(&OSSpecificSynchronizationContext::InvocationEntryDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationEntryDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationEntryDelegate::*)(::Il2CppObject*, System::IntPtr)>(&OSSpecificSynchronizationContext::InvocationEntryDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationEntryDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationEntryDelegate::*)(System::IntPtr)>(&OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationEntryDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (OSSpecificSynchronizationContext::InvocationEntryDelegate::*)(System::IntPtr, System::AsyncCallback*, ::Il2CppObject*)>(&OSSpecificSynchronizationContext::InvocationEntryDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationEntryDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationEntryDelegate::*)(System::IAsyncResult*)>(&OSSpecificSynchronizationContext::InvocationEntryDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationEntryDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.OSSpecificSynchronizationContext/MonoPInvokeCallbackAttribute
#include "System/Threading/OSSpecificSynchronizationContext_MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute::*)(System::Type*)>(&OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute::*)(System::Type*)>(&OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::MonoPInvokeCallbackAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationContext.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&OSSpecificSynchronizationContext::InvocationContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&OSSpecificSynchronizationContext::InvocationContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::InvocationContext::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::InvocationContext::*)()>(&OSSpecificSynchronizationContext::InvocationContext::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::InvocationContext*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.OSSpecificSynchronizationContext/<>c <>9
System::Threading::OSSpecificSynchronizationContext::$$c* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::OSSpecificSynchronizationContext::$$c*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.OSSpecificSynchronizationContext/<>c <>9
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9(System::Threading::OSSpecificSynchronizationContext::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
typename System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0(typename System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0", value)));
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/<>c..cctor
void System::Threading::OSSpecificSynchronizationContext::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/<>c.<Get>b__3_0
System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::$$c::$Get$b__3_0(::Il2CppObject* _osContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::OSSpecificSynchronizationContext::$$c::<Get>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Get>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_osContext)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::OSSpecificSynchronizationContext*, false>(this, ___internal__method, _osContext);
}
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OSSpecificSynchronizationContext::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::$$c::$Get$b__3_0
// Il2CppName: <Get>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::OSSpecificSynchronizationContext* (OSSpecificSynchronizationContext::$$c::*)(::Il2CppObject*)>(&OSSpecificSynchronizationContext::$$c::$Get$b__3_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::$$c*), "<Get>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OSSpecificSynchronizationContext::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::$$c::*)()>(&OSSpecificSynchronizationContext::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OSSpecificSynchronizationContext::$$c::*)()>(&OSSpecificSynchronizationContext::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OSSpecificSynchronizationContext::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SynchronizationLockException
#include "System/Threading/SynchronizationLockException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SynchronizationLockException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)()>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)()>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationLockException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)(::Il2CppString*)>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)(::Il2CppString*)>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationLockException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationLockException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&SynchronizationLockException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationLockException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadHelper
#include "System/Threading/ThreadHelper.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback _ccb
System::Threading::ContextCallback* System::Threading::ThreadHelper::_get__ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::_get__ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading", "ThreadHelper", "_ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback _ccb
void System::Threading::ThreadHelper::_set__ccb(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::_set__ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadHelper", "_ccb", value));
}
// Autogenerated method: System.Threading.ThreadHelper..cctor
void System::Threading::ThreadHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadHelper.SetExecutionContextHelper
void System::Threading::ThreadHelper::SetExecutionContextHelper(System::Threading::ExecutionContext* ec) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::SetExecutionContextHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContextHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ec);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart_Context
void System::Threading::ThreadHelper::ThreadStart_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::ThreadStart_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", "ThreadStart_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ThreadHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadHelper::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadHelper::*)(System::Delegate*)>(&ThreadHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadHelper::*)(System::Delegate*)>(&ThreadHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>()});
  }
};
// Writing MetadataGetter for method: ThreadHelper::SetExecutionContextHelper
// Il2CppName: SetExecutionContextHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadHelper::*)(System::Threading::ExecutionContext*)>(&ThreadHelper::SetExecutionContextHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), "SetExecutionContextHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: ThreadHelper::ThreadStart_Context
// Il2CppName: ThreadStart_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&ThreadHelper::ThreadStart_Context)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), "ThreadStart_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ThreadHelper::ThreadStart
// Il2CppName: ThreadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadHelper::*)(::Il2CppObject*)>(&ThreadHelper::ThreadStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), "ThreadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ThreadHelper::ThreadStart
// Il2CppName: ThreadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadHelper::*)()>(&ThreadHelper::ThreadStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadHelper*), "ThreadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
// Including type: System.Security.Principal.IPrincipal
#include "System/Security/Principal/IPrincipal.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.LocalDataStoreMgr
#include "System/LocalDataStoreMgr.hpp"
// Including type: System.LocalDataStoreHolder
#include "System/LocalDataStoreHolder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Threading.AsyncLocal`1
#include "System/Threading/AsyncLocal_1.hpp"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Runtime.Remoting.Contexts.Context
#include "System/Runtime/Remoting/Contexts/Context.hpp"
// Including type: System.AppDomain
#include "System/AppDomain.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
// Including type: System.Threading.ExecutionContext/Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
System::LocalDataStoreMgr* System::Threading::Thread::_get_s_LocalDataStoreMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_s_LocalDataStoreMgr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::LocalDataStoreMgr*>("System.Threading", "Thread", "s_LocalDataStoreMgr"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
void System::Threading::Thread::_set_s_LocalDataStoreMgr(System::LocalDataStoreMgr* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_s_LocalDataStoreMgr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStoreMgr", value));
}
// [ThreadStaticAttribute] Offset: 0xD81EAC
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
System::LocalDataStoreHolder* System::Threading::Thread::_get_s_LocalDataStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_s_LocalDataStore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::LocalDataStoreHolder*>("System.Threading", "Thread", "s_LocalDataStore"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
void System::Threading::Thread::_set_s_LocalDataStore(System::LocalDataStoreHolder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_s_LocalDataStore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStore", value));
}
// [ThreadStaticAttribute] Offset: 0xD81EBC
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentCulture
System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_m_CurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentCulture
void System::Threading::Thread::_set_m_CurrentCulture(System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_m_CurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentCulture", value));
}
// [ThreadStaticAttribute] Offset: 0xD81ECC
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_m_CurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
void System::Threading::Thread::_set_m_CurrentUICulture(System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_m_CurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_s_asyncLocalCurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
void System::Threading::Thread::_set_s_asyncLocalCurrentCulture(System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_s_asyncLocalCurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_s_asyncLocalCurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
void System::Threading::Thread::_set_s_asyncLocalCurrentUICulture(System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_s_asyncLocalCurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentUICulture", value));
}
// [ThreadStaticAttribute] Offset: 0xD81EDC
// Autogenerated static field getter
// Get static field: static private System.Threading.Thread current_thread
System::Threading::Thread* System::Threading::Thread::_get_current_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_get_current_thread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Thread*>("System.Threading", "Thread", "current_thread"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Thread current_thread
void System::Threading::Thread::_set_current_thread(System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::_set_current_thread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "current_thread", value));
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(::Il2CppObject* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parameter);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stackMark);
}
// Autogenerated method: System.Threading.Thread.GetExecutionContextReader
System::Threading::ExecutionContext::Reader System::Threading::Thread::GetExecutionContextReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetExecutionContextReader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExecutionContextReader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ExecutionContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_ExecutionContextBelongsToCurrentScope
bool System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_ExecutionContextBelongsToCurrentScope
void System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.GetMutableExecutionContext
System::Threading::ExecutionContext* System::Threading::Thread::GetMutableExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetMutableExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMutableExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(System::Threading::ExecutionContext* value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.ResetAbort
void System::Threading::Thread::ResetAbort() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ResetAbort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ResetAbort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ResetAbortNative
void System::Threading::Thread::ResetAbortNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ResetAbortNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetAbortNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_Priority
void System::Threading::Thread::set_Priority(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::set_Priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.SetPriorityNative
void System::Threading::Thread::SetPriorityNative(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetPriorityNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, priority);
}
// Autogenerated method: System.Threading.Thread.JoinInternal
bool System::Threading::Thread::JoinInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::JoinInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Join
void System::Threading::Thread::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SleepInternal
void System::Threading::Thread::SleepInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SleepInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SleepInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Sleep
void System::Threading::Thread::Sleep(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.YieldInternal
bool System::Threading::Thread::YieldInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::YieldInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "YieldInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Yield
bool System::Threading::Thread::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetStartHelper
void System::Threading::Thread::SetStartHelper(System::Delegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetStartHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.get_CurrentUICulture
System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_CurrentUICulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentUICulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentUICultureNoAppX
System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentUICultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetCurrentUICultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentCulture
System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentCultureNoAppX
System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentCultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetCurrentCultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.MemoryBarrier
void System::Threading::Thread::MemoryBarrier() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::MemoryBarrier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "MemoryBarrier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ConstructInternalThread
void System::Threading::Thread::ConstructInternalThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ConstructInternalThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstructInternalThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_Internal
System::Threading::InternalThread* System::Threading::Thread::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::InternalThread*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentContext
System::Runtime::Remoting::Contexts::Context* System::Threading::Thread::get_CurrentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_CurrentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::Remoting::Contexts::Context*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ByteArrayToCurrentDomain
::Array<uint8_t>* System::Threading::Thread::ByteArrayToCurrentDomain(::Array<uint8_t>* arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ByteArrayToCurrentDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ByteArrayToCurrentDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arr);
}
// Autogenerated method: System.Threading.Thread.DeserializePrincipal
void System::Threading::Thread::DeserializePrincipal(System::Threading::Thread* th) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::DeserializePrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "DeserializePrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(th)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, th);
}
// Autogenerated method: System.Threading.Thread.get_CurrentPrincipal
System::Security::Principal::IPrincipal* System::Threading::Thread::get_CurrentPrincipal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_CurrentPrincipal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentPrincipal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Principal::IPrincipal*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentThread
System::Threading::Thread* System::Threading::Thread::GetCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Thread*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThread
System::Threading::Thread* System::Threading::Thread::get_CurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_CurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Thread*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomain
System::AppDomain* System::Threading::Thread::GetDomain() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetDomain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::AppDomain*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomainID
int System::Threading::Thread::GetDomainID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetDomainID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomainID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Thread_internal
System::IntPtr System::Threading::Thread::Thread_internal(System::MulticastDelegate* start) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Thread_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, start);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThread
bool System::Threading::Thread::get_IsThreadPoolThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_IsThreadPoolThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThreadInternal
bool System::Threading::Thread::get_IsThreadPoolThreadInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_IsThreadPoolThreadInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_IsBackground
void System::Threading::Thread::set_IsBackground(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::set_IsBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.SetName_internal
void System::Threading::Thread::SetName_internal(System::Threading::InternalThread* thread, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetName_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetName_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, thread, name);
}
// Autogenerated method: System.Threading.Thread.set_Name
void System::Threading::Thread::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_ThreadState
System::Threading::ThreadState System::Threading::Thread::get_ThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_ThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Abort_internal
void System::Threading::Thread::Abort_internal(System::Threading::InternalThread* thread, ::Il2CppObject* stateInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Abort_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Abort_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(stateInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, thread, stateInfo);
}
// Autogenerated method: System.Threading.Thread.Abort
void System::Threading::Thread::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ClearAbortReason
void System::Threading::Thread::ClearAbortReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ClearAbortReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAbortReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait_nop
void System::Threading::Thread::SpinWait_nop() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SpinWait_nop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait_nop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait
void System::Threading::Thread::SpinWait(int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, iterations);
}
// Autogenerated method: System.Threading.Thread.StartInternal
void System::Threading::Thread::StartInternal(System::Security::Principal::IPrincipal* principal, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::StartInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(principal), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, principal, stackMark);
}
// Autogenerated method: System.Threading.Thread.SetState
void System::Threading::Thread::SetState(System::Threading::InternalThread* thread, System::Threading::ThreadState set) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(set)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, thread, set);
}
// Autogenerated method: System.Threading.Thread.ClrState
void System::Threading::Thread::ClrState(System::Threading::InternalThread* thread, System::Threading::ThreadState clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ClrState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ClrState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, thread, clr);
}
// Autogenerated method: System.Threading.Thread.GetState
System::Threading::ThreadState System::Threading::Thread::GetState(System::Threading::InternalThread* thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ThreadState, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, thread);
}
// Autogenerated method: System.Threading.Thread.SystemMaxStackStize
int System::Threading::Thread::SystemMaxStackStize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SystemMaxStackStize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SystemMaxStackStize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetProcessDefaultStackSize
int System::Threading::Thread::GetProcessDefaultStackSize(int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetProcessDefaultStackSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetProcessDefaultStackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStackSize)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.SetStart
void System::Threading::Thread::SetStart(System::MulticastDelegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::SetStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.get_ManagedThreadId
int System::Threading::Thread::get_ManagedThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::get_ManagedThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ManagedThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.BeginCriticalRegion
void System::Threading::Thread::BeginCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::BeginCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "BeginCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.EndCriticalRegion
void System::Threading::Thread::EndCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::EndCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "EndCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ValidateThreadState
System::Threading::ThreadState System::Threading::Thread::ValidateThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::ValidateThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Finalize
void System::Threading::Thread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetHashCode
int System::Threading::Thread::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Thread::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Thread::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ThreadStart*)>(&Thread::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadStart*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ThreadStart*)>(&Thread::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadStart*>()});
  }
};
// Writing MetadataGetter for method: Thread::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ParameterizedThreadStart*)>(&Thread::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ParameterizedThreadStart*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ParameterizedThreadStart*)>(&Thread::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ParameterizedThreadStart*>()});
  }
};
// Writing MetadataGetter for method: Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(::Il2CppObject*)>(&Thread::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::StackCrawlMark&)>(&Thread::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Thread::GetExecutionContextReader
// Il2CppName: GetExecutionContextReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ExecutionContext::Reader (Thread::*)()>(&Thread::GetExecutionContextReader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetExecutionContextReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_ExecutionContextBelongsToCurrentScope
// Il2CppName: get_ExecutionContextBelongsToCurrentScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Thread::*)()>(&Thread::get_ExecutionContextBelongsToCurrentScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::set_ExecutionContextBelongsToCurrentScope
// Il2CppName: set_ExecutionContextBelongsToCurrentScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(bool)>(&Thread::set_ExecutionContextBelongsToCurrentScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Thread::GetMutableExecutionContext
// Il2CppName: GetMutableExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ExecutionContext* (Thread::*)()>(&Thread::GetMutableExecutionContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetMutableExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::SetExecutionContext
// Il2CppName: SetExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ExecutionContext*, bool)>(&Thread::SetExecutionContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ExecutionContext*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Thread::SetExecutionContext
// Il2CppName: SetExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ExecutionContext::Reader, bool)>(&Thread::SetExecutionContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ExecutionContext::Reader>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Thread::ResetAbort
// Il2CppName: ResetAbort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Thread::ResetAbort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ResetAbort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::ResetAbortNative
// Il2CppName: ResetAbortNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::ResetAbortNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ResetAbortNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Threading::ThreadPriority)>(&Thread::set_Priority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadPriority>()});
  }
};
// Writing MetadataGetter for method: Thread::SetPriorityNative
// Il2CppName: SetPriorityNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(int)>(&Thread::SetPriorityNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetPriorityNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::JoinInternal
// Il2CppName: JoinInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Thread::*)(int)>(&Thread::JoinInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "JoinInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::SleepInternal
// Il2CppName: SleepInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Thread::SleepInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SleepInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Thread::Sleep)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::YieldInternal
// Il2CppName: YieldInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Thread::YieldInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "YieldInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::Yield
// Il2CppName: Yield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Thread::Yield)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Yield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::SetStartHelper
// Il2CppName: SetStartHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Delegate*, int)>(&Thread::SetStartHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetStartHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::get_CurrentUICulture
// Il2CppName: get_CurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CultureInfo* (Thread::*)()>(&Thread::get_CurrentUICulture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_CurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetCurrentUICultureNoAppX
// Il2CppName: GetCurrentUICultureNoAppX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CultureInfo* (Thread::*)()>(&Thread::GetCurrentUICultureNoAppX)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_CurrentCulture
// Il2CppName: get_CurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CultureInfo* (Thread::*)()>(&Thread::get_CurrentCulture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_CurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetCurrentCultureNoAppX
// Il2CppName: GetCurrentCultureNoAppX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CultureInfo* (Thread::*)()>(&Thread::GetCurrentCultureNoAppX)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::MemoryBarrier
// Il2CppName: MemoryBarrier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Thread::MemoryBarrier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "MemoryBarrier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::ConstructInternalThread
// Il2CppName: ConstructInternalThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::ConstructInternalThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ConstructInternalThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_Internal
// Il2CppName: get_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::InternalThread* (Thread::*)()>(&Thread::get_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_CurrentContext
// Il2CppName: get_CurrentContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Remoting::Contexts::Context* (*)()>(&Thread::get_CurrentContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_CurrentContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::ByteArrayToCurrentDomain
// Il2CppName: ByteArrayToCurrentDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&Thread::ByteArrayToCurrentDomain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ByteArrayToCurrentDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: Thread::DeserializePrincipal
// Il2CppName: DeserializePrincipal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Thread*)>(&Thread::DeserializePrincipal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "DeserializePrincipal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Thread*>()});
  }
};
// Writing MetadataGetter for method: Thread::get_CurrentPrincipal
// Il2CppName: get_CurrentPrincipal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Principal::IPrincipal* (*)()>(&Thread::get_CurrentPrincipal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_CurrentPrincipal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetCurrentThread
// Il2CppName: GetCurrentThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Thread* (*)()>(&Thread::GetCurrentThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetCurrentThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_CurrentThread
// Il2CppName: get_CurrentThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Thread* (*)()>(&Thread::get_CurrentThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_CurrentThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetDomain
// Il2CppName: GetDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AppDomain* (*)()>(&Thread::GetDomain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetDomainID
// Il2CppName: GetDomainID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Thread::GetDomainID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetDomainID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::Thread_internal
// Il2CppName: Thread_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Thread::*)(System::MulticastDelegate*)>(&Thread::Thread_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Thread_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::MulticastDelegate*>()});
  }
};
// Writing MetadataGetter for method: Thread::get_IsThreadPoolThread
// Il2CppName: get_IsThreadPoolThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Thread::*)()>(&Thread::get_IsThreadPoolThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_IsThreadPoolThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::get_IsThreadPoolThreadInternal
// Il2CppName: get_IsThreadPoolThreadInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Thread::*)()>(&Thread::get_IsThreadPoolThreadInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::set_IsBackground
// Il2CppName: set_IsBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(bool)>(&Thread::set_IsBackground)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "set_IsBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Thread::SetName_internal
// Il2CppName: SetName_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::InternalThread*, ::Il2CppString*)>(&Thread::SetName_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetName_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::InternalThread*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Thread::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(::Il2CppString*)>(&Thread::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Thread::get_ThreadState
// Il2CppName: get_ThreadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ThreadState (Thread::*)()>(&Thread::get_ThreadState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_ThreadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::Abort_internal
// Il2CppName: Abort_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::InternalThread*, ::Il2CppObject*)>(&Thread::Abort_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Abort_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::InternalThread*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Thread::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::Abort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::ClearAbortReason
// Il2CppName: ClearAbortReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::ClearAbortReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ClearAbortReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::SpinWait_nop
// Il2CppName: SpinWait_nop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Thread::SpinWait_nop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SpinWait_nop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::SpinWait
// Il2CppName: SpinWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Thread::SpinWait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SpinWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::StartInternal
// Il2CppName: StartInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::Security::Principal::IPrincipal*, System::Threading::StackCrawlMark&)>(&Thread::StartInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "StartInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Principal::IPrincipal*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Thread::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::InternalThread*, System::Threading::ThreadState)>(&Thread::SetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::InternalThread*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadState>()});
  }
};
// Writing MetadataGetter for method: Thread::ClrState
// Il2CppName: ClrState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::InternalThread*, System::Threading::ThreadState)>(&Thread::ClrState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ClrState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::InternalThread*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadState>()});
  }
};
// Writing MetadataGetter for method: Thread::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ThreadState (*)(System::Threading::InternalThread*)>(&Thread::GetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::InternalThread*>()});
  }
};
// Writing MetadataGetter for method: Thread::SystemMaxStackStize
// Il2CppName: SystemMaxStackStize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Thread::SystemMaxStackStize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SystemMaxStackStize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetProcessDefaultStackSize
// Il2CppName: GetProcessDefaultStackSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Thread::GetProcessDefaultStackSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetProcessDefaultStackSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::SetStart
// Il2CppName: SetStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)(System::MulticastDelegate*, int)>(&Thread::SetStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "SetStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::MulticastDelegate*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Thread::get_ManagedThreadId
// Il2CppName: get_ManagedThreadId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Thread::*)()>(&Thread::get_ManagedThreadId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "get_ManagedThreadId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::BeginCriticalRegion
// Il2CppName: BeginCriticalRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Thread::BeginCriticalRegion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "BeginCriticalRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::EndCriticalRegion
// Il2CppName: EndCriticalRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Thread::EndCriticalRegion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "EndCriticalRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::ValidateThreadState
// Il2CppName: ValidateThreadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ThreadState (Thread::*)()>(&Thread::ValidateThreadState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "ValidateThreadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Thread::*)()>(&Thread::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Thread::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Thread::*)()>(&Thread::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Thread*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMe
System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_get_LookForMe");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMe"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMe
void System::Threading::StackCrawlMark::_set_LookForMe(System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_set_LookForMe");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMe", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCaller
System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_get_LookForMyCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCaller
void System::Threading::StackCrawlMark::_set_LookForMyCaller(System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_set_LookForMyCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCallersCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_get_LookForMyCallersCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCallersCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
void System::Threading::StackCrawlMark::_set_LookForMyCallersCaller(System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_set_LookForMyCallersCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCallersCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForThread
System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_get_LookForThread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForThread"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForThread
void System::Threading::StackCrawlMark::_set_LookForThread(System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::StackCrawlMark::_set_LookForThread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForThread", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ThreadAbortException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadAbortException::*)()>(&ThreadAbortException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadAbortException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadAbortException::*)()>(&ThreadAbortException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadAbortException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadAbortException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadAbortException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadAbortException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadAbortException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadAbortException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadAbortException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadAbortException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadInterruptedException
#include "System/Threading/ThreadInterruptedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ThreadInterruptedException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadInterruptedException::*)()>(&ThreadInterruptedException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadInterruptedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadInterruptedException::*)()>(&ThreadInterruptedException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadInterruptedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadInterruptedException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadInterruptedException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadInterruptedException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadInterruptedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadInterruptedException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadInterruptedException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadInterruptedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::IThreadPoolWorkItem::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::IThreadPoolWorkItem::MarkAborted(System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::IThreadPoolWorkItem::MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tae);
}
// Writing MetadataGetter for method: IThreadPoolWorkItem::ExecuteWorkItem
// Il2CppName: ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IThreadPoolWorkItem::*)()>(&IThreadPoolWorkItem::ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IThreadPoolWorkItem*), "ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IThreadPoolWorkItem::MarkAborted
// Il2CppName: MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IThreadPoolWorkItem::*)(System::Threading::ThreadAbortException*)>(&IThreadPoolWorkItem::MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IThreadPoolWorkItem*), "MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitCallback.Invoke
void System::Threading::WaitCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.WaitCallback.BeginInvoke
System::IAsyncResult* System::Threading::WaitCallback::BeginInvoke(::Il2CppObject* state, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.WaitCallback.EndInvoke
void System::Threading::WaitCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: WaitCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitCallback::*)(::Il2CppObject*, System::IntPtr)>(&WaitCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitCallback::*)(::Il2CppObject*, System::IntPtr)>(&WaitCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: WaitCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitCallback::*)(::Il2CppObject*)>(&WaitCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: WaitCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (WaitCallback::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&WaitCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: WaitCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitCallback::*)(System::IAsyncResult*)>(&WaitCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitOrTimerCallback.Invoke
void System::Threading::WaitOrTimerCallback::Invoke(::Il2CppObject* state, bool timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitOrTimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, timedOut);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.BeginInvoke
System::IAsyncResult* System::Threading::WaitOrTimerCallback::BeginInvoke(::Il2CppObject* state, bool timedOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitOrTimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timedOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, state, timedOut, callback, object);
}
// Autogenerated method: System.Threading.WaitOrTimerCallback.EndInvoke
void System::Threading::WaitOrTimerCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitOrTimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: WaitOrTimerCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitOrTimerCallback::*)(::Il2CppObject*, System::IntPtr)>(&WaitOrTimerCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitOrTimerCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitOrTimerCallback::*)(::Il2CppObject*, System::IntPtr)>(&WaitOrTimerCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitOrTimerCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: WaitOrTimerCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitOrTimerCallback::*)(::Il2CppObject*, bool)>(&WaitOrTimerCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitOrTimerCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitOrTimerCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (WaitOrTimerCallback::*)(::Il2CppObject*, bool, System::AsyncCallback*, ::Il2CppObject*)>(&WaitOrTimerCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitOrTimerCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: WaitOrTimerCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitOrTimerCallback::*)(System::IAsyncResult*)>(&WaitOrTimerCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitOrTimerCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolGlobals
#include "System/Threading/ThreadPoolGlobals.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 tpQuantum
uint System::Threading::ThreadPoolGlobals::_get_tpQuantum() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_tpQuantum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ThreadPoolGlobals", "tpQuantum"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 tpQuantum
void System::Threading::ThreadPoolGlobals::_set_tpQuantum(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_tpQuantum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpQuantum", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 processorCount
int System::Threading::ThreadPoolGlobals::_get_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ThreadPoolGlobals", "processorCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 processorCount
void System::Threading::ThreadPoolGlobals::_set_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "processorCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean tpHosted
bool System::Threading::ThreadPoolGlobals::_get_tpHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_tpHosted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "tpHosted"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean tpHosted
void System::Threading::ThreadPoolGlobals::_set_tpHosted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_tpHosted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "tpHosted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean vmTpInitialized
bool System::Threading::ThreadPoolGlobals::_get_vmTpInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_vmTpInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "vmTpInitialized"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean vmTpInitialized
void System::Threading::ThreadPoolGlobals::_set_vmTpInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_vmTpInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "vmTpInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean enableWorkerTracking
bool System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean enableWorkerTracking
void System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueue workQueue
System::Threading::ThreadPoolWorkQueue* System::Threading::ThreadPoolGlobals::_get_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_get_workQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPoolWorkQueue*>("System.Threading", "ThreadPoolGlobals", "workQueue"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueue workQueue
void System::Threading::ThreadPoolGlobals::_set_workQueue(System::Threading::ThreadPoolWorkQueue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::_set_workQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "workQueue", value));
}
// Autogenerated method: System.Threading.ThreadPoolGlobals..cctor
void System::Threading::ThreadPoolGlobals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolGlobals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolGlobals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ThreadPoolGlobals::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadPoolGlobals::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolGlobals*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/SparseArray`1
#include "System/Threading/ThreadPoolWorkQueue_SparseArray_1.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ThreadPoolWorkQueue/SparseArray`1<System.Threading.ThreadPoolWorkQueue/WorkStealingQueue> allThreadQueues
System::Threading::ThreadPoolWorkQueue::SparseArray_1<System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPoolWorkQueue::SparseArray_1<System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>*>("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ThreadPoolWorkQueue/SparseArray`1<System.Threading.ThreadPoolWorkQueue/WorkStealingQueue> allThreadQueues
void System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues(System::Threading::ThreadPoolWorkQueue::SparseArray_1<System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues", value));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureCurrentThreadHasQueue
System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCurrentThreadHasQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ThreadPoolWorkQueueThreadLocals*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureThreadRequested
void System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureThreadRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.MarkThreadRequestSatisfied
void System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkThreadRequestSatisfied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Enqueue
void System::Threading::ThreadPoolWorkQueue::Enqueue(System::Threading::IThreadPoolWorkItem* callback, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callback, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::LocalFindAndPop(System::Threading::IThreadPoolWorkItem* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dequeue
void System::Threading::ThreadPoolWorkQueue::Dequeue(System::Threading::ThreadPoolWorkQueueThreadLocals* tl, System::Threading::IThreadPoolWorkItem*& callback, bool& missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::Dequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tl, callback, missedSteal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dispatch
bool System::Threading::ThreadPoolWorkQueue::Dispatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", "Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue..cctor
void System::Threading::ThreadPoolWorkQueue::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue
// Il2CppName: EnsureCurrentThreadHasQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ThreadPoolWorkQueueThreadLocals* (ThreadPoolWorkQueue::*)()>(&ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "EnsureCurrentThreadHasQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::EnsureThreadRequested
// Il2CppName: EnsureThreadRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)()>(&ThreadPoolWorkQueue::EnsureThreadRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "EnsureThreadRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::MarkThreadRequestSatisfied
// Il2CppName: MarkThreadRequestSatisfied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)()>(&ThreadPoolWorkQueue::MarkThreadRequestSatisfied)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "MarkThreadRequestSatisfied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)(System::Threading::IThreadPoolWorkItem*, bool)>(&ThreadPoolWorkQueue::Enqueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::LocalFindAndPop
// Il2CppName: LocalFindAndPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::*)(System::Threading::IThreadPoolWorkItem*)>(&ThreadPoolWorkQueue::LocalFindAndPop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "LocalFindAndPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::Dequeue
// Il2CppName: Dequeue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)(System::Threading::ThreadPoolWorkQueueThreadLocals*, System::Threading::IThreadPoolWorkItem*&, bool&)>(&ThreadPoolWorkQueue::Dequeue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "Dequeue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadPoolWorkQueueThreadLocals*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::Dispatch
// Il2CppName: Dispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ThreadPoolWorkQueue::Dispatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), "Dispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadPoolWorkQueue::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)()>(&ThreadPoolWorkQueue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::*)()>(&ThreadPoolWorkQueue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalPush
void System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush(System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop(System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop(System::Threading::IThreadPoolWorkItem*& obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(System::Threading::IThreadPoolWorkItem*& obj, bool& missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj, missedSteal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(System::Threading::IThreadPoolWorkItem*& obj, bool& missedSteal, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj, missedSteal, millisecondsTimeout);
}
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::LocalPush
// Il2CppName: LocalPush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::WorkStealingQueue::*)(System::Threading::IThreadPoolWorkItem*)>(&ThreadPoolWorkQueue::WorkStealingQueue::LocalPush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), "LocalPush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop
// Il2CppName: LocalFindAndPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::WorkStealingQueue::*)(System::Threading::IThreadPoolWorkItem*)>(&ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), "LocalFindAndPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::LocalPop
// Il2CppName: LocalPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::WorkStealingQueue::*)(System::Threading::IThreadPoolWorkItem*&)>(&ThreadPoolWorkQueue::WorkStealingQueue::LocalPop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), "LocalPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::TrySteal
// Il2CppName: TrySteal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::WorkStealingQueue::*)(System::Threading::IThreadPoolWorkItem*&, bool&)>(&ThreadPoolWorkQueue::WorkStealingQueue::TrySteal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), "TrySteal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::TrySteal
// Il2CppName: TrySteal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::WorkStealingQueue::*)(System::Threading::IThreadPoolWorkItem*&, bool&, int)>(&ThreadPoolWorkQueue::WorkStealingQueue::TrySteal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), "TrySteal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::WorkStealingQueue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::WorkStealingQueue::*)()>(&ThreadPoolWorkQueue::WorkStealingQueue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::WorkStealingQueue::*)()>(&ThreadPoolWorkQueue::WorkStealingQueue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::WorkStealingQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPoolWorkQueue/QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.GetIndexes
void System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes(int& upper, int& lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.CompareExchangeIndexes
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes(int& prevUpper, int newUpper, int& prevLower, int newLower) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareExchangeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevUpper), ::il2cpp_utils::ExtractType(newUpper), ::il2cpp_utils::ExtractType(prevLower), ::il2cpp_utils::ExtractType(newLower)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, prevUpper, newUpper, prevLower, newLower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.IsUsedUp
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUsedUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryEnqueue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue(System::Threading::IThreadPoolWorkItem* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryDequeue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue(System::Threading::IThreadPoolWorkItem*& node) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
}
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::GetIndexes
// Il2CppName: GetIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::QueueSegment::*)(int&, int&)>(&ThreadPoolWorkQueue::QueueSegment::GetIndexes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), "GetIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes
// Il2CppName: CompareExchangeIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::QueueSegment::*)(int&, int, int&, int)>(&ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), "CompareExchangeIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::IsUsedUp
// Il2CppName: IsUsedUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::QueueSegment::*)()>(&ThreadPoolWorkQueue::QueueSegment::IsUsedUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), "IsUsedUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::TryEnqueue
// Il2CppName: TryEnqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::QueueSegment::*)(System::Threading::IThreadPoolWorkItem*)>(&ThreadPoolWorkQueue::QueueSegment::TryEnqueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), "TryEnqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::TryDequeue
// Il2CppName: TryDequeue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ThreadPoolWorkQueue::QueueSegment::*)(System::Threading::IThreadPoolWorkItem*&)>(&ThreadPoolWorkQueue::QueueSegment::TryDequeue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), "TryDequeue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*&>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueue::QueueSegment::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::QueueSegment::*)()>(&ThreadPoolWorkQueue::QueueSegment::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueue::QueueSegment::*)()>(&ThreadPoolWorkQueue::QueueSegment::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueue::QueueSegment*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Random
#include "System/Random.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ThreadStaticAttribute] Offset: 0xD81EEC
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPoolWorkQueueThreadLocals*>("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
void System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals(System::Threading::ThreadPoolWorkQueueThreadLocals* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals", value));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.CleanUp
void System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.Finalize
void System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ThreadPoolWorkQueueThreadLocals::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueueThreadLocals::*)(System::Threading::ThreadPoolWorkQueue*)>(&ThreadPoolWorkQueueThreadLocals::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueueThreadLocals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadPoolWorkQueue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueueThreadLocals::*)(System::Threading::ThreadPoolWorkQueue*)>(&ThreadPoolWorkQueueThreadLocals::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueueThreadLocals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadPoolWorkQueue*>()});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueueThreadLocals::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueueThreadLocals::*)()>(&ThreadPoolWorkQueueThreadLocals::CleanUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueueThreadLocals*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPoolWorkQueueThreadLocals::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadPoolWorkQueueThreadLocals::*)()>(&ThreadPoolWorkQueueThreadLocals::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPoolWorkQueueThreadLocals*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading._ThreadPoolWaitCallback
#include "System/Threading/_ThreadPoolWaitCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading._ThreadPoolWaitCallback.PerformWaitCallback
bool System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "_ThreadPoolWaitCallback", "PerformWaitCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: _ThreadPoolWaitCallback::PerformWaitCallback
// Il2CppName: PerformWaitCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&_ThreadPoolWaitCallback::PerformWaitCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_ThreadPoolWaitCallback*), "PerformWaitCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.QueueUserWorkItemCallback
#include "System/Threading/QueueUserWorkItemCallback.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback ccb
System::Threading::ContextCallback* System::Threading::QueueUserWorkItemCallback::_get_ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::_get_ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading", "QueueUserWorkItemCallback", "ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback ccb
void System::Threading::QueueUserWorkItemCallback::_set_ccb(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::_set_ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "QueueUserWorkItemCallback", "ccb", value));
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback..cctor
void System::Threading::QueueUserWorkItemCallback::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.WaitCallback_Context
void System::Threading::QueueUserWorkItemCallback::WaitCallback_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::QueueUserWorkItemCallback::WaitCallback_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", "WaitCallback_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state);
}
// Writing MetadataGetter for method: QueueUserWorkItemCallback::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&QueueUserWorkItemCallback::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueueUserWorkItemCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueueUserWorkItemCallback::*)(System::Threading::WaitCallback*, ::Il2CppObject*, bool, System::Threading::StackCrawlMark&)>(&QueueUserWorkItemCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueueUserWorkItemCallback::*)(System::Threading::WaitCallback*, ::Il2CppObject*, bool, System::Threading::StackCrawlMark&)>(&QueueUserWorkItemCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem
// Il2CppName: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueueUserWorkItemCallback::*)()>(&QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted
// Il2CppName: System.Threading.IThreadPoolWorkItem.MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueueUserWorkItemCallback::*)(System::Threading::ThreadAbortException*)>(&QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
// Writing MetadataGetter for method: QueueUserWorkItemCallback::WaitCallback_Context
// Il2CppName: WaitCallback_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&QueueUserWorkItemCallback::WaitCallback_Context)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueueUserWorkItemCallback*), "WaitCallback_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, stackMark, compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, System::TimeSpan timeout, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitObject, callBack, state, timeout, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::UnsafeQueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(System::Threading::WaitCallback* callBack, ::Il2CppObject* state, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::QueueUserWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state, stackMark, compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::UnsafeQueueCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, workItem, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::TryPopCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "TryPopCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, workItem);
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::RequestWorkerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RequestWorkerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::EnsureVMInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "EnsureVMInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::NotifyWorkItemComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::ReportThreadStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "ReportThreadStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isWorking)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isWorking);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::NotifyWorkItemProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::NotifyWorkItemProgressNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgressNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.IsThreadPoolHosted
bool System::Threading::ThreadPool::IsThreadPoolHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::IsThreadPoolHosted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "IsThreadPoolHosted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(bool& enableWorkerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPool::InitializeVMTp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "InitializeVMTp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableWorkerTracking)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enableWorkerTracking);
}
// Writing MetadataGetter for method: ThreadPool::RegisterWaitForSingleObject
// Il2CppName: RegisterWaitForSingleObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::RegisteredWaitHandle* (*)(System::Threading::WaitHandle*, System::Threading::WaitOrTimerCallback*, ::Il2CppObject*, uint, bool, System::Threading::StackCrawlMark&, bool)>(&ThreadPool::RegisterWaitForSingleObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "RegisterWaitForSingleObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::WaitOrTimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::RegisterWaitForSingleObject
// Il2CppName: RegisterWaitForSingleObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::RegisteredWaitHandle* (*)(System::Threading::WaitHandle*, System::Threading::WaitOrTimerCallback*, ::Il2CppObject*, System::TimeSpan, bool)>(&ThreadPool::RegisterWaitForSingleObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "RegisterWaitForSingleObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::WaitOrTimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::QueueUserWorkItem
// Il2CppName: QueueUserWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::WaitCallback*, ::Il2CppObject*)>(&ThreadPool::QueueUserWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "QueueUserWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::QueueUserWorkItem
// Il2CppName: QueueUserWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::WaitCallback*)>(&ThreadPool::QueueUserWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "QueueUserWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::UnsafeQueueUserWorkItem
// Il2CppName: UnsafeQueueUserWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::WaitCallback*, ::Il2CppObject*)>(&ThreadPool::UnsafeQueueUserWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "UnsafeQueueUserWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::QueueUserWorkItemHelper
// Il2CppName: QueueUserWorkItemHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::WaitCallback*, ::Il2CppObject*, System::Threading::StackCrawlMark&, bool)>(&ThreadPool::QueueUserWorkItemHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "QueueUserWorkItemHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::UnsafeQueueCustomWorkItem
// Il2CppName: UnsafeQueueCustomWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::IThreadPoolWorkItem*, bool)>(&ThreadPool::UnsafeQueueCustomWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "UnsafeQueueCustomWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::TryPopCustomWorkItem
// Il2CppName: TryPopCustomWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::IThreadPoolWorkItem*)>(&ThreadPool::TryPopCustomWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "TryPopCustomWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::IThreadPoolWorkItem*>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::RequestWorkerThread
// Il2CppName: RequestWorkerThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ThreadPool::RequestWorkerThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "RequestWorkerThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::EnsureVMInitialized
// Il2CppName: EnsureVMInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadPool::EnsureVMInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "EnsureVMInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::NotifyWorkItemComplete
// Il2CppName: NotifyWorkItemComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ThreadPool::NotifyWorkItemComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "NotifyWorkItemComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::ReportThreadStatus
// Il2CppName: ReportThreadStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&ThreadPool::ReportThreadStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "ReportThreadStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ThreadPool::NotifyWorkItemProgress
// Il2CppName: NotifyWorkItemProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadPool::NotifyWorkItemProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "NotifyWorkItemProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::NotifyWorkItemProgressNative
// Il2CppName: NotifyWorkItemProgressNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ThreadPool::NotifyWorkItemProgressNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "NotifyWorkItemProgressNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::IsThreadPoolHosted
// Il2CppName: IsThreadPoolHosted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ThreadPool::IsThreadPoolHosted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "IsThreadPoolHosted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadPool::InitializeVMTp
// Il2CppName: InitializeVMTp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool&)>(&ThreadPool::InitializeVMTp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadPool*), "InitializeVMTp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Lowest
System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Lowest() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_get_Lowest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Lowest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Lowest
void System::Threading::ThreadPriority::_set_Lowest(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_set_Lowest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Lowest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority BelowNormal
System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_BelowNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_get_BelowNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "BelowNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority BelowNormal
void System::Threading::ThreadPriority::_set_BelowNormal(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_set_BelowNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "BelowNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Normal
System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Normal
void System::Threading::ThreadPriority::_set_Normal(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority AboveNormal
System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_AboveNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_get_AboveNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "AboveNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority AboveNormal
void System::Threading::ThreadPriority::_set_AboveNormal(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_set_AboveNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "AboveNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Highest
System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Highest() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_get_Highest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Highest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Highest
void System::Threading::ThreadPriority::_set_Highest(System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadPriority::_set_Highest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Highest", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadStart.Invoke
void System::Threading::ThreadStart::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadStart.BeginInvoke
System::IAsyncResult* System::Threading::ThreadStart::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadStart::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: System.Threading.ThreadStart.EndInvoke
void System::Threading::ThreadStart::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadStart::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ThreadStart::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStart::*)(::Il2CppObject*, System::IntPtr)>(&ThreadStart::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStart::*)(::Il2CppObject*, System::IntPtr)>(&ThreadStart::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ThreadStart::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStart::*)()>(&ThreadStart::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStart*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadStart::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ThreadStart::*)(System::AsyncCallback*, ::Il2CppObject*)>(&ThreadStart::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStart*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ThreadStart::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStart::*)(System::IAsyncResult*)>(&ThreadStart::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStart*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Running
System::Threading::ThreadState System::Threading::ThreadState::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Running
void System::Threading::ThreadState::_set_Running(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState StopRequested
System::Threading::ThreadState System::Threading::ThreadState::_get_StopRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_StopRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "StopRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState StopRequested
void System::Threading::ThreadState::_set_StopRequested(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_StopRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "StopRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState SuspendRequested
System::Threading::ThreadState System::Threading::ThreadState::_get_SuspendRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_SuspendRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "SuspendRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState SuspendRequested
void System::Threading::ThreadState::_set_SuspendRequested(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_SuspendRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "SuspendRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Background
System::Threading::ThreadState System::Threading::ThreadState::_get_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Background"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Background
void System::Threading::ThreadState::_set_Background(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Background", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Unstarted
System::Threading::ThreadState System::Threading::ThreadState::_get_Unstarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Unstarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Unstarted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Unstarted
void System::Threading::ThreadState::_set_Unstarted(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Unstarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Unstarted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Stopped
System::Threading::ThreadState System::Threading::ThreadState::_get_Stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Stopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Stopped"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Stopped
void System::Threading::ThreadState::_set_Stopped(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Stopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Stopped", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState WaitSleepJoin
System::Threading::ThreadState System::Threading::ThreadState::_get_WaitSleepJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_WaitSleepJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "WaitSleepJoin"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState WaitSleepJoin
void System::Threading::ThreadState::_set_WaitSleepJoin(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_WaitSleepJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "WaitSleepJoin", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Suspended
System::Threading::ThreadState System::Threading::ThreadState::_get_Suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Suspended");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Suspended"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Suspended
void System::Threading::ThreadState::_set_Suspended(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Suspended");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Suspended", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState AbortRequested
System::Threading::ThreadState System::Threading::ThreadState::_get_AbortRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_AbortRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "AbortRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState AbortRequested
void System::Threading::ThreadState::_set_AbortRequested(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_AbortRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "AbortRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Aborted
System::Threading::ThreadState System::Threading::ThreadState::_get_Aborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_get_Aborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ThreadState>("System.Threading", "ThreadState", "Aborted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Aborted
void System::Threading::ThreadState::_set_Aborted(System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ThreadState::_set_Aborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Aborted", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadStateException
#include "System/Threading/ThreadStateException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ThreadStateException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)()>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)()>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadStateException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)(::Il2CppString*)>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)(::Il2CppString*)>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ThreadStateException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadStateException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ThreadStateException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadStateException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Timeout
#include "System/Threading/Timeout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ComVisibleAttribute] Offset: 0xD81EFC
// Autogenerated static field getter
// Get static field: static public readonly System.TimeSpan InfiniteTimeSpan
System::TimeSpan System::Threading::Timeout::_get_InfiniteTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timeout::_get_InfiniteTimeSpan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::TimeSpan>("System.Threading", "Timeout", "InfiniteTimeSpan"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.TimeSpan InfiniteTimeSpan
void System::Threading::Timeout::_set_InfiniteTimeSpan(System::TimeSpan value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timeout::_set_InfiniteTimeSpan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timeout", "InfiniteTimeSpan", value));
}
// Autogenerated method: System.Threading.Timeout..cctor
void System::Threading::Timeout::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timeout::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timeout", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Timeout::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Timeout::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timeout*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Runtime.InteropServices.SafeHandle
#include "System/Runtime/InteropServices/SafeHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 WaitTimeout
int System::Threading::WaitHandle::_get_WaitTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_WaitTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WaitTimeout"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 WaitTimeout
void System::Threading::WaitHandle::_set_WaitTimeout(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_WaitTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WaitTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_WAITHANDLES
int System::Threading::WaitHandle::_get_MAX_WAITHANDLES() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_MAX_WAITHANDLES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MAX_WAITHANDLES"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_WAITHANDLES
void System::Threading::WaitHandle::_set_MAX_WAITHANDLES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_MAX_WAITHANDLES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MAX_WAITHANDLES", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_OBJECT_0
int System::Threading::WaitHandle::_get_WAIT_OBJECT_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_WAIT_OBJECT_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_OBJECT_0"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_OBJECT_0
void System::Threading::WaitHandle::_set_WAIT_OBJECT_0(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_WAIT_OBJECT_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_OBJECT_0", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_ABANDONED
int System::Threading::WaitHandle::_get_WAIT_ABANDONED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_WAIT_ABANDONED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_ABANDONED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_ABANDONED
void System::Threading::WaitHandle::_set_WAIT_ABANDONED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_WAIT_ABANDONED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_ABANDONED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_FAILED
int System::Threading::WaitHandle::_get_WAIT_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_WAIT_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_FAILED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_FAILED
void System::Threading::WaitHandle::_set_WAIT_FAILED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_WAIT_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ERROR_TOO_MANY_POSTS
int System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ERROR_TOO_MANY_POSTS
void System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.IntPtr InvalidHandle
System::IntPtr System::Threading::WaitHandle::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("System.Threading", "WaitHandle", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.IntPtr InvalidHandle
void System::Threading::WaitHandle::_set_InvalidHandle(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxWaitHandles
int System::Threading::WaitHandle::_get_MaxWaitHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_get_MaxWaitHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MaxWaitHandles"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxWaitHandles
void System::Threading::WaitHandle::_set_MaxWaitHandles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::_set_MaxWaitHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MaxWaitHandles", value));
}
// Autogenerated method: System.Threading.WaitHandle.Init
void System::Threading::WaitHandle::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_Handle
void System::Threading::WaitHandle::set_Handle(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::set_Handle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.get_SafeWaitHandle
Microsoft::Win32::SafeHandles::SafeWaitHandle* System::Threading::WaitHandle::get_SafeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::get_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Microsoft::Win32::SafeHandles::SafeWaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_SafeWaitHandle
void System::Threading::WaitHandle::set_SafeWaitHandle(Microsoft::Win32::SafeHandles::SafeWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::set_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.SetHandleInternal
void System::Threading::WaitHandle::SetHandleInternal(Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::SetHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, handle);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(System::TimeSpan timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int64_t timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.InternalWaitOne
bool System::Threading::WaitHandle::InternalWaitOne(System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, int64_t millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::InternalWaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "InternalWaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::Array<System::Threading::WaitHandle*>* waitHandles, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::Array<System::Threading::WaitHandle*>* waitHandles, System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitHandles, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException(int location, System::Threading::WaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location, handle);
}
// Autogenerated method: System.Threading.WaitHandle.Close
void System::Threading::WaitHandle::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose(bool explicitDisposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(explicitDisposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, explicitDisposing);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitMultiple
int System::Threading::WaitHandle::WaitMultiple(::Array<System::Threading::WaitHandle*>* waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitMultiple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitMultiple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(WaitAll)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext, WaitAll);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOneNative
int System::Threading::WaitHandle::WaitOneNative(System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::WaitOneNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitOneNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.Wait_internal
int System::Threading::WaitHandle::Wait_internal(System::IntPtr* handles, int numHandles, bool waitAll, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::Wait_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "Wait_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handles), ::il2cpp_utils::ExtractType(numHandles), ::il2cpp_utils::ExtractType(waitAll), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handles, numHandles, waitAll, ms);
}
// Autogenerated method: System.Threading.WaitHandle..cctor
void System::Threading::WaitHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: WaitHandle::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)()>(&WaitHandle::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::set_Handle
// Il2CppName: set_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)(System::IntPtr)>(&WaitHandle::set_Handle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "set_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::get_SafeWaitHandle
// Il2CppName: get_SafeWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::SafeHandles::SafeWaitHandle* (WaitHandle::*)()>(&WaitHandle::get_SafeWaitHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "get_SafeWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::set_SafeWaitHandle
// Il2CppName: set_SafeWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)(Microsoft::Win32::SafeHandles::SafeWaitHandle*)>(&WaitHandle::set_SafeWaitHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "set_SafeWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeWaitHandle*>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::SetHandleInternal
// Il2CppName: SetHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)(Microsoft::Win32::SafeHandles::SafeWaitHandle*)>(&WaitHandle::SetHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "SetHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeWaitHandle*>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)(int, bool)>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)(System::TimeSpan, bool)>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)()>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)(int)>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)(System::TimeSpan)>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitHandle::*)(int64_t, bool)>(&WaitHandle::WaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::InternalWaitOne
// Il2CppName: InternalWaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Runtime::InteropServices::SafeHandle*, int64_t, bool, bool)>(&WaitHandle::InternalWaitOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "InternalWaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::InteropServices::SafeHandle*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitAny
// Il2CppName: WaitAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<System::Threading::WaitHandle*>*, int, bool)>(&WaitHandle::WaitAny)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::WaitHandle*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitAny
// Il2CppName: WaitAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<System::Threading::WaitHandle*>*, System::TimeSpan, bool)>(&WaitHandle::WaitAny)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::WaitHandle*>*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::ThrowAbandonedMutexException
// Il2CppName: ThrowAbandonedMutexException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WaitHandle::ThrowAbandonedMutexException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "ThrowAbandonedMutexException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::ThrowAbandonedMutexException
// Il2CppName: ThrowAbandonedMutexException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, System::Threading::WaitHandle*)>(&WaitHandle::ThrowAbandonedMutexException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "ThrowAbandonedMutexException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)()>(&WaitHandle::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)(bool)>(&WaitHandle::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)()>(&WaitHandle::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitMultiple
// Il2CppName: WaitMultiple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<System::Threading::WaitHandle*>*, int, bool, bool)>(&WaitHandle::WaitMultiple)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitMultiple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::WaitHandle*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::WaitOneNative
// Il2CppName: WaitOneNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Runtime::InteropServices::SafeHandle*, uint, bool, bool)>(&WaitHandle::WaitOneNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "WaitOneNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::InteropServices::SafeHandle*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::Wait_internal
// Il2CppName: Wait_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr*, int, bool, int)>(&WaitHandle::Wait_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), "Wait_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: WaitHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WaitHandle::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)()>(&WaitHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandle::*)()>(&WaitHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitHandleCannotBeOpenedException
#include "System/Threading/WaitHandleCannotBeOpenedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: WaitHandleCannotBeOpenedException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)()>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)()>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitHandleCannotBeOpenedException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)(::Il2CppString*)>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)(::Il2CppString*)>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WaitHandleCannotBeOpenedException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitHandleCannotBeOpenedException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WaitHandleCannotBeOpenedException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitHandleCannotBeOpenedException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Interlocked
#include "System/Threading/Interlocked.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(int& location1, int value, int comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(int& location1, int value, int comparand, bool& succeeded) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand), ::il2cpp_utils::ExtractType(succeeded)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand, succeeded);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::Il2CppObject* System::Threading::Interlocked::CompareExchange(::Il2CppObject*& location1, ::Il2CppObject* value, ::Il2CppObject* comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
float System::Threading::Interlocked::CompareExchange(float& location1, float value, float comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Decrement
int System::Threading::Interlocked::Decrement(int& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Decrement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Decrement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Interlocked.Increment
int System::Threading::Interlocked::Increment(int& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Interlocked.Increment
int64_t System::Threading::Interlocked::Increment(int64_t& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int System::Threading::Interlocked::Exchange(int& location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::Il2CppObject* System::Threading::Interlocked::Exchange(::Il2CppObject*& location1, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
float System::Threading::Interlocked::Exchange(float& location1, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int64_t System::Threading::Interlocked::CompareExchange(int64_t& location1, int64_t value, int64_t comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
System::IntPtr System::Threading::Interlocked::CompareExchange(System::IntPtr& location1, System::IntPtr value, System::IntPtr comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
double System::Threading::Interlocked::CompareExchange(double& location1, double value, double comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int64_t System::Threading::Interlocked::Exchange(int64_t& location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
System::IntPtr System::Threading::Interlocked::Exchange(System::IntPtr& location1, System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
double System::Threading::Interlocked::Exchange(double& location1, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Read
int64_t System::Threading::Interlocked::Read(int64_t& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Interlocked.Add
int System::Threading::Interlocked::Add(int& location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Autogenerated method: System.Threading.Interlocked.Add
int64_t System::Threading::Interlocked::Add(int64_t& location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location1, value);
}
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&, int, int)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&, int, int, bool&)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::Il2CppObject*&, ::Il2CppObject*, ::Il2CppObject*)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float&, float, float)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Decrement
// Il2CppName: Decrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&)>(&Interlocked::Decrement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Decrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Increment
// Il2CppName: Increment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&)>(&Interlocked::Increment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Increment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Increment
// Il2CppName: Increment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t&)>(&Interlocked::Increment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Increment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&, int)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::Il2CppObject*&, ::Il2CppObject*)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float&, float)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t&, int64_t, int64_t)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(System::IntPtr&, System::IntPtr, System::IntPtr)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double&, double, double)>(&Interlocked::CompareExchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "CompareExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: Interlocked::CompareExchange
// Il2CppName: CompareExchange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t&, int64_t)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(System::IntPtr&, System::IntPtr)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double&, double)>(&Interlocked::Exchange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Exchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Exchange
// Il2CppName: Exchange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Interlocked::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t&)>(&Interlocked::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&, int)>(&Interlocked::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Interlocked::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t&, int64_t)>(&Interlocked::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Interlocked*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.NativeEventCalls
#include "System/Threading/NativeEventCalls.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.NativeEventCalls.CreateEvent_internal
System::IntPtr System::Threading::NativeEventCalls::CreateEvent_internal(bool manual, bool initial, ::Il2CppString* name, int& errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::CreateEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CreateEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manual), ::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manual, initial, name, errorCode);
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent
bool System::Threading::NativeEventCalls::SetEvent(Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::SetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent_internal
bool System::Threading::NativeEventCalls::SetEvent_internal(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::SetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent
bool System::Threading::NativeEventCalls::ResetEvent(Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::ResetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent_internal
bool System::Threading::NativeEventCalls::ResetEvent_internal(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::ResetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.CloseEvent_internal
void System::Threading::NativeEventCalls::CloseEvent_internal(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::NativeEventCalls::CloseEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CloseEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Writing MetadataGetter for method: NativeEventCalls::CreateEvent_internal
// Il2CppName: CreateEvent_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(bool, bool, ::Il2CppString*, int&)>(&NativeEventCalls::CreateEvent_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "CreateEvent_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: NativeEventCalls::SetEvent
// Il2CppName: SetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Microsoft::Win32::SafeHandles::SafeWaitHandle*)>(&NativeEventCalls::SetEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "SetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeWaitHandle*>()});
  }
};
// Writing MetadataGetter for method: NativeEventCalls::SetEvent_internal
// Il2CppName: SetEvent_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::IntPtr)>(&NativeEventCalls::SetEvent_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "SetEvent_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: NativeEventCalls::ResetEvent
// Il2CppName: ResetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Microsoft::Win32::SafeHandles::SafeWaitHandle*)>(&NativeEventCalls::ResetEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "ResetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeWaitHandle*>()});
  }
};
// Writing MetadataGetter for method: NativeEventCalls::ResetEvent_internal
// Il2CppName: ResetEvent_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::IntPtr)>(&NativeEventCalls::ResetEvent_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "ResetEvent_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: NativeEventCalls::CloseEvent_internal
// Il2CppName: CloseEvent_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&NativeEventCalls::CloseEvent_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeEventCalls*), "CloseEvent_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.RegisteredWaitHandle.Wait
void System::Threading::RegisteredWaitHandle::Wait(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::RegisteredWaitHandle::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.DoCallBack
void System::Threading::RegisteredWaitHandle::DoCallBack(::Il2CppObject* timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::RegisteredWaitHandle::DoCallBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoCallBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, timedOut);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Unregister
bool System::Threading::RegisteredWaitHandle::Unregister(System::Threading::WaitHandle* waitObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::RegisteredWaitHandle::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, waitObject);
}
// Writing MetadataGetter for method: RegisteredWaitHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegisteredWaitHandle::*)(System::Threading::WaitHandle*, System::Threading::WaitOrTimerCallback*, ::Il2CppObject*, System::TimeSpan, bool)>(&RegisteredWaitHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegisteredWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::WaitOrTimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegisteredWaitHandle::*)(System::Threading::WaitHandle*, System::Threading::WaitOrTimerCallback*, ::Il2CppObject*, System::TimeSpan, bool)>(&RegisteredWaitHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegisteredWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::WaitOrTimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RegisteredWaitHandle::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegisteredWaitHandle::*)(::Il2CppObject*)>(&RegisteredWaitHandle::Wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegisteredWaitHandle*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RegisteredWaitHandle::DoCallBack
// Il2CppName: DoCallBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegisteredWaitHandle::*)(::Il2CppObject*)>(&RegisteredWaitHandle::DoCallBack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegisteredWaitHandle*), "DoCallBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RegisteredWaitHandle::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RegisteredWaitHandle::*)(System::Threading::WaitHandle*)>(&RegisteredWaitHandle::Unregister)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegisteredWaitHandle*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::WaitHandle*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.InternalThread.Thread_free_internal
void System::Threading::InternalThread::Thread_free_internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::InternalThread::Thread_free_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_free_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.InternalThread.Finalize
void System::Threading::InternalThread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::InternalThread::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InternalThread::Thread_free_internal
// Il2CppName: Thread_free_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InternalThread::*)()>(&InternalThread::Thread_free_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InternalThread*), "Thread_free_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InternalThread::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InternalThread::*)()>(&InternalThread::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InternalThread*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InternalThread::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InternalThread::*)()>(&InternalThread::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InternalThread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InternalThread::*)()>(&InternalThread::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InternalThread*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.Timer/TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
// Including type: System.Threading.Timer/Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Timer/Scheduler scheduler
System::Threading::Timer::Scheduler* System::Threading::Timer::_get_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::_get_scheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Timer::Scheduler*>("System.Threading", "Timer", "scheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Timer/Scheduler scheduler
void System::Threading::Timer::_set_scheduler(System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::_set_scheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "scheduler", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 MaxValue
int64_t System::Threading::Timer::_get_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::_get_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "Timer", "MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 MaxValue
void System::Threading::Timer::_set_MaxValue(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::_set_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "MaxValue", value));
}
// Autogenerated method: System.Threading.Timer.Init
void System::Threading::Timer::Init(System::Threading::TimerCallback* callback, ::Il2CppObject* state, int64_t dueTime, int64_t period) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callback, state, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int dueTime, int period) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(System::TimeSpan dueTime, System::TimeSpan period) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Dispose
void System::Threading::Timer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int64_t dueTime, int64_t period, bool first) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period), ::il2cpp_utils::ExtractType(first)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, dueTime, period, first);
}
// Autogenerated method: System.Threading.Timer.KeepRootedWhileScheduled
void System::Threading::Timer::KeepRootedWhileScheduled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::KeepRootedWhileScheduled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeepRootedWhileScheduled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.GetTimeMonotonic
int64_t System::Threading::Timer::GetTimeMonotonic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::GetTimeMonotonic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", "GetTimeMonotonic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer..cctor
void System::Threading::Timer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Timer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)(System::Threading::TimerCallback*, ::Il2CppObject*, int, int)>(&Timer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::TimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)(System::Threading::TimerCallback*, ::Il2CppObject*, int, int)>(&Timer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::TimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Timer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)(System::Threading::TimerCallback*, ::Il2CppObject*, System::TimeSpan, System::TimeSpan)>(&Timer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::TimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)(System::Threading::TimerCallback*, ::Il2CppObject*, System::TimeSpan, System::TimeSpan)>(&Timer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::TimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: Timer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)(System::Threading::TimerCallback*, ::Il2CppObject*, int64_t, int64_t)>(&Timer::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::TimerCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Timer::Change
// Il2CppName: Change
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Timer::*)(int, int)>(&Timer::Change)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "Change", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Timer::Change
// Il2CppName: Change
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Timer::*)(System::TimeSpan, System::TimeSpan)>(&Timer::Change)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "Change", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: Timer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)()>(&Timer::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::Change
// Il2CppName: Change
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Timer::*)(int64_t, int64_t, bool)>(&Timer::Change)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "Change", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Timer::KeepRootedWhileScheduled
// Il2CppName: KeepRootedWhileScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::*)()>(&Timer::KeepRootedWhileScheduled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "KeepRootedWhileScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::GetTimeMonotonic
// Il2CppName: GetTimeMonotonic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&Timer::GetTimeMonotonic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), "GetTimeMonotonic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Timer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Timer/TimerComparer.Compare
int System::Threading::Timer::TimerComparer::Compare(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::TimerComparer::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, x, y);
}
// Writing MetadataGetter for method: Timer::TimerComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Timer::TimerComparer::*)(::Il2CppObject*, ::Il2CppObject*)>(&Timer::TimerComparer::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::TimerComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Timer::TimerComparer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::TimerComparer::*)()>(&Timer::TimerComparer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::TimerComparer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::TimerComparer::*)()>(&Timer::TimerComparer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::TimerComparer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Collections.SortedList
#include "System/Collections/SortedList.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.Timer/Scheduler instance
System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Timer::Scheduler*>("System.Threading", "Timer/Scheduler", "instance"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Timer/Scheduler instance
void System::Threading::Timer::Scheduler::_set_instance(System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer/Scheduler", "instance", value));
}
// Autogenerated method: System.Threading.Timer/Scheduler..cctor
void System::Threading::Timer::Scheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.get_Instance
System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Timer::Scheduler*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Remove
void System::Threading::Timer::Scheduler::Remove(System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Change
void System::Threading::Timer::Scheduler::Change(System::Threading::Timer* timer, int64_t new_next_run) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(new_next_run)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, timer, new_next_run);
}
// Autogenerated method: System.Threading.Timer/Scheduler.FindByDueTime
int System::Threading::Timer::Scheduler::FindByDueTime(int64_t nr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::FindByDueTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindByDueTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nr)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, nr);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Add
void System::Threading::Timer::Scheduler::Add(System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.InternalRemove
int System::Threading::Timer::Scheduler::InternalRemove(System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::InternalRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.TimerCB
void System::Threading::Timer::Scheduler::TimerCB(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::TimerCB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "TimerCB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Timer/Scheduler.SchedulerThread
void System::Threading::Timer::Scheduler::SchedulerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::SchedulerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SchedulerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.ShrinkIfNeeded
void System::Threading::Timer::Scheduler::ShrinkIfNeeded(System::Collections::Generic::List_1<System::Threading::Timer*>* list, int initial) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::Scheduler::ShrinkIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShrinkIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(initial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, list, initial);
}
// Writing MetadataGetter for method: Timer::Scheduler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Timer::Scheduler::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Timer::Scheduler* (*)()>(&Timer::Scheduler::get_Instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)(System::Threading::Timer*)>(&Timer::Scheduler::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Timer*>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::Change
// Il2CppName: Change
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)(System::Threading::Timer*, int64_t)>(&Timer::Scheduler::Change)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "Change", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Timer*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::FindByDueTime
// Il2CppName: FindByDueTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Timer::Scheduler::*)(int64_t)>(&Timer::Scheduler::FindByDueTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "FindByDueTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)(System::Threading::Timer*)>(&Timer::Scheduler::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Timer*>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::InternalRemove
// Il2CppName: InternalRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Timer::Scheduler::*)(System::Threading::Timer*)>(&Timer::Scheduler::InternalRemove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "InternalRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Timer*>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::TimerCB
// Il2CppName: TimerCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Timer::Scheduler::TimerCB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "TimerCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::SchedulerThread
// Il2CppName: SchedulerThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)()>(&Timer::Scheduler::SchedulerThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "SchedulerThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::ShrinkIfNeeded
// Il2CppName: ShrinkIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)(System::Collections::Generic::List_1<System::Threading::Timer*>*, int)>(&Timer::Scheduler::ShrinkIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), "ShrinkIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Threading::Timer*>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Timer::Scheduler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)()>(&Timer::Scheduler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Timer::Scheduler::*)()>(&Timer::Scheduler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Timer::Scheduler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimerCallback.Invoke
void System::Threading::TimerCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::TimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.TimerCallback.BeginInvoke
System::IAsyncResult* System::Threading::TimerCallback::BeginInvoke(::Il2CppObject* state, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::TimerCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: System.Threading.TimerCallback.EndInvoke
void System::Threading::TimerCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::TimerCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: TimerCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimerCallback::*)(::Il2CppObject*, System::IntPtr)>(&TimerCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimerCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimerCallback::*)(::Il2CppObject*, System::IntPtr)>(&TimerCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimerCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: TimerCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimerCallback::*)(::Il2CppObject*)>(&TimerCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimerCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TimerCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (TimerCallback::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&TimerCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimerCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TimerCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimerCallback::*)(System::IAsyncResult*)>(&TimerCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimerCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Volatile
#include "System/Threading/Volatile.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Volatile.Read
bool System::Threading::Volatile::Read(bool& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Volatile.Read
int System::Threading::Volatile::Read(int& location) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location);
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(bool& location, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location, value);
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(int& location, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, location, value);
}
// Writing MetadataGetter for method: Volatile::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool&)>(&Volatile::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Volatile*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: Volatile::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int&)>(&Volatile::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Volatile*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Volatile::Read
// Il2CppName: Read
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Volatile::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool&, bool)>(&Volatile::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Volatile*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Volatile::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int&, int)>(&Volatile::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Volatile*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Volatile::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Required
System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_get_Required");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Required"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Required
void System::Threading::Tasks::CausalityTraceLevel::_set_Required(System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_set_Required");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Required", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Important
System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Important() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_get_Important");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Important"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Important
void System::Threading::Tasks::CausalityTraceLevel::_set_Important(System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_set_Important");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Important", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_get_Verbose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Verbose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
void System::Threading::Tasks::CausalityTraceLevel::_set_Verbose(System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityTraceLevel::_set_Verbose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Verbose", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_get_Started");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Started"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
void System::Threading::Tasks::AsyncCausalityStatus::_set_Started(System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_set_Started");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Started", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
void System::Threading::Tasks::AsyncCausalityStatus::_set_Completed(System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Completed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
void System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled(System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
void System::Threading::Tasks::AsyncCausalityStatus::_set_Error(System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityStatus::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Error", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_AssignDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_get_AssignDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "AssignDelegate"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
void System::Threading::Tasks::CausalityRelation::_set_AssignDelegate(System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_set_AssignDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "AssignDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Join
System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_get_Join");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Join"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Join
void System::Threading::Tasks::CausalityRelation::_set_Join(System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_set_Join");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Join", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Choice
System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Choice() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_get_Choice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Choice"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Choice
void System::Threading::Tasks::CausalityRelation::_set_Choice(System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_set_Choice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Choice", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Cancel
System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Cancel
void System::Threading::Tasks::CausalityRelation::_set_Cancel(System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Error
System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Error
void System::Threading::Tasks::CausalityRelation::_set_Error(System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalityRelation::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Error", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_Execution() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_get_Execution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "Execution"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
void System::Threading::Tasks::CausalitySynchronousWork::_set_Execution(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CausalitySynchronousWork::_set_Execution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "Execution", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AsyncCausalityTracer
#include "System/Threading/Tasks/AsyncCausalityTracer.hpp"
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.get_LoggingOn
bool System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "get_LoggingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCreation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation(System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::Il2CppString* operationName, uint64_t relatedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCreation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(operationName), ::il2cpp_utils::ExtractType(relatedContext)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, traceLevel, taskId, operationName, relatedContext);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion(System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, System::Threading::Tasks::AsyncCausalityStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, traceLevel, taskId, status);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationRelation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation(System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, System::Threading::Tasks::CausalityRelation relation) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::TraceOperationRelation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationRelation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(relation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, traceLevel, taskId, relation);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkStart
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart(System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, traceLevel, taskId, work);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion(System::Threading::Tasks::CausalityTraceLevel traceLevel, System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, traceLevel, work);
}
// Writing MetadataGetter for method: AsyncCausalityTracer::get_LoggingOn
// Il2CppName: get_LoggingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AsyncCausalityTracer::get_LoggingOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "get_LoggingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncCausalityTracer::TraceOperationCreation
// Il2CppName: TraceOperationCreation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::CausalityTraceLevel, int, ::Il2CppString*, uint64_t)>(&AsyncCausalityTracer::TraceOperationCreation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "TraceOperationCreation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityTraceLevel>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: AsyncCausalityTracer::TraceOperationCompletion
// Il2CppName: TraceOperationCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::CausalityTraceLevel, int, System::Threading::Tasks::AsyncCausalityStatus)>(&AsyncCausalityTracer::TraceOperationCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "TraceOperationCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityTraceLevel>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::AsyncCausalityStatus>()});
  }
};
// Writing MetadataGetter for method: AsyncCausalityTracer::TraceOperationRelation
// Il2CppName: TraceOperationRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::CausalityTraceLevel, int, System::Threading::Tasks::CausalityRelation)>(&AsyncCausalityTracer::TraceOperationRelation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "TraceOperationRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityTraceLevel>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityRelation>()});
  }
};
// Writing MetadataGetter for method: AsyncCausalityTracer::TraceSynchronousWorkStart
// Il2CppName: TraceSynchronousWorkStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::CausalityTraceLevel, int, System::Threading::Tasks::CausalitySynchronousWork)>(&AsyncCausalityTracer::TraceSynchronousWorkStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "TraceSynchronousWorkStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityTraceLevel>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalitySynchronousWork>()});
  }
};
// Writing MetadataGetter for method: AsyncCausalityTracer::TraceSynchronousWorkCompletion
// Il2CppName: TraceSynchronousWorkCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::CausalityTraceLevel, System::Threading::Tasks::CausalitySynchronousWork)>(&AsyncCausalityTracer::TraceSynchronousWorkCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncCausalityTracer*), "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalityTraceLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::CausalitySynchronousWork>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Created
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Created() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_Created");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Created"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Created
void System::Threading::Tasks::TaskStatus::_set_Created(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_Created");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Created", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_WaitingForActivation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForActivation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
void System::Threading::Tasks::TaskStatus::_set_WaitingForActivation(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_WaitingForActivation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForActivation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingToRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_WaitingToRun");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingToRun"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
void System::Threading::Tasks::TaskStatus::_set_WaitingToRun(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_WaitingToRun");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingToRun", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Running
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Running
void System::Threading::Tasks::TaskStatus::_set_Running(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
void System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_RanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_RanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "RanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
void System::Threading::Tasks::TaskStatus::_set_RanToCompletion(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_RanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "RanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Canceled
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Canceled
void System::Threading::Tasks::TaskStatus::_set_Canceled(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Faulted
System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Faulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_get_Faulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Faulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Faulted
void System::Threading::Tasks::TaskStatus::_set_Faulted(System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskStatus::_set_Faulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Faulted", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.Tasks.Task/SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
// Including type: System.Threading.Tasks.Task/DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Tasks.Task/WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
// Including type: System.Threading.Tasks.Task/WhenAllPromise`1
#include "System/Threading/Tasks/Task_WhenAllPromise_1.hpp"
// Including type: System.Threading.Tasks.Task/<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Threading.Tasks.Task/<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable
#include "System/Runtime/CompilerServices/YieldAwaitable.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.OperationCanceledException
#include "System/OperationCanceledException.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ThreadStaticAttribute] Offset: 0xD81F10
// Autogenerated static field getter
// Get static field: static System.Threading.Tasks.Task t_currentTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_t_currentTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_t_currentTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "t_currentTask"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.Tasks.Task t_currentTask
void System::Threading::Tasks::Task::_set_t_currentTask(System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_t_currentTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_currentTask", value));
}
// [ThreadStaticAttribute] Offset: 0xD81F20
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::_get_t_stackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_t_stackGuard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "t_stackGuard"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
void System::Threading::Tasks::Task::_set_t_stackGuard(System::Threading::Tasks::StackGuard* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_t_stackGuard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_stackGuard", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskIdCounter
int System::Threading::Tasks::Task::_get_s_taskIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_taskIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "s_taskIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskIdCounter
void System::Threading::Tasks::Task::_set_s_taskIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_taskIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::_get_s_factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_factory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "s_factory"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
void System::Threading::Tasks::Task::_set_s_factory(System::Threading::Tasks::TaskFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_factory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_factory", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OptionsMask
int System::Threading::Tasks::Task::_get_OptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_OptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "OptionsMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OptionsMask
void System::Threading::Tasks::Task::_set_OptionsMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_OptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "OptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_STARTED
int System::Threading::Tasks::Task::_get_TASK_STATE_STARTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_STARTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_STARTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_STARTED
void System::Threading::Tasks::Task::_set_TASK_STATE_STARTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_STARTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_STARTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
int System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
void System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DISPOSED
int System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DISPOSED
void System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
int System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
void System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_FAULTED
int System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_FAULTED
void System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
int System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
void System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
int System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
void System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
int System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
void System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
int System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
void System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANCELLATION_REQUESTED
int System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANCELLATION_REQUESTED
void System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_taskCompletionSentinel
::Il2CppObject* System::Threading::Tasks::Task::_get_s_taskCompletionSentinel() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_taskCompletionSentinel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_taskCompletionSentinel"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_taskCompletionSentinel
void System::Threading::Tasks::Task::_set_s_taskCompletionSentinel(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_taskCompletionSentinel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCompletionSentinel", value));
}
// [FriendAccessAllowedAttribute] Offset: 0xD81F30
// Autogenerated static field getter
// Get static field: static System.Boolean s_asyncDebuggingEnabled
bool System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled"));
}
// Autogenerated static field setter
// Set static field: static System.Boolean s_asyncDebuggingEnabled
void System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_currentActiveTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_currentActiveTasks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_currentActiveTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
void System::Threading::Tasks::Task::_set_s_currentActiveTasks(System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_currentActiveTasks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_currentActiveTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::Il2CppObject* System::Threading::Tasks::Task::_get_s_activeTasksLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_activeTasksLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::Task::_set_s_activeTasksLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_activeTasksLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_activeTasksLock", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_taskCancelCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_taskCancelCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_taskCancelCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
void System::Threading::Tasks::Task::_set_s_taskCancelCallback(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_taskCancelCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCancelCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* System::Threading::Tasks::Task::_get_s_createContingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_createContingentProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>*>("System.Threading.Tasks", "Task", "s_createContingentProperties"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
void System::Threading::Tasks::Task::_set_s_createContingentProperties(System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_createContingentProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_createContingentProperties", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.Task s_completedTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_s_completedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_completedTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "s_completedTask"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.Task s_completedTask
void System::Threading::Tasks::Task::_set_s_completedTask(System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_completedTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_completedTask", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
System::Predicate_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Predicate_1<System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
void System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate(System::Predicate_1<System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_ecCallback
System::Threading::ContextCallback* System::Threading::Tasks::Task::_get_s_ecCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_ecCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading.Tasks", "Task", "s_ecCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_ecCallback
void System::Threading::Tasks::Task::_set_s_ecCallback(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_ecCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_ecCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
System::Predicate_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Predicate_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
void System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate(System::Predicate_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate", value));
}
// Autogenerated method: System.Threading.Tasks.Task.AddToActiveTasks
bool System::Threading::Tasks::Task::AddToActiveTasks(System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddToActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AddToActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveFromActiveTasks
void System::Threading::Tasks::Task::RemoveFromActiveTasks(int taskId) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::RemoveFromActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "RemoveFromActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, taskId);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskConstructorCore
void System::Threading::Tasks::Task::TaskConstructorCore(::Il2CppObject* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::TaskConstructorCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskConstructorCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action, state, cancellationToken, creationOptions, internalOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.AssignCancellationToken
void System::Threading::Tasks::Task::AssignCancellationToken(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::Task* antecedent, System::Threading::Tasks::TaskContinuation* continuation) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AssignCancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignCancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(continuation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cancellationToken, antecedent, continuation);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskCancelCallback
void System::Threading::Tasks::Task::TaskCancelCallback(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::TaskCancelCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "TaskCancelCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Tasks.Task.PossiblyCaptureContext
void System::Threading::Tasks::Task::PossiblyCaptureContext(System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::PossiblyCaptureContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PossiblyCaptureContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stackMark);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Options
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_Options() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_Options");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Options", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.OptionsMethod
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::OptionsMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::OptionsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "OptionsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskCreationOptions, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, newBits, illegalBits);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits, int& oldFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits), ::il2cpp_utils::ExtractType(oldFlags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, newBits, illegalBits, oldFlags);
}
// Autogenerated method: System.Threading.Tasks.Task.SetNotificationForWaitCompletion
void System::Threading::Tasks::Task::SetNotificationForWaitCompletion(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SetNotificationForWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNotificationForWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletionIfNecessary
bool System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletionIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AnyTaskRequiresNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion(::Array<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AnyTaskRequiresNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabledOrNotRanToCompletion
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabledOrNotRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabled
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsWaitNotificationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletion
void System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.MarkStarted
bool System::Threading::Tasks::Task::MarkStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::MarkStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FireTaskScheduledIfNeeded
bool System::Threading::Tasks::Task::FireTaskScheduledIfNeeded(System::Threading::Tasks::TaskScheduler* ts) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FireTaskScheduledIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireTaskScheduledIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ts)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ts);
}
// Autogenerated method: System.Threading.Tasks.Task.AddNewChild
void System::Threading::Tasks::Task::AddNewChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddNewChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNewChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.DisregardChild
void System::Threading::Tasks::Task::DisregardChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::DisregardChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisregardChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalStartNew
System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalStartNew(System::Threading::Tasks::Task* creatingTask, System::Delegate* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::Tasks::TaskCreationOptions options, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalStartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalStartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creatingTask), ::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creatingTask, action, state, cancellationToken, scheduler, options, internalOptions, stackMark);
}
// Autogenerated method: System.Threading.Tasks.Task.NewId
int System::Threading::Tasks::Task::NewId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::NewId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "NewId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Id
int System::Threading::Tasks::Task::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_InternalCurrent
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCurrentIfAttached
System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalCurrentIfAttached(System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalCurrentIfAttached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalCurrentIfAttached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CurrentStackGuard
System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::get_CurrentStackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CurrentStackGuard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CurrentStackGuard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::StackGuard*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Exception
System::AggregateException* System::Threading::Tasks::Task::get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_Exception");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exception", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::AggregateException*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Status
System::Threading::Tasks::TaskStatus System::Threading::Tasks::Task::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskStatus, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCanceled
bool System::Threading::Tasks::Task::get_IsCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationRequested
bool System::Threading::Tasks::Task::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitialized
System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitializedCore
System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitializedCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CancellationToken
System::Threading::CancellationToken System::Threading::Tasks::Task::get_CancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationAcknowledged
bool System::Threading::Tasks::Task::get_IsCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompleted
bool System::Threading::Tasks::Task::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.IsCompletedMethod
bool System::Threading::Tasks::Task::IsCompletedMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::IsCompletedMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "IsCompletedMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsRanToCompletion
bool System::Threading::Tasks::Task::get_IsRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CreationOptions
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_CreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_AsyncWaitHandle
System::Threading::WaitHandle* System::Threading::Tasks::Task::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_AsyncState
::Il2CppObject* System::Threading::Tasks::Task::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::Task::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExecutingTaskScheduler
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::Task::get_ExecutingTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_ExecutingTaskScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingTaskScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Factory
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::get_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_Factory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_Factory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskFactory*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_CompletedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CompletedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CompletedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedEvent
System::Threading::ManualResetEventSlim* System::Threading::Tasks::Task::get_CompletedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CompletedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompletedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ManualResetEventSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsSelfReplicatingRoot
bool System::Threading::Tasks::Task::get_IsSelfReplicatingRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsSelfReplicatingRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSelfReplicatingRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsChildReplica
bool System::Threading::Tasks::Task::get_IsChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsChildReplica");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExceptionRecorded
bool System::Threading::Tasks::Task::get_ExceptionRecorded() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_ExceptionRecorded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExceptionRecorded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsFaulted
bool System::Threading::Tasks::Task::get_IsFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsFaulted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFaulted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CapturedContext
System::Threading::ExecutionContext* System::Threading::Tasks::Task::get_CapturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_CapturedContext
void System::Threading::Tasks::Task::set_CapturedContext(System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::set_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.CopyExecutionContext
System::Threading::ExecutionContext* System::Threading::Tasks::Task::CopyExecutionContext(System::Threading::ExecutionContext* capturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::CopyExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CopyExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capturedContext)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ExecutionContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, capturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.Tasks.Task.ScheduleAndStart
void System::Threading::Tasks::Task::ScheduleAndStart(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ScheduleAndStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScheduleAndStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptions
System::AggregateException* System::Threading::Tasks::Task::GetExceptions(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::GetExceptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  return ::il2cpp_utils::RunMethodThrow<System::AggregateException*, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptionDispatchInfos
System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::Task::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.GetCancellationExceptionDispatchInfo
System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ThrowIfExceptional
void System::Threading::Tasks::Task::ThrowIfExceptional(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ThrowIfExceptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfExceptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.UpdateExceptionObservedStatus
void System::Threading::Tasks::Task::UpdateExceptionObservedStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::UpdateExceptionObservedStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateExceptionObservedStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsExceptionObservedByParent
bool System::Threading::Tasks::Task::get_IsExceptionObservedByParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsExceptionObservedByParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExceptionObservedByParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsDelegateInvoked
bool System::Threading::Tasks::Task::get_IsDelegateInvoked() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_IsDelegateInvoked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDelegateInvoked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Finish
void System::Threading::Tasks::Task::Finish(bool bUserDelegateExecuted) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bUserDelegateExecuted)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bUserDelegateExecuted);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageTwo
void System::Threading::Tasks::Task::FinishStageTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FinishStageTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageThree
void System::Threading::Tasks::Task::FinishStageThree() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FinishStageThree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageThree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ProcessChildCompletion
void System::Threading::Tasks::Task::ProcessChildCompletion(System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ProcessChildCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessChildCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.AddExceptionsFromChildren
void System::Threading::Tasks::Task::AddExceptionsFromChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddExceptionsFromChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddExceptionsFromChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishThreadAbortedTask
void System::Threading::Tasks::Task::FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FinishThreadAbortedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishThreadAbortedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bTAEAddedToExceptionHolder), ::il2cpp_utils::ExtractType(delegateRan)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bTAEAddedToExceptionHolder, delegateRan);
}
// Autogenerated method: System.Threading.Tasks.Task.Execute
void System::Threading::Tasks::Task::Execute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ShouldReplicate
bool System::Threading::Tasks::Task::ShouldReplicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ShouldReplicate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldReplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.CreateReplicaTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::CreateReplicaTask(System::Action_1<::Il2CppObject*>* taskReplicaDelegate, ::Il2CppObject* stateObject, System::Threading::Tasks::Task* parentTask, System::Threading::Tasks::TaskScheduler* taskScheduler, System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::CreateReplicaTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReplicaTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskReplicaDelegate), ::il2cpp_utils::ExtractType(stateObject), ::il2cpp_utils::ExtractType(parentTask), ::il2cpp_utils::ExtractType(taskScheduler), ::il2cpp_utils::ExtractType(creationOptionsForReplica), ::il2cpp_utils::ExtractType(internalOptionsForReplica)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, taskReplicaDelegate, stateObject, parentTask, taskScheduler, creationOptionsForReplica, internalOptionsForReplica);
}
// Autogenerated method: System.Threading.Tasks.Task.get_SavedStateForNextReplica
::Il2CppObject* System::Threading::Tasks::Task::get_SavedStateForNextReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_SavedStateForNextReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SavedStateForNextReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_SavedStateFromPreviousReplica
void System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SavedStateFromPreviousReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.get_HandedOverChildReplica
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_HandedOverChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::get_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_HandedOverChildReplica
void System::Threading::Tasks::Task::set_HandedOverChildReplica(System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::set_HandedOverChildReplica");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandedOverChildReplica", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteSelfReplicating
void System::Threading::Tasks::Task::ExecuteSelfReplicating(System::Threading::Tasks::Task* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ExecuteSelfReplicating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecuteSelfReplicating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteEntry
bool System::Threading::Tasks::Task::ExecuteEntry(bool bPreventDoubleExecution) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ExecuteEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bPreventDoubleExecution)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bPreventDoubleExecution);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteWithThreadLocal
void System::Threading::Tasks::Task::ExecuteWithThreadLocal(System::Threading::Tasks::Task*& currentTaskSlot) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ExecuteWithThreadLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWithThreadLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTaskSlot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentTaskSlot);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecutionContextCallback
void System::Threading::Tasks::Task::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvoke
void System::Threading::Tasks::Task::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvokeWithArg
void System::Threading::Tasks::Task::InnerInvokeWithArg(System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InnerInvokeWithArg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvokeWithArg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.HandleException
void System::Threading::Tasks::Task::HandleException(System::Exception* unhandledException) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::HandleException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unhandledException)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unhandledException);
}
// Autogenerated method: System.Threading.Tasks.Task.GetAwaiter
System::Runtime::CompilerServices::TaskAwaiter System::Threading::Tasks::Task::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::CompilerServices::TaskAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ConfigureAwait
System::Runtime::CompilerServices::ConfiguredTaskAwaitable System::Threading::Tasks::Task::ConfigureAwait(bool continueOnCapturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ConfigureAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::CompilerServices::ConfiguredTaskAwaitable, false>(this, ___internal__method, continueOnCapturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.SetContinuationForAwait
void System::Threading::Tasks::Task::SetContinuationForAwait(System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SetContinuationForAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContinuationForAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(continueOnCapturedContext), ::il2cpp_utils::ExtractType(flowExecutionContext), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, continuationAction, continueOnCapturedContext, flowExecutionContext, stackMark);
}
// Autogenerated method: System.Threading.Tasks.Task.Yield
System::Runtime::CompilerServices::YieldAwaitable System::Threading::Tasks::Task::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::CompilerServices::YieldAwaitable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
void System::Threading::Tasks::Task::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
bool System::Threading::Tasks::Task::Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WrappedTryRunInline
bool System::Threading::Tasks::Task::WrappedTryRunInline() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WrappedTryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrappedTryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWait
bool System::Threading::Tasks::Task::InternalWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinThenBlockingWait
bool System::Threading::Tasks::Task::SpinThenBlockingWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SpinThenBlockingWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinThenBlockingWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinWait
bool System::Threading::Tasks::Task::SpinWait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCancel
bool System::Threading::Tasks::Task::InternalCancel(bool bCancelNonExecutingOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalCancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bCancelNonExecutingOnly)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bCancelNonExecutingOnly);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tokenToRecord);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord), ::il2cpp_utils::ExtractType(cancellationException)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tokenToRecord, cancellationException);
}
// Autogenerated method: System.Threading.Tasks.Task.CancellationCleanupLogic
void System::Threading::Tasks::Task::CancellationCleanupLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::CancellationCleanupLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCleanupLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.SetCancellationAcknowledged
void System::Threading::Tasks::Task::SetCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SetCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishContinuations
void System::Threading::Tasks::Task::FinishContinuations() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FinishContinuations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishContinuations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.LogFinishCompletionNotification
void System::Threading::Tasks::Task::LogFinishCompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::LogFinishCompletionNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogFinishCompletionNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, scheduler, cancellationToken, continuationOptions, stackMark);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, cancellationToken, continuationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, scheduler, cancellationToken, continuationOptions, stackMark);
}
// Autogenerated method: System.Threading.Tasks.Task.CreationOptionsFromContinuationOptions
void System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskCreationOptions& creationOptions, System::Threading::Tasks::InternalTaskOptions& internalOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CreationOptionsFromContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions&>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, continuationOptions, creationOptions, internalOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWithCore
void System::Threading::Tasks::Task::ContinueWithCore(System::Threading::Tasks::Task* continuationTask, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContinueWithCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWithCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationTask), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, continuationTask, scheduler, cancellationToken, options);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuationComplex
bool System::Threading::Tasks::Task::AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddTaskContinuationComplex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuationComplex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuation
bool System::Threading::Tasks::Task::AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::AddTaskContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveContinuation
void System::Threading::Tasks::Task::RemoveContinuation(::Il2CppObject* continuationObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::RemoveContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, continuationObject);
}
// Autogenerated method: System.Threading.Tasks.Task.FromException
System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromException(System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, exception);
}
// Autogenerated method: System.Threading.Tasks.Task.FromCancellation
System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCancellation(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(System::Func_1<System::Threading::Tasks::Task*>* function) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, function);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(System::Func_1<System::Threading::Tasks::Task*>* function, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, function, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(System::TimeSpan delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, delay);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(System::TimeSpan delay, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, delay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, millisecondsDelay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(System::Collections::Generic::IEnumerable_1<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::Array<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Creating initializer_list -> params proxy for: System.Threading.Tasks.Task WhenAll(params System.Threading.Tasks.Task[] tasks)
System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(std::initializer_list<System::Threading::Tasks::Task*> tasks) {
  return System::Threading::Tasks::Task::WhenAll(::Array<System::Threading::Tasks::Task*>::New(tasks));
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWhenAll
System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalWhenAll(::Array<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalWhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalWhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::Array<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Creating initializer_list -> params proxy for: System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(params System.Threading.Tasks.Task[] tasks)
System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(std::initializer_list<System::Threading::Tasks::Task*> tasks) {
  return System::Threading::Tasks::Task::WhenAny(::Array<System::Threading::Tasks::Task*>::New(tasks));
}
// Autogenerated method: System.Threading.Tasks.Task..cctor
void System::Threading::Tasks::Task::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Task::AddToActiveTasks
// Il2CppName: AddToActiveTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Threading::Tasks::Task*)>(&Task::AddToActiveTasks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddToActiveTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::RemoveFromActiveTasks
// Il2CppName: RemoveFromActiveTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Task::RemoveFromActiveTasks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "RemoveFromActiveTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool, System::Threading::Tasks::TaskCreationOptions, System::Threading::CancellationToken)>(&Task::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool, System::Threading::Tasks::TaskCreationOptions, System::Threading::CancellationToken)>(&Task::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*, System::Threading::Tasks::TaskCreationOptions, bool)>(&Task::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*, System::Threading::Tasks::TaskCreationOptions, bool)>(&Task::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Delegate*, ::Il2CppObject*, System::Threading::Tasks::Task*, System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::Tasks::TaskScheduler*)>(&Task::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Delegate*, ::Il2CppObject*, System::Threading::Tasks::Task*, System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::Tasks::TaskScheduler*)>(&Task::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: Task::TaskConstructorCore
// Il2CppName: TaskConstructorCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*, ::Il2CppObject*, System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::Tasks::TaskScheduler*)>(&Task::TaskConstructorCore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "TaskConstructorCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: Task::AssignCancellationToken
// Il2CppName: AssignCancellationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::CancellationToken, System::Threading::Tasks::Task*, System::Threading::Tasks::TaskContinuation*)>(&Task::AssignCancellationToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AssignCancellationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuation*>()});
  }
};
// Writing MetadataGetter for method: Task::TaskCancelCallback
// Il2CppName: TaskCancelCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Task::TaskCancelCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "TaskCancelCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::PossiblyCaptureContext
// Il2CppName: PossiblyCaptureContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::StackCrawlMark&)>(&Task::PossiblyCaptureContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "PossiblyCaptureContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Task::get_Options
// Il2CppName: get_Options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskCreationOptions (Task::*)()>(&Task::get_Options)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_Options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::OptionsMethod
// Il2CppName: OptionsMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskCreationOptions (*)(int)>(&Task::OptionsMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "OptionsMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::AtomicStateUpdate
// Il2CppName: AtomicStateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int, int)>(&Task::AtomicStateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AtomicStateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::AtomicStateUpdate
// Il2CppName: AtomicStateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int, int, int&)>(&Task::AtomicStateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AtomicStateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Task::SetNotificationForWaitCompletion
// Il2CppName: SetNotificationForWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool)>(&Task::SetNotificationForWaitCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "SetNotificationForWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::NotifyDebuggerOfWaitCompletionIfNecessary
// Il2CppName: NotifyDebuggerOfWaitCompletionIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::NotifyDebuggerOfWaitCompletionIfNecessary)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "NotifyDebuggerOfWaitCompletionIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion
// Il2CppName: AnyTaskRequiresNotifyDebuggerOfWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AnyTaskRequiresNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::get_IsWaitNotificationEnabledOrNotRanToCompletion
// Il2CppName: get_IsWaitNotificationEnabledOrNotRanToCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsWaitNotificationEnabledOrNotRanToCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsWaitNotificationEnabledOrNotRanToCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_ShouldNotifyDebuggerOfWaitCompletion
// Il2CppName: get_ShouldNotifyDebuggerOfWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_ShouldNotifyDebuggerOfWaitCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsWaitNotificationEnabled
// Il2CppName: get_IsWaitNotificationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsWaitNotificationEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsWaitNotificationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::NotifyDebuggerOfWaitCompletion
// Il2CppName: NotifyDebuggerOfWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::NotifyDebuggerOfWaitCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "NotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::MarkStarted
// Il2CppName: MarkStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::MarkStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "MarkStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::FireTaskScheduledIfNeeded
// Il2CppName: FireTaskScheduledIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(System::Threading::Tasks::TaskScheduler*)>(&Task::FireTaskScheduledIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FireTaskScheduledIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: Task::AddNewChild
// Il2CppName: AddNewChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::AddNewChild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddNewChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::DisregardChild
// Il2CppName: DisregardChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::DisregardChild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "DisregardChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::InternalStartNew
// Il2CppName: InternalStartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Threading::Tasks::Task*, System::Delegate*, ::Il2CppObject*, System::Threading::CancellationToken, System::Threading::Tasks::TaskScheduler*, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::StackCrawlMark&)>(&Task::InternalStartNew)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InternalStartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Task::NewId
// Il2CppName: NewId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Task::NewId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "NewId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Task::*)()>(&Task::get_Id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_InternalCurrent
// Il2CppName: get_InternalCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)()>(&Task::get_InternalCurrent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_InternalCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::InternalCurrentIfAttached
// Il2CppName: InternalCurrentIfAttached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Threading::Tasks::TaskCreationOptions)>(&Task::InternalCurrentIfAttached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InternalCurrentIfAttached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>()});
  }
};
// Writing MetadataGetter for method: Task::get_CurrentStackGuard
// Il2CppName: get_CurrentStackGuard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::StackGuard* (*)()>(&Task::get_CurrentStackGuard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CurrentStackGuard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AggregateException* (Task::*)()>(&Task::get_Exception)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskStatus (Task::*)()>(&Task::get_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsCanceled
// Il2CppName: get_IsCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsCanceled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsCancellationRequested
// Il2CppName: get_IsCancellationRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsCancellationRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsCancellationRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::EnsureContingentPropertiesInitialized
// Il2CppName: EnsureContingentPropertiesInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task::ContingentProperties* (Task::*)(bool)>(&Task::EnsureContingentPropertiesInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "EnsureContingentPropertiesInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::EnsureContingentPropertiesInitializedCore
// Il2CppName: EnsureContingentPropertiesInitializedCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task::ContingentProperties* (Task::*)(bool)>(&Task::EnsureContingentPropertiesInitializedCore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "EnsureContingentPropertiesInitializedCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::get_CancellationToken
// Il2CppName: get_CancellationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::CancellationToken (Task::*)()>(&Task::get_CancellationToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CancellationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsCancellationAcknowledged
// Il2CppName: get_IsCancellationAcknowledged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsCancellationAcknowledged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsCancellationAcknowledged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::IsCompletedMethod
// Il2CppName: IsCompletedMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Task::IsCompletedMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "IsCompletedMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::get_IsRanToCompletion
// Il2CppName: get_IsRanToCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsRanToCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsRanToCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_CreationOptions
// Il2CppName: get_CreationOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskCreationOptions (Task::*)()>(&Task::get_CreationOptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CreationOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::System_IAsyncResult_get_AsyncWaitHandle
// Il2CppName: System.IAsyncResult.get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (Task::*)()>(&Task::System_IAsyncResult_get_AsyncWaitHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_AsyncState
// Il2CppName: get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Task::*)()>(&Task::get_AsyncState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::System_IAsyncResult_get_CompletedSynchronously
// Il2CppName: System.IAsyncResult.get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::System_IAsyncResult_get_CompletedSynchronously)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_ExecutingTaskScheduler
// Il2CppName: get_ExecutingTaskScheduler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskScheduler* (Task::*)()>(&Task::get_ExecutingTaskScheduler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_ExecutingTaskScheduler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_Factory
// Il2CppName: get_Factory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskFactory* (*)()>(&Task::get_Factory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_Factory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_CompletedTask
// Il2CppName: get_CompletedTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)()>(&Task::get_CompletedTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CompletedTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_CompletedEvent
// Il2CppName: get_CompletedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ManualResetEventSlim* (Task::*)()>(&Task::get_CompletedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CompletedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsSelfReplicatingRoot
// Il2CppName: get_IsSelfReplicatingRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsSelfReplicatingRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsSelfReplicatingRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsChildReplica
// Il2CppName: get_IsChildReplica
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsChildReplica)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsChildReplica", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_ExceptionRecorded
// Il2CppName: get_ExceptionRecorded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_ExceptionRecorded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_ExceptionRecorded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsFaulted
// Il2CppName: get_IsFaulted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsFaulted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsFaulted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_CapturedContext
// Il2CppName: get_CapturedContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ExecutionContext* (Task::*)()>(&Task::get_CapturedContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_CapturedContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::set_CapturedContext
// Il2CppName: set_CapturedContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::ExecutionContext*)>(&Task::set_CapturedContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "set_CapturedContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: Task::CopyExecutionContext
// Il2CppName: CopyExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ExecutionContext* (*)(System::Threading::ExecutionContext*)>(&Task::CopyExecutionContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "CopyExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: Task::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool)>(&Task::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::ScheduleAndStart
// Il2CppName: ScheduleAndStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool)>(&Task::ScheduleAndStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ScheduleAndStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::AddException
// Il2CppName: AddException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*)>(&Task::AddException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::AddException
// Il2CppName: AddException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*, bool)>(&Task::AddException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::GetExceptions
// Il2CppName: GetExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AggregateException* (Task::*)(bool)>(&Task::GetExceptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "GetExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::GetExceptionDispatchInfos
// Il2CppName: GetExceptionDispatchInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* (Task::*)()>(&Task::GetExceptionDispatchInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "GetExceptionDispatchInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::GetCancellationExceptionDispatchInfo
// Il2CppName: GetCancellationExceptionDispatchInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::ExceptionServices::ExceptionDispatchInfo* (Task::*)()>(&Task::GetCancellationExceptionDispatchInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ThrowIfExceptional
// Il2CppName: ThrowIfExceptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool)>(&Task::ThrowIfExceptional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ThrowIfExceptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::UpdateExceptionObservedStatus
// Il2CppName: UpdateExceptionObservedStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::UpdateExceptionObservedStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "UpdateExceptionObservedStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsExceptionObservedByParent
// Il2CppName: get_IsExceptionObservedByParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsExceptionObservedByParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsExceptionObservedByParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::get_IsDelegateInvoked
// Il2CppName: get_IsDelegateInvoked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::get_IsDelegateInvoked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_IsDelegateInvoked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool)>(&Task::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::FinishStageTwo
// Il2CppName: FinishStageTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::FinishStageTwo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FinishStageTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::FinishStageThree
// Il2CppName: FinishStageThree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::FinishStageThree)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FinishStageThree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ProcessChildCompletion
// Il2CppName: ProcessChildCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::Task*)>(&Task::ProcessChildCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ProcessChildCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::AddExceptionsFromChildren
// Il2CppName: AddExceptionsFromChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::AddExceptionsFromChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddExceptionsFromChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::FinishThreadAbortedTask
// Il2CppName: FinishThreadAbortedTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(bool, bool)>(&Task::FinishThreadAbortedTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FinishThreadAbortedTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ShouldReplicate
// Il2CppName: ShouldReplicate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::ShouldReplicate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ShouldReplicate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::CreateReplicaTask
// Il2CppName: CreateReplicaTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)(System::Action_1<::Il2CppObject*>*, ::Il2CppObject*, System::Threading::Tasks::Task*, System::Threading::Tasks::TaskScheduler*, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions)>(&Task::CreateReplicaTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "CreateReplicaTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>()});
  }
};
// Writing MetadataGetter for method: Task::get_SavedStateForNextReplica
// Il2CppName: get_SavedStateForNextReplica
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Task::*)()>(&Task::get_SavedStateForNextReplica)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_SavedStateForNextReplica", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::set_SavedStateFromPreviousReplica
// Il2CppName: set_SavedStateFromPreviousReplica
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*)>(&Task::set_SavedStateFromPreviousReplica)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "set_SavedStateFromPreviousReplica", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::get_HandedOverChildReplica
// Il2CppName: get_HandedOverChildReplica
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)()>(&Task::get_HandedOverChildReplica)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "get_HandedOverChildReplica", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::set_HandedOverChildReplica
// Il2CppName: set_HandedOverChildReplica
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::Task*)>(&Task::set_HandedOverChildReplica)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "set_HandedOverChildReplica", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::ExecuteSelfReplicating
// Il2CppName: ExecuteSelfReplicating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::Task*)>(&Task::ExecuteSelfReplicating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ExecuteSelfReplicating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem
// Il2CppName: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::System_Threading_IThreadPoolWorkItem_MarkAborted
// Il2CppName: System.Threading.IThreadPoolWorkItem.MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::ThreadAbortException*)>(&Task::System_Threading_IThreadPoolWorkItem_MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
// Writing MetadataGetter for method: Task::ExecuteEntry
// Il2CppName: ExecuteEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(bool)>(&Task::ExecuteEntry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ExecuteEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::ExecuteWithThreadLocal
// Il2CppName: ExecuteWithThreadLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::Task*&)>(&Task::ExecuteWithThreadLocal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ExecuteWithThreadLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*&>()});
  }
};
// Writing MetadataGetter for method: Task::ExecutionContextCallback
// Il2CppName: ExecutionContextCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Task::ExecutionContextCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ExecutionContextCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::InnerInvoke
// Il2CppName: InnerInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::InnerInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InnerInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::InnerInvokeWithArg
// Il2CppName: InnerInvokeWithArg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::Task*)>(&Task::InnerInvokeWithArg)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InnerInvokeWithArg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::HandleException
// Il2CppName: HandleException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Exception*)>(&Task::HandleException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "HandleException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: Task::GetAwaiter
// Il2CppName: GetAwaiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::CompilerServices::TaskAwaiter (Task::*)()>(&Task::GetAwaiter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "GetAwaiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ConfigureAwait
// Il2CppName: ConfigureAwait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::CompilerServices::ConfiguredTaskAwaitable (Task::*)(bool)>(&Task::ConfigureAwait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ConfigureAwait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::SetContinuationForAwait
// Il2CppName: SetContinuationForAwait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Action*, bool, bool, System::Threading::StackCrawlMark&)>(&Task::SetContinuationForAwait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "SetContinuationForAwait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Task::Yield
// Il2CppName: Yield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::CompilerServices::YieldAwaitable (*)()>(&Task::Yield)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Yield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::Wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int, System::Threading::CancellationToken)>(&Task::Wait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::WrappedTryRunInline
// Il2CppName: WrappedTryRunInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)()>(&Task::WrappedTryRunInline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "WrappedTryRunInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::InternalWait
// Il2CppName: InternalWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int, System::Threading::CancellationToken)>(&Task::InternalWait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InternalWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::SpinThenBlockingWait
// Il2CppName: SpinThenBlockingWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int, System::Threading::CancellationToken)>(&Task::SpinThenBlockingWait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "SpinThenBlockingWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::SpinWait
// Il2CppName: SpinWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(int)>(&Task::SpinWait)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "SpinWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::InternalCancel
// Il2CppName: InternalCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(bool)>(&Task::InternalCancel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InternalCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::RecordInternalCancellationRequest
// Il2CppName: RecordInternalCancellationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::RecordInternalCancellationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "RecordInternalCancellationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::RecordInternalCancellationRequest
// Il2CppName: RecordInternalCancellationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::CancellationToken)>(&Task::RecordInternalCancellationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "RecordInternalCancellationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::RecordInternalCancellationRequest
// Il2CppName: RecordInternalCancellationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::CancellationToken, ::Il2CppObject*)>(&Task::RecordInternalCancellationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "RecordInternalCancellationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::CancellationCleanupLogic
// Il2CppName: CancellationCleanupLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::CancellationCleanupLogic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "CancellationCleanupLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::SetCancellationAcknowledged
// Il2CppName: SetCancellationAcknowledged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::SetCancellationAcknowledged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "SetCancellationAcknowledged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::FinishContinuations
// Il2CppName: FinishContinuations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::FinishContinuations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FinishContinuations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::LogFinishCompletionNotification
// Il2CppName: LogFinishCompletionNotification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::LogFinishCompletionNotification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "LogFinishCompletionNotification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)(System::Action_1<System::Threading::Tasks::Task*>*)>(&Task::ContinueWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)(System::Action_1<System::Threading::Tasks::Task*>*, System::Threading::Tasks::TaskScheduler*, System::Threading::CancellationToken, System::Threading::Tasks::TaskContinuationOptions, System::Threading::StackCrawlMark&)>(&Task::ContinueWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Task::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>*, ::Il2CppObject*, System::Threading::CancellationToken, System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskScheduler*)>(&Task::ContinueWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: Task::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Task::*)(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>*, ::Il2CppObject*, System::Threading::Tasks::TaskScheduler*, System::Threading::CancellationToken, System::Threading::Tasks::TaskContinuationOptions, System::Threading::StackCrawlMark&)>(&Task::ContinueWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: Task::CreationOptionsFromContinuationOptions
// Il2CppName: CreationOptionsFromContinuationOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskCreationOptions&, System::Threading::Tasks::InternalTaskOptions&)>(&Task::CreationOptionsFromContinuationOptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "CreationOptionsFromContinuationOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions&>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions&>()});
  }
};
// Writing MetadataGetter for method: Task::ContinueWithCore
// Il2CppName: ContinueWithCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::Task*, System::Threading::Tasks::TaskScheduler*, System::Threading::CancellationToken, System::Threading::Tasks::TaskContinuationOptions)>(&Task::ContinueWithCore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "ContinueWithCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>()});
  }
};
// Writing MetadataGetter for method: Task::AddCompletionAction
// Il2CppName: AddCompletionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::ITaskCompletionAction*)>(&Task::AddCompletionAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddCompletionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::ITaskCompletionAction*>()});
  }
};
// Writing MetadataGetter for method: Task::AddCompletionAction
// Il2CppName: AddCompletionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(System::Threading::Tasks::ITaskCompletionAction*, bool)>(&Task::AddCompletionAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddCompletionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::ITaskCompletionAction*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::AddTaskContinuationComplex
// Il2CppName: AddTaskContinuationComplex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(::Il2CppObject*, bool)>(&Task::AddTaskContinuationComplex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddTaskContinuationComplex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::AddTaskContinuation
// Il2CppName: AddTaskContinuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::*)(::Il2CppObject*, bool)>(&Task::AddTaskContinuation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "AddTaskContinuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Task::RemoveContinuation
// Il2CppName: RemoveContinuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)(::Il2CppObject*)>(&Task::RemoveContinuation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "RemoveContinuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::FromResult
// Il2CppName: FromResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::FromException
// Il2CppName: FromException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Exception*)>(&Task::FromException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FromException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: Task::FromException
// Il2CppName: FromException
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::FromCancellation
// Il2CppName: FromCancellation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Threading::CancellationToken)>(&Task::FromCancellation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "FromCancellation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::FromCancellation
// Il2CppName: FromCancellation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::FromCancellation
// Il2CppName: FromCancellation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Action*)>(&Task::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Func_1<System::Threading::Tasks::Task*>*)>(&Task::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Func_1<System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&Task::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::Run
// Il2CppName: Run
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::Delay
// Il2CppName: Delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::TimeSpan)>(&Task::Delay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: Task::Delay
// Il2CppName: Delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::TimeSpan, System::Threading::CancellationToken)>(&Task::Delay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::Delay
// Il2CppName: Delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(int)>(&Task::Delay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Task::Delay
// Il2CppName: Delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(int, System::Threading::CancellationToken)>(&Task::Delay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "Delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::WhenAll
// Il2CppName: WhenAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(System::Collections::Generic::IEnumerable_1<System::Threading::Tasks::Task*>*)>(&Task::WhenAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "WhenAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::WhenAll
// Il2CppName: WhenAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::WhenAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "WhenAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::InternalWhenAll
// Il2CppName: InternalWhenAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::InternalWhenAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "InternalWhenAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::WhenAll
// Il2CppName: WhenAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::WhenAll
// Il2CppName: WhenAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::InternalWhenAll
// Il2CppName: InternalWhenAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::WhenAny
// Il2CppName: WhenAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* (*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::WhenAny)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), "WhenAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::CreateUnwrapPromise
// Il2CppName: CreateUnwrapPromise
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Task::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Task::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::*)()>(&Task::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Threading.Tasks.Shared`1
#include "System/Threading/Tasks/Shared_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/ContingentProperties.SetCompleted
void System::Threading::Tasks::Task::ContingentProperties::SetCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContingentProperties::SetCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/ContingentProperties.DeregisterCancellationCallback
void System::Threading::Tasks::Task::ContingentProperties::DeregisterCancellationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::ContingentProperties::DeregisterCancellationCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeregisterCancellationCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Task::ContingentProperties::SetCompleted
// Il2CppName: SetCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::ContingentProperties::*)()>(&Task::ContingentProperties::SetCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::ContingentProperties*), "SetCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ContingentProperties::DeregisterCancellationCallback
// Il2CppName: DeregisterCancellationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::ContingentProperties::*)()>(&Task::ContingentProperties::DeregisterCancellationCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::ContingentProperties*), "DeregisterCancellationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::ContingentProperties::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::ContingentProperties::*)()>(&Task::ContingentProperties::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::ContingentProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::ContingentProperties::*)()>(&Task::ContingentProperties::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::ContingentProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/SetOnInvokeMres.Invoke
void System::Threading::Tasks::Task::SetOnInvokeMres::Invoke(System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::SetOnInvokeMres::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completingTask);
}
// Writing MetadataGetter for method: Task::SetOnInvokeMres::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::SetOnInvokeMres::*)(System::Threading::Tasks::Task*)>(&Task::SetOnInvokeMres::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::SetOnInvokeMres*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::SetOnInvokeMres::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::SetOnInvokeMres::*)()>(&Task::SetOnInvokeMres::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::SetOnInvokeMres*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::SetOnInvokeMres::*)()>(&Task::SetOnInvokeMres::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::SetOnInvokeMres*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/DelayPromise.Complete
void System::Threading::Tasks::Task::DelayPromise::Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::DelayPromise::Complete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Task::DelayPromise::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::DelayPromise::*)(System::Threading::CancellationToken)>(&Task::DelayPromise::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::DelayPromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::DelayPromise::*)(System::Threading::CancellationToken)>(&Task::DelayPromise::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::DelayPromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Task::DelayPromise::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::DelayPromise::*)()>(&Task::DelayPromise::Complete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::DelayPromise*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/WhenAllPromise.Invoke
void System::Threading::Tasks::Task::WhenAllPromise::Invoke(System::Threading::Tasks::Task* completedTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completedTask);
}
// Autogenerated method: System.Threading.Tasks.Task/WhenAllPromise.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Task::WhenAllPromise::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::WhenAllPromise::*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::WhenAllPromise::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::WhenAllPromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::WhenAllPromise::*)(::Array<System::Threading::Tasks::Task*>*)>(&Task::WhenAllPromise::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::WhenAllPromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: Task::WhenAllPromise::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::WhenAllPromise::*)(System::Threading::Tasks::Task*)>(&Task::WhenAllPromise::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::WhenAllPromise*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion
// Il2CppName: get_ShouldNotifyDebuggerOfWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::WhenAllPromise::*)()>(&Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::WhenAllPromise*), "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/<>c__DisplayClass178_0.<ExecuteSelfReplicating>b__0
void System::Threading::Tasks::Task::$$c__DisplayClass178_0::$ExecuteSelfReplicating$b__0(::Il2CppObject* $p0$) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c__DisplayClass178_0::<ExecuteSelfReplicating>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExecuteSelfReplicating>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType($p0$)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, $p0$);
}
// Writing MetadataGetter for method: Task::$$c__DisplayClass178_0::$ExecuteSelfReplicating$b__0
// Il2CppName: <ExecuteSelfReplicating>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c__DisplayClass178_0::*)(::Il2CppObject*)>(&Task::$$c__DisplayClass178_0::$ExecuteSelfReplicating$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c__DisplayClass178_0*), "<ExecuteSelfReplicating>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::$$c__DisplayClass178_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c__DisplayClass178_0::*)()>(&Task::$$c__DisplayClass178_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c__DisplayClass178_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c__DisplayClass178_0::*)()>(&Task::$$c__DisplayClass178_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c__DisplayClass178_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task/<>c <>9
System::Threading::Tasks::Task::$$c* System::Threading::Tasks::Task::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task::$$c*>("System.Threading.Tasks", "Task/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task/<>c <>9
void System::Threading::Tasks::Task::$$c::_set_$$9(System::Threading::Tasks::Task::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__276_0
System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::$$c::_get_$$9__276_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_get_$$9__276_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task/<>c", "<>9__276_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__276_0
void System::Threading::Tasks::Task::$$c::_set_$$9__276_0(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_set_$$9__276_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__276_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.TimerCallback <>9__276_1
System::Threading::TimerCallback* System::Threading::Tasks::Task::$$c::_get_$$9__276_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_get_$$9__276_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::TimerCallback*>("System.Threading.Tasks", "Task/<>c", "<>9__276_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.TimerCallback <>9__276_1
void System::Threading::Tasks::Task::$$c::_set_$$9__276_1(System::Threading::TimerCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::_set_$$9__276_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__276_1", value)));
}
// Autogenerated method: System.Threading.Tasks.Task/<>c..cctor
void System::Threading::Tasks::Task::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<Delay>b__276_0
void System::Threading::Tasks::Task::$$c::$Delay$b__276_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::<Delay>b__276_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__276_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<Delay>b__276_1
void System::Threading::Tasks::Task::$$c::$Delay$b__276_1(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::<Delay>b__276_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__276_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__295_0
System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::$$c::$_cctor$b__295_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::<.cctor>b__295_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__295_1
bool System::Threading::Tasks::Task::$$c::$_cctor$b__295_1(System::Threading::Tasks::Task* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::<.cctor>b__295_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__295_2
bool System::Threading::Tasks::Task::$$c::$_cctor$b__295_2(::Il2CppObject* tc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::$$c::<.cctor>b__295_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__295_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tc);
}
// Writing MetadataGetter for method: Task::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Task::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::$$c::$Delay$b__276_0
// Il2CppName: <Delay>b__276_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c::*)(::Il2CppObject*)>(&Task::$$c::$Delay$b__276_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), "<Delay>b__276_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::$$c::$Delay$b__276_1
// Il2CppName: <Delay>b__276_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c::*)(::Il2CppObject*)>(&Task::$$c::$Delay$b__276_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), "<Delay>b__276_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::$$c::$_cctor$b__295_0
// Il2CppName: <.cctor>b__295_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task::ContingentProperties* (Task::$$c::*)()>(&Task::$$c::$_cctor$b__295_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), "<.cctor>b__295_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Task::$$c::$_cctor$b__295_1
// Il2CppName: <.cctor>b__295_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::$$c::*)(System::Threading::Tasks::Task*)>(&Task::$$c::$_cctor$b__295_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), "<.cctor>b__295_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: Task::$$c::$_cctor$b__295_2
// Il2CppName: <.cctor>b__295_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Task::$$c::*)(::Il2CppObject*)>(&Task::$$c::$_cctor$b__295_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), "<.cctor>b__295_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Task::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c::*)()>(&Task::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Task::$$c::*)()>(&Task::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Task::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CompletionActionInvoker
#include "System/Threading/Tasks/CompletionActionInvoker.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.ExecuteWorkItem
void System::Threading::Tasks::CompletionActionInvoker::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CompletionActionInvoker::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.MarkAborted
void System::Threading::Tasks::CompletionActionInvoker::MarkAborted(System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::CompletionActionInvoker::MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tae);
}
// Writing MetadataGetter for method: CompletionActionInvoker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompletionActionInvoker::*)(System::Threading::Tasks::ITaskCompletionAction*, System::Threading::Tasks::Task*)>(&CompletionActionInvoker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompletionActionInvoker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::ITaskCompletionAction*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompletionActionInvoker::*)(System::Threading::Tasks::ITaskCompletionAction*, System::Threading::Tasks::Task*)>(&CompletionActionInvoker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompletionActionInvoker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::ITaskCompletionAction*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: CompletionActionInvoker::ExecuteWorkItem
// Il2CppName: ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompletionActionInvoker::*)()>(&CompletionActionInvoker::ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompletionActionInvoker*), "ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CompletionActionInvoker::MarkAborted
// Il2CppName: MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompletionActionInvoker::*)(System::Threading::ThreadAbortException*)>(&CompletionActionInvoker::MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompletionActionInvoker*), "MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions None
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions None
void System::Threading::Tasks::TaskCreationOptions::_set_None(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
void System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
void System::Threading::Tasks::TaskCreationOptions::_set_LongRunning(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
void System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
void System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
void System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously(System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions None
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions None
void System::Threading::Tasks::InternalTaskOptions::_set_None(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
void System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions ChildReplica
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_ChildReplica() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_ChildReplica");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "ChildReplica"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions ChildReplica
void System::Threading::Tasks::InternalTaskOptions::_set_ChildReplica(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_ChildReplica");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "ChildReplica", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
void System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
void System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions SelfReplicating
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_SelfReplicating() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_SelfReplicating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "SelfReplicating"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions SelfReplicating
void System::Threading::Tasks::InternalTaskOptions::_set_SelfReplicating(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_SelfReplicating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "SelfReplicating", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
void System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
void System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
void System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose(System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions None
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions None
void System::Threading::Tasks::TaskContinuationOptions::_set_None(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
void System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
void System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
void System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
void System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
void System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
void System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously(System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
int System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
void System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH", value));
}
// Autogenerated method: System.Threading.Tasks.StackGuard.TryBeginInliningScope
bool System::Threading::Tasks::StackGuard::TryBeginInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StackGuard::TryBeginInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryBeginInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.EndInliningScope
void System::Threading::Tasks::StackGuard::EndInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StackGuard::EndInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.CheckForSufficientStack
bool System::Threading::Tasks::StackGuard::CheckForSufficientStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StackGuard::CheckForSufficientStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForSufficientStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StackGuard::TryBeginInliningScope
// Il2CppName: TryBeginInliningScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StackGuard::*)()>(&StackGuard::TryBeginInliningScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackGuard*), "TryBeginInliningScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StackGuard::EndInliningScope
// Il2CppName: EndInliningScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StackGuard::*)()>(&StackGuard::EndInliningScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackGuard*), "EndInliningScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StackGuard::CheckForSufficientStack
// Il2CppName: CheckForSufficientStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StackGuard::*)()>(&StackGuard::CheckForSufficientStack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackGuard*), "CheckForSufficientStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StackGuard::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StackGuard::*)()>(&StackGuard::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackGuard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StackGuard::*)()>(&StackGuard::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackGuard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.ITaskCompletionAction.Invoke
void System::Threading::Tasks::ITaskCompletionAction::Invoke(System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::ITaskCompletionAction::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completingTask);
}
// Writing MetadataGetter for method: ITaskCompletionAction::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITaskCompletionAction::*)(System::Threading::Tasks::Task*)>(&ITaskCompletionAction::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITaskCompletionAction*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskCanceledException
#include "System/Threading/Tasks/TaskCanceledException.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TaskCanceledException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(System::Threading::Tasks::Task*)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(System::Threading::Tasks::Task*)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskCanceledException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)()>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)()>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskCanceledException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(::Il2CppString*)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(::Il2CppString*)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TaskCanceledException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskCanceledException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&TaskCanceledException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskCanceledException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ContinuationTaskFromTask
#include "System/Threading/Tasks/ContinuationTaskFromTask.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke
void System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ContinuationTaskFromTask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContinuationTaskFromTask::*)(System::Threading::Tasks::Task*, System::Delegate*, ::Il2CppObject*, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::StackCrawlMark&)>(&ContinuationTaskFromTask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContinuationTaskFromTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContinuationTaskFromTask::*)(System::Threading::Tasks::Task*, System::Delegate*, ::Il2CppObject*, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::InternalTaskOptions, System::Threading::StackCrawlMark&)>(&ContinuationTaskFromTask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContinuationTaskFromTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::InternalTaskOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: ContinuationTaskFromTask::InnerInvoke
// Il2CppName: InnerInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContinuationTaskFromTask::*)()>(&ContinuationTaskFromTask::InnerInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContinuationTaskFromTask*), "InnerInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskContinuation.Run
void System::Threading::Tasks::TaskContinuation::Run(System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask), ::il2cpp_utils::ExtractType(bCanInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Autogenerated method: System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue
void System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue(System::Threading::Tasks::Task* task, bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskContinuation", "InlineIfPossibleOrElseQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, task, needsProtection);
}
// Writing MetadataGetter for method: TaskContinuation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&TaskContinuation::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskContinuation::InlineIfPossibleOrElseQueue
// Il2CppName: InlineIfPossibleOrElseQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::Task*, bool)>(&TaskContinuation::InlineIfPossibleOrElseQueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), "InlineIfPossibleOrElseQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)()>(&TaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)()>(&TaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StandardTaskContinuation
#include "System/Threading/Tasks/StandardTaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.StandardTaskContinuation.Run
void System::Threading::Tasks::StandardTaskContinuation::Run(System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::StandardTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask), ::il2cpp_utils::ExtractType(bCanInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Writing MetadataGetter for method: StandardTaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardTaskContinuation::*)(System::Threading::Tasks::Task*, System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskScheduler*)>(&StandardTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardTaskContinuation::*)(System::Threading::Tasks::Task*, System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskScheduler*)>(&StandardTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: StandardTaskContinuation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardTaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&StandardTaskContinuation::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardTaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
System::Threading::SendOrPostCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::SendOrPostCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback(System::Threading::SendOrPostCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_postActionCallback
System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_postActionCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback", value));
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.PostAction
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "PostAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.GetPostActionCallback
System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "GetPostActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ContextCallback*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run(System::Threading::Tasks::Task* task, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, task, canInlineContinuationTask);
}
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::*)(System::Threading::SynchronizationContext*, System::Action*, bool, System::Threading::StackCrawlMark&)>(&SynchronizationContextAwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SynchronizationContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::*)(System::Threading::SynchronizationContext*, System::Action*, bool, System::Threading::StackCrawlMark&)>(&SynchronizationContextAwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SynchronizationContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::PostAction
// Il2CppName: PostAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&SynchronizationContextAwaitTaskContinuation::PostAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), "PostAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::GetPostActionCallback
// Il2CppName: GetPostActionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ContextCallback* (*)()>(&SynchronizationContextAwaitTaskContinuation::GetPostActionCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), "GetPostActionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SynchronizationContextAwaitTaskContinuation::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&SynchronizationContextAwaitTaskContinuation::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c <>9
System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c <>9
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9(System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c.<.cctor>b__7_0
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::$_cctor$b__7_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::<.cctor>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SynchronizationContextAwaitTaskContinuation::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::$$c::$_cctor$b__7_0
// Il2CppName: <.cctor>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::$$c::*)(::Il2CppObject*)>(&SynchronizationContextAwaitTaskContinuation::$$c::$_cctor$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation::$$c*), "<.cctor>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SynchronizationContextAwaitTaskContinuation::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::$$c::*)()>(&SynchronizationContextAwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizationContextAwaitTaskContinuation::$$c::*)()>(&SynchronizationContextAwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizationContextAwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.Run
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run(System::Threading::Tasks::Task* ignored, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignored), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ignored, canInlineContinuationTask);
}
// Writing MetadataGetter for method: TaskSchedulerAwaitTaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::*)(System::Threading::Tasks::TaskScheduler*, System::Action*, bool, System::Threading::StackCrawlMark&)>(&TaskSchedulerAwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::*)(System::Threading::Tasks::TaskScheduler*, System::Action*, bool, System::Threading::StackCrawlMark&)>(&TaskSchedulerAwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: TaskSchedulerAwaitTaskContinuation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&TaskSchedulerAwaitTaskContinuation::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c <>9
System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c <>9
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9(System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__2_0
System::Action_1<::Il2CppObject*>* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0", value)));
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c..cctor
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c.<Run>b__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::$Run$b__2_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::<Run>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: TaskSchedulerAwaitTaskContinuation::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TaskSchedulerAwaitTaskContinuation::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskSchedulerAwaitTaskContinuation::$$c::$Run$b__2_0
// Il2CppName: <Run>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::$$c::*)(::Il2CppObject*)>(&TaskSchedulerAwaitTaskContinuation::$$c::$Run$b__2_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation::$$c*), "<Run>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TaskSchedulerAwaitTaskContinuation::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::$$c::*)()>(&TaskSchedulerAwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerAwaitTaskContinuation::$$c::*)()>(&TaskSchedulerAwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerAwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AwaitTaskContinuation
#include "System/Threading/Tasks/AwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.AwaitTaskContinuation/<>c
#include "System/Threading/Tasks/AwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_invokeActionCallback
System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_invokeActionCallback
void System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback", value));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.CreateTask
System::Threading::Tasks::Task* System::Threading::Tasks::AwaitTaskContinuation::CreateTask(System::Action_1<::Il2CppObject*>* action, ::Il2CppObject* state, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::CreateTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, action, state, scheduler);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.get_IsValidLocationForInlining
bool System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "get_IsValidLocationForInlining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.ExecuteWorkItemHelper
void System::Threading::Tasks::AwaitTaskContinuation::ExecuteWorkItemHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::ExecuteWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tae)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.InvokeAction
void System::Threading::Tasks::AwaitTaskContinuation::InvokeAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::InvokeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "InvokeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.GetInvokeActionCallback
System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "GetInvokeActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ContextCallback*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunCallback
void System::Threading::Tasks::AwaitTaskContinuation::RunCallback(System::Threading::ContextCallback* callback, ::Il2CppObject* state, System::Threading::Tasks::Task*& currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::RunCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callback, state, currentTask);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction(System::Action* action, bool allowInlining, System::Threading::Tasks::Task*& currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "RunOrScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(allowInlining), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action, allowInlining, currentTask);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.UnsafeScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction(System::Action* action, System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "UnsafeScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action, task);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.ThrowAsyncIfNecessary
void System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary(System::Exception* exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "ThrowAsyncIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, exc);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.Run
void System::Threading::Tasks::AwaitTaskContinuation::Run(System::Threading::Tasks::Task* task, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(canInlineContinuationTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, task, canInlineContinuationTask);
}
// Writing MetadataGetter for method: AwaitTaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Action*, bool, System::Threading::StackCrawlMark&)>(&AwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Action*, bool, System::Threading::StackCrawlMark&)>(&AwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Action*, bool)>(&AwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Action*, bool)>(&AwaitTaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::CreateTask
// Il2CppName: CreateTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (AwaitTaskContinuation::*)(System::Action_1<::Il2CppObject*>*, ::Il2CppObject*, System::Threading::Tasks::TaskScheduler*)>(&AwaitTaskContinuation::CreateTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "CreateTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::get_IsValidLocationForInlining
// Il2CppName: get_IsValidLocationForInlining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AwaitTaskContinuation::get_IsValidLocationForInlining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "get_IsValidLocationForInlining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::ExecuteWorkItemHelper
// Il2CppName: ExecuteWorkItemHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)()>(&AwaitTaskContinuation::ExecuteWorkItemHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "ExecuteWorkItemHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem
// Il2CppName: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)()>(&AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_MarkAborted
// Il2CppName: System.Threading.IThreadPoolWorkItem.MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Threading::ThreadAbortException*)>(&AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "System.Threading.IThreadPoolWorkItem.MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::InvokeAction
// Il2CppName: InvokeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&AwaitTaskContinuation::InvokeAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "InvokeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::GetInvokeActionCallback
// Il2CppName: GetInvokeActionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ContextCallback* (*)()>(&AwaitTaskContinuation::GetInvokeActionCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "GetInvokeActionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::RunCallback
// Il2CppName: RunCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Threading::ContextCallback*, ::Il2CppObject*, System::Threading::Tasks::Task*&)>(&AwaitTaskContinuation::RunCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "RunCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ContextCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*&>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::RunOrScheduleAction
// Il2CppName: RunOrScheduleAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action*, bool, System::Threading::Tasks::Task*&)>(&AwaitTaskContinuation::RunOrScheduleAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "RunOrScheduleAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*&>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::UnsafeScheduleAction
// Il2CppName: UnsafeScheduleAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action*, System::Threading::Tasks::Task*)>(&AwaitTaskContinuation::UnsafeScheduleAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "UnsafeScheduleAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::ThrowAsyncIfNecessary
// Il2CppName: ThrowAsyncIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Exception*)>(&AwaitTaskContinuation::ThrowAsyncIfNecessary)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "ThrowAsyncIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&AwaitTaskContinuation::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AwaitTaskContinuation/<>c
#include "System/Threading/Tasks/AwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.AwaitTaskContinuation/<>c <>9
System::Threading::Tasks::AwaitTaskContinuation::$$c* System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::Tasks::AwaitTaskContinuation::$$c*>("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.AwaitTaskContinuation/<>c <>9
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9(System::Threading::Tasks::AwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.WaitCallback <>9__17_0
System::Threading::WaitCallback* System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::_get_$$9__17_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Threading::WaitCallback*>("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9__17_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.WaitCallback <>9__17_0
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9__17_0(System::Threading::WaitCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::_set_$$9__17_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation/<>c", "<>9__17_0", value)));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation/<>c..cctor
void System::Threading::Tasks::AwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation/<>c.<ThrowAsyncIfNecessary>b__17_0
void System::Threading::Tasks::AwaitTaskContinuation::$$c::$ThrowAsyncIfNecessary$b__17_0(::Il2CppObject* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::AwaitTaskContinuation::$$c::<ThrowAsyncIfNecessary>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ThrowAsyncIfNecessary>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: AwaitTaskContinuation::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AwaitTaskContinuation::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::$$c::$ThrowAsyncIfNecessary$b__17_0
// Il2CppName: <ThrowAsyncIfNecessary>b__17_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::$$c::*)(::Il2CppObject*)>(&AwaitTaskContinuation::$$c::$ThrowAsyncIfNecessary$b__17_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation::$$c*), "<ThrowAsyncIfNecessary>b__17_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AwaitTaskContinuation::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::$$c::*)()>(&AwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AwaitTaskContinuation::$$c::*)()>(&AwaitTaskContinuation::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AwaitTaskContinuation::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.EventHandler
#include "System/EventHandler.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Boolean s_failFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Boolean s_failFastOnUnobservedException
void System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean s_domainUnloadStarted
bool System::Threading::Tasks::TaskExceptionHolder::_get_s_domainUnloadStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_get_s_domainUnloadStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "TaskExceptionHolder", "s_domainUnloadStarted"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean s_domainUnloadStarted
void System::Threading::Tasks::TaskExceptionHolder::_set_s_domainUnloadStarted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_set_s_domainUnloadStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_domainUnloadStarted", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler s_adUnloadEventHandler
System::EventHandler* System::Threading::Tasks::TaskExceptionHolder::_get_s_adUnloadEventHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_get_s_adUnloadEventHandler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::EventHandler*>("System.Threading.Tasks", "TaskExceptionHolder", "s_adUnloadEventHandler"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler s_adUnloadEventHandler
void System::Threading::Tasks::TaskExceptionHolder::_set_s_adUnloadEventHandler(System::EventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::_set_s_adUnloadEventHandler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_adUnloadEventHandler", value));
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.ShouldFailFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "ShouldFailFastOnUnobservedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.EnsureADUnloadCallbackRegistered
void System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "EnsureADUnloadCallbackRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.AppDomainUnloadCallback
void System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback(::Il2CppObject* sender, System::EventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "AppDomainUnloadCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sender, e);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.get_ContainsFaultList
bool System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsFaultList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Add
void System::Threading::Tasks::TaskExceptionHolder::Add(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.SetCancellationException
void System::Threading::Tasks::TaskExceptionHolder::SetCancellationException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::SetCancellationException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.AddFaultException
void System::Threading::Tasks::TaskExceptionHolder::AddFaultException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::AddFaultException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFaultException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsUnhandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsUnhandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsHandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled(bool calledFromFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, calledFromFinalizer);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.CreateExceptionObject
System::AggregateException* System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject(bool calledFromFinalizer, System::Exception* includeThisException) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateExceptionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer), ::il2cpp_utils::ExtractType(includeThisException)})));
  return ::il2cpp_utils::RunMethodThrow<System::AggregateException*, false>(this, ___internal__method, calledFromFinalizer, includeThisException);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetExceptionDispatchInfos
System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetCancellationExceptionDispatchInfo
System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder..cctor
void System::Threading::Tasks::TaskExceptionHolder::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Finalize
void System::Threading::Tasks::TaskExceptionHolder::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskExceptionHolder::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TaskExceptionHolder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(System::Threading::Tasks::Task*)>(&TaskExceptionHolder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(System::Threading::Tasks::Task*)>(&TaskExceptionHolder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::ShouldFailFastOnUnobservedException
// Il2CppName: ShouldFailFastOnUnobservedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TaskExceptionHolder::ShouldFailFastOnUnobservedException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "ShouldFailFastOnUnobservedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::EnsureADUnloadCallbackRegistered
// Il2CppName: EnsureADUnloadCallbackRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TaskExceptionHolder::EnsureADUnloadCallbackRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "EnsureADUnloadCallbackRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::AppDomainUnloadCallback
// Il2CppName: AppDomainUnloadCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, System::EventArgs*)>(&TaskExceptionHolder::AppDomainUnloadCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "AppDomainUnloadCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::EventArgs*>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::get_ContainsFaultList
// Il2CppName: get_ContainsFaultList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskExceptionHolder::*)()>(&TaskExceptionHolder::get_ContainsFaultList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "get_ContainsFaultList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(::Il2CppObject*, bool)>(&TaskExceptionHolder::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::SetCancellationException
// Il2CppName: SetCancellationException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(::Il2CppObject*)>(&TaskExceptionHolder::SetCancellationException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "SetCancellationException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::AddFaultException
// Il2CppName: AddFaultException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(::Il2CppObject*)>(&TaskExceptionHolder::AddFaultException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "AddFaultException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::MarkAsUnhandled
// Il2CppName: MarkAsUnhandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)()>(&TaskExceptionHolder::MarkAsUnhandled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "MarkAsUnhandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::MarkAsHandled
// Il2CppName: MarkAsHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)(bool)>(&TaskExceptionHolder::MarkAsHandled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "MarkAsHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::CreateExceptionObject
// Il2CppName: CreateExceptionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AggregateException* (TaskExceptionHolder::*)(bool, System::Exception*)>(&TaskExceptionHolder::CreateExceptionObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "CreateExceptionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::GetExceptionDispatchInfos
// Il2CppName: GetExceptionDispatchInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* (TaskExceptionHolder::*)()>(&TaskExceptionHolder::GetExceptionDispatchInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "GetExceptionDispatchInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::GetCancellationExceptionDispatchInfo
// Il2CppName: GetCancellationExceptionDispatchInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::ExceptionServices::ExceptionDispatchInfo* (TaskExceptionHolder::*)()>(&TaskExceptionHolder::GetCancellationExceptionDispatchInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TaskExceptionHolder::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskExceptionHolder::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskExceptionHolder::*)()>(&TaskExceptionHolder::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskExceptionHolder*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskFactory.GetDefaultScheduler
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskFactory::GetDefaultScheduler(System::Threading::Tasks::Task* currTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::GetDefaultScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currTask)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method, currTask);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckCreationOptions
void System::Threading::Tasks::TaskFactory::CheckCreationOptions(System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::CheckCreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckCreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.StartNew
System::Threading::Tasks::Task* System::Threading::Tasks::TaskFactory::StartNew(System::Action* action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::StartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, action, cancellationToken, creationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckFromAsyncOptions
void System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions(System::Threading::Tasks::TaskCreationOptions creationOptions, bool hasBeginMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckFromAsyncOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(hasBeginMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creationOptions, hasBeginMethod);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CommonCWAnyLogic
System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::TaskFactory::CommonCWAnyLogic(System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::CommonCWAnyLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CommonCWAnyLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckMultiTaskContinuationOptions
void System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckMultiTaskContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, continuationOptions);
}
// Writing MetadataGetter for method: TaskFactory::GetDefaultScheduler
// Il2CppName: GetDefaultScheduler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskScheduler* (TaskFactory::*)(System::Threading::Tasks::Task*)>(&TaskFactory::GetDefaultScheduler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "GetDefaultScheduler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::*)(System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskScheduler*)>(&TaskFactory::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::*)(System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::TaskContinuationOptions, System::Threading::Tasks::TaskScheduler*)>(&TaskFactory::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::CheckCreationOptions
// Il2CppName: CheckCreationOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::TaskCreationOptions)>(&TaskFactory::CheckCreationOptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "CheckCreationOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::StartNew
// Il2CppName: StartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (TaskFactory::*)(System::Action*, System::Threading::CancellationToken, System::Threading::Tasks::TaskCreationOptions, System::Threading::Tasks::TaskScheduler*)>(&TaskFactory::StartNew)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "StartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskScheduler*>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::StartNew
// Il2CppName: StartNew
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TaskFactory::CheckFromAsyncOptions
// Il2CppName: CheckFromAsyncOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::TaskCreationOptions, bool)>(&TaskFactory::CheckFromAsyncOptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "CheckFromAsyncOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCreationOptions>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::CommonCWAnyLogic
// Il2CppName: CommonCWAnyLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* (*)(System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*)>(&TaskFactory::CommonCWAnyLogic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "CommonCWAnyLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::CheckMultiTaskContinuationOptions
// Il2CppName: CheckMultiTaskContinuationOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::TaskContinuationOptions)>(&TaskFactory::CheckMultiTaskContinuationOptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), "CheckMultiTaskContinuationOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskContinuationOptions>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::*)()>(&TaskFactory::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::*)()>(&TaskFactory::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise.Invoke
void System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke(System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completingTask);
}
// Writing MetadataGetter for method: TaskFactory::CompleteOnInvokePromise::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::CompleteOnInvokePromise::*)(System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*)>(&TaskFactory::CompleteOnInvokePromise::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory::CompleteOnInvokePromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::CompleteOnInvokePromise::*)(System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*)>(&TaskFactory::CompleteOnInvokePromise::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory::CompleteOnInvokePromise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: TaskFactory::CompleteOnInvokePromise::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskFactory::CompleteOnInvokePromise::*)(System::Threading::Tasks::Task*)>(&TaskFactory::CompleteOnInvokePromise::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskFactory::CompleteOnInvokePromise*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.TaskScheduler/SystemThreadingTasks_TaskSchedulerDebugView
#include "System/Threading/Tasks/TaskScheduler_SystemThreadingTasks_TaskSchedulerDebugView.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>*>("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers")));
}
// Autogenerated static field setter
// Set static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
void System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers(System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
void System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler(System::Threading::Tasks::TaskScheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskSchedulerIdCounter
int System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskSchedulerIdCounter
void System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException(System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object _unobservedTaskExceptionLockObject
::Il2CppObject* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object _unobservedTaskExceptionLockObject
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject", value));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.QueueTask
void System::Threading::Tasks::TaskScheduler::QueueTask(System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline(System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryExecuteTaskInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryRunInline
bool System::Threading::Tasks::TaskScheduler::TryRunInline(System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::TryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryDequeue
bool System::Threading::Tasks::TaskScheduler::TryDequeue(System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::TryDequeue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequiresAtomicStartTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.InternalQueueTask
void System::Threading::Tasks::TaskScheduler::InternalQueueTask(System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::InternalQueueTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalQueueTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.AddToActiveTaskSchedulers
void System::Threading::Tasks::TaskScheduler::AddToActiveTaskSchedulers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::AddToActiveTaskSchedulers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToActiveTaskSchedulers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Default
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Current
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_InternalCurrent
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Id
int System::Threading::Tasks::TaskScheduler::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.PublishUnobservedTaskException
void System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException(::Il2CppObject* sender, System::Threading::Tasks::UnobservedTaskExceptionEventArgs* ueea) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "PublishUnobservedTaskException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(ueea)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sender, ueea);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler..cctor
void System::Threading::Tasks::TaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TaskScheduler::QueueTask
// Il2CppName: QueueTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)(System::Threading::Tasks::Task*)>(&TaskScheduler::QueueTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "QueueTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::TryExecuteTaskInline
// Il2CppName: TryExecuteTaskInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskScheduler::*)(System::Threading::Tasks::Task*, bool)>(&TaskScheduler::TryExecuteTaskInline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "TryExecuteTaskInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::TryRunInline
// Il2CppName: TryRunInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskScheduler::*)(System::Threading::Tasks::Task*, bool)>(&TaskScheduler::TryRunInline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "TryRunInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::TryDequeue
// Il2CppName: TryDequeue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskScheduler::*)(System::Threading::Tasks::Task*)>(&TaskScheduler::TryDequeue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "TryDequeue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::NotifyWorkItemProgress
// Il2CppName: NotifyWorkItemProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)()>(&TaskScheduler::NotifyWorkItemProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "NotifyWorkItemProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::get_RequiresAtomicStartTransition
// Il2CppName: get_RequiresAtomicStartTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskScheduler::*)()>(&TaskScheduler::get_RequiresAtomicStartTransition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "get_RequiresAtomicStartTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::InternalQueueTask
// Il2CppName: InternalQueueTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)(System::Threading::Tasks::Task*)>(&TaskScheduler::InternalQueueTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "InternalQueueTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::AddToActiveTaskSchedulers
// Il2CppName: AddToActiveTaskSchedulers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)()>(&TaskScheduler::AddToActiveTaskSchedulers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "AddToActiveTaskSchedulers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::get_Default
// Il2CppName: get_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskScheduler* (*)()>(&TaskScheduler::get_Default)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "get_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskScheduler* (*)()>(&TaskScheduler::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::get_InternalCurrent
// Il2CppName: get_InternalCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::TaskScheduler* (*)()>(&TaskScheduler::get_InternalCurrent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "get_InternalCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TaskScheduler::*)()>(&TaskScheduler::get_Id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::PublishUnobservedTaskException
// Il2CppName: PublishUnobservedTaskException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, System::Threading::Tasks::UnobservedTaskExceptionEventArgs*)>(&TaskScheduler::PublishUnobservedTaskException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), "PublishUnobservedTaskException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>()});
  }
};
// Writing MetadataGetter for method: TaskScheduler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TaskScheduler::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskScheduler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)()>(&TaskScheduler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskScheduler::*)()>(&TaskScheduler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskScheduler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: UnobservedTaskExceptionEventArgs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnobservedTaskExceptionEventArgs::*)(System::AggregateException*)>(&UnobservedTaskExceptionEventArgs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnobservedTaskExceptionEventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AggregateException*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnobservedTaskExceptionEventArgs::*)(System::AggregateException*)>(&UnobservedTaskExceptionEventArgs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnobservedTaskExceptionEventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AggregateException*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerException
#include "System/Threading/Tasks/TaskSchedulerException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TaskSchedulerException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)(System::Exception*)>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)(System::Exception*)>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: TaskSchedulerException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)()>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)()>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskSchedulerException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskSchedulerException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&TaskSchedulerException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskSchedulerException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
