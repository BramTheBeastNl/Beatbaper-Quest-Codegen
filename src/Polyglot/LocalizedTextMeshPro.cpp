// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Polyglot.LocalizedTextMeshPro
#include "Polyglot/LocalizedTextMeshPro.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Polyglot.LocalizedTextMeshPro.SetText
void Polyglot::LocalizedTextMeshPro::SetText(TMPro::TextMeshPro* text, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext("SetText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "SetText", {}, ::il2cpp_utils::ExtractTypes(text, value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, value);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.UpdateAlignment
void Polyglot::LocalizedTextMeshPro::UpdateAlignment(TMPro::TextMeshPro* text, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext("UpdateAlignment");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "UpdateAlignment", {}, ::il2cpp_utils::ExtractTypes(text, direction)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsOppositeDirection
bool Polyglot::LocalizedTextMeshPro::IsOppositeDirection(TMPro::TextAlignmentOptions alignment, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext("IsOppositeDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsOppositeDirection", {}, ::il2cpp_utils::ExtractTypes(alignment, direction)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsAlignmentRight
bool Polyglot::LocalizedTextMeshPro::IsAlignmentRight(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext("IsAlignmentRight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsAlignmentRight", {}, ::il2cpp_utils::ExtractTypes(alignment)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsAlignmentLeft
bool Polyglot::LocalizedTextMeshPro::IsAlignmentLeft(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext("IsAlignmentLeft");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsAlignmentLeft", {}, ::il2cpp_utils::ExtractTypes(alignment)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro..ctor
Polyglot::LocalizedTextMeshPro* Polyglot::LocalizedTextMeshPro::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Polyglot").WithContext("LocalizedTextMeshPro").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<LocalizedTextMeshPro*>());
}
