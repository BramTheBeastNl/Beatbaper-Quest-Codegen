// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0.<GetBeatmapData>b__0
bool GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$GetBeatmapData$b__0(GlobalNamespace::IDifficultyBeatmapSet* bds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::<GetBeatmapData>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bds)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bds);
}
// Autogenerated method: MockBeatmapLoader/<>c__DisplayClass2_0.<GetBeatmapData>b__2
bool GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::$GetBeatmapData$b__2(GlobalNamespace::IDifficultyBeatmap* dbm) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c__DisplayClass2_0::<GetBeatmapData>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dbm)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, dbm);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<>c
#include "GlobalNamespace/MockBeatmapLoader_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MockBeatmapLoader/<>c <>9
GlobalNamespace::MockBeatmapLoader::$$c* GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MockBeatmapLoader::$$c*>("", "MockBeatmapLoader/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MockBeatmapLoader/<>c <>9
void GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9(GlobalNamespace::MockBeatmapLoader::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapLoader/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IDifficultyBeatmapSet,System.Collections.Generic.IEnumerable`1<IDifficultyBeatmap>> <>9__2_1
System::Func_2<GlobalNamespace::IDifficultyBeatmapSet*, System::Collections::Generic::IEnumerable_1<GlobalNamespace::IDifficultyBeatmap*>*>* GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IDifficultyBeatmapSet*, System::Collections::Generic::IEnumerable_1<GlobalNamespace::IDifficultyBeatmap*>*>*>("", "MockBeatmapLoader/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IDifficultyBeatmapSet,System.Collections.Generic.IEnumerable`1<IDifficultyBeatmap>> <>9__2_1
void GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9__2_1(System::Func_2<GlobalNamespace::IDifficultyBeatmapSet*, System::Collections::Generic::IEnumerable_1<GlobalNamespace::IDifficultyBeatmap*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockBeatmapLoader/<>c", "<>9__2_1", value)));
}
// Autogenerated method: MockBeatmapLoader/<>c..cctor
void GlobalNamespace::MockBeatmapLoader::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockBeatmapLoader/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MockBeatmapLoader/<>c.<GetBeatmapData>b__2_1
System::Collections::Generic::IEnumerable_1<GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::MockBeatmapLoader::$$c::$GetBeatmapData$b__2_1(GlobalNamespace::IDifficultyBeatmapSet* bds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$$c::<GetBeatmapData>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBeatmapData>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bds)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method, bds);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapLoader/<GetBeatmapData>d__2
#include "GlobalNamespace/MockBeatmapLoader_-GetBeatmapData-d__2.hpp"
// Including type: MockBeatmapData
#include "GlobalNamespace/MockBeatmapData.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: MockBeatmapLoader/<>c__DisplayClass2_0
#include "GlobalNamespace/MockBeatmapLoader_--c__DisplayClass2_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapLoader/<GetBeatmapData>d__2.MoveNext
void GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MockBeatmapLoader/<GetBeatmapData>d__2.SetStateMachine
void GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapLoader::$GetBeatmapData$d__2::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockBeatmapProvider
#include "GlobalNamespace/MockBeatmapProvider.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapProvider.VerifyBeatmapForConfiguration
bool GlobalNamespace::MockBeatmapProvider::VerifyBeatmapForConfiguration(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapProvider::VerifyBeatmapForConfiguration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyBeatmapForConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, beatmapId, configuration);
}
// Autogenerated method: MockBeatmapProvider.SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks
GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::MockBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks(int playerCount, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* suggestedBeatmaps, GlobalNamespace::GameplayServerConfiguration configuration, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::SongPackMask>* ownedSongPacks) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerCount), ::il2cpp_utils::ExtractType(suggestedBeatmaps), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(ownedSongPacks)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(this, ___internal__method, playerCount, suggestedBeatmaps, configuration, ownedSongPacks);
}
// Autogenerated method: MockBeatmapProvider.Dispose
void GlobalNamespace::MockBeatmapProvider::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapProvider::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMasterServerAvailabilityModel
#include "GlobalNamespace/MockMasterServerAvailabilityModel.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMasterServerAvailabilityModel.GetAvailabilityAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GlobalNamespace::MockMasterServerAvailabilityModel::GetAvailabilityAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMasterServerAvailabilityModel::GetAvailabilityAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAvailabilityAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMasterServerQuickPlaySetupModel
#include "GlobalNamespace/MockMasterServerQuickPlaySetupModel.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMasterServerQuickPlaySetupModel.GetQuickPlaySetupAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* GlobalNamespace::MockMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuickPlaySetupAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockMultiplayerSessionManager
#include "GlobalNamespace/MockMultiplayerSessionManager.hpp"
// Including type: MockMultiplayerSessionManager/<>c__DisplayClass76_0
#include "GlobalNamespace/MockMultiplayerSessionManager_--c__DisplayClass76_0.hpp"
// Including type: MockMultiplayerSessionManager/<>c
#include "GlobalNamespace/MockMultiplayerSessionManager_--c.hpp"
// Including type: MockMultiplayerSessionManager/<PerformAtSyncTime>d__90
#include "GlobalNamespace/MockMultiplayerSessionManager_-PerformAtSyncTime-d__90.hpp"
// Including type: MockMultiplayerSessionManager/<SendToOthers>d__94
#include "GlobalNamespace/MockMultiplayerSessionManager_-SendToOthers-d__94.hpp"
// Including type: MockPlayersModel
#include "GlobalNamespace/MockPlayersModel.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: SmallBufferPool
#include "GlobalNamespace/SmallBufferPool.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: MockedPlayerMultiplayerSessionManager
#include "GlobalNamespace/MockedPlayerMultiplayerSessionManager.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMultiplayerSessionManager.get_isPartyCreated
bool GlobalNamespace::MockMultiplayerSessionManager::get_isPartyCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isPartyCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPartyCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.set_isPartyCreated
void GlobalNamespace::MockMultiplayerSessionManager::set_isPartyCreated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::set_isPartyCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPartyCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.get_disposed
bool GlobalNamespace::MockMultiplayerSessionManager::get_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_disposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockMultiplayerSessionManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_connectionOwner
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockMultiplayerSessionManager::get_connectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_connectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isConnectionOwner
bool GlobalNamespace::MockMultiplayerSessionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_syncTime
float GlobalNamespace::MockMultiplayerSessionManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_syncTimeDelay
float GlobalNamespace::MockMultiplayerSessionManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_syncTimeDelay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.set_syncTimeDelay
void GlobalNamespace::MockMultiplayerSessionManager::set_syncTimeDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::set_syncTimeDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isSyncTimeInitialized
bool GlobalNamespace::MockMultiplayerSessionManager::get_isSyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isSyncTimeInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSyncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_maxPlayerCount
int GlobalNamespace::MockMultiplayerSessionManager::get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_maxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_connectedPlayerCount
int GlobalNamespace::MockMultiplayerSessionManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_connectedPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isConnectingOrConnected
bool GlobalNamespace::MockMultiplayerSessionManager::get_isConnectingOrConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isConnectingOrConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectingOrConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isConnected
bool GlobalNamespace::MockMultiplayerSessionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isConnecting
bool GlobalNamespace::MockMultiplayerSessionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isDisconnecting
bool GlobalNamespace::MockMultiplayerSessionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_isSpectating
bool GlobalNamespace::MockMultiplayerSessionManager::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.get_connectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MockMultiplayerSessionManager::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.add_playerConnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_playerConnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_connectionFailedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_connectionFailedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_playerDisconnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_playerDisconnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_playerAvatarChangedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_playerAvatarChangedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_playerStateChangedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_playerStateChangedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_disconnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_disconnectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.add_connectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::add_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.remove_connectedEvent
void GlobalNamespace::MockMultiplayerSessionManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::remove_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockMultiplayerSessionManager.Init
void GlobalNamespace::MockMultiplayerSessionManager::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.Awake
void GlobalNamespace::MockMultiplayerSessionManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.Start
void GlobalNamespace::MockMultiplayerSessionManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.OnDestroy
void GlobalNamespace::MockMultiplayerSessionManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.SetMaxPlayerCount
void GlobalNamespace::MockMultiplayerSessionManager::SetMaxPlayerCount(int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::SetMaxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxPlayerCount);
}
// Autogenerated method: MockMultiplayerSessionManager.StartSession
void GlobalNamespace::MockMultiplayerSessionManager::StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::StartSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayerManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayerManager);
}
// Autogenerated method: MockMultiplayerSessionManager.EndSession
void GlobalNamespace::MockMultiplayerSessionManager::EndSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::EndSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.GetMockPlayer
GlobalNamespace::MockPlayer* GlobalNamespace::MockMultiplayerSessionManager::GetMockPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::GetMockPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMockPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MockMultiplayerSessionManager.GetPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockMultiplayerSessionManager::GetPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::GetPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MockMultiplayerSessionManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockMultiplayerSessionManager::GetConnectedPlayer(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::GetConnectedPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, index);
}
// Autogenerated method: MockMultiplayerSessionManager.GetConnectedPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockMultiplayerSessionManager::GetConnectedPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::GetConnectedPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MockMultiplayerSessionManager.Disconnect
void GlobalNamespace::MockMultiplayerSessionManager::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.RegisterSerializer
void GlobalNamespace::MockMultiplayerSessionManager::RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::RegisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MockMultiplayerSessionManager.UnregisterSerializer
void GlobalNamespace::MockMultiplayerSessionManager::UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::UnregisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MockMultiplayerSessionManager.ReportPlayerStateChanged
void GlobalNamespace::MockMultiplayerSessionManager::ReportPlayerStateChanged(GlobalNamespace::MockPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::ReportPlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportPlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MockMultiplayerSessionManager.ConnectPlayer
void GlobalNamespace::MockMultiplayerSessionManager::ConnectPlayer(GlobalNamespace::MockPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::ConnectPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MockMultiplayerSessionManager.DisconnectPlayer
void GlobalNamespace::MockMultiplayerSessionManager::DisconnectPlayer(GlobalNamespace::MockPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::DisconnectPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MockMultiplayerSessionManager.HandleJoinMockServer
void GlobalNamespace::MockMultiplayerSessionManager::HandleJoinMockServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::HandleJoinMockServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinMockServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.CreateParty
void GlobalNamespace::MockMultiplayerSessionManager::CreateParty(GlobalNamespace::GameplayServerConfiguration configuration, int maxPartySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::CreateParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(maxPartySize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configuration, maxPartySize);
}
// Autogenerated method: MockMultiplayerSessionManager.DestroyParty
void GlobalNamespace::MockMultiplayerSessionManager::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::DestroyParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.PerformAtSyncTime
void GlobalNamespace::MockMultiplayerSessionManager::PerformAtSyncTime(float syncTime, System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::PerformAtSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformAtSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, syncTime, action);
}
// Autogenerated method: MockMultiplayerSessionManager.SetLocalPlayerState
void GlobalNamespace::MockMultiplayerSessionManager::SetLocalPlayerState(::Il2CppString* state, bool hasState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::SetLocalPlayerState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(hasState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, hasState);
}
// Autogenerated method: MockMultiplayerSessionManager.LocalPlayerHasState
bool GlobalNamespace::MockMultiplayerSessionManager::LocalPlayerHasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::LocalPlayerHasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPlayerHasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: MockMultiplayerSessionManager.GetMultiplayerSessionManager
GlobalNamespace::MockedPlayerMultiplayerSessionManager* GlobalNamespace::MockMultiplayerSessionManager::GetMultiplayerSessionManager(GlobalNamespace::MockPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::GetMultiplayerSessionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplayerSessionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockedPlayerMultiplayerSessionManager*, false>(this, ___internal__method, player);
}
// Autogenerated method: MockMultiplayerSessionManager.SendToOthers
void GlobalNamespace::MockMultiplayerSessionManager::SendToOthers(GlobalNamespace::MockPlayer* player, LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::SendToOthers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToOthers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, writer);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_0
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_1
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_1(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_2
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_2(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_3
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_3(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_4
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_4(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_5
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_5(GlobalNamespace::DisconnectedReason dr) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dr);
}
// Autogenerated method: MockMultiplayerSessionManager.<Start>b__68_6
void GlobalNamespace::MockMultiplayerSessionManager::$Start$b__68_6(GlobalNamespace::ConnectionFailedReason dr) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::<Start>b__68_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__68_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dr);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockMultiplayerSessionManager/<>c__DisplayClass76_0
#include "GlobalNamespace/MockMultiplayerSessionManager_--c__DisplayClass76_0.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMultiplayerSessionManager/<>c__DisplayClass76_0.<GetConnectedPlayerByUserId>b__1
bool GlobalNamespace::MockMultiplayerSessionManager::$$c__DisplayClass76_0::$GetConnectedPlayerByUserId$b__1(GlobalNamespace::MockPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c__DisplayClass76_0::<GetConnectedPlayerByUserId>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetConnectedPlayerByUserId>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMultiplayerSessionManager/<>c
#include "GlobalNamespace/MockMultiplayerSessionManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MockMultiplayerSessionManager/<>c <>9
GlobalNamespace::MockMultiplayerSessionManager::$$c* GlobalNamespace::MockMultiplayerSessionManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MockMultiplayerSessionManager::$$c*>("", "MockMultiplayerSessionManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MockMultiplayerSessionManager/<>c <>9
void GlobalNamespace::MockMultiplayerSessionManager::$$c::_set_$$9(GlobalNamespace::MockMultiplayerSessionManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockMultiplayerSessionManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MockPlayer,System.Boolean> <>9__76_0
System::Func_2<GlobalNamespace::MockPlayer*, bool>* GlobalNamespace::MockMultiplayerSessionManager::$$c::_get_$$9__76_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::_get_$$9__76_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MockPlayer*, bool>*>("", "MockMultiplayerSessionManager/<>c", "<>9__76_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MockPlayer,System.Boolean> <>9__76_0
void GlobalNamespace::MockMultiplayerSessionManager::$$c::_set_$$9__76_0(System::Func_2<GlobalNamespace::MockPlayer*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::_set_$$9__76_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MockMultiplayerSessionManager/<>c", "<>9__76_0", value)));
}
// Autogenerated method: MockMultiplayerSessionManager/<>c..cctor
void GlobalNamespace::MockMultiplayerSessionManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MockMultiplayerSessionManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager/<>c.<GetConnectedPlayerByUserId>b__76_0
bool GlobalNamespace::MockMultiplayerSessionManager::$$c::$GetConnectedPlayerByUserId$b__76_0(GlobalNamespace::MockPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$$c::<GetConnectedPlayerByUserId>b__76_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetConnectedPlayerByUserId>b__76_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMultiplayerSessionManager/<PerformAtSyncTime>d__90
#include "GlobalNamespace/MockMultiplayerSessionManager_-PerformAtSyncTime-d__90.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMultiplayerSessionManager/<PerformAtSyncTime>d__90.MoveNext
void GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__90::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__90::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager/<PerformAtSyncTime>d__90.SetStateMachine
void GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__90::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__90::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockMultiplayerSessionManager/<SendToOthers>d__94
#include "GlobalNamespace/MockMultiplayerSessionManager_-SendToOthers-d__94.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMultiplayerSessionManager/<SendToOthers>d__94.MoveNext
void GlobalNamespace::MockMultiplayerSessionManager::$SendToOthers$d__94::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$SendToOthers$d__94::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MockMultiplayerSessionManager/<SendToOthers>d__94.SetStateMachine
void GlobalNamespace::MockMultiplayerSessionManager::$SendToOthers$d__94::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::$SendToOthers$d__94::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockNetworkPlayerModel
#include "GlobalNamespace/MockNetworkPlayerModel.hpp"
// Including type: MockPlayersModel
#include "GlobalNamespace/MockPlayersModel.hpp"
// Including type: MockMultiplayerSessionManager
#include "GlobalNamespace/MockMultiplayerSessionManager.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockNetworkPlayerModel.get_discoveryPolicy
GlobalNamespace::DiscoveryPolicy GlobalNamespace::MockNetworkPlayerModel::get_discoveryPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_discoveryPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiscoveryPolicy, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_discoveryEnabled
bool GlobalNamespace::MockNetworkPlayerModel::get_discoveryEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.set_discoveryEnabled
void GlobalNamespace::MockNetworkPlayerModel::set_discoveryEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::set_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::MockNetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_maxPartySize
int GlobalNamespace::MockNetworkPlayerModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.set_maxPartySize
void GlobalNamespace::MockNetworkPlayerModel::set_maxPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::set_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::MockNetworkPlayerModel::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_configuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.set_configuration
void GlobalNamespace::MockNetworkPlayerModel::set_configuration(GlobalNamespace::GameplayServerConfiguration value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::set_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.get_currentPartySize
int GlobalNamespace::MockNetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_partyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::MockNetworkPlayerModel::get_partyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_partyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_otherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::MockNetworkPlayerModel::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_otherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_connectedPlayerManager
GlobalNamespace::ConnectedPlayerManager* GlobalNamespace::MockNetworkPlayerModel::get_connectedPlayerManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_connectedPlayerManager");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::MockNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_enableLocalNetwork
bool GlobalNamespace::MockNetworkPlayerModel::get_enableLocalNetwork() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.set_enableLocalNetwork
void GlobalNamespace::MockNetworkPlayerModel::set_enableLocalNetwork(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::set_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.get_publicServers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::MockNetworkPlayerModel::get_publicServers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_publicServers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_localNetworkPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::MockNetworkPlayerModel::get_localNetworkPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_localNetworkPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localNetworkPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_serverFilter
GlobalNamespace::GameplayServerFilter GlobalNamespace::MockNetworkPlayerModel::get_serverFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_serverFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.set_serverFilter
void GlobalNamespace::MockNetworkPlayerModel::set_serverFilter(GlobalNamespace::GameplayServerFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::set_serverFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_serverFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.get_userId
::Il2CppString* GlobalNamespace::MockNetworkPlayerModel::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_userName
::Il2CppString* GlobalNamespace::MockNetworkPlayerModel::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_secret
::Il2CppString* GlobalNamespace::MockNetworkPlayerModel::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_secret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.get_code
::Il2CppString* GlobalNamespace::MockNetworkPlayerModel::get_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::get_code");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.add_connectedPlayerManagerCreatedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_connectedPlayerManagerCreatedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_partyRefreshingEvent
void GlobalNamespace::MockNetworkPlayerModel::add_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_partyRefreshingEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_joinRequestedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_joinRequestedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::MockNetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::MockNetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockNetworkPlayerModel.DestroyParty
void GlobalNamespace::MockNetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.Disconnect
void GlobalNamespace::MockNetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockNetworkPlayerModel.Refresh
void GlobalNamespace::MockNetworkPlayerModel::Refresh(bool clearCurrentList) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clearCurrentList)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clearCurrentList);
}
// Autogenerated method: MockNetworkPlayerModel.SetServerFilter
void GlobalNamespace::MockNetworkPlayerModel::SetServerFilter(GlobalNamespace::GameplayServerFilter filter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::SetServerFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, filter);
}
// Autogenerated method: MockNetworkPlayerModel.JoinMatchmaking
void GlobalNamespace::MockNetworkPlayerModel::JoinMatchmaking(GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::JoinMatchmaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configuration, discoveryPolicy, secret, code);
}
// Autogenerated method: MockNetworkPlayerModel.ConnectToServerWithCode
void GlobalNamespace::MockNetworkPlayerModel::ConnectToServerWithCode(::Il2CppString* serverCode, ::Il2CppString* serverPassword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::ConnectToServerWithCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCode), ::il2cpp_utils::ExtractType(serverPassword)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCode, serverPassword);
}
// Autogenerated method: MockNetworkPlayerModel.ConnectToServerWithSecret
void GlobalNamespace::MockNetworkPlayerModel::ConnectToServerWithSecret(::Il2CppString* serverSecret) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::ConnectToServerWithSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverSecret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverSecret);
}
// Autogenerated method: MockNetworkPlayerModel.ResetMasterServerReachability
void GlobalNamespace::MockNetworkPlayerModel::ResetMasterServerReachability() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockNetworkPlayerModel::ResetMasterServerReachability");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetMasterServerReachability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
// Including type: MockPlayerFiniteStateMachine
#include "GlobalNamespace/MockPlayerFiniteStateMachine.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayer.get_isReady
bool GlobalNamespace::MockPlayer::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isReady
void GlobalNamespace::MockPlayer::set_isReady(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isMe
bool GlobalNamespace::MockPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_userId
::Il2CppString* GlobalNamespace::MockPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_userName
::Il2CppString* GlobalNamespace::MockPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_sortIndex
int GlobalNamespace::MockPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_autoConnect
bool GlobalNamespace::MockPlayer::get_autoConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_autoConnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoConnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_inactiveByDefault
bool GlobalNamespace::MockPlayer::get_inactiveByDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_inactiveByDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inactiveByDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_isConnected
bool GlobalNamespace::MockPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isConnected
void GlobalNamespace::MockPlayer::set_isConnected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::MockPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_multiplayerAvatarData
void GlobalNamespace::MockPlayer::set_multiplayerAvatarData(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_multiplayerAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isConnectionOwner
bool GlobalNamespace::MockPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isConnectionOwner
void GlobalNamespace::MockPlayer::set_isConnectionOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::MockPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_offsetSyncTime
float GlobalNamespace::MockPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_currentLatency
float GlobalNamespace::MockPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_isKicked
bool GlobalNamespace::MockPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isKicked
void GlobalNamespace::MockPlayer::set_isKicked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isKicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_currentPartySize
int GlobalNamespace::MockPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_currentPartySize
void GlobalNamespace::MockPlayer::set_currentPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_currentPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_maxPartySize
int GlobalNamespace::MockPlayer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_maxPartySize
void GlobalNamespace::MockPlayer::set_maxPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::MockPlayer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_difficulties
void GlobalNamespace::MockPlayer::set_difficulties(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_difficulties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::MockPlayer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_modifiers
void GlobalNamespace::MockPlayer::set_modifiers(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_modifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::MockPlayer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_songPacks
void GlobalNamespace::MockPlayer::set_songPacks(GlobalNamespace::SongPackMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_songPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isMyPartyOwner
bool GlobalNamespace::MockPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isMyPartyOwner
void GlobalNamespace::MockPlayer::set_isMyPartyOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isMyPartyOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isOpenParty
bool GlobalNamespace::MockPlayer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isOpenParty
void GlobalNamespace::MockPlayer::set_isOpenParty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isOpenParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isPlayer
bool GlobalNamespace::MockPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isPlayer
void GlobalNamespace::MockPlayer::set_isPlayer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isDedicatedServer
bool GlobalNamespace::MockPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isDedicatedServer
void GlobalNamespace::MockPlayer::set_isDedicatedServer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isDedicatedServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isSpectating
bool GlobalNamespace::MockPlayer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isSpectating
void GlobalNamespace::MockPlayer::set_isSpectating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isSpectating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canJoin
bool GlobalNamespace::MockPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.get_requiresPassword
bool GlobalNamespace::MockPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_requiresPassword
void GlobalNamespace::MockPlayer::set_requiresPassword(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_requiresPassword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isWaitingOnJoin
bool GlobalNamespace::MockPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isWaitingOnJoin
void GlobalNamespace::MockPlayer::set_isWaitingOnJoin(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isWaitingOnJoin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canInvite
bool GlobalNamespace::MockPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canInvite
void GlobalNamespace::MockPlayer::set_canInvite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_canInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isWaitingOnInvite
bool GlobalNamespace::MockPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isWaitingOnInvite
void GlobalNamespace::MockPlayer::set_isWaitingOnInvite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isWaitingOnInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canKick
bool GlobalNamespace::MockPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canKick
void GlobalNamespace::MockPlayer::set_canKick(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_canKick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canLeave
bool GlobalNamespace::MockPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canLeave
void GlobalNamespace::MockPlayer::set_canLeave(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_canLeave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canBlock
bool GlobalNamespace::MockPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canBlock
void GlobalNamespace::MockPlayer::set_canBlock(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_canBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_canUnblock
bool GlobalNamespace::MockPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_canUnblock
void GlobalNamespace::MockPlayer::set_canUnblock(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_canUnblock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_wantsToPlayNextLevel
bool GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_wantsToPlayNextLevel
void GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_wasActiveAtLevelStart
bool GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_wasActiveAtLevelStart
void GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_isActive
bool GlobalNamespace::MockPlayer::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_isActive
void GlobalNamespace::MockPlayer::set_isActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.get_finishedLevel
bool GlobalNamespace::MockPlayer::get_finishedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::get_finishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_finishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.set_finishedLevel
void GlobalNamespace::MockPlayer::set_finishedLevel(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::set_finishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_finishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayer.SetState
void GlobalNamespace::MockPlayer::SetState(::Il2CppString* state, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, value);
}
// Autogenerated method: MockPlayer.HasState
bool GlobalNamespace::MockPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: MockPlayer.Connect
void GlobalNamespace::MockPlayer::Connect(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::AvatarPartsModel* avatarPartsModel, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Connect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerSessionManager), ::il2cpp_utils::ExtractType(avatarPartsModel), ::il2cpp_utils::ExtractType(beatmapLevelsModel), ::il2cpp_utils::ExtractType(nodePoseSyncStateManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerSessionManager, avatarPartsModel, beatmapLevelsModel, nodePoseSyncStateManager);
}
// Autogenerated method: MockPlayer.Disconnect
void GlobalNamespace::MockPlayer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Unblock
void GlobalNamespace::MockPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SendJoinResponse
void GlobalNamespace::MockPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: MockPlayer.SendInviteResponse
void GlobalNamespace::MockPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: MockPlayer.Block
void GlobalNamespace::MockPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Leave
void GlobalNamespace::MockPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Kick
void GlobalNamespace::MockPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Invite
void GlobalNamespace::MockPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SimulateFail
void GlobalNamespace::MockPlayer::SimulateFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::SimulateFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SimulateFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayer.SimulateGiveUp
void GlobalNamespace::MockPlayer::SimulateGiveUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::SimulateGiveUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SimulateGiveUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayerGamePoseGeneratorMirror
#include "GlobalNamespace/MockPlayerGamePoseGeneratorMirror.hpp"
// Including type: MockPlayerGamePoseGeneratorMirror/<SendPoses>d__5
#include "GlobalNamespace/MockPlayerGamePoseGeneratorMirror_-SendPoses-d__5.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: StandardScoreSyncStateNetSerializable
#include "GlobalNamespace/StandardScoreSyncStateNetSerializable.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: MockBeatmapData
#include "GlobalNamespace/MockBeatmapData.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.FindPlayerToMirror
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::FindPlayerToMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::FindPlayerToMirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindPlayerToMirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.HandleNoteWasMissed
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleNoteWasMissed(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteMissInfo);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.HandleNoteWasCut
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleNoteWasCut(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteCutInfo);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.HandleScoreSyncStateUpdate
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleScoreSyncStateUpdate(GlobalNamespace::StandardScoreSyncStateNetSerializable* nodePose, GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleScoreSyncStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreSyncStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodePose), ::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nodePose, player);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.HandleLevelFinished
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleLevelFinished(::Il2CppString* userId, GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::HandleLevelFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, results);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.Dispose
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror.SendPoses
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::SendPoses(float introStartTime, GlobalNamespace::MockBeatmapData* beatmapData, GlobalNamespace::GameplayModifiers* gameplayModifiers, System::Threading::CancellationToken cancellationToken, System::Action* onSongFinished) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::SendPoses");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introStartTime), ::il2cpp_utils::ExtractType(beatmapData), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(onSongFinished)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, introStartTime, beatmapData, gameplayModifiers, cancellationToken, onSongFinished);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayerGamePoseGeneratorMirror/<SendPoses>d__5
#include "GlobalNamespace/MockPlayerGamePoseGeneratorMirror_-SendPoses-d__5.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerGamePoseGeneratorMirror/<SendPoses>d__5.MoveNext
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::$SendPoses$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::$SendPoses$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MockPlayerGamePoseGeneratorMirror/<SendPoses>d__5.SetStateMachine
void GlobalNamespace::MockPlayerGamePoseGeneratorMirror::$SendPoses$d__5::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorMirror::$SendPoses$d__5::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayerLobbyPoseGeneratorMirror
#include "GlobalNamespace/MockPlayerLobbyPoseGeneratorMirror.hpp"
// Including type: MockPlayerLobbyPoseGeneratorMirror/<SendPoses>d__2
#include "GlobalNamespace/MockPlayerLobbyPoseGeneratorMirror_-SendPoses-d__2.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerLobbyPoseGeneratorMirror.SendPoses
void GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::SendPoses(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::SendPoses");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayerLobbyPoseGeneratorMirror/<SendPoses>d__2
#include "GlobalNamespace/MockPlayerLobbyPoseGeneratorMirror_-SendPoses-d__2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerLobbyPoseGeneratorMirror/<SendPoses>d__2.MoveNext
void GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::$SendPoses$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::$SendPoses$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MockPlayerLobbyPoseGeneratorMirror/<SendPoses>d__2.SetStateMachine
void GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::$SendPoses$d__2::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::$SendPoses$d__2::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayerLobbyPoseGeneratorRecording
#include "GlobalNamespace/MockPlayerLobbyPoseGeneratorRecording.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerLobbyPoseGeneratorRecording.SendPoses
void GlobalNamespace::MockPlayerLobbyPoseGeneratorRecording::SendPoses(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerLobbyPoseGeneratorRecording::SendPoses");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayerMovementType
#include "GlobalNamespace/MockPlayerMovementType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MockPlayerMovementType AI
GlobalNamespace::MockPlayerMovementType GlobalNamespace::MockPlayerMovementType::_get_AI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_get_AI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MockPlayerMovementType>("", "MockPlayerMovementType", "AI"));
}
// Autogenerated static field setter
// Set static field: static public MockPlayerMovementType AI
void GlobalNamespace::MockPlayerMovementType::_set_AI(GlobalNamespace::MockPlayerMovementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_set_AI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MockPlayerMovementType", "AI", value));
}
// Autogenerated static field getter
// Get static field: static public MockPlayerMovementType MirrorPlayer
GlobalNamespace::MockPlayerMovementType GlobalNamespace::MockPlayerMovementType::_get_MirrorPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_get_MirrorPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MockPlayerMovementType>("", "MockPlayerMovementType", "MirrorPlayer"));
}
// Autogenerated static field setter
// Set static field: static public MockPlayerMovementType MirrorPlayer
void GlobalNamespace::MockPlayerMovementType::_set_MirrorPlayer(GlobalNamespace::MockPlayerMovementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_set_MirrorPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MockPlayerMovementType", "MirrorPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public MockPlayerMovementType Recording
GlobalNamespace::MockPlayerMovementType GlobalNamespace::MockPlayerMovementType::_get_Recording() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_get_Recording");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MockPlayerMovementType>("", "MockPlayerMovementType", "Recording"));
}
// Autogenerated static field setter
// Set static field: static public MockPlayerMovementType Recording
void GlobalNamespace::MockPlayerMovementType::_set_Recording(GlobalNamespace::MockPlayerMovementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerMovementType::_set_Recording");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MockPlayerMovementType", "Recording", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayerSettings.get_userName
::Il2CppString* GlobalNamespace::MockPlayerSettings::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_userName
void GlobalNamespace::MockPlayerSettings::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_userId
::Il2CppString* GlobalNamespace::MockPlayerSettings::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_userId
void GlobalNamespace::MockPlayerSettings::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_sortIndex
int GlobalNamespace::MockPlayerSettings::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_sortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_sortIndex
void GlobalNamespace::MockPlayerSettings::set_sortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_sortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_latency
float GlobalNamespace::MockPlayerSettings::get_latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_latency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_latency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_latency
void GlobalNamespace::MockPlayerSettings::set_latency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_latency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_latency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_autoConnect
bool GlobalNamespace::MockPlayerSettings::get_autoConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_autoConnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoConnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_autoConnect
void GlobalNamespace::MockPlayerSettings::set_autoConnect(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_autoConnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_autoConnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_inactiveByDefault
bool GlobalNamespace::MockPlayerSettings::get_inactiveByDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_inactiveByDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inactiveByDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_inactiveByDefault
void GlobalNamespace::MockPlayerSettings::set_inactiveByDefault(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_inactiveByDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inactiveByDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_movementType
GlobalNamespace::MockPlayerMovementType GlobalNamespace::MockPlayerSettings::get_movementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_movementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_movementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockPlayerMovementType, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_movementType
void GlobalNamespace::MockPlayerSettings::set_movementType(GlobalNamespace::MockPlayerMovementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_movementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_movementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_recodingFile
::Il2CppString* GlobalNamespace::MockPlayerSettings::get_recodingFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_recodingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recodingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_recodingFile
void GlobalNamespace::MockPlayerSettings::set_recodingFile(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_recodingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recodingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_aiCubeHitChance
float GlobalNamespace::MockPlayerSettings::get_aiCubeHitChance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_aiCubeHitChance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_aiCubeHitChance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_aiCubeHitChance
void GlobalNamespace::MockPlayerSettings::set_aiCubeHitChance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_aiCubeHitChance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_aiCubeHitChance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_leftHanded
bool GlobalNamespace::MockPlayerSettings::get_leftHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_leftHanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_leftHanded
void GlobalNamespace::MockPlayerSettings::set_leftHanded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_leftHanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_leftHanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_saberAColor
UnityEngine::Color GlobalNamespace::MockPlayerSettings::get_saberAColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_saberAColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberAColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_saberAColor
void GlobalNamespace::MockPlayerSettings::set_saberAColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_saberAColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberAColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_saberBColor
UnityEngine::Color GlobalNamespace::MockPlayerSettings::get_saberBColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_saberBColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberBColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_saberBColor
void GlobalNamespace::MockPlayerSettings::set_saberBColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_saberBColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberBColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayerSettings.get_obstaclesColor
UnityEngine::Color GlobalNamespace::MockPlayerSettings::get_obstaclesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::get_obstaclesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstaclesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayerSettings.set_obstaclesColor
void GlobalNamespace::MockPlayerSettings::set_obstaclesColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::set_obstaclesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_obstaclesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPlayersModel
#include "GlobalNamespace/MockPlayersModel.hpp"
// Including type: MockPlayersModel/<get_quickplayServers>d__13
#include "GlobalNamespace/MockPlayersModel_-get_quickplayServers-d__13.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: MockServer
#include "GlobalNamespace/MockServer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayersModel.get_localPlayer
GlobalNamespace::MockPlayer* GlobalNamespace::MockPlayersModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel.set_localPlayer
void GlobalNamespace::MockPlayersModel::set_localPlayer(GlobalNamespace::MockPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::set_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayersModel.get_quickplayServer
GlobalNamespace::MockServer* GlobalNamespace::MockPlayersModel::get_quickplayServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::get_quickplayServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_quickplayServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockServer*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel.set_quickplayServer
void GlobalNamespace::MockPlayersModel::set_quickplayServer(GlobalNamespace::MockServer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::set_quickplayServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_quickplayServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayersModel.get_otherPlayers
System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>* GlobalNamespace::MockPlayersModel::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::get_otherPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel.set_otherPlayers
void GlobalNamespace::MockPlayersModel::set_otherPlayers(System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::set_otherPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPlayersModel.get_quickplayServers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::MockServer*>* GlobalNamespace::MockPlayersModel::get_quickplayServers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::get_quickplayServers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_quickplayServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::MockServer*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayersModel/<get_quickplayServers>d__13
#include "GlobalNamespace/MockPlayersModel_-get_quickplayServers-d__13.hpp"
// Including type: MockServer
#include "GlobalNamespace/MockServer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.IDisposable.Dispose
void GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.MoveNext
bool GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.Collections.Generic.IEnumerator<MockServer>.get_Current
GlobalNamespace::MockServer* GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_Collections_Generic_IEnumerator$MockServer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.Collections.Generic.IEnumerator<MockServer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<MockServer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockServer*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.Collections.Generic.IEnumerable<MockServer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::MockServer*>* GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_Collections_Generic_IEnumerable$MockServer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.Collections.Generic.IEnumerable<MockServer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<MockServer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::MockServer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockPlayersModel/<get_quickplayServers>d__13.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayersModel::$get_quickplayServers$d__13::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockServer
#include "GlobalNamespace/MockServer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: GameplayServerFiniteStateMachine
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockServer.add_joinedEvent
void GlobalNamespace::MockServer::add_joinedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::add_joinedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockServer.remove_joinedEvent
void GlobalNamespace::MockServer::remove_joinedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::remove_joinedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockServer.SetConfiguration
void GlobalNamespace::MockServer::SetConfiguration(GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::SetConfiguration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configuration);
}
// Autogenerated method: MockServer.get_canJoin
bool GlobalNamespace::MockServer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockServer.Join
void GlobalNamespace::MockServer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockServer.Join
void GlobalNamespace::MockServer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: MockServer.Connect
void GlobalNamespace::MockServer::Connect(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::AvatarPartsModel* avatarPartsModel, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::Connect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerSessionManager), ::il2cpp_utils::ExtractType(avatarPartsModel), ::il2cpp_utils::ExtractType(beatmapLevelsModel), ::il2cpp_utils::ExtractType(nodePoseSyncStateManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerSessionManager, avatarPartsModel, beatmapLevelsModel, nodePoseSyncStateManager);
}
// Autogenerated method: MockServer.Disconnect
void GlobalNamespace::MockServer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockServer::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockedPlayerMultiplayerSessionManager
#include "GlobalNamespace/MockedPlayerMultiplayerSessionManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: MockMultiplayerSessionManager
#include "GlobalNamespace/MockMultiplayerSessionManager.hpp"
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_connectionOwner
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isConnectionOwner
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_syncTime
float GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isSyncTimeInitialized
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isSyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isSyncTimeInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSyncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_syncTimeDelay
float GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_syncTimeDelay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_maxPlayerCount
int GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_maxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_connectedPlayerCount
int GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectedPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isConnectingOrConnected
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnectingOrConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnectingOrConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectingOrConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isConnecting
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isConnected
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isDisconnecting
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_isSpectating
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.get_connectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_connectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_connectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_connectionFailedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_connectionFailedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_playerConnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_playerConnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_playerDisconnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_playerDisconnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_playerAvatarChangedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_playerAvatarChangedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_playerStateChangedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_playerStateChangedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.add_disconnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::add_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.remove_disconnectedEvent
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::remove_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.SetMaxPlayerCount
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetMaxPlayerCount(int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetMaxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxPlayerCount);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.StartSession
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::StartSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayerManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayerManager);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.EndSession
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::EndSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::EndSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.GetPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetConnectedPlayer(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetConnectedPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, index);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.GetConnectedPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetConnectedPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::GetConnectedPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.HandlePlayerStateChanged
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerStateChanged(GlobalNamespace::MockPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.HandlePlayerConnected
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerConnected(GlobalNamespace::MockPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.HandlePlayerDisconnected
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerDisconnected(GlobalNamespace::MockPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.Connect
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.Disconnect
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.ReceiveMessage
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::ReceiveMessage(GlobalNamespace::MockPlayer* player, ::Array<uint8_t>* data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::ReceiveMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, data, length);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.SetLocalPlayerState
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetLocalPlayerState(::Il2CppString* state, bool hasState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetLocalPlayerState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(hasState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, hasState);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.SetLocalPlayerAvatar
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::SetLocalPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerAvatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerAvatarData);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.LocalPlayerHasState
bool GlobalNamespace::MockedPlayerMultiplayerSessionManager::LocalPlayerHasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::LocalPlayerHasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPlayerHasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.RegisterSerializer
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::RegisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.UnregisterSerializer
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::UnregisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MockedPlayerMultiplayerSessionManager.PerformAtSyncTime
void GlobalNamespace::MockedPlayerMultiplayerSessionManager::PerformAtSyncTime(float syncTime, System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockedPlayerMultiplayerSessionManager::PerformAtSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformAtSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, syncTime, action);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerMockSettings
#include "GlobalNamespace/MultiplayerMockSettings.hpp"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerMockSettings.get_quickplayServer
GlobalNamespace::MockServerSettings* GlobalNamespace::MultiplayerMockSettings::get_quickplayServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_quickplayServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_quickplayServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockServerSettings*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_localPlayer
GlobalNamespace::MockPlayerSettings* GlobalNamespace::MultiplayerMockSettings::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockPlayerSettings*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_masterServerQuickPlaySetupData
GlobalNamespace::MasterServerQuickPlaySetupData* GlobalNamespace::MultiplayerMockSettings::get_masterServerQuickPlaySetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_masterServerQuickPlaySetupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerQuickPlaySetupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerQuickPlaySetupData*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_masterServerQuickPlaySetupData
void GlobalNamespace::MultiplayerMockSettings::set_masterServerQuickPlaySetupData(GlobalNamespace::MasterServerQuickPlaySetupData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_masterServerQuickPlaySetupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerQuickPlaySetupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.get_masterServerAvailabilityData
GlobalNamespace::MasterServerAvailabilityData* GlobalNamespace::MultiplayerMockSettings::get_masterServerAvailabilityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_masterServerAvailabilityData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerAvailabilityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerAvailabilityData*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_masterServerAvailabilityData
void GlobalNamespace::MultiplayerMockSettings::set_masterServerAvailabilityData(GlobalNamespace::MasterServerAvailabilityData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_masterServerAvailabilityData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerAvailabilityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.get_otherPlayers
System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>* GlobalNamespace::MultiplayerMockSettings::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_otherPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_isEnabled
bool GlobalNamespace::MultiplayerMockSettings::get_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_isEnabled
void GlobalNamespace::MultiplayerMockSettings::set_isEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.SharedSettings
GlobalNamespace::MultiplayerMockSettings* GlobalNamespace::MultiplayerMockSettings::SharedSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::SharedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerMockSettings", "SharedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerMockSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerActivePlayersTimeOffsetAverage
#include "GlobalNamespace/MultiplayerActivePlayersTimeOffsetAverage.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerActivePlayersTimeOffsetAverage.get_offsetSyncTime
float GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerActivePlayersTimeOffsetAverage.get_isFailed
bool GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBigAvatarAnimator
#include "GlobalNamespace/MultiplayerBigAvatarAnimator.hpp"
// Including type: HologramRays
#include "GlobalNamespace/HologramRays.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBigAvatarAnimator.OnDestroy
void GlobalNamespace::MultiplayerBigAvatarAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.InitIfNeeded
void GlobalNamespace::MultiplayerBigAvatarAnimator::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.SetPositionAndRotation
void GlobalNamespace::MultiplayerBigAvatarAnimator::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.HideInstant
void GlobalNamespace::MultiplayerBigAvatarAnimator::HideInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::HideInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.Animate
void GlobalNamespace::MultiplayerBigAvatarAnimator::Animate(bool show, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(show), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, show, duration, easeType);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_0
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_1
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_2
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBigAvatarInstaller
#include "GlobalNamespace/MultiplayerBigAvatarInstaller.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerBigAvatarInstaller.InstallBindings
void GlobalNamespace::MultiplayerBigAvatarInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerCenterResizeController
#include "GlobalNamespace/MultiplayerCenterResizeController.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerCenterResizeController.add_edgeDistanceFromCenterWasCalculatedEvent
void GlobalNamespace::MultiplayerCenterResizeController::add_edgeDistanceFromCenterWasCalculatedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::add_edgeDistanceFromCenterWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_edgeDistanceFromCenterWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.remove_edgeDistanceFromCenterWasCalculatedEvent
void GlobalNamespace::MultiplayerCenterResizeController::remove_edgeDistanceFromCenterWasCalculatedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::remove_edgeDistanceFromCenterWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_edgeDistanceFromCenterWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.get_isEdgeDistanceFromCenterCalculated
bool GlobalNamespace::MultiplayerCenterResizeController::get_isEdgeDistanceFromCenterCalculated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::get_isEdgeDistanceFromCenterCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEdgeDistanceFromCenterCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.set_isEdgeDistanceFromCenterCalculated
void GlobalNamespace::MultiplayerCenterResizeController::set_isEdgeDistanceFromCenterCalculated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::set_isEdgeDistanceFromCenterCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEdgeDistanceFromCenterCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.get_edgeDistanceFromCenter
float GlobalNamespace::MultiplayerCenterResizeController::get_edgeDistanceFromCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::get_edgeDistanceFromCenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_edgeDistanceFromCenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.set_edgeDistanceFromCenter
void GlobalNamespace::MultiplayerCenterResizeController::set_edgeDistanceFromCenter(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::set_edgeDistanceFromCenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_edgeDistanceFromCenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.Start
void GlobalNamespace::MultiplayerCenterResizeController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.OnDestroy
void GlobalNamespace::MultiplayerCenterResizeController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.HandlePlayersLayoutWasCalculated
void GlobalNamespace::MultiplayerCenterResizeController::HandlePlayersLayoutWasCalculated(GlobalNamespace::MultiplayerPlayerLayout layout, int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::HandlePlayersLayoutWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersLayoutWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(numberOfPlayers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, layout, numberOfPlayers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerCenterTextAnimator
#include "GlobalNamespace/MultiplayerCenterTextAnimator.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerCenterTextAnimator.Awake
void GlobalNamespace::MultiplayerCenterTextAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.OnDestroy
void GlobalNamespace::MultiplayerCenterTextAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateTextColor
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateTextColor(UnityEngine::Color color, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateTextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateTextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateFontSize
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateFontSize(float fontSize, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateFontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateFontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontSize), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fontSize, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimatePositionOffsetSize
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimatePositionOffsetSize(UnityEngine::Vector3 offset, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimatePositionOffsetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimatePositionOffsetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateEnabled
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateEnabled(bool isEnabled, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isEnabled), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isEnabled, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.SetText
void GlobalNamespace::MultiplayerCenterTextAnimator::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_0
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_1
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_5
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_2
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_2(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_3
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_3(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_4
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_4(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConditionalActiveByLayout
#include "GlobalNamespace/MultiplayerConditionalActiveByLayout.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerConditionalActiveByLayout.Start
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConditionalActiveByLayout.HandlePlayersLayoutWasCalculated
void GlobalNamespace::MultiplayerConditionalActiveByLayout::HandlePlayersLayoutWasCalculated(GlobalNamespace::MultiplayerPlayerLayout layout, int playersCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::HandlePlayersLayoutWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersLayoutWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(playersCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, layout, playersCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConditionalActiveByLayout/Condition
#include "GlobalNamespace/MultiplayerConditionalActiveByLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerConditionalActiveByLayout/Condition ShowIf
GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_ShowIf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_ShowIf");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition>("", "MultiplayerConditionalActiveByLayout/Condition", "ShowIf"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConditionalActiveByLayout/Condition ShowIf
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_ShowIf(GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_ShowIf");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConditionalActiveByLayout/Condition", "ShowIf", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConditionalActiveByLayout/Condition HideIf
GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_HideIf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_HideIf");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition>("", "MultiplayerConditionalActiveByLayout/Condition", "HideIf"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConditionalActiveByLayout/Condition HideIf
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_HideIf(GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_HideIf");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConditionalActiveByLayout/Condition", "HideIf", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerObservable
#include "GlobalNamespace/MultiplayerConnectedPlayerObservable.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerConnectedPlayerObservable.get_offsetSyncTime
float GlobalNamespace::MultiplayerConnectedPlayerObservable::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerObservable.get_isFailed
bool GlobalNamespace::MultiplayerConnectedPlayerObservable::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::get_isFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: MultiplayerController/<PerformSongStartSync>d__38
#include "GlobalNamespace/MultiplayerController_-PerformSongStartSync-d__38.hpp"
// Including type: MultiplayerController/<>c__DisplayClass43_0
#include "GlobalNamespace/MultiplayerController_--c__DisplayClass43_0.hpp"
// Including type: MultiplayerController/<>c
#include "GlobalNamespace/MultiplayerController_--c.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: SceneStartSyncController
#include "GlobalNamespace/SceneStartSyncController.hpp"
// Including type: SongStartSyncController
#include "GlobalNamespace/SongStartSyncController.hpp"
// Including type: MultiplayerLevelFinishedController
#include "GlobalNamespace/MultiplayerLevelFinishedController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: MultiplayerIntroAnimationController
#include "GlobalNamespace/MultiplayerIntroAnimationController.hpp"
// Including type: MultiplayerOutroAnimationController
#include "GlobalNamespace/MultiplayerOutroAnimationController.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: MultiplayerBadgesProvider
#include "GlobalNamespace/MultiplayerBadgesProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
float GlobalNamespace::MultiplayerController::_get_kSongTimeToSongStartSyncTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kSongTimeToSongStartSyncTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kSongTimeToSongStartSyncTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
void GlobalNamespace::MultiplayerController::_set_kSongTimeToSongStartSyncTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kSongTimeToSongStartSyncTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kSongTimeToSongStartSyncTimeOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinAnimationDurationPercentage
float GlobalNamespace::MultiplayerController::_get_kMinAnimationDurationPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kMinAnimationDurationPercentage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kMinAnimationDurationPercentage"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinAnimationDurationPercentage
void GlobalNamespace::MultiplayerController::_set_kMinAnimationDurationPercentage(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kMinAnimationDurationPercentage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kMinAnimationDurationPercentage", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kGetMultiplayerGameStateTimeout
float GlobalNamespace::MultiplayerController::_get_kGetMultiplayerGameStateTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kGetMultiplayerGameStateTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kGetMultiplayerGameStateTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kGetMultiplayerGameStateTimeout
void GlobalNamespace::MultiplayerController::_set_kGetMultiplayerGameStateTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kGetMultiplayerGameStateTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kGetMultiplayerGameStateTimeout", value));
}
// Autogenerated method: MultiplayerController.get_state
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerController::State, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.add_stateChangedEvent
void GlobalNamespace::MultiplayerController::add_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::add_stateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_stateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerController.remove_stateChangedEvent
void GlobalNamespace::MultiplayerController::remove_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::remove_stateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_stateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerController.Start
void GlobalNamespace::MultiplayerController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.OnDestroy
void GlobalNamespace::MultiplayerController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSetMultiplayerGameState
void GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, gameState);
}
// Autogenerated method: MultiplayerController.CreateAndBindPlayersSpecificSettingsAtGameStartModel
void GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndBindPlayersSpecificSettingsAtGameStartModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.StartSceneLoadSync
void GlobalNamespace::MultiplayerController::StartSceneLoadSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::StartSceneLoadSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSceneLoadSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.PerformSongStartSync
System::Collections::IEnumerator* GlobalNamespace::MultiplayerController::PerformSongStartSync(GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::PerformSongStartSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformSongStartSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerSyncState)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, localPlayerSyncState);
}
// Autogenerated method: MultiplayerController.HandleDidSwitchPlayerToInactive
void GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSwitchPlayerToInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidSuccess
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionGameId);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidReceiveTooLate
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidReceiveTooLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionGameId);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidFail
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncStartSuccess
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncStartSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncResume
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncStartFailed
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncStartFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.StartGameplay
void GlobalNamespace::MultiplayerController::StartGameplay(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::StartGameplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartGameplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleAllResultsCollected
void GlobalNamespace::MultiplayerController::HandleAllResultsCollected(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleAllResultsCollected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAllResultsCollected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerResults), ::il2cpp_utils::ExtractType(otherPlayerResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localPlayerResults, otherPlayerResults);
}
// Autogenerated method: MultiplayerController.EndGameplay
void GlobalNamespace::MultiplayerController::EndGameplay(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::EndGameplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndGameplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerResults), ::il2cpp_utils::ExtractType(otherPlayerResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localPlayerResults, otherPlayerResults);
}
// Autogenerated method: MultiplayerController.HandleOutroAnimationDidFinish
void GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOutroAnimationDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleRpcReturnToMenu
void GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRpcReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerController.HandleDisconnected
void GlobalNamespace::MultiplayerController::HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: MultiplayerController.ChangeState
void GlobalNamespace::MultiplayerController::ChangeState(GlobalNamespace::MultiplayerController::State newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::ChangeState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newState);
}
// Autogenerated method: MultiplayerController.GetCurrentSongTime
float GlobalNamespace::MultiplayerController::GetCurrentSongTime(float songStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::GetCurrentSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songStartSyncTime)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, songStartSyncTime);
}
// Autogenerated method: MultiplayerController.GetSongStartSyncTime
float GlobalNamespace::MultiplayerController::GetSongStartSyncTime(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::GetSongStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSongStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State CheckingLobbyState
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_CheckingLobbyState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_CheckingLobbyState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "CheckingLobbyState"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State CheckingLobbyState
void GlobalNamespace::MultiplayerController::State::_set_CheckingLobbyState(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_CheckingLobbyState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "CheckingLobbyState", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State WaitingForPlayers
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_WaitingForPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_WaitingForPlayers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "WaitingForPlayers"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State WaitingForPlayers
void GlobalNamespace::MultiplayerController::State::_set_WaitingForPlayers(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_WaitingForPlayers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "WaitingForPlayers", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State SongStartSync
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_SongStartSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_SongStartSync");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "SongStartSync"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State SongStartSync
void GlobalNamespace::MultiplayerController::State::_set_SongStartSync(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_SongStartSync");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "SongStartSync", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Intro
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Intro
void GlobalNamespace::MultiplayerController::State::_set_Intro(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Gameplay
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Gameplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Gameplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Gameplay"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Gameplay
void GlobalNamespace::MultiplayerController::State::_set_Gameplay(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Gameplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Gameplay", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Outro
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Outro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Outro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Outro"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Outro
void GlobalNamespace::MultiplayerController::State::_set_Outro(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Outro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Outro", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Finished
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Finished
void GlobalNamespace::MultiplayerController::State::_set_Finished(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Finished", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerController/<PerformSongStartSync>d__38
#include "GlobalNamespace/MultiplayerController_-PerformSongStartSync-d__38.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__38.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__38.MoveNext
bool GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__38.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__38.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__38.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__38::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/<>c__DisplayClass43_0
#include "GlobalNamespace/MultiplayerController_--c__DisplayClass43_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerController/<>c__DisplayClass43_0.<HandleSongStartSyncControllerSyncStartSuccess>b__0
void GlobalNamespace::MultiplayerController::$$c__DisplayClass43_0::$HandleSongStartSyncControllerSyncStartSuccess$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c__DisplayClass43_0::<HandleSongStartSyncControllerSyncStartSuccess>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleSongStartSyncControllerSyncStartSuccess>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/<>c
#include "GlobalNamespace/MultiplayerController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerController/<>c <>9
GlobalNamespace::MultiplayerController::$$c* GlobalNamespace::MultiplayerController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::$$c*>("", "MultiplayerController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerController/<>c <>9
void GlobalNamespace::MultiplayerController::$$c::_set_$$9(GlobalNamespace::MultiplayerController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerLevelCompletionResults,System.Boolean> <>9__48_0
System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>* GlobalNamespace::MultiplayerController::$$c::_get_$$9__48_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_get_$$9__48_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>*>("", "MultiplayerController/<>c", "<>9__48_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerLevelCompletionResults,System.Boolean> <>9__48_0
void GlobalNamespace::MultiplayerController::$$c::_set_$$9__48_0(System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_set_$$9__48_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerController/<>c", "<>9__48_0", value)));
}
// Autogenerated method: MultiplayerController/<>c..cctor
void GlobalNamespace::MultiplayerController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerController/<>c.<EndGameplay>b__48_0
bool GlobalNamespace::MultiplayerController::$$c::$EndGameplay$b__48_0(GlobalNamespace::MultiplayerLevelCompletionResults* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::<EndGameplay>b__48_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<EndGameplay>b__48_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEffectPoolsInstaller
#include "GlobalNamespace/MultiplayerEffectPoolsInstaller.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerEffectPoolsInstaller.InstallBindings
void GlobalNamespace::MultiplayerEffectPoolsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEffectPoolsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerEnvironmentResizeController
#include "GlobalNamespace/MultiplayerEnvironmentResizeController.hpp"
// Including type: MultiplayerEnvironmentResizeController/ResizeType
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeType.hpp"
// Including type: MultiplayerEnvironmentResizeController/ResizeData
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerCenterResizeController
#include "GlobalNamespace/MultiplayerCenterResizeController.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerEnvironmentResizeController.get_isResizingFinished
bool GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isResizingFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.add_resizingDidFinishEvent
void GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_resizingDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.remove_resizingDidFinishEvent
void GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_resizingDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.Start
void GlobalNamespace::MultiplayerEnvironmentResizeController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.OnDestroy
void GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.HandleEdgeDistanceFromCenterWasCalculated
void GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated(float edgeDistanceFromCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEdgeDistanceFromCenterWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edgeDistanceFromCenter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, edgeDistanceFromCenter);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.TryResize
void GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.Resize
void GlobalNamespace::MultiplayerEnvironmentResizeController::Resize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::Resize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEnvironmentResizeController/ResizeType
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType None
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType None
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_None(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType Position
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Position");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "Position"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType Position
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Position(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Position");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "Position", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType Length
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Length");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "Length"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType Length
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Length(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Length");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "Length", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerEnvironmentResizeController/ResizeData
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeData.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_resizeType
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_resizeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_resizeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resizeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_offset
float GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_offset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_lights
::Array<GlobalNamespace::TubeBloomPrePassLight*>* GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::TubeBloomPrePassLight*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_otherTransforms
::Array<UnityEngine::Transform*>* GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_otherTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_otherTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerGameplayAnimator
#include "GlobalNamespace/MultiplayerGameplayAnimator.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightsAnimator
#include "GlobalNamespace/LightsAnimator.hpp"
// Including type: MultiplayerLeadPlayerProvider
#include "GlobalNamespace/MultiplayerLeadPlayerProvider.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerGameplayAnimator.Start
void GlobalNamespace::MultiplayerGameplayAnimator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerGameplayAnimator.OnDestroy
void GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerGameplayAnimator.AnimateNewLeaderSelected
void GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected(bool isLeading) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateNewLeaderSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeading)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isLeading);
}
// Autogenerated method: MultiplayerGameplayAnimator.HandleStateChanged
void GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerGameplayAnimator.HandleNewLeaderWasSelected
void GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNewLeaderWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroAnimationController
#include "GlobalNamespace/MultiplayerIntroAnimationController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerTimelineMock
#include "GlobalNamespace/MultiplayerTimelineMock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroAnimationController.OnValidate
void GlobalNamespace::MultiplayerIntroAnimationController::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.SetBeforeIntroValue
void GlobalNamespace::MultiplayerIntroAnimationController::SetBeforeIntroValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::SetBeforeIntroValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeforeIntroValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.PlayIntroAnimation
void GlobalNamespace::MultiplayerIntroAnimationController::PlayIntroAnimation(float maxDesiredIntroAnimationDuration, System::Action* onCompleted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::PlayIntroAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayIntroAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxDesiredIntroAnimationDuration), ::il2cpp_utils::ExtractType(onCompleted)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxDesiredIntroAnimationDuration, onCompleted);
}
// Autogenerated method: MultiplayerIntroAnimationController.GetFullIntroAnimationTime
float GlobalNamespace::MultiplayerIntroAnimationController::GetFullIntroAnimationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::GetFullIntroAnimationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFullIntroAnimationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.BindTimeline
void GlobalNamespace::MultiplayerIntroAnimationController::BindTimeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::BindTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.BindRingsAndSetTiming
void GlobalNamespace::MultiplayerIntroAnimationController::BindRingsAndSetTiming(int connectedPlayersCount, ::Array<UnityEngine::GameObject*>* connectedRings, UnityEngine::GameObject* localRing) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::BindRingsAndSetTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindRingsAndSetTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayersCount), ::il2cpp_utils::ExtractType(connectedRings), ::il2cpp_utils::ExtractType(localRing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayersCount, connectedRings, localRing);
}
// Autogenerated method: MultiplayerIntroAnimationController.TransitionToAfterIntroAnimationState
void GlobalNamespace::MultiplayerIntroAnimationController::TransitionToAfterIntroAnimationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::TransitionToAfterIntroAnimationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToAfterIntroAnimationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.CalculatePlayerIndexSequence
System::Collections::Generic::Queue_1<int>* GlobalNamespace::MultiplayerIntroAnimationController::CalculatePlayerIndexSequence(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* allActivePlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::CalculatePlayerIndexSequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePlayerIndexSequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allActivePlayer)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Queue_1<int>*, false>(this, ___internal__method, allActivePlayer);
}
// Autogenerated method: MultiplayerIntroAnimationController.SetTimelineMock
void GlobalNamespace::MultiplayerIntroAnimationController::SetTimelineMock(GlobalNamespace::MultiplayerTimelineMock* multiplayerIntroTimelineMock, bool isDuel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::SetTimelineMock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimelineMock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerIntroTimelineMock), ::il2cpp_utils::ExtractType(isDuel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerIntroTimelineMock, isDuel);
}
// Autogenerated method: MultiplayerIntroAnimationController.Completed
void GlobalNamespace::MultiplayerIntroAnimationController::Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::Completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown
#include "GlobalNamespace/MultiplayerIntroCountdown.hpp"
// Including type: MultiplayerIntroCountdown/<CountdownRoutine>d__23
#include "GlobalNamespace/MultiplayerIntroCountdown_-CountdownRoutine-d__23.hpp"
// Including type: MultiplayerIntroCountdown/<PlayDelayed>d__24
#include "GlobalNamespace/MultiplayerIntroCountdown_-PlayDelayed-d__24.hpp"
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
// Including type: MultiplayerIntroCountdown/<PhaseRoutine>d__25
#include "GlobalNamespace/MultiplayerIntroCountdown_-PhaseRoutine-d__25.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdown.get_textAppearDuration
float GlobalNamespace::MultiplayerIntroCountdown::get_textAppearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::get_textAppearDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textAppearDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.Awake
void GlobalNamespace::MultiplayerIntroCountdown::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.OnDestroy
void GlobalNamespace::MultiplayerIntroCountdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.StartCountdown
void GlobalNamespace::MultiplayerIntroCountdown::StartCountdown(float seconds, float delay, float durationMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::StartCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(durationMultiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, seconds, delay, durationMultiplier);
}
// Autogenerated method: MultiplayerIntroCountdown.CountdownRoutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::CountdownRoutine(float seconds, float delay, float durationMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::CountdownRoutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CountdownRoutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(durationMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, seconds, delay, durationMultiplier);
}
// Autogenerated method: MultiplayerIntroCountdown.PlayDelayed
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::PlayDelayed(UnityEngine::AudioClip* audioClip, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::PlayDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, audioClip, delay);
}
// Autogenerated method: MultiplayerIntroCountdown.PhaseRoutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::PhaseRoutine(::Il2CppString* text, float appearDuration, float disappearDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::PhaseRoutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PhaseRoutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(appearDuration), ::il2cpp_utils::ExtractType(disappearDuration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, text, appearDuration, disappearDuration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<CountdownRoutine>d__23
#include "GlobalNamespace/MultiplayerIntroCountdown_-CountdownRoutine-d__23.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<PlayDelayed>d__24
#include "GlobalNamespace/MultiplayerIntroCountdown_-PlayDelayed-d__24.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__0
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__1
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__2
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__2(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__3
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__3(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, f);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__4
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__4(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<PhaseRoutine>d__25
#include "GlobalNamespace/MultiplayerIntroCountdown_-PhaseRoutine-d__25.hpp"
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerIntroCountdownTextController.SetText
void GlobalNamespace::MultiplayerIntroCountdownTextController::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.SetDistances
void GlobalNamespace::MultiplayerIntroCountdownTextController::SetDistances(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::SetDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_hide
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_fontSize
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_fontSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.get_fontSize
float GlobalNamespace::MultiplayerIntroCountdownTextController::get_fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::get_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_alpha
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.get_alpha
float GlobalNamespace::MultiplayerIntroCountdownTextController::get_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::get_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLayoutProvider.get_layout
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerLayoutProvider::get_layout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::get_layout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerLayout, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLayoutProvider.set_layout
void GlobalNamespace::MultiplayerLayoutProvider::set_layout(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::set_layout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_layout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.get_activePlayerSpotsCount
int GlobalNamespace::MultiplayerLayoutProvider::get_activePlayerSpotsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::get_activePlayerSpotsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activePlayerSpotsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLayoutProvider.set_activePlayerSpotsCount
void GlobalNamespace::MultiplayerLayoutProvider::set_activePlayerSpotsCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::set_activePlayerSpotsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_activePlayerSpotsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.add_playersLayoutWasCalculatedEvent
void GlobalNamespace::MultiplayerLayoutProvider::add_playersLayoutWasCalculatedEvent(System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::add_playersLayoutWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playersLayoutWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.remove_playersLayoutWasCalculatedEvent
void GlobalNamespace::MultiplayerLayoutProvider::remove_playersLayoutWasCalculatedEvent(System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::remove_playersLayoutWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playersLayoutWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.CalculateLayout
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerLayoutProvider::CalculateLayout(int activePlayersCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::CalculateLayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activePlayersCount)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerLayout, false>(this, ___internal__method, activePlayersCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLeadPlayerProvider
#include "GlobalNamespace/MultiplayerLeadPlayerProvider.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLeadPlayerProvider.add_newLeaderWasSelectedEvent
void GlobalNamespace::MultiplayerLeadPlayerProvider::add_newLeaderWasSelectedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::add_newLeaderWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_newLeaderWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.remove_newLeaderWasSelectedEvent
void GlobalNamespace::MultiplayerLeadPlayerProvider::remove_newLeaderWasSelectedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::remove_newLeaderWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_newLeaderWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.Start
void GlobalNamespace::MultiplayerLeadPlayerProvider::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.OnDestroy
void GlobalNamespace::MultiplayerLeadPlayerProvider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.Update
void GlobalNamespace::MultiplayerLeadPlayerProvider::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.StopProviding
void GlobalNamespace::MultiplayerLeadPlayerProvider::StopProviding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::StopProviding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopProviding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.StartProviding
void GlobalNamespace::MultiplayerLeadPlayerProvider::StartProviding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::StartProviding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartProviding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.HandleStateChanged
void GlobalNamespace::MultiplayerLeadPlayerProvider::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.HandleFirstPlayerDidChange
void GlobalNamespace::MultiplayerLeadPlayerProvider::HandleFirstPlayerDidChange(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* firstPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::HandleFirstPlayerDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFirstPlayerDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerObjectInstaller
#include "GlobalNamespace/MultiplayerObjectInstaller.hpp"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerObjectInstaller.InstallBindings
void GlobalNamespace::MultiplayerObjectInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerObjectInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.Awake
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.Update
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.SetEnabled
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::SetEnabled(bool isEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::SetEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isEnabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isEnabled);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.UpdatePositionAndRotationIfNeeded
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::UpdatePositionAndRotationIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::UpdatePositionAndRotationIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionAndRotationIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOtherPlayersScoreDiffTextManager
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager.hpp"
// Including type: MultiplayerOtherPlayersScoreDiffTextManager/<>c
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager_--c.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kUpdateInterval
float GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_get_kUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerOtherPlayersScoreDiffTextManager", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kUpdateInterval
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_set_kUpdateInterval(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager", "kUpdateInterval", value));
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.Start
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.OnDestroy
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.Update
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.InitLeftRightPositions
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::InitLeftRightPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::InitLeftRightPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitLeftRightPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.HideAll
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HideAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HideAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.HandleStateChanged
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOtherPlayersScoreDiffTextManager/<>c
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerOtherPlayersScoreDiffTextManager/<>c <>9
GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c* GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c*>("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerOtherPlayersScoreDiffTextManager/<>c <>9
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9(GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__10_0
System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>*>("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__10_0
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9__10_0(System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9__10_0", value)));
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager/<>c..cctor
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager/<>c.<Update>b__10_0
bool GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::$Update$b__10_0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::<Update>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Update>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerOutroAnimationController
#include "GlobalNamespace/MultiplayerOutroAnimationController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerResultsPyramidView
#include "GlobalNamespace/MultiplayerResultsPyramidView.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerTimelineMock
#include "GlobalNamespace/MultiplayerTimelineMock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerOutroAnimationController.Start
void GlobalNamespace::MultiplayerOutroAnimationController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.OnValidate
void GlobalNamespace::MultiplayerOutroAnimationController::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.OnDestroy
void GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.AnimateOutro
void GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro(GlobalNamespace::MultiplayerResultsData* multiplayerResultsData, System::Action* onCompleted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateOutro", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerResultsData), ::il2cpp_utils::ExtractType(onCompleted)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerResultsData, onCompleted);
}
// Autogenerated method: MultiplayerOutroAnimationController.BindOutroTimeline
void GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindOutroTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.BindRingsAndAudio
void GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio(::Array<UnityEngine::GameObject*>* rings, bool isMock, bool isDuel, GlobalNamespace::MultiplayerTimelineMock* timelineMock) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindRingsAndAudio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rings), ::il2cpp_utils::ExtractType(isMock), ::il2cpp_utils::ExtractType(isDuel), ::il2cpp_utils::ExtractType(timelineMock)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rings, isMock, isDuel, timelineMock);
}
// Autogenerated method: MultiplayerOutroAnimationController.SetTimelineMock
void GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock(GlobalNamespace::MultiplayerTimelineMock* multiplayerIntroTimelineMock, bool isDuel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimelineMock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerIntroTimelineMock), ::il2cpp_utils::ExtractType(isDuel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerIntroTimelineMock, isDuel);
}
// Autogenerated method: MultiplayerOutroAnimationController.Completed
void GlobalNamespace::MultiplayerOutroAnimationController::Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::Completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.HandlePlayerSpawningDidFinish
void GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSpawningDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout NotDetermined
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_NotDetermined() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_NotDetermined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "NotDetermined"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout NotDetermined
void GlobalNamespace::MultiplayerPlayerLayout::_set_NotDetermined(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_NotDetermined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "NotDetermined", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout Circle
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_Circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_Circle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "Circle"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout Circle
void GlobalNamespace::MultiplayerPlayerLayout::_set_Circle(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_Circle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "Circle", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout Duel
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_Duel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_Duel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "Duel"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout Duel
void GlobalNamespace::MultiplayerPlayerLayout::_set_Duel(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_Duel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "Duel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerPlacement
#include "GlobalNamespace/MultiplayerPlayerPlacement.hpp"
// Including type: MultiplayerPlayerPlacement/<>c
#include "GlobalNamespace/MultiplayerPlayerPlacement_--c.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPlayerPlacement.GetPlayerWorldPosition
UnityEngine::Vector3 GlobalNamespace::MultiplayerPlayerPlacement::GetPlayerWorldPosition(float outerCircleRadius, float outerCirclePositionAngle, GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetPlayerWorldPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetPlayerWorldPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outerCircleRadius), ::il2cpp_utils::ExtractType(outerCirclePositionAngle), ::il2cpp_utils::ExtractType(layout)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, outerCircleRadius, outerCirclePositionAngle, layout);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetOuterCirclePositionAngleForPlayer
float GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCirclePositionAngleForPlayer(int playerIndex, int localPlayerIndex, float angleBetweenPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCirclePositionAngleForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetOuterCirclePositionAngleForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerIndex), ::il2cpp_utils::ExtractType(localPlayerIndex), ::il2cpp_utils::ExtractType(angleBetweenPlayers)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playerIndex, localPlayerIndex, angleBetweenPlayers);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetOuterCircleRadius
float GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCircleRadius(float angleBetweenPlayers, float innerCircleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCircleRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetOuterCircleRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angleBetweenPlayers), ::il2cpp_utils::ExtractType(innerCircleRadius)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angleBetweenPlayers, innerCircleRadius);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetAngleBetweenPlayersWithEvenAdjustment
float GlobalNamespace::MultiplayerPlayerPlacement::GetAngleBetweenPlayersWithEvenAdjustment(int numberOfPlayers, GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetAngleBetweenPlayersWithEvenAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetAngleBetweenPlayersWithEvenAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfPlayers), ::il2cpp_utils::ExtractType(layout)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, numberOfPlayers, layout);
}
// Autogenerated method: MultiplayerPlayerPlacement.SortPlayers
void GlobalNamespace::MultiplayerPlayerPlacement::SortPlayers(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* players) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::SortPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "SortPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(players)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, players);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetLocalPlayerIndex
int GlobalNamespace::MultiplayerPlayerPlacement::GetLocalPlayerIndex(System::Collections::Generic::IList_1<GlobalNamespace::IConnectedPlayer*>* otherPlayers, GlobalNamespace::IConnectedPlayer* localPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetLocalPlayerIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetLocalPlayerIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherPlayers), ::il2cpp_utils::ExtractType(localPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, otherPlayers, localPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerPlacement/<>c
#include "GlobalNamespace/MultiplayerPlayerPlacement_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerPlayerPlacement/<>c <>9
GlobalNamespace::MultiplayerPlayerPlacement::$$c* GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerPlacement::$$c*>("", "MultiplayerPlayerPlacement/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerPlayerPlacement/<>c <>9
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9(GlobalNamespace::MultiplayerPlayerPlacement::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerPlayerPlacement/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<IConnectedPlayer> <>9__4_0
System::Comparison_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<GlobalNamespace::IConnectedPlayer*>*>("", "MultiplayerPlayerPlacement/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<IConnectedPlayer> <>9__4_0
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9__4_0(System::Comparison_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerPlayerPlacement/<>c", "<>9__4_0", value)));
}
// Autogenerated method: MultiplayerPlayerPlacement/<>c..cctor
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerPlayerPlacement/<>c.<SortPlayers>b__4_0
int GlobalNamespace::MultiplayerPlayerPlacement::$$c::$SortPlayers$b__4_0(GlobalNamespace::IConnectedPlayer* p1, GlobalNamespace::IConnectedPlayer* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::<SortPlayers>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortPlayers>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, p1, p2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPlayerResultsData.get_levelCompletionResults
GlobalNamespace::LevelCompletionResults* GlobalNamespace::MultiplayerPlayerResultsData::get_levelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::get_levelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayerResultsData.CompareTo
int GlobalNamespace::MultiplayerPlayerResultsData::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerStartState InSync
GlobalNamespace::MultiplayerPlayerStartState GlobalNamespace::MultiplayerPlayerStartState::_get_InSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_get_InSync");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerStartState>("", "MultiplayerPlayerStartState", "InSync"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerStartState InSync
void GlobalNamespace::MultiplayerPlayerStartState::_set_InSync(GlobalNamespace::MultiplayerPlayerStartState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_set_InSync");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerStartState", "InSync", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerStartState Late
GlobalNamespace::MultiplayerPlayerStartState GlobalNamespace::MultiplayerPlayerStartState::_get_Late() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_get_Late");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerStartState>("", "MultiplayerPlayerStartState", "Late"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerStartState Late
void GlobalNamespace::MultiplayerPlayerStartState::_set_Late(GlobalNamespace::MultiplayerPlayerStartState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_set_Late");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerStartState", "Late", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51
#include "GlobalNamespace/MultiplayerPlayersManager_-SwitchLocalPlayerToInactiveCoroutine-d__51.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: IStartSeekSongControllerProvider
#include "GlobalNamespace/IStartSeekSongControllerProvider.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
// Including type: MultiplayerLocalActivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade_Factory.hpp"
// Including type: MultiplayerLocalInactivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade_Factory.hpp"
// Including type: MultiplayerConnectedPlayerFacade/Factory
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade_Factory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPlayersManager.get_playerSpawningFinished
bool GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerSpawningFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.set_playerSpawningFinished
void GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playerSpawningFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.get_allActiveAtGameStartPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allActiveAtGameStartPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_localPlayerStartSeekSongController
GlobalNamespace::IStartSeekSongControllerProvider* GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerStartSeekSongController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IStartSeekSongControllerProvider*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_activeLocalPlayerFacade
GlobalNamespace::MultiplayerLocalActivePlayerFacade* GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeLocalPlayerFacade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLocalActivePlayerFacade*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_inactivePlayerFacade
GlobalNamespace::MultiplayerLocalInactivePlayerFacade* GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inactivePlayerFacade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLocalInactivePlayerFacade*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_localPlayerTransform
UnityEngine::Transform* GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerSpawningDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerSpawningDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_didSwitchPlayerToInactiveEvent
void GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_didSwitchPlayerToInactiveEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent(System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent(System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent(System::Action_1<GlobalNamespace::PlayerNetworkFailReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent(System::Action_1<GlobalNamespace::PlayerNetworkFailReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.SpawnPlayers
void GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers(GlobalNamespace::MultiplayerPlayerStartState localPlayerStartState, System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* allActiveAtGameStartPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerStartState), ::il2cpp_utils::ExtractType(allActiveAtGameStartPlayers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localPlayerStartState, allActiveAtGameStartPlayers);
}
// Autogenerated method: MultiplayerPlayersManager.TryGetConnectedPlayerController
bool GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController(::Il2CppString* userId, GlobalNamespace::MultiplayerConnectedPlayerFacade*& connectedPlayerController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetConnectedPlayerController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerConnectedPlayerFacade*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId, connectedPlayerController);
}
// Autogenerated method: MultiplayerPlayersManager.TryGetConnectedCenterFacingRotation
bool GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation(::Il2CppString* userId, float& centerFacingRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetConnectedCenterFacingRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId, centerFacingRotation);
}
// Autogenerated method: MultiplayerPlayersManager.SwitchLocalPlayerToInactive
void GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchLocalPlayerToInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.ReportLocalPlayerNetworkDidFailed
void GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed(GlobalNamespace::PlayerNetworkFailReason failReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportLocalPlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(failReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, failReason);
}
// Autogenerated method: MultiplayerPlayersManager.SwitchLocalPlayerToInactiveCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchLocalPlayerToInactiveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.BindPlayerFactories
void GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories(GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindPlayerFactories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, layout);
}
// Autogenerated method: MultiplayerPlayersManager.HandlePlayerDidFinish
void GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish(GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults);
}
// Autogenerated method: MultiplayerPlayersManager.HandlePlayerNetworkDidFailed
void GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed(GlobalNamespace::PlayerNetworkFailReason failReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(failReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, failReason);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51
#include "GlobalNamespace/MultiplayerPlayersManager_-SwitchLocalPlayerToInactiveCoroutine-d__51.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.MoveNext
bool GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPositionDisplay
#include "GlobalNamespace/MultiplayerPositionDisplay.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPositionDisplay.Start
void GlobalNamespace::MultiplayerPositionDisplay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.OnDestroy
void GlobalNamespace::MultiplayerPositionDisplay::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.Update
void GlobalNamespace::MultiplayerPositionDisplay::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.UpdateColors
void GlobalNamespace::MultiplayerPositionDisplay::UpdateColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::UpdateColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.UpdatePosition
void GlobalNamespace::MultiplayerPositionDisplay::UpdatePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::UpdatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.HandlePlayerFailed
void GlobalNamespace::MultiplayerPositionDisplay::HandlePlayerFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::HandlePlayerFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.HandleFirstPlayerDidChange
void GlobalNamespace::MultiplayerPositionDisplay::HandleFirstPlayerDidChange(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::HandleFirstPlayerDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFirstPlayerDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: MultiplayerPositionDisplay.ChangeColor
void GlobalNamespace::MultiplayerPositionDisplay::ChangeColor(UnityEngine::Color toColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::ChangeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toColor), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toColor, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPsPlusFeatureNotifier
#include "GlobalNamespace/MultiplayerPsPlusFeatureNotifier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsAvatarController
#include "GlobalNamespace/MultiplayerResultsAvatarController.hpp"
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: MultiplayerAvatarPoseController
#include "GlobalNamespace/MultiplayerAvatarPoseController.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsAvatarController.SetScale
void GlobalNamespace::MultiplayerResultsAvatarController::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: MultiplayerResultsAvatarController.Setup
void GlobalNamespace::MultiplayerResultsAvatarController::Setup(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: MultiplayerBadgesProvider
#include "GlobalNamespace/MultiplayerBadgesProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsData.get_gameId
::Il2CppString* GlobalNamespace::MultiplayerResultsData::get_gameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_gameId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_localPlayerResultData
GlobalNamespace::MultiplayerPlayerResultsData* GlobalNamespace::MultiplayerResultsData::get_localPlayerResultData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_localPlayerResultData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerResultData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerResultsData*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_otherPlayersData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* GlobalNamespace::MultiplayerResultsData::get_otherPlayersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_otherPlayersData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayersData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_allPlayersSortedData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* GlobalNamespace::MultiplayerResultsData::get_allPlayersSortedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_allPlayersSortedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allPlayersSortedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsPyramidView
#include "GlobalNamespace/MultiplayerResultsPyramidView.hpp"
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsPyramidView.get_resultAvatarDirectors
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerResultsPyramidView::get_resultAvatarDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::get_resultAvatarDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultAvatarDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidView.get_badgeTimelines
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerResultsPyramidView::get_badgeTimelines() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::get_badgeTimelines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_badgeTimelines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidView.PrespawnAvatars
void GlobalNamespace::MultiplayerResultsPyramidView::PrespawnAvatars(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* activePlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::PrespawnAvatars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrespawnAvatars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activePlayers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, activePlayers);
}
// Autogenerated method: MultiplayerResultsPyramidView.SetupResults
void GlobalNamespace::MultiplayerResultsPyramidView::SetupResults(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, UnityEngine::Transform* badgeStartTransform, UnityEngine::Transform* badgeMidTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::SetupResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(badgeStartTransform), ::il2cpp_utils::ExtractType(badgeMidTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsData, badgeStartTransform, badgeMidTransform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsPyramidViewAvatar
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: GhostDuplicationEffect
#include "GlobalNamespace/GhostDuplicationEffect.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.get_badgeDirector
UnityEngine::Playables::PlayableDirector* GlobalNamespace::MultiplayerResultsPyramidViewAvatar::get_badgeDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::get_badgeDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_badgeDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableDirector*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.Awake
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.Setup
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Setup(GlobalNamespace::MultiplayerPlayerResultsData* resultData, int position, int playerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultData), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(playerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultData, position, playerCount);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.SetupBadgeTimeline
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::SetupBadgeTimeline(UnityEngine::Transform* startTransform, UnityEngine::Transform* midTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::SetupBadgeTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupBadgeTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTransform), ::il2cpp_utils::ExtractType(midTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTransform, midTransform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsPyramidViewAvatarInstaller
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatarInstaller.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsPyramidViewAvatarInstaller.InstallBindings
void GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: MultiplayerScoreProvider/<>c
#include "GlobalNamespace/MultiplayerScoreProvider_--c.hpp"
// Including type: MultiplayerScoreProvider/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerScoreProvider_--c__DisplayClass18_0.hpp"
// Including type: IScoreSyncStateManager
#include "GlobalNamespace/IScoreSyncStateManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreProvider.get_scoresAvailable
bool GlobalNamespace::MultiplayerScoreProvider::get_scoresAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_scoresAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scoresAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.get_firstPlayer
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* GlobalNamespace::MultiplayerScoreProvider::get_firstPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_firstPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.set_firstPlayer
void GlobalNamespace::MultiplayerScoreProvider::set_firstPlayer(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::set_firstPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_firstPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.add_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::add_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::add_firstPlayerDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_firstPlayerDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.remove_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::remove_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::remove_firstPlayerDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_firstPlayerDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.get_rankedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* GlobalNamespace::MultiplayerScoreProvider::get_rankedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_rankedPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rankedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.Update
void GlobalNamespace::MultiplayerScoreProvider::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.TryGetScore
bool GlobalNamespace::MultiplayerScoreProvider::TryGetScore(::Il2CppString* userId, GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*& data) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::TryGetScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId, data);
}
// Autogenerated method: MultiplayerScoreProvider.GetPositionOfPlayer
int GlobalNamespace::MultiplayerScoreProvider::GetPositionOfPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::GetPositionOfPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionOfPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, userId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: MultiplayerSyncState`3
#include "GlobalNamespace/MultiplayerSyncState_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_offsetSyncTime
float GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_offsetSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_lastScoreTime
float GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_lastScoreTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_lastScoreTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastScoreTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_score
int GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_score() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isConnected
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isActiveOrFinished
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isActiveOrFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isActiveOrFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActiveOrFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isFailed
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_wasActiveAtLevelStart
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_wasActiveAtLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isMe
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isMe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_userId
::Il2CppString* GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_userName
::Il2CppString* GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.CompareTo
int GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::CompareTo(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerScoreProvider/<>c
#include "GlobalNamespace/MultiplayerScoreProvider_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerScoreProvider/<>c <>9
GlobalNamespace::MultiplayerScoreProvider::$$c* GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerScoreProvider::$$c*>("", "MultiplayerScoreProvider/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerScoreProvider/<>c <>9
void GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9(GlobalNamespace::MultiplayerScoreProvider::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerScoreProvider/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__16_0
System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9__16_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9__16_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>*>("", "MultiplayerScoreProvider/<>c", "<>9__16_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__16_0
void GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9__16_0(System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9__16_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerScoreProvider/<>c", "<>9__16_0", value)));
}
// Autogenerated method: MultiplayerScoreProvider/<>c..cctor
void GlobalNamespace::MultiplayerScoreProvider::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerScoreProvider/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/<>c.<Update>b__16_0
bool GlobalNamespace::MultiplayerScoreProvider::$$c::$Update$b__16_0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::<Update>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Update>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerScoreProvider_--c__DisplayClass18_0.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreProvider/<>c__DisplayClass18_0.<GetPositionOfPlayer>b__0
bool GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::$GetPositionOfPlayer$b__0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::<GetPositionOfPlayer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPositionOfPlayer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreRingItem.Awake
void GlobalNamespace::MultiplayerScoreRingItem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingItem.OnDestroy
void GlobalNamespace::MultiplayerScoreRingItem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingItem.SetPositionAndRotation
void GlobalNamespace::MultiplayerScoreRingItem::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: MultiplayerScoreRingItem.AnimateColors
void GlobalNamespace::MultiplayerScoreRingItem::AnimateColors(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::AnimateColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingItem.SetName
void GlobalNamespace::MultiplayerScoreRingItem::SetName(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: MultiplayerScoreRingItem.SetScore
void GlobalNamespace::MultiplayerScoreRingItem::SetScore(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: MultiplayerScoreRingItem.<Awake>b__6_0
void GlobalNamespace::MultiplayerScoreRingItem::$Awake$b__6_0(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::<Awake>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerScoreRingItem.<Awake>b__6_1
void GlobalNamespace::MultiplayerScoreRingItem::$Awake$b__6_1(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::<Awake>b__6_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__6_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreRingManager.Start
void GlobalNamespace::MultiplayerScoreRingManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.OnDestroy
void GlobalNamespace::MultiplayerScoreRingManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.Update
void GlobalNamespace::MultiplayerScoreRingManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.UpdateScore
void GlobalNamespace::MultiplayerScoreRingManager::UpdateScore(GlobalNamespace::IConnectedPlayer* playerToUpdate) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::UpdateScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerToUpdate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerToUpdate);
}
// Autogenerated method: MultiplayerScoreRingManager.AnimateColorsForPlayer
void GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForPlayer(::Il2CppString* userId, UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColorsForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingManager.GetScoreRingItem
GlobalNamespace::MultiplayerScoreRingItem* GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItem(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreRingItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerScoreRingItem*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerScoreRingManager.GetScoreRingItems
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreRingItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.AnimateColorsForAllPlayers
void GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForAllPlayers(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForAllPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColorsForAllPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingManager.SetPlayerToFailedState
void GlobalNamespace::MultiplayerScoreRingManager::SetPlayerToFailedState(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::SetPlayerToFailedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerToFailedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerScoreRingManager.TrySpawnTexts
void GlobalNamespace::MultiplayerScoreRingManager::TrySpawnTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::TrySpawnTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySpawnTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.SpawnTexts
void GlobalNamespace::MultiplayerScoreRingManager::SpawnTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::SpawnTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.HandleStateChanged
void GlobalNamespace::MultiplayerScoreRingManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerScoreRingManager.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::MultiplayerScoreRingManager::HandleSpawnCenterDistanceWasFound(float spawnCenterDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spawnCenterDistance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spawnCenterDistance);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerSpawningDidFinish
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerSpawningDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerSpawningDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSpawningDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSongEntitlementsStatus
#include "GlobalNamespace/MultiplayerSongEntitlementsStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerSongEntitlementsStatus Ok
GlobalNamespace::MultiplayerSongEntitlementsStatus GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSongEntitlementsStatus>("", "MultiplayerSongEntitlementsStatus", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSongEntitlementsStatus Ok
void GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Ok(GlobalNamespace::MultiplayerSongEntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSongEntitlementsStatus", "Ok", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSongEntitlementsStatus Invalid
GlobalNamespace::MultiplayerSongEntitlementsStatus GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSongEntitlementsStatus>("", "MultiplayerSongEntitlementsStatus", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSongEntitlementsStatus Invalid
void GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Invalid(GlobalNamespace::MultiplayerSongEntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSongEntitlementsStatus", "Invalid", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerVerticalPlayerMovementManager
#include "GlobalNamespace/MultiplayerVerticalPlayerMovementManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MultiplayerConnectedPlayerFacade
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.Start
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.OnDestroy
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.Update
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.HandleStateChanged
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScaleAnimator
#include "GlobalNamespace/ScaleAnimator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScaleAnimator.OnDestroy
void GlobalNamespace::ScaleAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleAnimator.InitIfNeeded
void GlobalNamespace::ScaleAnimator::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleAnimator.SetPositionAndRotation
void GlobalNamespace::ScaleAnimator::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: ScaleAnimator.HideInstant
void GlobalNamespace::ScaleAnimator::HideInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::HideInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleAnimator.ShowInstant
void GlobalNamespace::ScaleAnimator::ShowInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::ShowInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleAnimator.Animate
void GlobalNamespace::ScaleAnimator::Animate(bool show, float duration, Tweening::EaseType easeType, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(show), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType), ::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, show, duration, easeType, delay);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_0
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_2
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_1
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_3
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::IMultiplayerSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::IMultiplayerSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_isMain
bool GlobalNamespace::IMultiplayerSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::IMultiplayerSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::IMultiplayerSpectatingSpot::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::IMultiplayerSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.SetIsObserved
void GlobalNamespace::IMultiplayerSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isObserved);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerConnectedPlayerSpectatingSpot
#include "GlobalNamespace/MultiplayerConnectedPlayerSpectatingSpot.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.add_isObservedChangedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_isObservedChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.remove_isObservedChangedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_isObservedChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.set_observable
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::set_observable(GlobalNamespace::IMultiplayerObservable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::set_observable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_isMain
bool GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.Start
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.SetIsObserved
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isObserved);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.ReloadBasedOnPlayerCurrentState
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadBasedOnPlayerCurrentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IMultiplayerSpectatingSpot.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerEnvironmentSpectatingSpot
#include "GlobalNamespace/MultiplayerEnvironmentSpectatingSpot.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerActivePlayersTimeOffsetAverage
#include "GlobalNamespace/MultiplayerActivePlayersTimeOffsetAverage.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_isMain
bool GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.Start
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.OnDisable
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.SetIsObserved
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isObserved);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::IMultiplayerSpectatingSpot_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::IMultiplayerSpectatingSpot.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IMultiplayerSpectatingSpot.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerSpectatingSpotManager/<>c
#include "GlobalNamespace/MultiplayerSpectatingSpotManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSpectatingSpotManager.get_spectatingSpots
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* GlobalNamespace::MultiplayerSpectatingSpotManager::get_spectatingSpots() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::get_spectatingSpots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spectatingSpots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.get_defaultSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatingSpotManager::get_defaultSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::get_defaultSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.RegisterSpectatingSpot
void GlobalNamespace::MultiplayerSpectatingSpotManager::RegisterSpectatingSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::RegisterSpectatingSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSpectatingSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.GetAdjacentSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatingSpotManager::GetAdjacentSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::GetAdjacentSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdjacentSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(this, ___internal__method, spectatingSpot, offset);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.GetIndexBySpot
int GlobalNamespace::MultiplayerSpectatingSpotManager::GetIndexBySpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::GetIndexBySpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexBySpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.UpdateIndexBySpotDictionary
void GlobalNamespace::MultiplayerSpectatingSpotManager::UpdateIndexBySpotDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::UpdateIndexBySpotDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIndexBySpotDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.SpotOnHasBeenRemoved
void GlobalNamespace::MultiplayerSpectatingSpotManager::SpotOnHasBeenRemoved(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::SpotOnHasBeenRemoved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpotOnHasBeenRemoved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spectatingSpot);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatingSpotManager/<>c
#include "GlobalNamespace/MultiplayerSpectatingSpotManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerSpectatingSpotManager/<>c <>9
GlobalNamespace::MultiplayerSpectatingSpotManager::$$c* GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSpectatingSpotManager::$$c*>("", "MultiplayerSpectatingSpotManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerSpectatingSpotManager/<>c <>9
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9(GlobalNamespace::MultiplayerSpectatingSpotManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSpectatingSpotManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IMultiplayerSpectatingSpot,System.Boolean> <>9__3_0
System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>* GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>*>("", "MultiplayerSpectatingSpotManager/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IMultiplayerSpectatingSpot,System.Boolean> <>9__3_0
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9__3_0(System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSpectatingSpotManager/<>c", "<>9__3_0", value)));
}
// Autogenerated method: MultiplayerSpectatingSpotManager/<>c..cctor
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerSpectatingSpotManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager/<>c.<get_defaultSpot>b__3_0
bool GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::$get_defaultSpot$b__3_0(GlobalNamespace::IMultiplayerSpectatingSpot* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::<get_defaultSpot>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_defaultSpot>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatorController
#include "GlobalNamespace/MultiplayerSpectatorController.hpp"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotWithFadeCoroutine-d__17.hpp"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotCoroutine-d__18.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerLocalInactivePlayerSongSyncController
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSpectatorController.add_spectatingSpotDidChangeEvent
void GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSpectatorController.remove_spectatingSpotDidChangeEvent
void GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSpectatorController.get_currentSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatorController::get_currentSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::get_currentSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.Awake
void GlobalNamespace::MultiplayerSpectatorController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.Start
void GlobalNamespace::MultiplayerSpectatorController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.OnDestroy
void GlobalNamespace::MultiplayerSpectatorController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpot
void GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToPrev
void GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToPrev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToNext
void GlobalNamespace::MultiplayerSpectatorController::SwitchToNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpotWithFadeCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpotWithFadeCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpotCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpotCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToSpectatingSpot
void GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToSpectatingSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatorController.HandleStateChanged
void GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotWithFadeCoroutine-d__17.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.MoveNext
bool GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotCoroutine-d__18.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.MoveNext
bool GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: GameEnergyCounter/InitData
#include "GlobalNamespace/GameEnergyCounter_InitData.hpp"
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameEnergyCounter.add_didInitEvent
void GlobalNamespace::GameEnergyCounter::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_didInitEvent
void GlobalNamespace::GameEnergyCounter::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.add_gameEnergyDidReach0Event
void GlobalNamespace::GameEnergyCounter::add_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_gameEnergyDidReach0Event
void GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.add_gameEnergyDidChangeEvent
void GlobalNamespace::GameEnergyCounter::add_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_gameEnergyDidChangeEvent
void GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_isInitialized
bool GlobalNamespace::GameEnergyCounter::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_energy
float GlobalNamespace::GameEnergyCounter::get_energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_energy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_energy
void GlobalNamespace::GameEnergyCounter::set_energy(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_energy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_batteryEnergy
int GlobalNamespace::GameEnergyCounter::get_batteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_batteryEnergy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryEnergy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_batteryLives
int GlobalNamespace::GameEnergyCounter::get_batteryLives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_batteryLives");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryLives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_energyType
GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameEnergyCounter::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_energyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnergyType, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_energyType
void GlobalNamespace::GameEnergyCounter::set_energyType(GlobalNamespace::GameplayModifiers::EnergyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_energyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_noFail
bool GlobalNamespace::GameEnergyCounter::get_noFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_noFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_noFail
void GlobalNamespace::GameEnergyCounter::set_noFail(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_noFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_instaFail
bool GlobalNamespace::GameEnergyCounter::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_instaFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_instaFail
void GlobalNamespace::GameEnergyCounter::set_instaFail(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_instaFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_failOnSaberClash
bool GlobalNamespace::GameEnergyCounter::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_failOnSaberClash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_failOnSaberClash
void GlobalNamespace::GameEnergyCounter::set_failOnSaberClash(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_failOnSaberClash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.Start
void GlobalNamespace::GameEnergyCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.OnDestroy
void GlobalNamespace::GameEnergyCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.LateUpdate
void GlobalNamespace::GameEnergyCounter::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.HandleNoteWasCut
void GlobalNamespace::GameEnergyCounter::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: GameEnergyCounter.HandleNoteWasMissed
void GlobalNamespace::GameEnergyCounter::HandleNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: GameEnergyCounter.ProcessEnergyChange
void GlobalNamespace::GameEnergyCounter::ProcessEnergyChange(float energyChange) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::ProcessEnergyChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEnergyChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energyChange)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, energyChange);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyCounter/InitData
#include "GlobalNamespace/GameEnergyCounter_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IGameEnergyCounter
#include "GlobalNamespace/IGameEnergyCounter.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: GameplayModifiers/EnergyType
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGameEnergyCounter.add_didInitEvent
void GlobalNamespace::IGameEnergyCounter::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_didInitEvent
void GlobalNamespace::IGameEnergyCounter::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.add_gameEnergyDidReach0Event
void GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_gameEnergyDidReach0Event
void GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.add_gameEnergyDidChangeEvent
void GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_gameEnergyDidChangeEvent
void GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.get_isInitialized
bool GlobalNamespace::IGameEnergyCounter::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_energy
float GlobalNamespace::IGameEnergyCounter::get_energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_energy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_batteryEnergy
int GlobalNamespace::IGameEnergyCounter::get_batteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_batteryEnergy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryEnergy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_batteryLives
int GlobalNamespace::IGameEnergyCounter::get_batteryLives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_batteryLives");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryLives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_energyType
GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::IGameEnergyCounter::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_energyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnergyType, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_noFail
bool GlobalNamespace::IGameEnergyCounter::get_noFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_noFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_instaFail
bool GlobalNamespace::IGameEnergyCounter::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_instaFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_failOnSaberClash
bool GlobalNamespace::IGameEnergyCounter::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_failOnSaberClash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MoveBackWall
#include "GlobalNamespace/MoveBackWall.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MoveBackWall.Start
void GlobalNamespace::MoveBackWall::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MoveBackWall.Update
void GlobalNamespace::MoveBackWall::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplierValuesRecorder
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplierValuesRecorder.get_multiplierValues
System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>* GlobalNamespace::MultiplierValuesRecorder::get_multiplierValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::get_multiplierValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplierValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.Start
void GlobalNamespace::MultiplierValuesRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.OnDestroy
void GlobalNamespace::MultiplierValuesRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.HandleScoreControllerMultiplierDidChange
void GlobalNamespace::MultiplierValuesRecorder::HandleScoreControllerMultiplierDidChange(int multiplier, float multiplierProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::HandleScoreControllerMultiplierDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerMultiplierDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(multiplierProgress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplier, multiplierProgress);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplierValuesRecorder/MultiplierValue
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerHeadAndObstacleInteraction.get_intersectingObstacles
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::PlayerHeadAndObstacleInteraction::get_intersectingObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::get_intersectingObstacles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intersectingObstacles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayerHeadAndObstacleInteraction.GetObstaclesContainingPoint
void GlobalNamespace::PlayerHeadAndObstacleInteraction::GetObstaclesContainingPoint(UnityEngine::Vector3 worldPos, System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* obstacleControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::GetObstaclesContainingPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObstaclesContainingPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPos), ::il2cpp_utils::ExtractType(obstacleControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPos, obstacleControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: MultiplierValuesRecorder
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: LevelCompletionResults/LevelEndStateType
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LevelCompletionResults/LevelEndAction
// Already included the same include: GlobalNamespace/LevelCompletionResults.hpp
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PrepareLevelCompletionResults.FillLevelCompletionResults
GlobalNamespace::LevelCompletionResults* GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults(GlobalNamespace::LevelCompletionResults::LevelEndStateType levelEndStateType, GlobalNamespace::LevelCompletionResults::LevelEndAction levelEndAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillLevelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelEndStateType), ::il2cpp_utils::ExtractType(levelEndAction)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method, levelEndStateType, levelEndAction);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowTextOnGameEventController
#include "GlobalNamespace/ShowTextOnGameEventController.hpp"
// Including type: ShowTextOnGameEventController/EventTextBinding
#include "GlobalNamespace/ShowTextOnGameEventController_EventTextBinding.hpp"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowTextOnGameEventController.Awake
void GlobalNamespace::ShowTextOnGameEventController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowTextOnGameEventController.OnDestroy
void GlobalNamespace::ShowTextOnGameEventController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
