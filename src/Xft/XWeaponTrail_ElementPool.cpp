// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Xft.XWeaponTrail/ElementPool
#include "Xft/XWeaponTrail_ElementPool.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: Xft.XWeaponTrail/Element
#include "Xft/XWeaponTrail_Element.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Xft.XWeaponTrail/ElementPool.get_CountAll
int Xft::XWeaponTrail::ElementPool::get_CountAll() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_CountAll"));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool.set_CountAll
void Xft::XWeaponTrail::ElementPool::set_CountAll(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_CountAll", value));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool.get_CountActive
int Xft::XWeaponTrail::ElementPool::get_CountActive() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_CountActive"));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool.get_CountInactive
int Xft::XWeaponTrail::ElementPool::get_CountInactive() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_CountInactive"));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool..ctor
Xft::XWeaponTrail::ElementPool* Xft::XWeaponTrail::ElementPool::New_ctor(int preCount) {
  return (XWeaponTrail::ElementPool*)THROW_UNLESS(il2cpp_utils::New("Xft", "XWeaponTrail/ElementPool", preCount));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool.Get
Xft::XWeaponTrail::Element* Xft::XWeaponTrail::ElementPool::Get() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Xft::XWeaponTrail::Element*>(this, "Get"));
}
// Autogenerated method: Xft.XWeaponTrail/ElementPool.Release
void Xft::XWeaponTrail::ElementPool::Release(Xft::XWeaponTrail::Element* element) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Release", element));
}
