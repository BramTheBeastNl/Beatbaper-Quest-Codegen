// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetManager/IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: LiteNetLib.NetManager/NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LiteNetLib.NetEvent/EType
#include "LiteNetLib/NetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager.get_IsRunning
bool LiteNetLib::NetManager::get_IsRunning() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsRunning"));
}
// Autogenerated method: LiteNetLib.NetManager.get_LocalPort
int LiteNetLib::NetManager::get_LocalPort() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_LocalPort"));
}
// Autogenerated method: LiteNetLib.NetManager.get_FirstPeer
LiteNetLib::NetPeer* LiteNetLib::NetManager::get_FirstPeer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "get_FirstPeer"));
}
// Autogenerated method: LiteNetLib.NetManager.get_ChannelsCount
uint8_t LiteNetLib::NetManager::get_ChannelsCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint8_t>(this, "get_ChannelsCount"));
}
// Autogenerated method: LiteNetLib.NetManager.set_ChannelsCount
void LiteNetLib::NetManager::set_ChannelsCount(uint8_t value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_ChannelsCount", value));
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeerList
System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::get_ConnectedPeerList() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*>(this, "get_ConnectedPeerList"));
}
// Autogenerated method: LiteNetLib.NetManager.GetPeerById
LiteNetLib::NetPeer* LiteNetLib::NetManager::GetPeerById(int id) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "GetPeerById", id));
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeersCount
int LiteNetLib::NetManager::get_ConnectedPeersCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_ConnectedPeersCount"));
}
// Autogenerated method: LiteNetLib.NetManager.TryGetPeer
bool LiteNetLib::NetManager::TryGetPeer(System::Net::IPEndPoint* endPoint, LiteNetLib::NetPeer*& peer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryGetPeer", endPoint, peer));
}
// Autogenerated method: LiteNetLib.NetManager.AddPeer
void LiteNetLib::NetManager::AddPeer(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddPeer", peer));
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeer
void LiteNetLib::NetManager::RemovePeer(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemovePeer", peer));
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeerInternal
void LiteNetLib::NetManager::RemovePeerInternal(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemovePeerInternal", peer));
}
// Autogenerated method: LiteNetLib.NetManager..ctor
LiteNetLib::NetManager* LiteNetLib::NetManager::New_ctor(LiteNetLib::INetEventListener* listener, LiteNetLib::Layers::PacketLayerBase* extraPacketLayer) {
  return THROW_UNLESS(il2cpp_utils::New<NetManager*>(listener, extraPacketLayer));
}
// Autogenerated method: LiteNetLib.NetManager.ConnectionLatencyUpdated
void LiteNetLib::NetManager::ConnectionLatencyUpdated(LiteNetLib::NetPeer* fromPeer, int latency) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ConnectionLatencyUpdated", fromPeer, latency));
}
// Autogenerated method: LiteNetLib.NetManager.MessageDelivered
void LiteNetLib::NetManager::MessageDelivered(LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "MessageDelivered", fromPeer, userData));
}
// Autogenerated method: LiteNetLib.NetManager.SendRawAndRecycle
int LiteNetLib::NetManager::SendRawAndRecycle(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "SendRawAndRecycle", packet, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "SendRaw", packet, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "SendRaw", message, start, length, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, LiteNetLib::NetPacket* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeerForce", peer, reason, socketErrorCode, eventData));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, bool force, ::Array<uint8_t>* data, int start, int count, LiteNetLib::NetPacket* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeer", peer, reason, socketErrorCode, force, data, start, count, eventData));
}
// Autogenerated method: LiteNetLib.NetManager.CreateEvent
void LiteNetLib::NetManager::CreateEvent(LiteNetLib::NetEvent::EType type, LiteNetLib::NetPeer* peer, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError errorCode, int latency, LiteNetLib::DisconnectReason disconnectReason, LiteNetLib::ConnectionRequest* connectionRequest, LiteNetLib::DeliveryMethod deliveryMethod, LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CreateEvent", type, peer, remoteEndPoint, errorCode, latency, disconnectReason, connectionRequest, deliveryMethod, readerSource, userData));
}
// Autogenerated method: LiteNetLib.NetManager.ProcessEvent
void LiteNetLib::NetManager::ProcessEvent(LiteNetLib::NetEvent* evt) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProcessEvent", evt));
}
// Autogenerated method: LiteNetLib.NetManager.RecycleEvent
void LiteNetLib::NetManager::RecycleEvent(LiteNetLib::NetEvent* evt) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RecycleEvent", evt));
}
// Autogenerated method: LiteNetLib.NetManager.UpdateLogic
void LiteNetLib::NetManager::UpdateLogic() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateLogic"));
}
// Autogenerated method: LiteNetLib.NetManager.OnConnectionSolved
LiteNetLib::NetPeer* LiteNetLib::NetManager::OnConnectionSolved(LiteNetLib::ConnectionRequest* request, ::Array<uint8_t>* rejectData, int start, int length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "OnConnectionSolved", request, rejectData, start, length));
}
// Autogenerated method: LiteNetLib.NetManager.GetNextPeerId
int LiteNetLib::NetManager::GetNextPeerId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetNextPeerId"));
}
// Autogenerated method: LiteNetLib.NetManager.ProcessConnectRequest
void LiteNetLib::NetManager::ProcessConnectRequest(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPeer* netPeer, LiteNetLib::NetConnectRequestPacket* connRequest) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProcessConnectRequest", remoteEndPoint, netPeer, connRequest));
}
// Autogenerated method: LiteNetLib.NetManager.DataReceived
void LiteNetLib::NetManager::DataReceived(::Array<uint8_t>* reusableBuffer, int count, System::Net::IPEndPoint* remoteEndPoint) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DataReceived", reusableBuffer, count, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.CreateReceiveEvent
void LiteNetLib::NetManager::CreateReceiveEvent(LiteNetLib::NetPacket* packet, LiteNetLib::DeliveryMethod method, LiteNetLib::NetPeer* fromPeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CreateReceiveEvent", packet, method, fromPeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, start, length, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, channelNumber, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, channelNumber, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, start, length, channelNumber, options));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, start, length, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, channelNumber, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, channelNumber, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", data, start, length, channelNumber, options, excludePeer));
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Start"));
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Start", addressIPv4, addressIPv6, port));
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(::Il2CppString* addressIPv4, ::Il2CppString* addressIPv6, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Start", addressIPv4, addressIPv6, port));
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Start", port));
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::Array<uint8_t>* message, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendUnconnectedMessage", message, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendUnconnectedMessage", writer, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendUnconnectedMessage", message, start, length, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(LiteNetLib::Utils::NetDataWriter* writer, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendBroadcast", writer, port));
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::Array<uint8_t>* data, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendBroadcast", data, port));
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::Array<uint8_t>* data, int start, int length, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendBroadcast", data, start, length, port));
}
// Autogenerated method: LiteNetLib.NetManager.Flush
void LiteNetLib::NetManager::Flush() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Flush"));
}
// Autogenerated method: LiteNetLib.NetManager.PollEvents
void LiteNetLib::NetManager::PollEvents() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PollEvents"));
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::Il2CppString* address, int port, ::Il2CppString* key) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "Connect", address, port, key));
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::Il2CppString* address, int port, LiteNetLib::Utils::NetDataWriter* connectionData) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "Connect", address, port, connectionData));
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, ::Il2CppString* key) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "Connect", target, key));
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, LiteNetLib::Utils::NetDataWriter* connectionData) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "Connect", target, connectionData));
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Stop"));
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop(bool sendDisconnectMessages) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Stop", sendDisconnectMessages));
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersCount
int LiteNetLib::NetManager::GetPeersCount(LiteNetLib::ConnectionState peerState) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetPeersCount", peerState));
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersNonAlloc
void LiteNetLib::NetManager::GetPeersNonAlloc(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* peers, LiteNetLib::ConnectionState peerState) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetPeersNonAlloc", peers, peerState));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectAll"));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll(::Array<uint8_t>* data, int start, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectAll", data, start, count));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeerForce", peer));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeer", peer));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeer", peer, data));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::Utils::NetDataWriter* writer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeer", peer, writer));
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data, int start, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPeer", peer, data, start, count));
}
// Autogenerated method: LiteNetLib.NetManager.GetEnumerator
LiteNetLib::NetManager::NetPeerEnumerator LiteNetLib::NetManager::GetEnumerator() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetManager::NetPeerEnumerator>(this, "GetEnumerator"));
}
// Autogenerated method: LiteNetLib.NetManager.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", data, length, errorCode, remoteEndPoint));
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::System_Collections_Generic_IEnumerable_1_GetEnumerator() {
  return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*>(this, "System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator")));
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
}
