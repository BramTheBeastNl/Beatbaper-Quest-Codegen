// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.CRC32C
#include "LiteNetLib/Utils/CRC32C.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ChecksumSize
int LiteNetLib::Utils::CRC32C::_get_ChecksumSize() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_get_ChecksumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "CRC32C", "ChecksumSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChecksumSize
void LiteNetLib::Utils::CRC32C::_set_ChecksumSize(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_set_ChecksumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "ChecksumSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 Poly
uint LiteNetLib::Utils::CRC32C::_get_Poly() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_get_Poly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("LiteNetLib.Utils", "CRC32C", "Poly"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 Poly
void LiteNetLib::Utils::CRC32C::_set_Poly(uint value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_set_Poly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Poly", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] Table
::Array<uint>* LiteNetLib::Utils::CRC32C::_get_Table() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_get_Table");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("LiteNetLib.Utils", "CRC32C", "Table"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] Table
void LiteNetLib::Utils::CRC32C::_set_Table(::Array<uint>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("_set_Table");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Table", value));
}
// Autogenerated method: LiteNetLib.Utils.CRC32C..cctor
void LiteNetLib::Utils::CRC32C::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", il2cpp_utils::NoArgClass<void>(), ".cctor", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.CRC32C.Compute
uint LiteNetLib::Utils::CRC32C::Compute(::Array<uint8_t>* input, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CRC32C").WithContext("Compute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", il2cpp_utils::NoArgClass<uint>(), "Compute", {}, ::il2cpp_utils::ExtractTypes(input, offset, length)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, offset, length);
}
