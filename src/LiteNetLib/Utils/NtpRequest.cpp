// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NtpRequest
#include "LiteNetLib/Utils/NtpRequest.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LiteNetLib.Utils.NtpPacket
#include "LiteNetLib/Utils/NtpPacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultPort
int LiteNetLib::Utils::NtpRequest::_get_DefaultPort() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "NtpRequest", "DefaultPort"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultPort
void LiteNetLib::Utils::NtpRequest::_set_DefaultPort(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpRequest", "DefaultPort", value));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest..ctor
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::New_ctor(System::Net::IPEndPoint* endPoint, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  return THROW_UNLESS(il2cpp_utils::New<NtpRequest*>(endPoint, onRequestComplete));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(System::Net::IPEndPoint* endPoint, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::NtpRequest*>("LiteNetLib.Utils", "NtpRequest", "Create", endPoint, onRequestComplete));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(System::Net::IPAddress* ipAddress, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::NtpRequest*>("LiteNetLib.Utils", "NtpRequest", "Create", ipAddress, onRequestComplete));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::Il2CppString* ntpServerAddress, int port, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::NtpRequest*>("LiteNetLib.Utils", "NtpRequest", "Create", ntpServerAddress, port, onRequestComplete));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::Il2CppString* ntpServerAddress, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::NtpRequest*>("LiteNetLib.Utils", "NtpRequest", "Create", ntpServerAddress, onRequestComplete));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Send
void LiteNetLib::Utils::NtpRequest::Send() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send"));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Close
void LiteNetLib::Utils::NtpRequest::Close() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Close"));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::Utils::NtpRequest::LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", data, length, errorCode, remoteEndPoint));
}
