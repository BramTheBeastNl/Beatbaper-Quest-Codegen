// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPeer/IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MtuCheckDelay
int LiteNetLib::NetPeer::_get_MtuCheckDelay() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MtuCheckDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MtuCheckDelay
void LiteNetLib::NetPeer::_set_MtuCheckDelay(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MtuCheckDelay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxMtuCheckAttempts
int LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxMtuCheckAttempts
void LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ShutdownDelay
int LiteNetLib::NetPeer::_get_ShutdownDelay() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "ShutdownDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ShutdownDelay
void LiteNetLib::NetPeer::_set_ShutdownDelay(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "ShutdownDelay", value));
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionNum
uint8_t LiteNetLib::NetPeer::get_ConnectionNum() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint8_t>(this, "get_ConnectionNum"));
}
// Autogenerated method: LiteNetLib.NetPeer.set_ConnectionNum
void LiteNetLib::NetPeer::set_ConnectionNum(uint8_t value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_ConnectionNum", value));
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionState
LiteNetLib::ConnectionState LiteNetLib::NetPeer::get_ConnectionState() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::ConnectionState>(this, "get_ConnectionState"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectTime
int64_t LiteNetLib::NetPeer::get_ConnectTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>(this, "get_ConnectTime"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_Ping
int LiteNetLib::NetPeer::get_Ping() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Ping"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_Mtu
int LiteNetLib::NetPeer::get_Mtu() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Mtu"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteTimeDelta
int64_t LiteNetLib::NetPeer::get_RemoteTimeDelta() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>(this, "get_RemoteTimeDelta"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteUtcTime
System::DateTime LiteNetLib::NetPeer::get_RemoteUtcTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DateTime>(this, "get_RemoteUtcTime"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_TimeSinceLastPacket
int LiteNetLib::NetPeer::get_TimeSinceLastPacket() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_TimeSinceLastPacket"));
}
// Autogenerated method: LiteNetLib.NetPeer.get_ResendDelay
double LiteNetLib::NetPeer::get_ResendDelay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<double>(this, "get_ResendDelay"));
}
// Autogenerated method: LiteNetLib.NetPeer..ctor
LiteNetLib::NetPeer* LiteNetLib::NetPeer::New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id) {
  return THROW_UNLESS(il2cpp_utils::New<NetPeer*>(netManager, remoteEndPoint, id));
}
// Autogenerated method: LiteNetLib.NetPeer.SetMtu
void LiteNetLib::NetPeer::SetMtu(int mtuIdx) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetMtu", mtuIdx));
}
// Autogenerated method: LiteNetLib.NetPeer.GetPacketsCountInReliableQueue
int LiteNetLib::NetPeer::GetPacketsCountInReliableQueue(uint8_t channelNumber, bool ordered) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetPacketsCountInReliableQueue", channelNumber, ordered));
}
// Autogenerated method: LiteNetLib.NetPeer.CreateChannel
LiteNetLib::BaseChannel* LiteNetLib::NetPeer::CreateChannel(uint8_t idx) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::BaseChannel*>(this, "CreateChannel", idx));
}
// Autogenerated method: LiteNetLib.NetPeer..ctor
LiteNetLib::NetPeer* LiteNetLib::NetPeer::New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id, uint8_t connectNum, LiteNetLib::Utils::NetDataWriter* connectData) {
  return THROW_UNLESS(il2cpp_utils::New<NetPeer*>(netManager, remoteEndPoint, id, connectNum, connectData));
}
// Autogenerated method: LiteNetLib.NetPeer..ctor
LiteNetLib::NetPeer* LiteNetLib::NetPeer::New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id, int64_t connectId, uint8_t connectNum) {
  return THROW_UNLESS(il2cpp_utils::New<NetPeer*>(netManager, remoteEndPoint, id, connectId, connectNum));
}
// Autogenerated method: LiteNetLib.NetPeer.Reject
void LiteNetLib::NetPeer::Reject(int64_t connectionId, uint8_t connectionNumber, ::Array<uint8_t>* data, int start, int length) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Reject", connectionId, connectionNumber, data, start, length));
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectAccept
bool LiteNetLib::NetPeer::ProcessConnectAccept(LiteNetLib::NetConnectAcceptPacket* packet) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ProcessConnectAccept", packet));
}
// Autogenerated method: LiteNetLib.NetPeer.GetMaxSinglePacketSize
int LiteNetLib::NetPeer::GetMaxSinglePacketSize(LiteNetLib::DeliveryMethod options) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetMaxSinglePacketSize", options));
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendWithDeliveryEvent", data, channelNumber, deliveryMethod, userData));
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendWithDeliveryEvent", data, start, length, channelNumber, deliveryMethod, userData));
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendWithDeliveryEvent", dataWriter, channelNumber, deliveryMethod, userData));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", data, deliveryMethod));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", dataWriter, deliveryMethod));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", data, start, length, options));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", data, channelNumber, deliveryMethod));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", dataWriter, channelNumber, deliveryMethod));
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Send", data, start, length, channelNumber, deliveryMethod));
}
// Autogenerated method: LiteNetLib.NetPeer.SendInternal
void LiteNetLib::NetPeer::SendInternal(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendInternal", data, start, length, channelNumber, deliveryMethod, userData));
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::Array<uint8_t>* data) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect", data));
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(LiteNetLib::Utils::NetDataWriter* writer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect", writer));
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::Array<uint8_t>* data, int start, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect", data, start, count));
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect"));
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessDisconnect
LiteNetLib::DisconnectResult LiteNetLib::NetPeer::ProcessDisconnect(LiteNetLib::NetPacket* packet) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::DisconnectResult>(this, "ProcessDisconnect", packet));
}
// Autogenerated method: LiteNetLib.NetPeer.Shutdown
LiteNetLib::ShutdownResult LiteNetLib::NetPeer::Shutdown(::Array<uint8_t>* data, int start, int length, bool force) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::ShutdownResult>(this, "Shutdown", data, start, length, force));
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateRoundTripTime
void LiteNetLib::NetPeer::UpdateRoundTripTime(int roundTripTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateRoundTripTime", roundTripTime));
}
// Autogenerated method: LiteNetLib.NetPeer.AddReliablePacket
void LiteNetLib::NetPeer::AddReliablePacket(LiteNetLib::DeliveryMethod method, LiteNetLib::NetPacket* p) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddReliablePacket", method, p));
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessMtuPacket
void LiteNetLib::NetPeer::ProcessMtuPacket(LiteNetLib::NetPacket* packet) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProcessMtuPacket", packet));
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateMtuLogic
void LiteNetLib::NetPeer::UpdateMtuLogic(int deltaTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateMtuLogic", deltaTime));
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectRequest
LiteNetLib::ConnectRequestResult LiteNetLib::NetPeer::ProcessConnectRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::ConnectRequestResult>(this, "ProcessConnectRequest", connRequest));
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessPacket
void LiteNetLib::NetPeer::ProcessPacket(LiteNetLib::NetPacket* packet) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProcessPacket", packet));
}
// Autogenerated method: LiteNetLib.NetPeer.SendMerged
void LiteNetLib::NetPeer::SendMerged() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendMerged"));
}
// Autogenerated method: LiteNetLib.NetPeer.SendUserData
void LiteNetLib::NetPeer::SendUserData(LiteNetLib::NetPacket* packet) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendUserData", packet));
}
// Autogenerated method: LiteNetLib.NetPeer.Flush
void LiteNetLib::NetPeer::Flush() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Flush"));
}
// Autogenerated method: LiteNetLib.NetPeer.Update
void LiteNetLib::NetPeer::Update(int deltaTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update", deltaTime));
}
// Autogenerated method: LiteNetLib.NetPeer.RecycleAndDeliver
void LiteNetLib::NetPeer::RecycleAndDeliver(LiteNetLib::NetPacket* packet) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RecycleAndDeliver", packet));
}
