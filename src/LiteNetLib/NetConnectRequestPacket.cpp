// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.SocketAddress
#include "System/Net/SocketAddress.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConnectRequestPacket::_get_HeaderSize() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext("_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectRequestPacket", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConnectRequestPacket::_set_HeaderSize(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext("_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectRequestPacket", "HeaderSize", value));
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket..ctor
LiteNetLib::NetConnectRequestPacket* LiteNetLib::NetConnectRequestPacket::New_ctor(int64_t connectionTime, uint8_t connectionNumber, ::Array<uint8_t>* targetAddress, LiteNetLib::Utils::NetDataReader* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<NetConnectRequestPacket*>(connectionTime, connectionNumber, targetAddress, data));
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.GetProtocolId
int LiteNetLib::NetConnectRequestPacket::GetProtocolId(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext("GetProtocolId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", il2cpp_utils::NoArgClass<int>(), "GetProtocolId", {}, ::il2cpp_utils::ExtractTypes(packet)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.FromData
LiteNetLib::NetConnectRequestPacket* LiteNetLib::NetConnectRequestPacket::FromData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext("FromData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", il2cpp_utils::NoArgClass<LiteNetLib::NetConnectRequestPacket*>(), "FromData", {}, ::il2cpp_utils::ExtractTypes(packet)));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetConnectRequestPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.Make
LiteNetLib::NetPacket* LiteNetLib::NetConnectRequestPacket::Make(LiteNetLib::Utils::NetDataWriter* connectData, System::Net::SocketAddress* addressBytes, int64_t connectId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetConnectRequestPacket").WithContext("Make");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", il2cpp_utils::NoArgClass<LiteNetLib::NetPacket*>(), "Make", {}, ::il2cpp_utils::ExtractTypes(connectData, addressBytes, connectId)));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectData, addressBytes, connectId);
}
