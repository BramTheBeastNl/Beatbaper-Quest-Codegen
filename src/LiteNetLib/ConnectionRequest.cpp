// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.ConnectionRequest.get_Result
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequest::get_Result() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("get_Result");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<LiteNetLib::ConnectionRequestResult>(), "get_Result", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ConnectionRequestResult, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.set_Result
void LiteNetLib::ConnectionRequest::set_Result(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("set_Result");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "set_Result", {}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.TryActivate
bool LiteNetLib::ConnectionRequest::TryActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("TryActivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryActivate", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.UpdateRequest
void LiteNetLib::ConnectionRequest::UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("UpdateRequest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "UpdateRequest", {}, ::il2cpp_utils::ExtractTypes(connRequest)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.ConnectionRequest..ctor
LiteNetLib::ConnectionRequest* LiteNetLib::ConnectionRequest::New_ctor(int64_t connectionId, uint8_t connectionNumber, LiteNetLib::Utils::NetDataReader* netDataReader, System::Net::IPEndPoint* endPoint, LiteNetLib::NetManager* listener) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<ConnectionRequest*>(connectionId, connectionNumber, netDataReader, endPoint, listener));
}
// Autogenerated method: LiteNetLib.ConnectionRequest.AcceptIfKey
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::AcceptIfKey(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("AcceptIfKey");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<LiteNetLib::NetPeer*>(), "AcceptIfKey", {}, ::il2cpp_utils::ExtractTypes(key)));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Accept
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Accept");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<LiteNetLib::NetPeer*>(), "Accept", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Reject", {}, ::il2cpp_utils::ExtractTypes(rejectData, start, length, force)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length, force);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Reject", {}, ::il2cpp_utils::ExtractTypes(rejectData, start, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "RejectForce", {}, ::il2cpp_utils::ExtractTypes(rejectData, start, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "RejectForce", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "RejectForce", {}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "RejectForce", {}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Reject", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Reject", {}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("ConnectionRequest").WithContext("Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Reject", {}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
