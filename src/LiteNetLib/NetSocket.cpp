// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Net.Sockets.Socket
#include "System/Net/Sockets/Socket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ReceivePollingTime
int LiteNetLib::NetSocket::_get_ReceivePollingTime() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "ReceivePollingTime"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ReceivePollingTime
void LiteNetLib::NetSocket::_set_ReceivePollingTime(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "ReceivePollingTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SioUdpConnreset
int LiteNetLib::NetSocket::_get_SioUdpConnreset() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "SioUdpConnreset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SioUdpConnreset
void LiteNetLib::NetSocket::_set_SioUdpConnreset(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "SioUdpConnreset", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Net.IPAddress MulticastAddressV6
System::Net::IPAddress* LiteNetLib::NetSocket::_get_MulticastAddressV6() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::IPAddress*>("LiteNetLib", "NetSocket", "MulticastAddressV6"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Net.IPAddress MulticastAddressV6
void LiteNetLib::NetSocket::_set_MulticastAddressV6(System::Net::IPAddress* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "MulticastAddressV6", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Boolean IPv6Support
bool LiteNetLib::NetSocket::_get_IPv6Support() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LiteNetLib", "NetSocket", "IPv6Support"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Boolean IPv6Support
void LiteNetLib::NetSocket::_set_IPv6Support(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "IPv6Support", value));
}
// Autogenerated method: LiteNetLib.NetSocket.get_LocalPort
int LiteNetLib::NetSocket::get_LocalPort() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_LocalPort"));
}
// Autogenerated method: LiteNetLib.NetSocket.set_LocalPort
void LiteNetLib::NetSocket::set_LocalPort(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_LocalPort", value));
}
// Autogenerated method: LiteNetLib.NetSocket.get_Ttl
int16_t LiteNetLib::NetSocket::get_Ttl() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int16_t>(this, "get_Ttl"));
}
// Autogenerated method: LiteNetLib.NetSocket.set_Ttl
void LiteNetLib::NetSocket::set_Ttl(int16_t value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Ttl", value));
}
// Autogenerated method: LiteNetLib.NetSocket..cctor
void LiteNetLib::NetSocket::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("LiteNetLib", "NetSocket", ".cctor"));
}
// Autogenerated method: LiteNetLib.NetSocket..ctor
LiteNetLib::NetSocket* LiteNetLib::NetSocket::New_ctor(LiteNetLib::INetSocketListener* listener) {
  return THROW_UNLESS(il2cpp_utils::New<NetSocket*>(listener));
}
// Autogenerated method: LiteNetLib.NetSocket.IsActive
bool LiteNetLib::NetSocket::IsActive() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsActive"));
}
// Autogenerated method: LiteNetLib.NetSocket.ReceiveLogic
void LiteNetLib::NetSocket::ReceiveLogic(::Il2CppObject* state) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReceiveLogic", state));
}
// Autogenerated method: LiteNetLib.NetSocket.Bind
bool LiteNetLib::NetSocket::Bind(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port, bool reuseAddress, bool ipv6, System::Threading::ThreadPriority priority) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Bind", addressIPv4, addressIPv6, port, reuseAddress, ipv6, priority));
}
// Autogenerated method: LiteNetLib.NetSocket.BindSocket
bool LiteNetLib::NetSocket::BindSocket(System::Net::Sockets::Socket* socket, System::Net::IPEndPoint* ep, bool reuseAddress) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "BindSocket", socket, ep, reuseAddress));
}
// Autogenerated method: LiteNetLib.NetSocket.SendBroadcast
bool LiteNetLib::NetSocket::SendBroadcast(::Array<uint8_t>* data, int offset, int size, int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SendBroadcast", data, offset, size, port));
}
// Autogenerated method: LiteNetLib.NetSocket.SendTo
int LiteNetLib::NetSocket::SendTo(::Array<uint8_t>* data, int offset, int size, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError& errorCode) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "SendTo", data, offset, size, remoteEndPoint, errorCode));
}
// Autogenerated method: LiteNetLib.NetSocket.Close
void LiteNetLib::NetSocket::Close(bool suspend) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Close", suspend));
}
