// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetUtils
#include "LiteNetLib/NetUtils.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
System::Collections::Generic::List_1<::Il2CppString*>* LiteNetLib::NetUtils::_get_IpList() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("_get_IpList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<::Il2CppString*>*>("LiteNetLib", "NetUtils", "IpList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
void LiteNetLib::NetUtils::_set_IpList(System::Collections::Generic::List_1<::Il2CppString*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("_set_IpList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetUtils", "IpList", value));
}
// Autogenerated method: LiteNetLib.NetUtils.MakeEndPoint
System::Net::IPEndPoint* LiteNetLib::NetUtils::MakeEndPoint(::Il2CppString* hostStr, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("MakeEndPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "MakeEndPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostStr, port)));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr, port);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::Il2CppString* hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostStr)));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPAddress*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::Il2CppString* hostStr, System::Net::Sockets::AddressFamily addressFamily) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostStr, addressFamily)));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPAddress*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr, addressFamily);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddresses
::Array<System::Net::IPAddress*>* LiteNetLib::NetUtils::ResolveAddresses(::Il2CppString* hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("ResolveAddresses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddresses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostStr)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Net::IPAddress*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
System::Collections::Generic::List_1<::Il2CppString*>* LiteNetLib::NetUtils::GetLocalIpList(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(addrType)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
void LiteNetLib::NetUtils::GetLocalIpList(System::Collections::Generic::IList_1<::Il2CppString*>* targetList, LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(targetList, addrType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetList, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIp
::Il2CppString* LiteNetLib::NetUtils::GetLocalIp(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("GetLocalIp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(addrType)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.PrintInterfaceInfos
void LiteNetLib::NetUtils::PrintInterfaceInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("PrintInterfaceInfos");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "PrintInterfaceInfos", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.RelativeSequenceNumber
int LiteNetLib::NetUtils::RelativeSequenceNumber(int number, int expected) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext("RelativeSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "RelativeSequenceNumber", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(number, expected)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, number, expected);
}
// Autogenerated method: LiteNetLib.NetUtils..cctor
void LiteNetLib::NetUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib").WithContext("NetUtils").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
