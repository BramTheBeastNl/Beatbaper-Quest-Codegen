// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRApplications FnTable
Valve::VR::IVRApplications Valve::VR::CVRApplications::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRApplications>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRApplications FnTable
void Valve::VR::CVRApplications::_set_FnTable(Valve::VR::IVRApplications value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRApplications.AddApplicationManifest
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::AddApplicationManifest(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::AddApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: Valve.VR.CVRApplications.RemoveApplicationManifest
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::RemoveApplicationManifest(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::RemoveApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: Valve.VR.CVRApplications.IsApplicationInstalled
bool Valve::VR::CVRApplications::IsApplicationInstalled(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IsApplicationInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsApplicationInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationCount
uint Valve::VR::CVRApplications::GetApplicationCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByIndex
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByIndex(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationKeyByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByProcessId
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByProcessId(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationKeyByProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplication(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchTemplateApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchTemplateApplication(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>* pKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchTemplateApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchTemplateApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplicationFromMimeType
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplicationFromMimeType(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchApplicationFromMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchDashboardOverlay
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchDashboardOverlay(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.CancelApplicationLaunch
bool Valve::VR::CVRApplications::CancelApplicationLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::CancelApplicationLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelApplicationLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.IdentifyApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::IdentifyApplication(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IdentifyApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IdentifyApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationProcessId
uint Valve::VR::CVRApplications::GetApplicationProcessId(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsErrorNameFromEnum
::Il2CppString* Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum(Valve::VR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyString
uint Valve::VR::CVRApplications::GetApplicationPropertyString(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, ByRef<Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyBool
bool Valve::VR::CVRApplications::GetApplicationPropertyBool(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, ByRef<Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyUint64
uint64_t Valve::VR::CVRApplications::GetApplicationPropertyUint64(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, ByRef<Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyUint64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyUint64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.SetApplicationAutoLaunch
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetApplicationAutoLaunch(::Il2CppString* pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::SetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(bAutoLaunch)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationAutoLaunch
bool Valve::VR::CVRApplications::GetApplicationAutoLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.SetDefaultApplicationForMimeType
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetDefaultApplicationForMimeType(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::SetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeType)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: Valve.VR.CVRApplications.GetDefaultApplicationForMimeType
bool Valve::VR::CVRApplications::GetDefaultApplicationForMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationSupportedMimeTypes
bool Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeTypesBuffer), ::il2cpp_utils::ExtractType(unMimeTypesBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsThatSupportMimeType
uint Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeysThatSupportBuffer), ::il2cpp_utils::ExtractType(unAppKeysThatSupportBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationLaunchArguments
uint Valve::VR::CVRApplications::GetApplicationLaunchArguments(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationLaunchArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationLaunchArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchArgs), ::il2cpp_utils::ExtractType(unArgs)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.GetStartingApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetStartingApplication(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetStartingApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartingApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetTransitionState
Valve::VR::EVRApplicationTransitionState Valve::VR::CVRApplications::GetTransitionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetTransitionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransitionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.PerformApplicationPrelaunchCheck
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsTransitionStateNameFromEnum
::Il2CppString* Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum(Valve::VR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, state);
}
// Autogenerated method: Valve.VR.CVRApplications.IsQuitUserPromptRequested
bool Valve::VR::CVRApplications::IsQuitUserPromptRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IsQuitUserPromptRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsQuitUserPromptRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchInternalProcess
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchInternalProcess(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchInternalProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchInternalProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchBinaryPath), ::il2cpp_utils::ExtractType(pchArguments), ::il2cpp_utils::ExtractType(pchWorkingDirectory)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: Valve.VR.CVRApplications.GetCurrentSceneProcessId
uint Valve::VR::CVRApplications::GetCurrentSceneProcessId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetCurrentSceneProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRChaperone FnTable
Valve::VR::IVRChaperone Valve::VR::CVRChaperone::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRChaperone>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRChaperone FnTable
void Valve::VR::CVRChaperone::_set_FnTable(Valve::VR::IVRChaperone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetCalibrationState
Valve::VR::ChaperoneCalibrationState Valve::VR::CVRChaperone::GetCalibrationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetCalibrationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCalibrationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaSize
bool Valve::VR::CVRChaperone::GetPlayAreaSize(ByRef<float> pSizeX, ByRef<float> pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pSizeX), byref(pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaRect
bool Valve::VR::CVRChaperone::GetPlayAreaRect(ByRef<Valve::VR::HmdQuad_t> rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(rect));
}
// Autogenerated method: Valve.VR.CVRChaperone.ReloadInfo
void Valve::VR::CVRChaperone::ReloadInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::ReloadInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.SetSceneColor
void Valve::VR::CVRChaperone::SetSceneColor(Valve::VR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::SetSceneColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSceneColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetBoundsColor
void Valve::VR::CVRChaperone::GetBoundsColor(ByRef<Valve::VR::HmdColor_t> pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ByRef<Valve::VR::HmdColor_t> pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetBoundsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputColorArray), ::il2cpp_utils::ExtractType(nNumOutputColors), ::il2cpp_utils::ExtractType(flCollisionBoundsFadeDistance), ::il2cpp_utils::ExtractType(pOutputCameraColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, byref(pOutputColorArray), nNumOutputColors, flCollisionBoundsFadeDistance, byref(pOutputCameraColor));
}
// Autogenerated method: Valve.VR.CVRChaperone.AreBoundsVisible
bool Valve::VR::CVRChaperone::AreBoundsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::AreBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.ForceBoundsVisible
void Valve::VR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::ForceBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bForce);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRChaperoneSetup FnTable
Valve::VR::IVRChaperoneSetup Valve::VR::CVRChaperoneSetup::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRChaperoneSetup>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRChaperoneSetup FnTable
void Valve::VR::CVRChaperoneSetup::_set_FnTable(Valve::VR::IVRChaperoneSetup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.CommitWorkingCopy
bool Valve::VR::CVRChaperoneSetup::CommitWorkingCopy(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::CommitWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommitWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.RevertWorkingCopy
void Valve::VR::CVRChaperoneSetup::RevertWorkingCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::RevertWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RevertWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize(ByRef<float> pSizeX, ByRef<float> pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pSizeX), byref(pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect(ByRef<Valve::VR::HmdQuad_t> rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(rect));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(ByRef<::Array<Valve::VR::HmdQuad_t>*> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(ByRef<::Array<Valve::VR::HmdQuad_t>*> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(ByRef<Valve::VR::HmdMatrix34_t> pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(ByRef<Valve::VR::HmdMatrix34_t> pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatStandingZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pmatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeX), ::il2cpp_utils::ExtractType(sizeZ)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(ByRef<Valve::VR::HmdMatrix34_t> pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatSeatedZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, byref(pMatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(ByRef<Valve::VR::HmdMatrix34_t> pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatStandingZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, byref(pMatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ReloadFromDisk
void Valve::VR::CVRChaperoneSetup::ReloadFromDisk(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ReloadFromDisk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadFromDisk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(ByRef<Valve::VR::HmdMatrix34_t> pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsTagsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo(::Array<uint8_t>* pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTagsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsTagsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo(ByRef<::Array<uint8_t>*> pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pTagsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLivePhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo(ByRef<::Array<Valve::VR::HmdQuad_t>*> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLivePhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ExportLiveToBuffer
bool Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer(System::Text::StringBuilder* pBuffer, ByRef<uint> pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExportLiveToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(pnBufferLength)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, byref(pnBufferLength));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ImportFromBufferToWorking
bool Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking(::Il2CppString* pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImportFromBufferToWorking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(nImportFlags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: Valve.VR.Compositor_CumulativeStats
#include "Valve/VR/Compositor_CumulativeStats.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRCompositor FnTable
Valve::VR::IVRCompositor Valve::VR::CVRCompositor::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRCompositor>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRCompositor FnTable
void Valve::VR::CVRCompositor::_set_FnTable(Valve::VR::IVRCompositor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRCompositor.SetTrackingSpace
void Valve::VR::CVRCompositor::SetTrackingSpace(Valve::VR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetTrackingSpace
Valve::VR::ETrackingUniverseOrigin Valve::VR::CVRCompositor::GetTrackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.WaitGetPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::WaitGetPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::WaitGetPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitGetPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ByRef<Valve::VR::TrackedDevicePose_t> pOutputPose, ByRef<Valve::VR::TrackedDevicePose_t> pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pOutputGamePose)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, byref(pOutputPose), byref(pOutputGamePose));
}
// Autogenerated method: Valve.VR.CVRCompositor.Submit
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::Submit(Valve::VR::EVREye eEye, ByRef<Valve::VR::Texture_t> pTexture, ByRef<Valve::VR::VRTextureBounds_t> pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::Submit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pTexture), ::il2cpp_utils::ExtractType(pBounds), ::il2cpp_utils::ExtractType(nSubmitFlags)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, byref(pTexture), byref(pBounds), nSubmitFlags);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearLastSubmittedFrame
void Valve::VR::CVRCompositor::ClearLastSubmittedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ClearLastSubmittedFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLastSubmittedFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.PostPresentHandoff
void Valve::VR::CVRCompositor::PostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::PostPresentHandoff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostPresentHandoff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTiming
bool Valve::VR::CVRCompositor::GetFrameTiming(ByRef<Valve::VR::Compositor_FrameTiming> pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(unFramesAgo)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pTiming), unFramesAgo);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimings
uint Valve::VR::CVRCompositor::GetFrameTimings(ByRef<Valve::VR::Compositor_FrameTiming> pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(nFrames)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, byref(pTiming), nFrames);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimeRemaining
float Valve::VR::CVRCompositor::GetFrameTimeRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTimeRemaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimeRemaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCumulativeStats
void Valve::VR::CVRCompositor::GetCumulativeStats(ByRef<Valve::VR::Compositor_CumulativeStats> pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCumulativeStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCumulativeStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pStats), ::il2cpp_utils::ExtractType(nStatsSizeInBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, byref(pStats), nStatsSizeInBytes);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeToColor
void Valve::VR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::FadeToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue), ::il2cpp_utils::ExtractType(fAlpha), ::il2cpp_utils::ExtractType(bBackground)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentFadeColor
Valve::VR::HmdColor_t Valve::VR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentFadeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bBackground)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeGrid
void Valve::VR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::FadeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(bFadeIn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentGridAlpha
float Valve::VR::CVRCompositor::GetCurrentGridAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentGridAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentGridAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetSkyboxOverride
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SetSkyboxOverride(::Array<Valve::VR::Texture_t>* pTextures) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTextures)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pTextures);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearSkyboxOverride
void Valve::VR::CVRCompositor::ClearSkyboxOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ClearSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorBringToFront
void Valve::VR::CVRCompositor::CompositorBringToFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorBringToFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorBringToFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorGoToBack
void Valve::VR::CVRCompositor::CompositorGoToBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorGoToBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorGoToBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorQuit
void Valve::VR::CVRCompositor::CompositorQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsFullscreen
bool Valve::VR::CVRCompositor::IsFullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::IsFullscreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFullscreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentSceneFocusProcess
uint Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastFrameRenderer
uint Valve::VR::CVRCompositor::GetLastFrameRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastFrameRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastFrameRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CanRenderScene
bool Valve::VR::CVRCompositor::CanRenderScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CanRenderScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanRenderScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShowMirrorWindow
void Valve::VR::CVRCompositor::ShowMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ShowMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.HideMirrorWindow
void Valve::VR::CVRCompositor::HideMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::HideMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsMirrorWindowVisible
bool Valve::VR::CVRCompositor::IsMirrorWindowVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::IsMirrorWindowVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMirrorWindowVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorDumpImages
void Valve::VR::CVRCompositor::CompositorDumpImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorDumpImages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorDumpImages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShouldAppRenderWithLowResources
bool Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceInterleavedReprojectionOn
void Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bOverride)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceReconnectProcess
void Valve::VR::CVRCompositor::ForceReconnectProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ForceReconnectProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceReconnectProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SuspendRendering
void Valve::VR::CVRCompositor::SuspendRendering(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SuspendRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SuspendRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bSuspend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureD3D11
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureD3D11(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, ByRef<System::IntPtr> ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, byref(ppD3D11ShaderResourceView));
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseMirrorTextureD3D11
void Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11ShaderResourceView)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureGL
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureGL(Valve::VR::EVREye eEye, ByRef<uint> pglTextureId, System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetMirrorTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pglSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, byref(pglTextureId), pglSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseSharedGLTexture
bool Valve::VR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ReleaseSharedGLTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseSharedGLTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glTextureId), ::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.LockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::LockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.UnlockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPhysicalDevice), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetExplicitTimingMode
void Valve::VR::CVRCompositor::SetExplicitTimingMode(Valve::VR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetExplicitTimingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExplicitTimingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTimingMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: Valve.VR.CVRCompositor.SubmitExplicitTimingData
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SubmitExplicitTimingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SubmitExplicitTimingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitExplicitTimingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVROverlay/Valve.VR._PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.CVROverlay/Valve.VR.PollNextOverlayEventUnion
#include "Valve/VR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVROverlay FnTable
Valve::VR::IVROverlay Valve::VR::CVROverlay::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVROverlay>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVROverlay FnTable
void Valve::VR::CVROverlay::_set_FnTable(Valve::VR::IVROverlay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVROverlay.FindOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::FindOverlay(::Il2CppString* pchOverlayKey, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::FindOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CreateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayName), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.DestroyOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::DestroyOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetHighQualityOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetHighQualityOverlay
uint64_t Valve::VR::CVROverlay::GetHighQualityOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayKey
uint Valve::VR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayName
uint Valve::VR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayName
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchName)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayImageData
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, ByRef<uint> punWidth, ByRef<uint> punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayImageData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayImageData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(punWidth), ::il2cpp_utils::ExtractType(punHeight)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, byref(punWidth), byref(punHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayErrorNameFromEnum
::Il2CppString* Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum(Valve::VR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderingPid
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unPID)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderingPid
uint Valve::VR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(bEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, ByRef<bool> pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(pbEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, byref(pbEnabled));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfRed), ::il2cpp_utils::ExtractType(pfGreen), ::il2cpp_utils::ExtractType(pfBlue)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfRed), byref(pfGreen), byref(pfBlue));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, ByRef<float> pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfAlpha));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, ByRef<float> pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfTexelAspect));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, ByRef<uint> punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punSortOrder));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, ByRef<float> pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfWidthInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fMinDistanceInMeters), ::il2cpp_utils::ExtractType(fMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfMinDistanceInMeters), ::il2cpp_utils::ExtractType(pfMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfMinDistanceInMeters), byref(pfMaxDistanceInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, Valve::VR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, ByRef<Valve::VR::EColorSpace> peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTextureColorSpace));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderModel
uint Valve::VR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<Valve::VR::HmdColor_t> pColor, ByRef<Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pColor), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pColor), byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderModel
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, ByRef<Valve::VR::HmdColor_t> pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchRenderModel), ::il2cpp_utils::ExtractType(pColor)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, byref(pColor));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformType
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, ByRef<Valve::VR::VROverlayTransformType> peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTransformType)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTransformType));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, ByRef<Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTrackingOrigin), byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, ByRef<Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, ByRef<uint> punTrackedDevice, ByRef<Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punTrackedDevice), byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, ByRef<uint> punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punDeviceIndex), pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, ByRef<uint64_t> ulOverlayHandleParent, ByRef<Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(ulOverlayHandleParent), byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, ByRef<Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.HideOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::HideOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.IsOverlayVisible
bool Valve::VR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsOverlayVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOverlayVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetTransformForOverlayCoordinates
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, ByRef<Valve::VR::HmdMatrix34_t> pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetTransformForOverlayCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(coordinatesInOverlay), ::il2cpp_utils::ExtractType(pmatTransform)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, byref(pmatTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.PollNextOverlayEvent
bool Valve::VR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, ByRef<Valve::VR::VREvent_t> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::PollNextOverlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextOverlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, ByRef<Valve::VR::VROverlayInputMethod> peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peInputMethod));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.ComputeOverlayIntersection
bool Valve::VR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, ByRef<Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<Valve::VR::VROverlayIntersectionResults_t> pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ComputeOverlayIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeOverlayIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pParams), ::il2cpp_utils::ExtractType(pResults)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pParams), byref(pResults));
}
// Autogenerated method: Valve.VR.CVROverlay.IsHoverTargetOverlay
bool Valve::VR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsHoverTargetOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsHoverTargetOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetGamepadFocusOverlay
uint64_t Valve::VR::CVROverlay::GetGamepadFocusOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetGamepadFocusOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulNewFocusOverlay)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom), ::il2cpp_utils::ExtractType(ulTo)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.CVROverlay.MoveGamepadFocusToNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(vCenter), ::il2cpp_utils::ExtractType(fRadius)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, ByRef<Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(pvCenter), ::il2cpp_utils::ExtractType(pfRadius)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), byref(pfRadius));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, ByRef<Valve::VR::Texture_t> pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pTexture)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pTexture));
}
// Autogenerated method: Valve.VR.CVROverlay.ClearOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ClearOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRaw
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unWidth), ::il2cpp_utils::ExtractType(unHeight), ::il2cpp_utils::ExtractType(unDepth)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFromFile
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchFilePath)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, ByRef<System::IntPtr> pNativeTextureHandle, System::IntPtr pNativeTextureRef, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<Valve::VR::ETextureType> pAPIType, ByRef<Valve::VR::EColorSpace> pColorSpace, ByRef<Valve::VR::VRTextureBounds_t> pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle), ::il2cpp_utils::ExtractType(pNativeTextureRef), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight), ::il2cpp_utils::ExtractType(pNativeFormat), ::il2cpp_utils::ExtractType(pAPIType), ::il2cpp_utils::ExtractType(pColorSpace), ::il2cpp_utils::ExtractType(pTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pNativeTextureHandle), pNativeTextureRef, byref(pWidth), byref(pHeight), byref(pNativeFormat), byref(pAPIType), byref(pColorSpace), byref(pTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.ReleaseNativeOverlayHandle
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ReleaseNativeOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureSize
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, ByRef<uint> pWidth, ByRef<uint> pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pWidth), byref(pHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateDashboardOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateDashboardOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CreateDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayFriendlyName), ::il2cpp_utils::ExtractType(pMainHandle), ::il2cpp_utils::ExtractType(pThumbnailHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, byref(pMainHandle), byref(pThumbnailHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.IsDashboardVisible
bool Valve::VR::CVROverlay::IsDashboardVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsDashboardVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDashboardVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.IsActiveDashboardOverlay
bool Valve::VR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsActiveDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActiveDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.CVROverlay.GetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, ByRef<uint> punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punProcessId));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowDashboard
void Valve::VR::CVROverlay::ShowDashboard(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowDashboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDashboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayToShow)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.CVROverlay.GetPrimaryDashboardDevice
uint Valve::VR::CVROverlay::GetPrimaryDashboardDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetPrimaryDashboardDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboard
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboardForOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowKeyboardForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboardForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetKeyboardText
uint Valve::VR::CVROverlay::GetKeyboardText(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetKeyboardText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeyboardText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(cchText)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.CVROverlay.HideKeyboard
void Valve::VR::CVROverlay::HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::HideKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardTransformAbsolute
void Valve::VR::CVROverlay::SetKeyboardTransformAbsolute(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetKeyboardTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToKeyboardTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, byref(pmatTrackingOriginToKeyboardTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardPositionForOverlay
void Valve::VR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetKeyboardPositionForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(avoidRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayIntersectionMask
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, ByRef<Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayIntersectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayIntersectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pMaskPrimitives), ::il2cpp_utils::ExtractType(unNumMaskPrimitives), ::il2cpp_utils::ExtractType(unPrimitiveSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pMaskPrimitives), unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlags
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, ByRef<uint> pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pFlags)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pFlags));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowMessageOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::CVROverlay::ShowMessageOverlay(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(pchCaption), ::il2cpp_utils::ExtractType(pchButton0Text), ::il2cpp_utils::ExtractType(pchButton1Text), ::il2cpp_utils::ExtractType(pchButton2Text), ::il2cpp_utils::ExtractType(pchButton3Text)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.CVROverlay.CloseMessageOverlay
void Valve::VR::CVROverlay::CloseMessageOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CloseMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay/Valve.VR._PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVROverlay/Valve.VR._PollNextOverlayEventPacked.Invoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke(uint64_t ulOverlayHandle, ByRef<Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay/Valve.VR._PollNextOverlayEventPacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke(uint64_t ulOverlayHandle, ByRef<Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVROverlay/Valve.VR._PollNextOverlayEventPacked.EndInvoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke(ByRef<Valve::VR::VREvent_t_Packed> pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pEvent), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRRenderModels/Valve.VR._GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.CVRRenderModels/Valve.VR.GetComponentStateUnion
#include "Valve/VR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRRenderModels FnTable
Valve::VR::IVRRenderModels Valve::VR::CVRRenderModels::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRRenderModels>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRRenderModels FnTable
void Valve::VR::CVRRenderModels::_set_FnTable(Valve::VR::IVRRenderModels value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadRenderModel_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadRenderModel_Async(::Il2CppString* pchRenderModelName, ByRef<System::IntPtr> ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadRenderModel_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(ppRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, byref(ppRenderModel));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeRenderModel
void Valve::VR::CVRRenderModels::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTexture_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTexture_Async(int textureId, ByRef<System::IntPtr> ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadTexture_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTexture_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(ppTexture)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, byref(ppTexture));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTexture
void Valve::VR::CVRRenderModels::FreeTexture(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTexture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, System::IntPtr pD3D11Device, ByRef<System::IntPtr> ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pD3D11Device), ::il2cpp_utils::ExtractType(ppD3D11Texture2D)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, byref(ppD3D11Texture2D));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadIntoTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pDstTexture)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTextureD3D11
void Valve::VR::CVRRenderModels::FreeTextureD3D11(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11Texture2D)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelName
uint Valve::VR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unRenderModelIndex), ::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelCount
uint Valve::VR::CVRRenderModels::GetRenderModelCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentCount
uint Valve::VR::CVRRenderModels::GetComponentCount(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentName
uint Valve::VR::CVRRenderModels::GetComponentName(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unComponentIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentButtonMask
uint64_t Valve::VR::CVRRenderModels::GetComponentButtonMask(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentButtonMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentButtonMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentRenderModelName
uint Valve::VR::CVRRenderModels::GetComponentRenderModelName(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentState
bool Valve::VR::CVRRenderModels::GetComponentState(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, ByRef<Valve::VR::VRControllerState_t> pControllerState, ByRef<Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels.RenderModelHasComponent
bool Valve::VR::CVRRenderModels::RenderModelHasComponent(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::RenderModelHasComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderModelHasComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelThumbnailURL
uint Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, ByRef<Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelOriginalPath
uint Valve::VR::CVRRenderModels::GetRenderModelOriginalPath(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, ByRef<Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelOriginalPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelOriginalPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::Il2CppString* Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum(Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels/Valve.VR._GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRRenderModels/Valve.VR._GetComponentStatePacked.Invoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, ByRef<Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels/Valve.VR._GetComponentStatePacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, ByRef<Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<Valve::VR::RenderModel_ComponentState_t> pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState), callback, object);
}
// Autogenerated method: Valve.VR.CVRRenderModels/Valve.VR._GetComponentStatePacked.EndInvoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke(ByRef<Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<Valve::VR::RenderModel_ComponentState_t> pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, byref(pControllerState), byref(pState), byref(pComponentState), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRNotifications
#include "Valve/VR/CVRNotifications.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRNotifications FnTable
Valve::VR::IVRNotifications Valve::VR::CVRNotifications::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRNotifications>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRNotifications FnTable
void Valve::VR::CVRNotifications::_set_FnTable(Valve::VR::IVRNotifications value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRNotifications.CreateNotification
Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::CreateNotification(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, ByRef<Valve::VR::NotificationBitmap_t> pImage, ByRef<uint> pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::CreateNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, byref(pImage), byref(pNotificationId));
}
// Autogenerated method: Valve.VR.CVRNotifications.RemoveNotification
Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::RemoveNotification(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::RemoveNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRSettings FnTable
Valve::VR::IVRSettings Valve::VR::CVRSettings::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRSettings>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRSettings FnTable
void Valve::VR::CVRSettings::_set_FnTable(Valve::VR::IVRSettings value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRSettings.GetSettingsErrorNameFromEnum
::Il2CppString* Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum(Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.CVRSettings.Sync
bool Valve::VR::CVRSettings::Sync(bool bForce, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::Sync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetBool
void Valve::VR::CVRSettings::SetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetInt32
void Valve::VR::CVRSettings::SetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetFloat
void Valve::VR::CVRSettings::SetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetString
void Valve::VR::CVRSettings::SetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetBool
bool Valve::VR::CVRSettings::GetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetInt32
int Valve::VR::CVRSettings::GetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetFloat
float Valve::VR::CVRSettings::GetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetString
void Valve::VR::CVRSettings::GetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveSection
void Valve::VR::CVRSettings::RemoveSection(::Il2CppString* pchSection, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::RemoveSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveKeyInSection
void Valve::VR::CVRSettings::RemoveKeyInSection(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ByRef<Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::RemoveKeyInSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRScreenshots FnTable
Valve::VR::IVRScreenshots Valve::VR::CVRScreenshots::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRScreenshots>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRScreenshots FnTable
void Valve::VR::CVRScreenshots::_set_FnTable(Valve::VR::IVRScreenshots value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRScreenshots.RequestScreenshot
Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::RequestScreenshot(ByRef<uint> pOutScreenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::RequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.CVRScreenshots.HookScreenshot
Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::HookScreenshot(::Array<Valve::VR::EVRScreenshotType>* pSupportedTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::HookScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HookScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes);
}
// Autogenerated method: Valve.VR.CVRScreenshots.GetScreenshotPropertyType
Valve::VR::EVRScreenshotType Valve::VR::CVRScreenshots::GetScreenshotPropertyType(uint screenshotHandle, ByRef<Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::GetScreenshotPropertyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, byref(pError));
}
// Autogenerated method: Valve.VR.CVRScreenshots.GetScreenshotPropertyFilename
uint Valve::VR::CVRScreenshots::GetScreenshotPropertyFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, ByRef<Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::GetScreenshotPropertyFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, byref(pError));
}
// Autogenerated method: Valve.VR.CVRScreenshots.UpdateScreenshotProgress
Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::UpdateScreenshotProgress(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::UpdateScreenshotProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScreenshotProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: Valve.VR.CVRScreenshots.TakeStereoScreenshot
Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::TakeStereoScreenshot(ByRef<uint> pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.CVRScreenshots.SubmitScreenshot
Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::SubmitScreenshot(uint screenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRScreenshots::SubmitScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRResources
#include "Valve/VR/CVRResources.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRResources FnTable
Valve::VR::IVRResources Valve::VR::CVRResources::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRResources>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRResources FnTable
void Valve::VR::CVRResources::_set_FnTable(Valve::VR::IVRResources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRResources.LoadSharedResource
uint Valve::VR::CVRResources::LoadSharedResource(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::LoadSharedResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSharedResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.CVRResources.GetResourceFullPath
uint Valve::VR::CVRResources::GetResourceFullPath(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::GetResourceFullPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResourceFullPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRDriverManager
#include "Valve/VR/CVRDriverManager.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRDriverManager FnTable
Valve::VR::IVRDriverManager Valve::VR::CVRDriverManager::_get_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::_get_FnTable");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::IVRDriverManager>(___internal__instance, "FnTable"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.IVRDriverManager FnTable
void Valve::VR::CVRDriverManager::_set_FnTable(Valve::VR::IVRDriverManager value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::_set_FnTable");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "FnTable", value));
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverCount
uint Valve::VR::CVRDriverManager::GetDriverCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::GetDriverCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverName
uint Valve::VR::CVRDriverManager::GetDriverName(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::GetDriverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVRInterop
#include "Valve/VR/OpenVRInterop.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.OpenVRInterop.InitInternal
uint Valve::VR::OpenVRInterop::InitInternal(ByRef<Valve::VR::EVRInitError> peError, Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(peError), eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVRInterop.ShutdownInternal
void Valve::VR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsHmdPresent
bool Valve::VR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsRuntimeInstalled
bool Valve::VR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetStringForHmdError
System::IntPtr Valve::VR::OpenVRInterop::GetStringForHmdError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetGenericInterface
System::IntPtr Valve::VR::OpenVRInterop::GetGenericInterface(ByRef<::Il2CppString*> pchInterfaceVersion, ByRef<Valve::VR::EVRInitError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(pchInterfaceVersion), byref(peError));
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsInterfaceVersionValid
bool Valve::VR::OpenVRInterop::IsInterfaceVersionValid(ByRef<::Il2CppString*> pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(pchInterfaceVersion));
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetInitToken
uint Valve::VR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Left
Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_get_Eye_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Left
void Valve::VR::EVREye::_set_Eye_Left(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_set_Eye_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Right
Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_get_Eye_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Right
void Valve::VR::EVREye::_set_Eye_Right(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_set_Eye_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVREye::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVREye::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX
Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_DirectX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX
void Valve::VR::ETextureType::_set_DirectX(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_DirectX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType OpenGL
Valve::VR::ETextureType Valve::VR::ETextureType::_get_OpenGL() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_OpenGL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "OpenGL"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType OpenGL
void Valve::VR::ETextureType::_set_OpenGL(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_OpenGL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "OpenGL", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType Vulkan
Valve::VR::ETextureType Valve::VR::ETextureType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType Vulkan
void Valve::VR::ETextureType::_set_Vulkan(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType IOSurface
Valve::VR::ETextureType Valve::VR::ETextureType::_get_IOSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_IOSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "IOSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType IOSurface
void Valve::VR::ETextureType::_set_IOSurface(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_IOSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "IOSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX12
Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX12() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_DirectX12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX12"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX12
void Valve::VR::ETextureType::_set_DirectX12(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_DirectX12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX12", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETextureType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETextureType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Auto
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Auto
void Valve::VR::EColorSpace::_set_Auto(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Gamma
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Gamma
void Valve::VR::EColorSpace::_set_Gamma(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Linear
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Linear
void Valve::VR::EColorSpace::_set_Linear(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Linear", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EColorSpace::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EColorSpace::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingResult
#include "Valve/VR/ETrackingResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Uninitialized
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Uninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Uninitialized
void Valve::VR::ETrackingResult::_set_Uninitialized(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Uninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_InProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Calibrating_InProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_InProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
void Valve::VR::ETrackingResult::_set_Calibrating_InProgress(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Calibrating_InProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_InProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
void Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OK
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Running_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OK
void Valve::VR::ETrackingResult::_set_Running_OK(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Running_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Running_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OutOfRange
void Valve::VR::ETrackingResult::_set_Running_OutOfRange(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Running_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OutOfRange", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackingResult::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackingResult::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Invalid
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Invalid
void Valve::VR::ETrackedDeviceClass::_set_Invalid(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass HMD
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_HMD() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_HMD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "HMD"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass HMD
void Valve::VR::ETrackedDeviceClass::_set_HMD(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_HMD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "HMD", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Controller
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_Controller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Controller"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Controller
void Valve::VR::ETrackedDeviceClass::_set_Controller(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_Controller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Controller", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_GenericTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_GenericTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "GenericTracker"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
void Valve::VR::ETrackedDeviceClass::_set_GenericTracker(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_GenericTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "GenericTracker", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
void Valve::VR::ETrackedDeviceClass::_set_TrackingReference(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
void Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackedDeviceClass::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackedDeviceClass::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole Invalid
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole Invalid
void Valve::VR::ETrackedControllerRole::_set_Invalid(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole LeftHand
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole LeftHand
void Valve::VR::ETrackedControllerRole::_set_LeftHand(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole RightHand
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole RightHand
void Valve::VR::ETrackedControllerRole::_set_RightHand(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "RightHand", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackedControllerRole::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackedControllerRole::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackingUniverseOrigin::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackingUniverseOrigin::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackedDeviceProperty::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackedDeviceProperty::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ETrackedPropertyError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ETrackedPropertyError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Default
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Default"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Default
void Valve::VR::EVRSubmitFlags::_set_Submit_Default(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Default", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
void Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
void Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Reserved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_Reserved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Reserved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
void Valve::VR::EVRSubmitFlags::_set_Submit_Reserved(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_Reserved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Reserved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRSubmitFlags::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRSubmitFlags::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRState
#include "Valve/VR/EVRState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Undefined
Valve::VR::EVRState Valve::VR::EVRState::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Undefined
void Valve::VR::EVRState::_set_Undefined(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Undefined", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Off
Valve::VR::EVRState Valve::VR::EVRState::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Off"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Off
void Valve::VR::EVRState::_set_Off(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching
Valve::VR::EVRState Valve::VR::EVRState::_get_Searching() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Searching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching
void Valve::VR::EVRState::_set_Searching(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Searching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching_Alert
Valve::VR::EVRState Valve::VR::EVRState::_get_Searching_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Searching_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching_Alert
void Valve::VR::EVRState::_set_Searching_Alert(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Searching_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready
void Valve::VR::EVRState::_set_Ready(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert
void Valve::VR::EVRState::_set_Ready_Alert(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState NotReady
Valve::VR::EVRState Valve::VR::EVRState::_get_NotReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_NotReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "NotReady"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState NotReady
void Valve::VR::EVRState::_set_NotReady(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_NotReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "NotReady", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Standby
Valve::VR::EVRState Valve::VR::EVRState::_get_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Standby
void Valve::VR::EVRState::_set_Standby(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Standby", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert_Low
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready_Alert_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert_Low"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert_Low
void Valve::VR::EVRState::_set_Ready_Alert_Low(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready_Alert_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert_Low", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRState::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRState::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_None
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_None
void Valve::VR::EVREventType::_set_VREvent_None(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_IpdChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_IpdChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_IpdChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_IpdChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_IpdChanged
void Valve::VR::EVREventType::_set_VREvent_IpdChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_IpdChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_IpdChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
void Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
void Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
void Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
void Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PropertyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PropertyChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PropertyChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
void Valve::VR::EVREventType::_set_VREvent_PropertyChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PropertyChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PropertyChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessReconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WirelessReconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessReconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessReconnect(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WirelessReconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessReconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonPress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonPress
void Valve::VR::EVREventType::_set_VREvent_ButtonPress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUnpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonUnpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUnpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
void Valve::VR::EVREventType::_set_VREvent_ButtonUnpress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonUnpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUnpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonTouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
void Valve::VR::EVREventType::_set_VREvent_ButtonTouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonTouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUntouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonUntouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUntouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
void Valve::VR::EVREventType::_set_VREvent_ButtonUntouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonUntouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUntouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseMove
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseMove
void Valve::VR::EVREventType::_set_VREvent_MouseMove(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
void Valve::VR::EVREventType::_set_VREvent_MouseButtonDown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
void Valve::VR::EVREventType::_set_VREvent_MouseButtonUp(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusEnter
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FocusEnter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusEnter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusEnter
void Valve::VR::EVREventType::_set_VREvent_FocusEnter(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FocusEnter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusEnter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusLeave
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FocusLeave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusLeave"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusLeave
void Valve::VR::EVREventType::_set_VREvent_FocusLeave(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FocusLeave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusLeave", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Scroll
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Scroll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Scroll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Scroll"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Scroll
void Valve::VR::EVREventType::_set_VREvent_Scroll(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Scroll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Scroll", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TouchPadMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TouchPadMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TouchPadMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
void Valve::VR::EVREventType::_set_VREvent_TouchPadMove(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TouchPadMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TouchPadMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
void Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
void Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusReleased"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
void Valve::VR::EVREventType::_set_VREvent_InputFocusReleased(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusReleased", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
void Valve::VR::EVREventType::_set_VREvent_SceneFocusLost(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
void Valve::VR::EVREventType::_set_VREvent_SceneFocusGained(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
void Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
void Valve::VR::EVREventType::_set_VREvent_InputFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
void Valve::VR::EVREventType::_set_VREvent_HideRenderModels(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ShowRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
void Valve::VR::EVREventType::_set_VREvent_ShowRenderModels(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ShowRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleOpened() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ConsoleOpened");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleOpened"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
void Valve::VR::EVREventType::_set_VREvent_ConsoleOpened(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ConsoleOpened");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleOpened", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ConsoleClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
void Valve::VR::EVREventType::_set_VREvent_ConsoleClosed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ConsoleClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayShown
void Valve::VR::EVREventType::_set_VREvent_OverlayShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
void Valve::VR::EVREventType::_set_VREvent_OverlayHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
void Valve::VR::EVREventType::_set_VREvent_DashboardActivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
void Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
void Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
void Valve::VR::EVREventType::_set_VREvent_DashboardRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ResetDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ResetDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ResetDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
void Valve::VR::EVREventType::_set_VREvent_ResetDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ResetDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ResetDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RenderToast
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RenderToast() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_RenderToast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RenderToast"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RenderToast
void Valve::VR::EVREventType::_set_VREvent_RenderToast(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_RenderToast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RenderToast", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ImageLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
void Valve::VR::EVREventType::_set_VREvent_ImageLoaded(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ImageLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ShowKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
void Valve::VR::EVREventType::_set_VREvent_ShowKeyboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ShowKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_HideKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
void Valve::VR::EVREventType::_set_VREvent_HideKeyboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_HideKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
void Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonDown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonDown
void Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonDown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonUp
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonUp
void Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonUp(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageFailed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ImageFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageFailed
void Valve::VR::EVREventType::_set_VREvent_ImageFailed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ImageFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
void Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RequestScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_RequestScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RequestScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
void Valve::VR::EVREventType::_set_VREvent_RequestScreenshot(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_RequestScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RequestScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
void Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
void Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
void Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
void Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Shown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Shown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Shown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
void Valve::VR::EVREventType::_set_VREvent_Notification_Shown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Shown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Shown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Hidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
void Valve::VR::EVREventType::_set_VREvent_Notification_Hidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
void Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
void Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Quit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Quit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Quit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Quit
void Valve::VR::EVREventType::_set_VREvent_Quit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Quit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Quit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
void Valve::VR::EVREventType::_set_VREvent_ProcessQuit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
void Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
void Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
void Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
void Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_StatusUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_StatusUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_StatusUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
void Valve::VR::EVREventType::_set_VREvent_StatusUpdate(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_StatusUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_StatusUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
void Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MCImageUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MCImageUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MCImageUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
void Valve::VR::EVREventType::_set_VREvent_MCImageUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MCImageUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MCImageUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
void Valve::VR::EVREventType::_set_VREvent_KeyboardClosed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
void Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardDone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
void Valve::VR::EVREventType::_set_VREvent_KeyboardDone(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardDone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
void Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
void Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessConnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
void Valve::VR::EVREventType::_set_VREvent_ProcessConnected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessConnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
void Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
void Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
void Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
void Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVREventType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVREventType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EDeviceActivityLevel::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EDeviceActivityLevel::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_System
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_System"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_System
void Valve::VR::EVRButtonId::_set_k_EButton_System(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_System", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
void Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Grip
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Grip"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Grip
void Valve::VR::EVRButtonId::_set_k_EButton_Grip(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Grip", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_A
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_A"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_A
void Valve::VR::EVRButtonId::_set_k_EButton_A(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_A", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
void Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
void Valve::VR::EVRButtonId::_set_k_EButton_Axis0(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
void Valve::VR::EVRButtonId::_set_k_EButton_Axis1(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
void Valve::VR::EVRButtonId::_set_k_EButton_Axis2(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
void Valve::VR::EVRButtonId::_set_k_EButton_Axis3(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis4"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
void Valve::VR::EVRButtonId::_set_k_EButton_Axis4(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
void Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Max
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Max
void Valve::VR::EVRButtonId::_set_k_EButton_Max(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRButtonId::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRButtonId::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRMouseButton
#include "Valve/VR/EVRMouseButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Left
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Left
void Valve::VR::EVRMouseButton::_set_Left(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Right
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Right
void Valve::VR::EVRMouseButton::_set_Right(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Middle
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Middle
void Valve::VR::EVRMouseButton::_set_Middle(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Middle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRMouseButton::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRMouseButton::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left(Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right(Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EDualAnalogWhich::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EDualAnalogWhich::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError None
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError None
void Valve::VR::EVRInputError::_set_None(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NameNotFound
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NameNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NameNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NameNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NameNotFound
void Valve::VR::EVRInputError::_set_NameNotFound(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NameNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NameNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError WrongType
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_WrongType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_WrongType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "WrongType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError WrongType
void Valve::VR::EVRInputError::_set_WrongType(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_WrongType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "WrongType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidHandle
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidHandle
void Valve::VR::EVRInputError::_set_InvalidHandle(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidParam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidParam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidParam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidParam
void Valve::VR::EVRInputError::_set_InvalidParam(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidParam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidParam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoSteam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoSteam() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NoSteam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoSteam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoSteam
void Valve::VR::EVRInputError::_set_NoSteam(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NoSteam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoSteam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MaxCapacityReached
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MaxCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_MaxCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MaxCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MaxCapacityReached
void Valve::VR::EVRInputError::_set_MaxCapacityReached(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_MaxCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MaxCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError IPCError
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_IPCError() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_IPCError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "IPCError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError IPCError
void Valve::VR::EVRInputError::_set_IPCError(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_IPCError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "IPCError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoActiveActionSet
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoActiveActionSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NoActiveActionSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoActiveActionSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoActiveActionSet
void Valve::VR::EVRInputError::_set_NoActiveActionSet(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NoActiveActionSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoActiveActionSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidDevice
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidDevice
void Valve::VR::EVRInputError::_set_InvalidDevice(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidDevice", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRInputError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRInputError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EHiddenAreaMeshType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EHiddenAreaMeshType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRControllerAxisType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRControllerAxisType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerEventOutputType
#include "Valve/VR/EVRControllerEventOutputType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents(Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents(Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRControllerEventOutputType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRControllerEventOutputType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ECollisionBoundsStyle
#include "Valve/VR/ECollisionBoundsStyle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ECollisionBoundsStyle::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ECollisionBoundsStyle::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError None
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError None
void Valve::VR::EVROverlayError::_set_None(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnknownOverlay
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnknownOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_UnknownOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnknownOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnknownOverlay
void Valve::VR::EVROverlayError::_set_UnknownOverlay(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_UnknownOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnknownOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidHandle
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidHandle
void Valve::VR::EVROverlayError::_set_InvalidHandle(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError PermissionDenied
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError PermissionDenied
void Valve::VR::EVROverlayError::_set_PermissionDenied(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_OverlayLimitExceeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_OverlayLimitExceeded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "OverlayLimitExceeded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
void Valve::VR::EVROverlayError::_set_OverlayLimitExceeded(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_OverlayLimitExceeded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "OverlayLimitExceeded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongVisibilityType
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongVisibilityType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_WrongVisibilityType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongVisibilityType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongVisibilityType
void Valve::VR::EVROverlayError::_set_WrongVisibilityType(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_WrongVisibilityType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongVisibilityType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyTooLong
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyTooLong
void Valve::VR::EVROverlayError::_set_KeyTooLong(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NameTooLong
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NameTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_NameTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NameTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NameTooLong
void Valve::VR::EVROverlayError::_set_NameTooLong(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_NameTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NameTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyInUse
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyInUse
void Valve::VR::EVROverlayError::_set_KeyInUse(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongTransformType
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongTransformType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_WrongTransformType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongTransformType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongTransformType
void Valve::VR::EVROverlayError::_set_WrongTransformType(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_WrongTransformType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongTransformType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTrackedDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidTrackedDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTrackedDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
void Valve::VR::EVROverlayError::_set_InvalidTrackedDevice(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidTrackedDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTrackedDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidParameter
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidParameter
void Valve::VR::EVROverlayError::_set_InvalidParameter(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidParameter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
void Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ArrayTooSmall
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ArrayTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_ArrayTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ArrayTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ArrayTooSmall
void Valve::VR::EVROverlayError::_set_ArrayTooSmall(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_ArrayTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ArrayTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError RequestFailed
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError RequestFailed
void Valve::VR::EVROverlayError::_set_RequestFailed(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTexture
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTexture
void Valve::VR::EVROverlayError::_set_InvalidTexture(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnableToLoadFile
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnableToLoadFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_UnableToLoadFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnableToLoadFile"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnableToLoadFile
void Valve::VR::EVROverlayError::_set_UnableToLoadFile(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_UnableToLoadFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnableToLoadFile", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
void Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NoNeighbor
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NoNeighbor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_NoNeighbor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NoNeighbor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NoNeighbor
void Valve::VR::EVROverlayError::_set_NoNeighbor(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_NoNeighbor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NoNeighbor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
void Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_BadMaskPrimitive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_BadMaskPrimitive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "BadMaskPrimitive"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
void Valve::VR::EVROverlayError::_set_BadMaskPrimitive(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_BadMaskPrimitive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "BadMaskPrimitive", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureAlreadyLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureAlreadyLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureAlreadyLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
void Valve::VR::EVROverlayError::_set_TextureAlreadyLocked(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureAlreadyLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureAlreadyLocked", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureLockCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureLockCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureLockCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
void Valve::VR::EVROverlayError::_set_TextureLockCapacityReached(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureLockCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureLockCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureNotLocked
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureNotLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureNotLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureNotLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureNotLocked
void Valve::VR::EVROverlayError::_set_TextureNotLocked(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureNotLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureNotLocked", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVROverlayError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVROverlayError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Other
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Other"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Other
void Valve::VR::EVRApplicationType::_set_VRApplication_Other(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Other", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Scene() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Scene");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Scene"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
void Valve::VR::EVRApplicationType::_set_VRApplication_Scene(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Scene");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Scene", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Overlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Overlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
void Valve::VR::EVRApplicationType::_set_VRApplication_Overlay(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Overlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Overlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Background
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Background"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Background
void Valve::VR::EVRApplicationType::_set_VRApplication_Background(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Background", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Utility() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Utility");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Utility"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
void Valve::VR::EVRApplicationType::_set_VRApplication_Utility(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Utility");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Utility", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
void Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
void Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
void Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Max
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Max
void Valve::VR::EVRApplicationType::_set_VRApplication_Max(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRApplicationType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRApplicationType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError None
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError None
void Valve::VR::EVRFirmwareError::_set_None(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Success
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Success
void Valve::VR::EVRFirmwareError::_set_Success(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Fail
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Fail() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_Fail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Fail"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Fail
void Valve::VR::EVRFirmwareError::_set_Fail(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_Fail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Fail", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRFirmwareError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRFirmwareError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError OK
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError OK
void Valve::VR::EVRNotificationError::_set_OK(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidNotificationId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_InvalidNotificationId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidNotificationId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
void Valve::VR::EVRNotificationError::_set_InvalidNotificationId(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_InvalidNotificationId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidNotificationId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_NotificationQueueFull() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_NotificationQueueFull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "NotificationQueueFull"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
void Valve::VR::EVRNotificationError::_set_NotificationQueueFull(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_NotificationQueueFull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "NotificationQueueFull", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
void Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
void Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRNotificationError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRNotificationError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError None
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError None
void Valve::VR::EVRInitError::_set_None(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Unknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Unknown
void Valve::VR::EVRInitError::_set_Unknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
void Valve::VR::EVRInitError::_set_Init_InstallationNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationCorrupt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InstallationCorrupt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationCorrupt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
void Valve::VR::EVRInitError::_set_Init_InstallationCorrupt(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InstallationCorrupt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationCorrupt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
void Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FileNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FileNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FileNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FileNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FileNotFound
void Valve::VR::EVRInitError::_set_Init_FileNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FileNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FileNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FactoryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FactoryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FactoryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
void Valve::VR::EVRInitError::_set_Init_FactoryNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FactoryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FactoryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InterfaceNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InterfaceNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InterfaceNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
void Valve::VR::EVRInitError::_set_Init_InterfaceNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InterfaceNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InterfaceNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidInterface
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InvalidInterface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidInterface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidInterface
void Valve::VR::EVRInitError::_set_Init_InvalidInterface(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InvalidInterface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidInterface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
void Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFound
void Valve::VR::EVRInitError::_set_Init_HmdNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotInitialized
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotInitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotInitialized
void Valve::VR::EVRInitError::_set_Init_NotInitialized(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoConfigPath
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoConfigPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoConfigPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoConfigPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoConfigPath
void Valve::VR::EVRInitError::_set_Init_NoConfigPath(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoConfigPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoConfigPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoLogPath
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoLogPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoLogPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoLogPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoLogPath
void Valve::VR::EVRInitError::_set_Init_NoLogPath(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoLogPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoLogPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
void Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Retry
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Retry() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_Retry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Retry"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Retry
void Valve::VR::EVRInitError::_set_Init_Retry(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_Retry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Retry", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InitCanceledByUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InitCanceledByUser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InitCanceledByUser"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
void Valve::VR::EVRInitError::_set_Init_InitCanceledByUser(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InitCanceledByUser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InitCanceledByUser", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
void Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_SettingsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_SettingsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_SettingsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
void Valve::VR::EVRInitError::_set_Init_SettingsInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_SettingsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_SettingsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_ShuttingDown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_ShuttingDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_ShuttingDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_ShuttingDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_ShuttingDown
void Valve::VR::EVRInitError::_set_Init_ShuttingDown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_ShuttingDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_ShuttingDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_TooManyObjects
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_TooManyObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_TooManyObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_TooManyObjects"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_TooManyObjects
void Valve::VR::EVRInitError::_set_Init_TooManyObjects(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_TooManyObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_TooManyObjects", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
void Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
void Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Internal
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Internal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Internal
void Valve::VR::EVRInitError::_set_Init_Internal(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Internal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
void Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
void Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
void Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
void Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidApplicationType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InvalidApplicationType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidApplicationType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
void Valve::VR::EVRInitError::_set_Init_InvalidApplicationType(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InvalidApplicationType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidApplicationType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
void Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
void Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRHomeNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
void Valve::VR::EVRInitError::_set_Init_VRHomeNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRHomeNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_RebootingBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_RebootingBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_RebootingBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_RebootingBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_RebootingBusy
void Valve::VR::EVRInitError::_set_Init_RebootingBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_RebootingBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_RebootingBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_USBServiceBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_USBServiceBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_USBServiceBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
void Valve::VR::EVRInitError::_set_Init_USBServiceBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_USBServiceBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_USBServiceBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Failed
void Valve::VR::EVRInitError::_set_Driver_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Unknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Unknown
void Valve::VR::EVRInitError::_set_Driver_Unknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
void Valve::VR::EVRInitError::_set_Driver_HmdUnknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotLoaded
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_NotLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotLoaded
void Valve::VR::EVRInitError::_set_Driver_NotLoaded(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_NotLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
void Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdInUse
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdInUse
void Valve::VR::EVRInitError::_set_Driver_HmdInUse(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotCalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_NotCalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotCalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
void Valve::VR::EVRInitError::_set_Driver_NotCalibrated(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_NotCalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotCalibrated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
void Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
void Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
void Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ServerInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ServerInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ServerInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
void Valve::VR::EVRInitError::_set_IPC_ServerInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ServerInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ServerInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
void Valve::VR::EVRInitError::_set_IPC_ConnectFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
void Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_MutexInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_MutexInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_MutexInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
void Valve::VR::EVRInitError::_set_IPC_MutexInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_MutexInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_MutexInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_Failed
void Valve::VR::EVRInitError::_set_IPC_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
void Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
void Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_Failed
void Valve::VR::EVRInitError::_set_Compositor_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
void Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
void Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
void Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
void Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
void Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
void Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
void Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
void Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRInitError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRInitError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType None
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType None
void Valve::VR::EVRScreenshotType::_set_None(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Mono
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Mono
void Valve::VR::EVRScreenshotType::_set_Mono(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Stereo
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Stereo
void Valve::VR::EVRScreenshotType::_set_Stereo(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Cubemap
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Cubemap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Cubemap"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Cubemap
void Valve::VR::EVRScreenshotType::_set_Cubemap(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Cubemap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Cubemap", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType MonoPanorama
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_MonoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_MonoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "MonoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType MonoPanorama
void Valve::VR::EVRScreenshotType::_set_MonoPanorama(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_MonoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "MonoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType StereoPanorama
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType StereoPanorama
void Valve::VR::EVRScreenshotType::_set_StereoPanorama(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "StereoPanorama", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRScreenshotType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRScreenshotType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
void Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview(Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_VR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_get_VR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "VR"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
void Valve::VR::EVRScreenshotPropertyFilenames::_set_VR(Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_set_VR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "VR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRScreenshotPropertyFilenames::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRScreenshotPropertyFilenames::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError None
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError None
void Valve::VR::EVRTrackedCameraError::_set_None(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OperationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_OperationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OperationFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
void Valve::VR::EVRTrackedCameraError::_set_OperationFailed(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_OperationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OperationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidHandle(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OutOfHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_OutOfHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OutOfHandles"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
void Valve::VR::EVRTrackedCameraError::_set_OutOfHandles(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_OutOfHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OutOfHandles", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_IPCFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_IPCFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "IPCFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
void Valve::VR::EVRTrackedCameraError::_set_IPCFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_IPCFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "IPCFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
void Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
void Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
void Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
void Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
void Valve::VR::EVRTrackedCameraError::_set_InvalidArgument(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRTrackedCameraError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRTrackedCameraError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_Distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Distorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Distorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_Distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Distorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
void Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRTrackedCameraFrameType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRTrackedCameraFrameType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError None
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError None
void Valve::VR::EVRApplicationError::_set_None(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
void Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoManifest
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_NoManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoManifest
void Valve::VR::EVRApplicationError::_set_NoManifest(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_NoManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_NoApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoApplication
void Valve::VR::EVRApplicationError::_set_NoApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_NoApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidIndex
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidIndex"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidIndex
void Valve::VR::EVRApplicationError::_set_InvalidIndex(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidIndex", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_UnknownApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownApplication
void Valve::VR::EVRApplicationError::_set_UnknownApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_UnknownApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IPCFailed
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IPCFailed
void Valve::VR::EVRApplicationError::_set_IPCFailed(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidManifest
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidManifest
void Valve::VR::EVRApplicationError::_set_InvalidManifest(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidApplication
void Valve::VR::EVRApplicationError::_set_InvalidApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchFailed
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_LaunchFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchFailed
void Valve::VR::EVRApplicationError::_set_LaunchFailed(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_LaunchFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchInProgress
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_LaunchInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchInProgress
void Valve::VR::EVRApplicationError::_set_LaunchInProgress(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_LaunchInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_OldApplicationQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_OldApplicationQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "OldApplicationQuitting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
void Valve::VR::EVRApplicationError::_set_OldApplicationQuitting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_OldApplicationQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "OldApplicationQuitting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError TransitionAborted
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_TransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_TransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "TransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError TransitionAborted
void Valve::VR::EVRApplicationError::_set_TransitionAborted(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_TransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "TransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IsTemplate
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IsTemplate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_IsTemplate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IsTemplate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IsTemplate
void Valve::VR::EVRApplicationError::_set_IsTemplate(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_IsTemplate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IsTemplate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_SteamVRIsExiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_SteamVRIsExiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "SteamVRIsExiting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
void Valve::VR::EVRApplicationError::_set_SteamVRIsExiting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_SteamVRIsExiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "SteamVRIsExiting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError BufferTooSmall
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError BufferTooSmall
void Valve::VR::EVRApplicationError::_set_BufferTooSmall(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError PropertyNotSet
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_PropertyNotSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_PropertyNotSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "PropertyNotSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError PropertyNotSet
void Valve::VR::EVRApplicationError::_set_PropertyNotSet(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_PropertyNotSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "PropertyNotSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownProperty
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownProperty
void Valve::VR::EVRApplicationError::_set_UnknownProperty(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidParameter
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidParameter
void Valve::VR::EVRApplicationError::_set_InvalidParameter(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidParameter", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRApplicationError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRApplicationError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Name_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Name_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Name_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Name_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Name_String
void Valve::VR::EVRApplicationProperty::_set_Name_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Name_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Name_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LaunchType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_LaunchType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LaunchType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
void Valve::VR::EVRApplicationProperty::_set_LaunchType_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_LaunchType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LaunchType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
void Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_BinaryPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_BinaryPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "BinaryPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
void Valve::VR::EVRApplicationProperty::_set_BinaryPath_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_BinaryPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "BinaryPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Arguments_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Arguments_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Arguments_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Arguments_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Arguments_String
void Valve::VR::EVRApplicationProperty::_set_Arguments_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Arguments_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Arguments_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty URL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_URL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_URL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "URL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty URL_String
void Valve::VR::EVRApplicationProperty::_set_URL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_URL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "URL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Description_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Description_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Description_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Description_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Description_String
void Valve::VR::EVRApplicationProperty::_set_Description_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Description_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Description_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_NewsURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_NewsURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "NewsURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
void Valve::VR::EVRApplicationProperty::_set_NewsURL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_NewsURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "NewsURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ImagePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_ImagePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ImagePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
void Valve::VR::EVRApplicationProperty::_set_ImagePath_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_ImagePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ImagePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Source_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Source_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Source_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Source_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Source_String
void Valve::VR::EVRApplicationProperty::_set_Source_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Source_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Source_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
void Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
void Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
void Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
void Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
void Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRApplicationProperty::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRApplicationProperty::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRApplicationTransitionState::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRApplicationTransitionState::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState OK
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState OK
void Valve::VR::ChaperoneCalibrationState::_set_OK(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning
void Valve::VR::ChaperoneCalibrationState::_set_Warning(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error
void Valve::VR::ChaperoneCalibrationState::_set_Error(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::ChaperoneCalibrationState::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::ChaperoneCalibrationState::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Live
Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Live() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_get_Live");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Live"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Live
void Valve::VR::EChaperoneConfigFile::_set_Live(Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_set_Live");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Live", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Temp
Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Temp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_get_Temp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Temp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Temp
void Valve::VR::EChaperoneConfigFile::_set_Temp(Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_set_Temp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Temp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EChaperoneConfigFile::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EChaperoneConfigFile::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneImportFlags
#include "Valve/VR/EChaperoneImportFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
Valve::VR::EChaperoneImportFlags Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneImportFlags>("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
void Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly(Valve::VR::EChaperoneImportFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EChaperoneImportFlags::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EChaperoneImportFlags::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError None
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError None
void Valve::VR::EVRCompositorError::_set_None(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError RequestFailed
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError RequestFailed
void Valve::VR::EVRCompositorError::_set_RequestFailed(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
void Valve::VR::EVRCompositorError::_set_IncompatibleVersion(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_DoNotHaveFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_DoNotHaveFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "DoNotHaveFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
void Valve::VR::EVRCompositorError::_set_DoNotHaveFocus(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_DoNotHaveFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "DoNotHaveFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidTexture
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidTexture
void Valve::VR::EVRCompositorError::_set_InvalidTexture(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IsNotSceneApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IsNotSceneApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IsNotSceneApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
void Valve::VR::EVRCompositorError::_set_IsNotSceneApplication(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IsNotSceneApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IsNotSceneApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
void Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
void Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
void Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IndexOutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IndexOutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IndexOutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
void Valve::VR::EVRCompositorError::_set_IndexOutOfRange(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IndexOutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IndexOutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_AlreadySubmitted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_AlreadySubmitted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "AlreadySubmitted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
void Valve::VR::EVRCompositorError::_set_AlreadySubmitted(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_AlreadySubmitted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "AlreadySubmitted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidBounds
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_InvalidBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidBounds
void Valve::VR::EVRCompositorError::_set_InvalidBounds(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_InvalidBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidBounds", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRCompositorError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRCompositorError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Implicit
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Implicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Implicit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Implicit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Implicit
void Valve::VR::EVRCompositorTimingMode::_set_Implicit(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Implicit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Implicit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRCompositorTimingMode::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRCompositorTimingMode::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod None
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod None
void Valve::VR::VROverlayInputMethod::_set_None(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod Mouse
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_Mouse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_Mouse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "Mouse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod Mouse
void Valve::VR::VROverlayInputMethod::_set_Mouse(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_Mouse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "Mouse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod DualAnalog
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_DualAnalog() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_DualAnalog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "DualAnalog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod DualAnalog
void Valve::VR::VROverlayInputMethod::_set_DualAnalog(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_DualAnalog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "DualAnalog", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::VROverlayInputMethod::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::VROverlayInputMethod::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::VROverlayTransformType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::VROverlayTransformType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags None
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags None
void Valve::VR::VROverlayFlags::_set_None(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Curved
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Curved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_Curved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Curved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Curved
void Valve::VR::VROverlayFlags::_set_Curved(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_Curved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Curved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags RGSS4X
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_RGSS4X() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_RGSS4X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "RGSS4X"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags RGSS4X
void Valve::VR::VROverlayFlags::_set_RGSS4X(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_RGSS4X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "RGSS4X", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags NoDashboardTab
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_NoDashboardTab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_NoDashboardTab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "NoDashboardTab"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags NoDashboardTab
void Valve::VR::VROverlayFlags::_set_NoDashboardTab(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_NoDashboardTab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "NoDashboardTab", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
void Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowGamepadFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_ShowGamepadFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowGamepadFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
void Valve::VR::VROverlayFlags::_set_ShowGamepadFocus(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_ShowGamepadFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowGamepadFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRScrollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SendVRScrollEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRScrollEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
void Valve::VR::VROverlayFlags::_set_SendVRScrollEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SendVRScrollEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRScrollEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
void Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
void Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
void Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Parallel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SideBySide_Parallel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Parallel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
void Valve::VR::VROverlayFlags::_set_SideBySide_Parallel(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SideBySide_Parallel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Parallel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Crossed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SideBySide_Crossed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Crossed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
void Valve::VR::VROverlayFlags::_set_SideBySide_Crossed(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SideBySide_Crossed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Crossed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Panorama
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Panorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_Panorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Panorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Panorama
void Valve::VR::VROverlayFlags::_set_Panorama(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_Panorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Panorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags StereoPanorama
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags StereoPanorama
void Valve::VR::VROverlayFlags::_set_StereoPanorama(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "StereoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
void Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_VisibleInDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_VisibleInDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "VisibleInDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
void Valve::VR::VROverlayFlags::_set_VisibleInDashboard(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_VisibleInDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "VisibleInDashboard", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::VROverlayFlags::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::VROverlayFlags::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
void Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::VRMessageOverlayResponse::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::VRMessageOverlayResponse::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputMode
#include "Valve/VR/EGamepadTextInputMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EGamepadTextInputMode::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EGamepadTextInputMode::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputLineMode
#include "Valve/VR/EGamepadTextInputLineMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine(Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines(Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EGamepadTextInputLineMode::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EGamepadTextInputLineMode::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Up
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Up
void Valve::VR::EOverlayDirection::_set_Up(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Down
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Down
void Valve::VR::EOverlayDirection::_set_Down(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Left
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Left
void Valve::VR::EOverlayDirection::_set_Left(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Right
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Right
void Valve::VR::EOverlayDirection::_set_Right(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Count
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Count
void Valve::VR::EOverlayDirection::_set_Count(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EOverlayDirection::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EOverlayDirection::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayIntersectionMaskPrimitiveType
#include "Valve/VR/EVROverlayIntersectionMaskPrimitiveType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle(Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle(Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError None
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError None
void Valve::VR::EVRRenderModelError::_set_None(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError Loading
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError Loading
void Valve::VR::EVRRenderModelError::_set_Loading(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotSupported
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotSupported
void Valve::VR::EVRRenderModelError::_set_NotSupported(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidArg
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidArg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidArg"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidArg
void Valve::VR::EVRRenderModelError::_set_InvalidArg(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidArg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidArg", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidModel
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidModel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidModel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidModel
void Valve::VR::EVRRenderModelError::_set_InvalidModel(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidModel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidModel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NoShapes
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NoShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NoShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NoShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NoShapes
void Valve::VR::EVRRenderModelError::_set_NoShapes(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NoShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NoShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleShapes
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_MultipleShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleShapes
void Valve::VR::EVRRenderModelError::_set_MultipleShapes(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_MultipleShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError TooManyVertices
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_TooManyVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_TooManyVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "TooManyVertices"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError TooManyVertices
void Valve::VR::EVRRenderModelError::_set_TooManyVertices(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_TooManyVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "TooManyVertices", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleTextures
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_MultipleTextures");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleTextures"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleTextures
void Valve::VR::EVRRenderModelError::_set_MultipleTextures(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_MultipleTextures");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleTextures", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
void Valve::VR::EVRRenderModelError::_set_BufferTooSmall(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotEnoughNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughNormals"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
void Valve::VR::EVRRenderModelError::_set_NotEnoughNormals(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotEnoughNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughNormals", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
void Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidTexture
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidTexture
void Valve::VR::EVRRenderModelError::_set_InvalidTexture(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidTexture", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRRenderModelError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRRenderModelError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRComponentProperty
#include "Valve/VR/EVRComponentProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsStatic
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsStatic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsStatic"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsStatic
void Valve::VR::EVRComponentProperty::_set_IsStatic(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsStatic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsStatic", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsVisible
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsVisible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsVisible"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsVisible
void Valve::VR::EVRComponentProperty::_set_IsVisible(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsVisible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsVisible", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsTouched
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsTouched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsTouched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsTouched
void Valve::VR::EVRComponentProperty::_set_IsTouched(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsTouched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsTouched", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsPressed
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsPressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsPressed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsPressed
void Valve::VR::EVRComponentProperty::_set_IsPressed(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsPressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsPressed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsScrolled
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsScrolled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsScrolled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsScrolled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsScrolled
void Valve::VR::EVRComponentProperty::_set_IsScrolled(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsScrolled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsScrolled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRComponentProperty::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRComponentProperty::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Transient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient
void Valve::VR::EVRNotificationType::_set_Transient(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Transient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Persistent
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Persistent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Persistent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Persistent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Persistent
void Valve::VR::EVRNotificationType::_set_Persistent(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Persistent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Persistent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
void Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRNotificationType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRNotificationType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle None
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle None
void Valve::VR::EVRNotificationStyle::_set_None(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Application
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Application() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Application");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Application"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Application
void Valve::VR::EVRNotificationStyle::_set_Application(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Application");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Application", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Disabled(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Enabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Enabled(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Enabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Active
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Active"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Active
void Valve::VR::EVRNotificationStyle::_set_Contact_Active(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Active", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRNotificationStyle::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRNotificationStyle::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError None
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError None
void Valve::VR::EVRSettingsError::_set_None(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError IPCFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError IPCFailed
void Valve::VR::EVRSettingsError::_set_IPCFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError WriteFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_WriteFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_WriteFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "WriteFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError WriteFailed
void Valve::VR::EVRSettingsError::_set_WriteFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_WriteFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "WriteFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError ReadFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_ReadFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_ReadFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "ReadFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError ReadFailed
void Valve::VR::EVRSettingsError::_set_ReadFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_ReadFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "ReadFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError JsonParseFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_JsonParseFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_JsonParseFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "JsonParseFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError JsonParseFailed
void Valve::VR::EVRSettingsError::_set_JsonParseFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_JsonParseFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "JsonParseFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
void Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRSettingsError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRSettingsError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError None
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError None
void Valve::VR::EVRScreenshotError::_set_None(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError RequestFailed
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError RequestFailed
void Valve::VR::EVRScreenshotError::_set_RequestFailed(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
void Valve::VR::EVRScreenshotError::_set_IncompatibleVersion(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError NotFound
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_NotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_NotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "NotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError NotFound
void Valve::VR::EVRScreenshotError::_set_NotFound(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_NotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "NotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
void Valve::VR::EVRScreenshotError::_set_BufferTooSmall(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
void Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Valve::VR::EVRScreenshotError::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Valve::VR::EVRScreenshotError::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt32 eventType
uint Valve::VR::VREvent_t_Packed::_get_eventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_get_eventType");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "eventType"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 eventType
void Valve::VR::VREvent_t_Packed::_set_eventType(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_set_eventType");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "eventType", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 trackedDeviceIndex
uint Valve::VR::VREvent_t_Packed::_get_trackedDeviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_get_trackedDeviceIndex");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "trackedDeviceIndex"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 trackedDeviceIndex
void Valve::VR::VREvent_t_Packed::_set_trackedDeviceIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_set_trackedDeviceIndex");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "trackedDeviceIndex", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single eventAgeSeconds
float Valve::VR::VREvent_t_Packed::_get_eventAgeSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_get_eventAgeSeconds");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>(___internal__instance, "eventAgeSeconds"));
}
// Autogenerated instance field setter
// Set instance field: public System.Single eventAgeSeconds
void Valve::VR::VREvent_t_Packed::_set_eventAgeSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_set_eventAgeSeconds");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "eventAgeSeconds", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VREvent_Data_t data
Valve::VR::VREvent_Data_t Valve::VR::VREvent_t_Packed::_get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_get_data");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VREvent_Data_t>(___internal__instance, "data"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VREvent_Data_t data
void Valve::VR::VREvent_t_Packed::_set_data(Valve::VR::VREvent_Data_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::_set_data");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "data", value));
}
// Autogenerated method: Valve.VR.VREvent_t_Packed.Unpack
void Valve::VR::VREvent_t_Packed::Unpack(ByRef<Valve::VR::VREvent_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VREvent_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unPacketNum
uint Valve::VR::VRControllerState_t_Packed::_get_unPacketNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_unPacketNum");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "unPacketNum"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 unPacketNum
void Valve::VR::VRControllerState_t_Packed::_set_unPacketNum(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_unPacketNum");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unPacketNum", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 ulButtonPressed
uint64_t Valve::VR::VRControllerState_t_Packed::_get_ulButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_ulButtonPressed");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>(___internal__instance, "ulButtonPressed"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt64 ulButtonPressed
void Valve::VR::VRControllerState_t_Packed::_set_ulButtonPressed(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_ulButtonPressed");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "ulButtonPressed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 ulButtonTouched
uint64_t Valve::VR::VRControllerState_t_Packed::_get_ulButtonTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_ulButtonTouched");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>(___internal__instance, "ulButtonTouched"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt64 ulButtonTouched
void Valve::VR::VRControllerState_t_Packed::_set_ulButtonTouched(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_ulButtonTouched");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "ulButtonTouched", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis0
Valve::VR::VRControllerAxis_t Valve::VR::VRControllerState_t_Packed::_get_rAxis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_rAxis0");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRControllerAxis_t>(___internal__instance, "rAxis0"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VRControllerAxis_t rAxis0
void Valve::VR::VRControllerState_t_Packed::_set_rAxis0(Valve::VR::VRControllerAxis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_rAxis0");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rAxis0", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis1
Valve::VR::VRControllerAxis_t Valve::VR::VRControllerState_t_Packed::_get_rAxis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_rAxis1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRControllerAxis_t>(___internal__instance, "rAxis1"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VRControllerAxis_t rAxis1
void Valve::VR::VRControllerState_t_Packed::_set_rAxis1(Valve::VR::VRControllerAxis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_rAxis1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rAxis1", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis2
Valve::VR::VRControllerAxis_t Valve::VR::VRControllerState_t_Packed::_get_rAxis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_rAxis2");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRControllerAxis_t>(___internal__instance, "rAxis2"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VRControllerAxis_t rAxis2
void Valve::VR::VRControllerState_t_Packed::_set_rAxis2(Valve::VR::VRControllerAxis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_rAxis2");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rAxis2", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis3
Valve::VR::VRControllerAxis_t Valve::VR::VRControllerState_t_Packed::_get_rAxis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_rAxis3");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRControllerAxis_t>(___internal__instance, "rAxis3"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VRControllerAxis_t rAxis3
void Valve::VR::VRControllerState_t_Packed::_set_rAxis3(Valve::VR::VRControllerAxis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_rAxis3");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rAxis3", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis4
Valve::VR::VRControllerAxis_t Valve::VR::VRControllerState_t_Packed::_get_rAxis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_get_rAxis4");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRControllerAxis_t>(___internal__instance, "rAxis4"));
}
// Autogenerated instance field setter
// Set instance field: public Valve.VR.VRControllerAxis_t rAxis4
void Valve::VR::VRControllerState_t_Packed::_set_rAxis4(Valve::VR::VRControllerAxis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::_set_rAxis4");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rAxis4", value));
}
// Autogenerated method: Valve.VR.VRControllerState_t_Packed.Unpack
void Valve::VR::VRControllerState_t_Packed::Unpack(ByRef<Valve::VR::VRControllerState_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.RenderModel_TextureMap_t_Packed
#include "Valve/VR/RenderModel_TextureMap_t_Packed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Char unWidth
::Il2CppChar Valve::VR::RenderModel_TextureMap_t_Packed::_get_unWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_get_unWidth");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppChar>(___internal__instance, "unWidth"));
}
// Autogenerated instance field setter
// Set instance field: public System.Char unWidth
void Valve::VR::RenderModel_TextureMap_t_Packed::_set_unWidth(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_set_unWidth");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unWidth", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Char unHeight
::Il2CppChar Valve::VR::RenderModel_TextureMap_t_Packed::_get_unHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_get_unHeight");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppChar>(___internal__instance, "unHeight"));
}
// Autogenerated instance field setter
// Set instance field: public System.Char unHeight
void Valve::VR::RenderModel_TextureMap_t_Packed::_set_unHeight(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_set_unHeight");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unHeight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rubTextureMapData
System::IntPtr Valve::VR::RenderModel_TextureMap_t_Packed::_get_rubTextureMapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_get_rubTextureMapData");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "rubTextureMapData"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr rubTextureMapData
void Valve::VR::RenderModel_TextureMap_t_Packed::_set_rubTextureMapData(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::_set_rubTextureMapData");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rubTextureMapData", value));
}
// Autogenerated method: Valve.VR.RenderModel_TextureMap_t_Packed.Unpack
void Valve::VR::RenderModel_TextureMap_t_Packed::Unpack(ByRef<Valve::VR::RenderModel_TextureMap_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_TextureMap_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.RenderModel_t_Packed
#include "Valve/VR/RenderModel_t_Packed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rVertexData
System::IntPtr Valve::VR::RenderModel_t_Packed::_get_rVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_get_rVertexData");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "rVertexData"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr rVertexData
void Valve::VR::RenderModel_t_Packed::_set_rVertexData(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_set_rVertexData");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rVertexData", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unVertexCount
uint Valve::VR::RenderModel_t_Packed::_get_unVertexCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_get_unVertexCount");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "unVertexCount"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 unVertexCount
void Valve::VR::RenderModel_t_Packed::_set_unVertexCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_set_unVertexCount");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unVertexCount", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rIndexData
System::IntPtr Valve::VR::RenderModel_t_Packed::_get_rIndexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_get_rIndexData");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "rIndexData"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr rIndexData
void Valve::VR::RenderModel_t_Packed::_set_rIndexData(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_set_rIndexData");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "rIndexData", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unTriangleCount
uint Valve::VR::RenderModel_t_Packed::_get_unTriangleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_get_unTriangleCount");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "unTriangleCount"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 unTriangleCount
void Valve::VR::RenderModel_t_Packed::_set_unTriangleCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_set_unTriangleCount");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unTriangleCount", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 diffuseTextureId
int Valve::VR::RenderModel_t_Packed::_get_diffuseTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_get_diffuseTextureId");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "diffuseTextureId"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 diffuseTextureId
void Valve::VR::RenderModel_t_Packed::_set_diffuseTextureId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::_set_diffuseTextureId");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "diffuseTextureId", value));
}
// Autogenerated method: Valve.VR.RenderModel_t_Packed.Unpack
void Valve::VR::RenderModel_t_Packed::Unpack(ByRef<Valve::VR::RenderModel_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::RenderModel_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
// Including type: Valve.VR.OpenVR/Valve.VR.COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_nDriverNone
uint Valve::VR::OpenVR::_get_k_nDriverNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_nDriverNone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_nDriverNone"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_nDriverNone
void Valve::VR::OpenVR::_set_k_nDriverNone(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_nDriverNone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_nDriverNone", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
uint Valve::VR::OpenVR::_get_k_unMaxDriverDebugResponseSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxDriverDebugResponseSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
void Valve::VR::OpenVR::_set_k_unMaxDriverDebugResponseSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxDriverDebugResponseSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndex_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unTrackedDeviceIndex_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndex_Hmd(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unTrackedDeviceIndex_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxTrackedDeviceCount
uint Valve::VR::OpenVR::_get_k_unMaxTrackedDeviceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxTrackedDeviceCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxTrackedDeviceCount
void Valve::VR::OpenVR::_set_k_unMaxTrackedDeviceCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxTrackedDeviceCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexOther
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexOther() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexOther");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexOther
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexOther(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexOther");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexInvalid(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidPropertyContainer
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidPropertyContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_ulInvalidPropertyContainer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidPropertyContainer
void Valve::VR::OpenVR::_set_k_ulInvalidPropertyContainer(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_ulInvalidPropertyContainer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInvalidPropertyTag
uint Valve::VR::OpenVR::_get_k_unInvalidPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unInvalidPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInvalidPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInvalidPropertyTag
void Valve::VR::OpenVR::_set_k_unInvalidPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unInvalidPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInvalidPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unFloatPropertyTag
uint Valve::VR::OpenVR::_get_k_unFloatPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unFloatPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unFloatPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unFloatPropertyTag
void Valve::VR::OpenVR::_set_k_unFloatPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unFloatPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unFloatPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInt32PropertyTag
uint Valve::VR::OpenVR::_get_k_unInt32PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unInt32PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInt32PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInt32PropertyTag
void Valve::VR::OpenVR::_set_k_unInt32PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unInt32PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInt32PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unUint64PropertyTag
uint Valve::VR::OpenVR::_get_k_unUint64PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unUint64PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unUint64PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unUint64PropertyTag
void Valve::VR::OpenVR::_set_k_unUint64PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unUint64PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unUint64PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unBoolPropertyTag
uint Valve::VR::OpenVR::_get_k_unBoolPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unBoolPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unBoolPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unBoolPropertyTag
void Valve::VR::OpenVR::_set_k_unBoolPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unBoolPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unBoolPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unStringPropertyTag
uint Valve::VR::OpenVR::_get_k_unStringPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unStringPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unStringPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unStringPropertyTag
void Valve::VR::OpenVR::_set_k_unStringPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unStringPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unStringPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix34PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHmdMatrix34PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix34PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHmdMatrix34PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix44PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHmdMatrix44PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix44PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHmdMatrix44PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector3PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector3PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHmdVector3PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector3PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector3PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHmdVector3PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector4PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector4PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHmdVector4PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector4PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector4PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHmdVector4PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHiddenAreaPropertyTag
uint Valve::VR::OpenVR::_get_k_unHiddenAreaPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHiddenAreaPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHiddenAreaPropertyTag
void Valve::VR::OpenVR::_set_k_unHiddenAreaPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHiddenAreaPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unPathHandleInfoTag
uint Valve::VR::OpenVR::_get_k_unPathHandleInfoTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unPathHandleInfoTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unPathHandleInfoTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unPathHandleInfoTag
void Valve::VR::OpenVR::_set_k_unPathHandleInfoTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unPathHandleInfoTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unPathHandleInfoTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unActionPropertyTag
uint Valve::VR::OpenVR::_get_k_unActionPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unActionPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unActionPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unActionPropertyTag
void Valve::VR::OpenVR::_set_k_unActionPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unActionPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unActionPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInputValuePropertyTag
uint Valve::VR::OpenVR::_get_k_unInputValuePropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unInputValuePropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInputValuePropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInputValuePropertyTag
void Valve::VR::OpenVR::_set_k_unInputValuePropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unInputValuePropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInputValuePropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unWildcardPropertyTag
uint Valve::VR::OpenVR::_get_k_unWildcardPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unWildcardPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unWildcardPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unWildcardPropertyTag
void Valve::VR::OpenVR::_set_k_unWildcardPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unWildcardPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unWildcardPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHapticVibrationPropertyTag
uint Valve::VR::OpenVR::_get_k_unHapticVibrationPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unHapticVibrationPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHapticVibrationPropertyTag
void Valve::VR::OpenVR::_set_k_unHapticVibrationPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unHapticVibrationPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_Start(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_End
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_End
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_End(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxPropertyStringSize
uint Valve::VR::OpenVR::_get_k_unMaxPropertyStringSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxPropertyStringSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxPropertyStringSize
void Valve::VR::OpenVR::_set_k_unMaxPropertyStringSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxPropertyStringSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unControllerStateAxisCount
uint Valve::VR::OpenVR::_get_k_unControllerStateAxisCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unControllerStateAxisCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unControllerStateAxisCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unControllerStateAxisCount
void Valve::VR::OpenVR::_set_k_unControllerStateAxisCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unControllerStateAxisCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unControllerStateAxisCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulOverlayHandleInvalid
uint64_t Valve::VR::OpenVR::_get_k_ulOverlayHandleInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_ulOverlayHandleInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulOverlayHandleInvalid
void Valve::VR::OpenVR::_set_k_ulOverlayHandleInvalid(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_ulOverlayHandleInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unScreenshotHandleInvalid
uint Valve::VR::OpenVR::_get_k_unScreenshotHandleInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unScreenshotHandleInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unScreenshotHandleInvalid
void Valve::VR::OpenVR::_set_k_unScreenshotHandleInvalid(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unScreenshotHandleInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSystem_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRSystem_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRSystem_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRSystem_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSystem_Version
void Valve::VR::OpenVR::_set_IVRSystem_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRSystem_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSystem_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRExtendedDisplay_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRExtendedDisplay_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRExtendedDisplay_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRExtendedDisplay_Version
void Valve::VR::OpenVR::_set_IVRExtendedDisplay_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRExtendedDisplay_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRTrackedCamera_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRTrackedCamera_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRTrackedCamera_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRTrackedCamera_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRTrackedCamera_Version
void Valve::VR::OpenVR::_set_IVRTrackedCamera_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRTrackedCamera_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRTrackedCamera_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxApplicationKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxApplicationKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxApplicationKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxApplicationKeyLength
void Valve::VR::OpenVR::_set_k_unMaxApplicationKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxApplicationKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_HomeApp
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_MimeType_HomeApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_MimeType_HomeApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_HomeApp
void Valve::VR::OpenVR::_set_k_pch_MimeType_HomeApp(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_MimeType_HomeApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_GameTheater
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_MimeType_GameTheater() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_MimeType_GameTheater");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_GameTheater
void Valve::VR::OpenVR::_set_k_pch_MimeType_GameTheater(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_MimeType_GameTheater");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRApplications_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRApplications_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRApplications_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRApplications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRApplications_Version
void Valve::VR::OpenVR::_set_IVRApplications_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRApplications_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRApplications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperone_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRChaperone_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRChaperone_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRChaperone_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperone_Version
void Valve::VR::OpenVR::_set_IVRChaperone_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRChaperone_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperone_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperoneSetup_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRChaperoneSetup_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRChaperoneSetup_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperoneSetup_Version
void Valve::VR::OpenVR::_set_IVRChaperoneSetup_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRChaperoneSetup_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRCompositor_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRCompositor_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRCompositor_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRCompositor_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRCompositor_Version
void Valve::VR::OpenVR::_set_IVRCompositor_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRCompositor_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRCompositor_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxKeyLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unVROverlayMaxKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxKeyLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unVROverlayMaxKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxNameLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxNameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unVROverlayMaxNameLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxNameLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxNameLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unVROverlayMaxNameLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxOverlayCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxOverlayCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayIntersectionMaskPrimitivesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxOverlayIntersectionMaskPrimitivesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayIntersectionMaskPrimitivesCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxOverlayIntersectionMaskPrimitivesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVROverlay_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVROverlay_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVROverlay_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVROverlay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVROverlay_Version
void Valve::VR::OpenVR::_set_IVROverlay_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVROverlay_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVROverlay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_GDC2015
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_GDC2015() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Controller_Component_GDC2015");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_GDC2015
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_GDC2015(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Controller_Component_GDC2015");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Base
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Base() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Controller_Component_Base");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Base
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Base(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Controller_Component_Base");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Tip
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Tip() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Controller_Component_Tip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Tip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Tip(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Controller_Component_Tip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_HandGrip
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_HandGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Controller_Component_HandGrip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_HandGrip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_HandGrip(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Controller_Component_HandGrip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Status
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Controller_Component_Status");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Status
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Status(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Controller_Component_Status");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRRenderModels_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRRenderModels_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRRenderModels_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRRenderModels_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRRenderModels_Version
void Valve::VR::OpenVR::_set_IVRRenderModels_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRRenderModels_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRRenderModels_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unNotificationTextMaxSize
uint Valve::VR::OpenVR::_get_k_unNotificationTextMaxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unNotificationTextMaxSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unNotificationTextMaxSize
void Valve::VR::OpenVR::_set_k_unNotificationTextMaxSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unNotificationTextMaxSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRNotifications_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRNotifications_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRNotifications_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRNotifications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRNotifications_Version
void Valve::VR::OpenVR::_set_IVRNotifications_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRNotifications_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRNotifications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxSettingsKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxSettingsKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_unMaxSettingsKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxSettingsKeyLength
void Valve::VR::OpenVR::_set_k_unMaxSettingsKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_unMaxSettingsKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSettings_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRSettings_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRSettings_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRSettings_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSettings_Version
void Valve::VR::OpenVR::_set_IVRSettings_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRSettings_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSettings_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Section
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RequireHmd_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_RequireHmd_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_RequireHmd_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RequireHmd_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RequireHmd_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_RequireHmd_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedDriverKey_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedDriverKey_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedDriverKey_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedDriverKey_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedHmdKey_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedHmdKey_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedHmdKey_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedHmdKey_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebug_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebug_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebug_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebug_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugProcessPipe_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugProcessPipe_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugProcessPipe_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugProcessPipe_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugX_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugX_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugX_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugX_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugY_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugY_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugY_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugY_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SendSystemButtonToAllApps_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_SendSystemButtonToAllApps_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SendSystemButtonToAllApps_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_SendSystemButtonToAllApps_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_LogLevel_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_LogLevel_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_LogLevel_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_LogLevel_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_LogLevel_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_LogLevel_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IPD_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_IPD_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_IPD_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IPD_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IPD_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_IPD_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Background_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_Background_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_Background_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Background_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Background_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_Background_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundUseDomeProjection_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundUseDomeProjection_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundUseDomeProjection_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundUseDomeProjection_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundCameraHeight_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundCameraHeight_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundCameraHeight_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundCameraHeight_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundDomeRadius_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundDomeRadius_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundDomeRadius_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundDomeRadius_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_GridColor_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_GridColor_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_GridColor_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_GridColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_GridColor_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_GridColor_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_PlayAreaColor_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_PlayAreaColor_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_PlayAreaColor_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_PlayAreaColor_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowStage_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowStage_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowStage_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowStage_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowStage_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowStage_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ActivateMultipleDrivers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ActivateMultipleDrivers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ActivateMultipleDrivers_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ActivateMultipleDrivers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectMode_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectMode_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectModeEdidVid_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidVid_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidVid_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidVid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectModeEdidVid_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidVid_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidVid_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidVid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectModeEdidPid_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidPid_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidPid_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidPid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectModeEdidPid_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidPid_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidPid_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidPid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_UsingSpeakers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_UsingSpeakers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_UsingSpeakers_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_UsingSpeakers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BaseStationPowerManagement_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_BaseStationPowerManagement_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BaseStationPowerManagement_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_BaseStationPowerManagement_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_NeverKillProcesses_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_NeverKillProcesses_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_NeverKillProcesses_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_NeverKillProcesses_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleScale_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowAsyncReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowAsyncReprojection_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowAsyncReprojection_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowAsyncReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowAsyncReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowAsyncReprojection_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowAsyncReprojection_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowAsyncReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowReprojection_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowReprojection_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowReprojection_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowReprojection_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceReprojection_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceReprojection_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceReprojection_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceReprojection_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceFadeOnBadTracking_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceFadeOnBadTracking_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceFadeOnBadTracking_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceFadeOnBadTracking_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DefaultMirrorView_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_DefaultMirrorView_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DefaultMirrorView_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_DefaultMirrorView_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowMirrorView_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowMirrorView_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowMirrorView_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowMirrorView_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometry_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometry_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometry_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometry_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartMonitorFromAppLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_StartMonitorFromAppLaunch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartMonitorFromAppLaunch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_StartMonitorFromAppLaunch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableHomeApp
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableHomeApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableHomeApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableHomeApp
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableHomeApp(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableHomeApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_RetailDemo_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_RetailDemo_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RetailDemo_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_RetailDemo_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IpdOffset_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_IpdOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_IpdOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IpdOffset_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IpdOffset_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_IpdOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowSupersampleFiltering_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowSupersampleFiltering_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowSupersampleFiltering_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowSupersampleFiltering_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowDisplayLockedMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowDisplayLockedMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowDisplayLockedMode_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowDisplayLockedMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceWindows32bitVRMonitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceWindows32bitVRMonitor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceWindows32bitVRMonitor(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceWindows32bitVRMonitor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_Section
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMU_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMU_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMU_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMU_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMUExceptHMD_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMUExceptHMD_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMUExceptHMD_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMUExceptHMD_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_UseDisambiguation_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_UseDisambiguation_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_UseDisambiguation_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_UseDisambiguation_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisambiguationDebug_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisambiguationDebug_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisambiguationDebug_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisambiguationDebug_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_PrimaryBasestation_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_PrimaryBasestation_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_PrimaryBasestation_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_PrimaryBasestation_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DBHistory_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_DBHistory_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DBHistory_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_DBHistory_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableBluetooth_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableBluetooth_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableBluetooth_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableBluetooth_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_Section
void Valve::VR::OpenVR::_set_k_pch_Null_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SerialNumber_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_SerialNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_SerialNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SerialNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_SerialNumber_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_SerialNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_ModelNumber_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_ModelNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_ModelNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_ModelNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_ModelNumber_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_ModelNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowX_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowX_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_WindowX_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowX_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowX_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_WindowX_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowY_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowY_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_WindowY_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowY_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowY_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_WindowY_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowWidth_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_WindowWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowWidth_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_WindowWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowHeight_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_WindowHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowHeight_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_WindowHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderWidth_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_RenderWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_RenderWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderWidth_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_RenderWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderHeight_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_RenderHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_RenderHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderHeight_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_RenderHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_SecondsFromVsyncToPhotons_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_SecondsFromVsyncToPhotons_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
void Valve::VR::OpenVR::_set_k_pch_Null_SecondsFromVsyncToPhotons_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_SecondsFromVsyncToPhotons_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_DisplayFrequency_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_DisplayFrequency_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Null_DisplayFrequency_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_DisplayFrequency_Float
void Valve::VR::OpenVR::_set_k_pch_Null_DisplayFrequency_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Null_DisplayFrequency_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_UserInterface_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Section
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_UserInterface_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_StatusAlwaysOnTop_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_UserInterface_StatusAlwaysOnTop_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_StatusAlwaysOnTop_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_UserInterface_StatusAlwaysOnTop_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_MinimizeToTray_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_UserInterface_MinimizeToTray_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_MinimizeToTray_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_UserInterface_MinimizeToTray_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Screenshots_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_Screenshots_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_UserInterface_Screenshots_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Screenshots_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Screenshots_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_UserInterface_Screenshots_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_ScreenshotType_Int() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_UserInterface_ScreenshotType_Int");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
void Valve::VR::OpenVR::_set_k_pch_UserInterface_ScreenshotType_Int(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_UserInterface_ScreenshotType_Int");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Notifications_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Notifications_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Notifications_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_Section
void Valve::VR::OpenVR::_set_k_pch_Notifications_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Notifications_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Notifications_DoNotDisturb_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Notifications_DoNotDisturb_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
void Valve::VR::OpenVR::_set_k_pch_Notifications_DoNotDisturb_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Notifications_DoNotDisturb_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Section
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_TutorialCompletions
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_TutorialCompletions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_TutorialCompletions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_TutorialCompletions
void Valve::VR::OpenVR::_set_k_pch_Keyboard_TutorialCompletions(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_TutorialCompletions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleX() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleX(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleY
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleY() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleY(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetLeftX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetLeftX() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetLeftX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetLeftX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetLeftX(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetLeftX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetRightX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetRightX() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetRightX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetRightX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetRightX(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetRightX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetY
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetY(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Smoothing
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_Smoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Keyboard_Smoothing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Smoothing
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Smoothing(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Keyboard_Smoothing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_Section
void Valve::VR::OpenVR::_set_k_pch_Perf_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_HeuristicActive_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_HeuristicActive_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_HeuristicActive_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_HeuristicActive_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_HeuristicActive_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_HeuristicActive_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_HeuristicActive_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_HeuristicActive_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_NotifyInHMD_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_NotifyInHMD_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_NotifyInHMD_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_NotifyInHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_NotifyInHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_NotifyInHMD_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_NotifyInHMD_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_NotifyInHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_NotifyOnlyOnce_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_NotifyOnlyOnce_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_NotifyOnlyOnce_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_NotifyOnlyOnce_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_NotifyOnlyOnce_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_NotifyOnlyOnce_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_NotifyOnlyOnce_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_NotifyOnlyOnce_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_AllowTimingStore_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_AllowTimingStore_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_AllowTimingStore_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_AllowTimingStore_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_SaveTimingsOnExit_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_SaveTimingsOnExit_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_SaveTimingsOnExit_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_SaveTimingsOnExit_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_TestData_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_TestData_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_TestData_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_TestData_Float
void Valve::VR::OpenVR::_set_k_pch_Perf_TestData_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_TestData_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_LinuxGPUProfiling_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Perf_LinuxGPUProfiling_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_LinuxGPUProfiling_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Perf_LinuxGPUProfiling_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Section
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Style_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Style_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Style_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Style_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Style_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Style_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_GroundPerimeterOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_GroundPerimeterOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_GroundPerimeterOn_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_GroundPerimeterOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_CenterMarkerOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_CenterMarkerOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_CenterMarkerOn_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_CenterMarkerOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_PlaySpaceOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_PlaySpaceOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_PlaySpaceOn_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_PlaySpaceOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_FadeDistance_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_FadeDistance_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_FadeDistance_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_FadeDistance_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaR_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaR_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaR_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaR_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaG_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaG_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaG_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaG_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaB_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaB_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaB_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaB_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaA_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaA_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaA_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaA_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_Section
void Valve::VR::OpenVR::_set_k_pch_Camera_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCamera_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCamera_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_EnableCamera_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCamera_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCamera_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_EnableCamera_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraInDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraInDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraInDashboard_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraInDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForCollisionBounds_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForCollisionBounds_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForCollisionBounds_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForCollisionBounds_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForRoomView_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForRoomView_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForRoomView_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForRoomView_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaR_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaR_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaR_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaR_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaG_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaG_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaG_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaG_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaB_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaB_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaB_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaB_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaA_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaA_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaA_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaA_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsStrength_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsStrength_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Camera_BoundsStrength_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsStrength_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsStrength_Int32(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Camera_BoundsStrength_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_Section
void Valve::VR::OpenVR::_set_k_pch_audio_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackDevice_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnRecordDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnRecordDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_OnRecordDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnRecordDevice_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_OnRecordDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackMirrorDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackMirrorDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackMirrorDevice_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackMirrorDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffPlaybackDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OffPlaybackDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_OffPlaybackDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffPlaybackDevice_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_OffPlaybackDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffRecordDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OffRecordDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_OffRecordDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffRecordDevice_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_OffRecordDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_VIVEHDMIGain
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_VIVEHDMIGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_audio_VIVEHDMIGain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_VIVEHDMIGain
void Valve::VR::OpenVR::_set_k_pch_audio_VIVEHDMIGain(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_audio_VIVEHDMIGain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_Section
void Valve::VR::OpenVR::_set_k_pch_Power_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_PowerOffOnExit_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_PowerOffOnExit_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PowerOffOnExit_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_PowerOffOnExit_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_TurnOffScreensTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_TurnOffScreensTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffScreensTimeout_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_TurnOffScreensTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_TurnOffControllersTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_TurnOffControllersTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffControllersTimeout_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_TurnOffControllersTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_ReturnToWatchdogTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_ReturnToWatchdogTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_ReturnToWatchdogTimeout_Float(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_ReturnToWatchdogTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_AutoLaunchSteamVROnButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_AutoLaunchSteamVROnButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
void Valve::VR::OpenVR::_set_k_pch_Power_AutoLaunchSteamVROnButtonPress(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_AutoLaunchSteamVROnButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_PauseCompositorOnStandby_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Power_PauseCompositorOnStandby_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PauseCompositorOnStandby_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Power_PauseCompositorOnStandby_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Dashboard_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_Section
void Valve::VR::OpenVR::_set_k_pch_Dashboard_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Dashboard_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableDashboard_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_ArcadeMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Dashboard_ArcadeMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_ArcadeMode_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Dashboard_ArcadeMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_modelskin_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_modelskin_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_modelskin_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_modelskin_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_modelskin_Section
void Valve::VR::OpenVR::_set_k_pch_modelskin_Section(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_modelskin_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_modelskin_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Driver_Enable_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Driver_Enable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_k_pch_Driver_Enable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Driver_Enable_Bool
void Valve::VR::OpenVR::_set_k_pch_Driver_Enable_Bool(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_k_pch_Driver_Enable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRScreenshots_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRScreenshots_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRScreenshots_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRScreenshots_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRScreenshots_Version
void Valve::VR::OpenVR::_set_IVRScreenshots_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRScreenshots_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRScreenshots_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRResources_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRResources_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRResources_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRResources_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRResources_Version
void Valve::VR::OpenVR::_set_IVRResources_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRResources_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRResources_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRDriverManager_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRDriverManager_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_IVRDriverManager_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRDriverManager_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRDriverManager_Version
void Valve::VR::OpenVR::_set_IVRDriverManager_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_IVRDriverManager_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRDriverManager_Version", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 <VRToken>k__BackingField
uint Valve::VR::OpenVR::_get_$VRToken$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_$VRToken$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "<VRToken>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 <VRToken>k__BackingField
void Valve::VR::OpenVR::_set_$VRToken$k__BackingField(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_$VRToken$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "<VRToken>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String FnTable_Prefix
::Il2CppString* Valve::VR::OpenVR::_get_FnTable_Prefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get_FnTable_Prefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "FnTable_Prefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String FnTable_Prefix
void Valve::VR::OpenVR::_set_FnTable_Prefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set_FnTable_Prefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "FnTable_Prefix", value));
}
// Autogenerated static field getter
// Get static field: static private Valve.VR.OpenVR/Valve.VR.COpenVRContext _OpenVRInternal_ModuleContext
Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::_get__OpenVRInternal_ModuleContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_get__OpenVRInternal_ModuleContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::OpenVR::COpenVRContext*>("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.OpenVR/Valve.VR.COpenVRContext _OpenVRInternal_ModuleContext
void Valve::VR::OpenVR::_set__OpenVRInternal_ModuleContext(Valve::VR::OpenVR::COpenVRContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::_set__OpenVRInternal_ModuleContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext", value));
}
// Autogenerated method: Valve.VR.OpenVR.get_VRToken
uint Valve::VR::OpenVR::get_VRToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_VRToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_VRToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.set_VRToken
void Valve::VR::OpenVR::set_VRToken(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::set_VRToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "set_VRToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Valve.VR.OpenVR.get_OpenVRInternal_ModuleContext
Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::get_OpenVRInternal_ModuleContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_OpenVRInternal_ModuleContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_OpenVRInternal_ModuleContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::OpenVR::COpenVRContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_System
Valve::VR::CVRSystem* Valve::VR::OpenVR::get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_System");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_System", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Chaperone
Valve::VR::CVRChaperone* Valve::VR::OpenVR::get_Chaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Chaperone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Chaperone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperone*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_ChaperoneSetup
Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::get_ChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_ChaperoneSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_ChaperoneSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperoneSetup*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Compositor
Valve::VR::CVRCompositor* Valve::VR::OpenVR::get_Compositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRCompositor*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Overlay
Valve::VR::CVROverlay* Valve::VR::OpenVR::get_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVROverlay*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_RenderModels
Valve::VR::CVRRenderModels* Valve::VR::OpenVR::get_RenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_RenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_RenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_ExtendedDisplay
Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::get_ExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_ExtendedDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_ExtendedDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRExtendedDisplay*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Settings
Valve::VR::CVRSettings* Valve::VR::OpenVR::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Applications
Valve::VR::CVRApplications* Valve::VR::OpenVR::get_Applications() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Applications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Applications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRApplications*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Screenshots
Valve::VR::CVRScreenshots* Valve::VR::OpenVR::get_Screenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_Screenshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Screenshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRScreenshots*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_TrackedCamera
Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::get_TrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::get_TrackedCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_TrackedCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRTrackedCamera*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR..cctor
void Valve::VR::OpenVR::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.InitInternal
uint Valve::VR::OpenVR::InitInternal(ByRef<Valve::VR::EVRInitError> peError, Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(peError), eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVR.ShutdownInternal
void Valve::VR::OpenVR::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.IsHmdPresent
bool Valve::VR::OpenVR::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.IsRuntimeInstalled
bool Valve::VR::OpenVR::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.GetStringForHmdError
::Il2CppString* Valve::VR::OpenVR::GetStringForHmdError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Valve.VR.OpenVR.GetGenericInterface
System::IntPtr Valve::VR::OpenVR::GetGenericInterface(::Il2CppString* pchInterfaceVersion, ByRef<Valve::VR::EVRInitError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion, byref(peError));
}
// Autogenerated method: Valve.VR.OpenVR.IsInterfaceVersionValid
bool Valve::VR::OpenVR::IsInterfaceVersionValid(::Il2CppString* pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: Valve.VR.OpenVR.GetInitToken
uint Valve::VR::OpenVR::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.Init
Valve::VR::CVRSystem* Valve::VR::OpenVR::Init(ByRef<Valve::VR::EVRInitError> peError, Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(peError), eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVR.Shutdown
void Valve::VR::OpenVR::Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.OpenVR/Valve.VR.COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSystem m_pVRSystem
Valve::VR::CVRSystem* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRSystem");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRSystem*>(___internal__instance, "m_pVRSystem"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRSystem m_pVRSystem
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRSystem(Valve::VR::CVRSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRSystem");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRSystem", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperone m_pVRChaperone
Valve::VR::CVRChaperone* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRChaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRChaperone");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRChaperone*>(___internal__instance, "m_pVRChaperone"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRChaperone m_pVRChaperone
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRChaperone(Valve::VR::CVRChaperone* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRChaperone");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRChaperone", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRChaperoneSetup");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRChaperoneSetup*>(___internal__instance, "m_pVRChaperoneSetup"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRChaperoneSetup(Valve::VR::CVRChaperoneSetup* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRChaperoneSetup");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRChaperoneSetup", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRCompositor m_pVRCompositor
Valve::VR::CVRCompositor* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRCompositor");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRCompositor*>(___internal__instance, "m_pVRCompositor"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRCompositor m_pVRCompositor
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRCompositor(Valve::VR::CVRCompositor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRCompositor");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRCompositor", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVROverlay m_pVROverlay
Valve::VR::CVROverlay* Valve::VR::OpenVR::COpenVRContext::_get_m_pVROverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVROverlay");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVROverlay*>(___internal__instance, "m_pVROverlay"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVROverlay m_pVROverlay
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVROverlay(Valve::VR::CVROverlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVROverlay");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVROverlay", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRRenderModels m_pVRRenderModels
Valve::VR::CVRRenderModels* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRRenderModels");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRRenderModels*>(___internal__instance, "m_pVRRenderModels"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRRenderModels m_pVRRenderModels
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRRenderModels(Valve::VR::CVRRenderModels* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRRenderModels");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRRenderModels", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRExtendedDisplay");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRExtendedDisplay*>(___internal__instance, "m_pVRExtendedDisplay"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRExtendedDisplay(Valve::VR::CVRExtendedDisplay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRExtendedDisplay");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRExtendedDisplay", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSettings m_pVRSettings
Valve::VR::CVRSettings* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRSettings");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRSettings*>(___internal__instance, "m_pVRSettings"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRSettings m_pVRSettings
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRSettings(Valve::VR::CVRSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRSettings");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRSettings", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRApplications m_pVRApplications
Valve::VR::CVRApplications* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRApplications() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRApplications");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRApplications*>(___internal__instance, "m_pVRApplications"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRApplications m_pVRApplications
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRApplications(Valve::VR::CVRApplications* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRApplications");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRApplications", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRScreenshots m_pVRScreenshots
Valve::VR::CVRScreenshots* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRScreenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRScreenshots");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRScreenshots*>(___internal__instance, "m_pVRScreenshots"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRScreenshots m_pVRScreenshots
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRScreenshots(Valve::VR::CVRScreenshots* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRScreenshots");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRScreenshots", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::COpenVRContext::_get_m_pVRTrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_get_m_pVRTrackedCamera");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::CVRTrackedCamera*>(___internal__instance, "m_pVRTrackedCamera"));
}
// Autogenerated instance field setter
// Set instance field: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
void Valve::VR::OpenVR::COpenVRContext::_set_m_pVRTrackedCamera(Valve::VR::CVRTrackedCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::_set_m_pVRTrackedCamera");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_pVRTrackedCamera", value));
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.Clear
void Valve::VR::OpenVR::COpenVRContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.CheckClear
void Valve::VR::OpenVR::COpenVRContext::CheckClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::CheckClear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckClear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRSystem
Valve::VR::CVRSystem* Valve::VR::OpenVR::COpenVRContext::VRSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRChaperone
Valve::VR::CVRChaperone* Valve::VR::OpenVR::COpenVRContext::VRChaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRChaperone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRChaperone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperone*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRChaperoneSetup
Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRChaperoneSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperoneSetup*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRCompositor
Valve::VR::CVRCompositor* Valve::VR::OpenVR::COpenVRContext::VRCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRCompositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRCompositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VROverlay
Valve::VR::CVROverlay* Valve::VR::OpenVR::COpenVRContext::VROverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VROverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VROverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRRenderModels
Valve::VR::CVRRenderModels* Valve::VR::OpenVR::COpenVRContext::VRRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRRenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRRenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRExtendedDisplay
Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRExtendedDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRExtendedDisplay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRSettings
Valve::VR::CVRSettings* Valve::VR::OpenVR::COpenVRContext::VRSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRApplications
Valve::VR::CVRApplications* Valve::VR::OpenVR::COpenVRContext::VRApplications() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRApplications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRApplications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRApplications*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRScreenshots
Valve::VR::CVRScreenshots* Valve::VR::OpenVR::COpenVRContext::VRScreenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRScreenshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRScreenshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRScreenshots*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/Valve.VR.COpenVRContext.VRTrackedCamera
Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRTrackedCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRTrackedCamera*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Configuration.ConfigurationSection
#include "System/Configuration/ConfigurationSection.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Configuration.ConfigurationSaveMode
#include "System/Configuration/ConfigurationSaveMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Configuration.ConfigurationSection.DeserializeSection
void System::Configuration::ConfigurationSection::DeserializeSection(System::Xml::XmlReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSection::DeserializeSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: System.Configuration.ConfigurationSection.SerializeSection
::Il2CppString* System::Configuration::ConfigurationSection::SerializeSection(System::Configuration::ConfigurationElement* parentElement, ::Il2CppString* name, System::Configuration::ConfigurationSaveMode saveMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSection::SerializeSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentElement), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(saveMode)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, parentElement, name, saveMode);
}
// Autogenerated method: System.Configuration.ConfigurationSection.IsModified
bool System::Configuration::ConfigurationSection::IsModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSection::IsModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.ConfigurationSection.ResetModified
void System::Configuration::ConfigurationSection::ResetModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSection::ResetModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Configuration.ConfigurationElement
#include "System/Configuration/ConfigurationElement.hpp"
// Including type: System.Configuration.ConfigurationPropertyCollection
#include "System/Configuration/ConfigurationPropertyCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Configuration.ConfigurationElement.get_Properties
System::Configuration::ConfigurationPropertyCollection* System::Configuration::ConfigurationElement::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationElement::get_Properties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Configuration::ConfigurationPropertyCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.ConfigurationElement.IsModified
bool System::Configuration::ConfigurationElement::IsModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationElement::IsModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.ConfigurationElement.Reset
void System::Configuration::ConfigurationElement::Reset(System::Configuration::ConfigurationElement* parentElement) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationElement::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentElement)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parentElement);
}
// Autogenerated method: System.Configuration.ConfigurationElement.ResetModified
void System::Configuration::ConfigurationElement::ResetModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationElement::ResetModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Configuration.ConfigurationSaveMode
#include "System/Configuration/ConfigurationSaveMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Configuration.ConfigurationSaveMode Full
System::Configuration::ConfigurationSaveMode System::Configuration::ConfigurationSaveMode::_get_Full() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_get_Full");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Configuration::ConfigurationSaveMode>("System.Configuration", "ConfigurationSaveMode", "Full"));
}
// Autogenerated static field setter
// Set static field: static public System.Configuration.ConfigurationSaveMode Full
void System::Configuration::ConfigurationSaveMode::_set_Full(System::Configuration::ConfigurationSaveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_set_Full");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Configuration", "ConfigurationSaveMode", "Full", value));
}
// Autogenerated static field getter
// Get static field: static public System.Configuration.ConfigurationSaveMode Minimal
System::Configuration::ConfigurationSaveMode System::Configuration::ConfigurationSaveMode::_get_Minimal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_get_Minimal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Configuration::ConfigurationSaveMode>("System.Configuration", "ConfigurationSaveMode", "Minimal"));
}
// Autogenerated static field setter
// Set static field: static public System.Configuration.ConfigurationSaveMode Minimal
void System::Configuration::ConfigurationSaveMode::_set_Minimal(System::Configuration::ConfigurationSaveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_set_Minimal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Configuration", "ConfigurationSaveMode", "Minimal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Configuration.ConfigurationSaveMode Modified
System::Configuration::ConfigurationSaveMode System::Configuration::ConfigurationSaveMode::_get_Modified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_get_Modified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Configuration::ConfigurationSaveMode>("System.Configuration", "ConfigurationSaveMode", "Modified"));
}
// Autogenerated static field setter
// Set static field: static public System.Configuration.ConfigurationSaveMode Modified
void System::Configuration::ConfigurationSaveMode::_set_Modified(System::Configuration::ConfigurationSaveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_set_Modified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Configuration", "ConfigurationSaveMode", "Modified", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int System::Configuration::ConfigurationSaveMode::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void System::Configuration::ConfigurationSaveMode::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::ConfigurationSaveMode::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Configuration.ConfigurationCollectionAttribute
#include "System/Configuration/ConfigurationCollectionAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Configuration.IgnoreSection
#include "System/Configuration/IgnoreSection.hpp"
// Including type: System.Configuration.ConfigurationPropertyCollection
#include "System/Configuration/ConfigurationPropertyCollection.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Configuration.ConfigurationSaveMode
#include "System/Configuration/ConfigurationSaveMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Configuration.IgnoreSection.get_Properties
System::Configuration::ConfigurationPropertyCollection* System::Configuration::IgnoreSection::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::get_Properties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Configuration::ConfigurationPropertyCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.IgnoreSection.DeserializeSection
void System::Configuration::IgnoreSection::DeserializeSection(System::Xml::XmlReader* xmlReader) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::DeserializeSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmlReader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmlReader);
}
// Autogenerated method: System.Configuration.IgnoreSection.IsModified
bool System::Configuration::IgnoreSection::IsModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::IsModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.IgnoreSection.Reset
void System::Configuration::IgnoreSection::Reset(System::Configuration::ConfigurationElement* parentSection) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentSection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parentSection);
}
// Autogenerated method: System.Configuration.IgnoreSection.ResetModified
void System::Configuration::IgnoreSection::ResetModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::ResetModified");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Configuration.IgnoreSection.SerializeSection
::Il2CppString* System::Configuration::IgnoreSection::SerializeSection(System::Configuration::ConfigurationElement* parentSection, ::Il2CppString* name, System::Configuration::ConfigurationSaveMode saveMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Configuration::IgnoreSection::SerializeSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentSection), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(saveMode)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, parentSection, name, saveMode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.LockRecursionPolicy
#include "System/Threading/LockRecursionPolicy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.LockRecursionPolicy NoRecursion
System::Threading::LockRecursionPolicy System::Threading::LockRecursionPolicy::_get_NoRecursion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_get_NoRecursion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::LockRecursionPolicy>("System.Threading", "LockRecursionPolicy", "NoRecursion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.LockRecursionPolicy NoRecursion
void System::Threading::LockRecursionPolicy::_set_NoRecursion(System::Threading::LockRecursionPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_set_NoRecursion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "LockRecursionPolicy", "NoRecursion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.LockRecursionPolicy SupportsRecursion
System::Threading::LockRecursionPolicy System::Threading::LockRecursionPolicy::_get_SupportsRecursion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_get_SupportsRecursion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::LockRecursionPolicy>("System.Threading", "LockRecursionPolicy", "SupportsRecursion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.LockRecursionPolicy SupportsRecursion
void System::Threading::LockRecursionPolicy::_set_SupportsRecursion(System::Threading::LockRecursionPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_set_SupportsRecursion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "LockRecursionPolicy", "SupportsRecursion", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int System::Threading::LockRecursionPolicy::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void System::Threading::LockRecursionPolicy::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::LockRecursionPolicy::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterCount
#include "System/Threading/ReaderWriterCount.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int64 lockID
int64_t System::Threading::ReaderWriterCount::_get_lockID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_get_lockID");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>(___internal__instance, "lockID"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int64 lockID
void System::Threading::ReaderWriterCount::_set_lockID(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_set_lockID");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "lockID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 readercount
int System::Threading::ReaderWriterCount::_get_readercount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_get_readercount");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "readercount"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 readercount
void System::Threading::ReaderWriterCount::_set_readercount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_set_readercount");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "readercount", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 writercount
int System::Threading::ReaderWriterCount::_get_writercount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_get_writercount");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "writercount"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 writercount
void System::Threading::ReaderWriterCount::_set_writercount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_set_writercount");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writercount", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 upgradecount
int System::Threading::ReaderWriterCount::_get_upgradecount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_get_upgradecount");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "upgradecount"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 upgradecount
void System::Threading::ReaderWriterCount::_set_upgradecount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_set_upgradecount");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "upgradecount", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ReaderWriterCount next
System::Threading::ReaderWriterCount* System::Threading::ReaderWriterCount::_get_next() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_get_next");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ReaderWriterCount*>(___internal__instance, "next"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.ReaderWriterCount next
void System::Threading::ReaderWriterCount::_set_next(System::Threading::ReaderWriterCount* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterCount::_set_next");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "next", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker
#include "System/Threading/ReaderWriterLockSlim_TimeoutTracker.hpp"
// Including type: System.Threading.EventWaitHandle
#include "System/Threading/EventWaitHandle.hpp"
// Including type: System.Threading.ReaderWriterCount
#include "System/Threading/ReaderWriterCount.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSpinCycles
int System::Threading::ReaderWriterLockSlim::_get_LockSpinCycles() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_LockSpinCycles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSpinCycles"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSpinCycles
void System::Threading::ReaderWriterLockSlim::_set_LockSpinCycles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_LockSpinCycles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSpinCycles", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSpinCount
int System::Threading::ReaderWriterLockSlim::_get_LockSpinCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_LockSpinCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSpinCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSpinCount
void System::Threading::ReaderWriterLockSlim::_set_LockSpinCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_LockSpinCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSpinCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSleep0Count
int System::Threading::ReaderWriterLockSlim::_get_LockSleep0Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_LockSleep0Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSleep0Count"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSleep0Count
void System::Threading::ReaderWriterLockSlim::_set_LockSleep0Count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_LockSleep0Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSleep0Count", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 s_nextLockID
int64_t System::Threading::ReaderWriterLockSlim::_get_s_nextLockID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_s_nextLockID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "ReaderWriterLockSlim", "s_nextLockID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 s_nextLockID
void System::Threading::ReaderWriterLockSlim::_set_s_nextLockID(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_s_nextLockID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "s_nextLockID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ReaderWriterCount t_rwc
System::Threading::ReaderWriterCount* System::Threading::ReaderWriterLockSlim::_get_t_rwc() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_t_rwc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ReaderWriterCount*>("System.Threading", "ReaderWriterLockSlim", "t_rwc"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ReaderWriterCount t_rwc
void System::Threading::ReaderWriterLockSlim::_set_t_rwc(System::Threading::ReaderWriterCount* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_t_rwc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "t_rwc", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxSpinCount
int System::Threading::ReaderWriterLockSlim::_get_MaxSpinCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_MaxSpinCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "MaxSpinCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxSpinCount
void System::Threading::ReaderWriterLockSlim::_set_MaxSpinCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_MaxSpinCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "MaxSpinCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WRITER_HELD
uint System::Threading::ReaderWriterLockSlim::_get_WRITER_HELD() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_WRITER_HELD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WRITER_HELD"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WRITER_HELD
void System::Threading::ReaderWriterLockSlim::_set_WRITER_HELD(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_WRITER_HELD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WRITER_HELD", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WAITING_WRITERS
uint System::Threading::ReaderWriterLockSlim::_get_WAITING_WRITERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_WAITING_WRITERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WAITING_WRITERS"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WAITING_WRITERS
void System::Threading::ReaderWriterLockSlim::_set_WAITING_WRITERS(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_WAITING_WRITERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WAITING_WRITERS", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WAITING_UPGRADER
uint System::Threading::ReaderWriterLockSlim::_get_WAITING_UPGRADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_WAITING_UPGRADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WAITING_UPGRADER"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WAITING_UPGRADER
void System::Threading::ReaderWriterLockSlim::_set_WAITING_UPGRADER(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_WAITING_UPGRADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WAITING_UPGRADER", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 MAX_READER
uint System::Threading::ReaderWriterLockSlim::_get_MAX_READER() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_MAX_READER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "MAX_READER"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 MAX_READER
void System::Threading::ReaderWriterLockSlim::_set_MAX_READER(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_MAX_READER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "MAX_READER", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 READER_MASK
uint System::Threading::ReaderWriterLockSlim::_get_READER_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_READER_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "READER_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 READER_MASK
void System::Threading::ReaderWriterLockSlim::_set_READER_MASK(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_READER_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "READER_MASK", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fIsReentrant
bool System::Threading::ReaderWriterLockSlim::_get_fIsReentrant() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_fIsReentrant");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "fIsReentrant"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean fIsReentrant
void System::Threading::ReaderWriterLockSlim::_set_fIsReentrant(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_fIsReentrant");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "fIsReentrant", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 myLock
int System::Threading::ReaderWriterLockSlim::_get_myLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_myLock");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "myLock"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 myLock
void System::Threading::ReaderWriterLockSlim::_set_myLock(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_myLock");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "myLock", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 numWriteWaiters
uint System::Threading::ReaderWriterLockSlim::_get_numWriteWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_numWriteWaiters");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "numWriteWaiters"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 numWriteWaiters
void System::Threading::ReaderWriterLockSlim::_set_numWriteWaiters(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_numWriteWaiters");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "numWriteWaiters", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 numReadWaiters
uint System::Threading::ReaderWriterLockSlim::_get_numReadWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_numReadWaiters");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "numReadWaiters"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 numReadWaiters
void System::Threading::ReaderWriterLockSlim::_set_numReadWaiters(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_numReadWaiters");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "numReadWaiters", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 numWriteUpgradeWaiters
uint System::Threading::ReaderWriterLockSlim::_get_numWriteUpgradeWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_numWriteUpgradeWaiters");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "numWriteUpgradeWaiters"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 numWriteUpgradeWaiters
void System::Threading::ReaderWriterLockSlim::_set_numWriteUpgradeWaiters(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_numWriteUpgradeWaiters");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "numWriteUpgradeWaiters", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 numUpgradeWaiters
uint System::Threading::ReaderWriterLockSlim::_get_numUpgradeWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_numUpgradeWaiters");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "numUpgradeWaiters"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 numUpgradeWaiters
void System::Threading::ReaderWriterLockSlim::_set_numUpgradeWaiters(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_numUpgradeWaiters");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "numUpgradeWaiters", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fNoWaiters
bool System::Threading::ReaderWriterLockSlim::_get_fNoWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_fNoWaiters");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "fNoWaiters"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean fNoWaiters
void System::Threading::ReaderWriterLockSlim::_set_fNoWaiters(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_fNoWaiters");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "fNoWaiters", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 upgradeLockOwnerId
int System::Threading::ReaderWriterLockSlim::_get_upgradeLockOwnerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_upgradeLockOwnerId");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "upgradeLockOwnerId"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 upgradeLockOwnerId
void System::Threading::ReaderWriterLockSlim::_set_upgradeLockOwnerId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_upgradeLockOwnerId");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "upgradeLockOwnerId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 writeLockOwnerId
int System::Threading::ReaderWriterLockSlim::_get_writeLockOwnerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_writeLockOwnerId");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "writeLockOwnerId"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 writeLockOwnerId
void System::Threading::ReaderWriterLockSlim::_set_writeLockOwnerId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_writeLockOwnerId");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writeLockOwnerId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.EventWaitHandle writeEvent
System::Threading::EventWaitHandle* System::Threading::ReaderWriterLockSlim::_get_writeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_writeEvent");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::EventWaitHandle*>(___internal__instance, "writeEvent"));
}
// Autogenerated instance field setter
// Set instance field: private System.Threading.EventWaitHandle writeEvent
void System::Threading::ReaderWriterLockSlim::_set_writeEvent(System::Threading::EventWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_writeEvent");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writeEvent", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.EventWaitHandle readEvent
System::Threading::EventWaitHandle* System::Threading::ReaderWriterLockSlim::_get_readEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_readEvent");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::EventWaitHandle*>(___internal__instance, "readEvent"));
}
// Autogenerated instance field setter
// Set instance field: private System.Threading.EventWaitHandle readEvent
void System::Threading::ReaderWriterLockSlim::_set_readEvent(System::Threading::EventWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_readEvent");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "readEvent", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.EventWaitHandle upgradeEvent
System::Threading::EventWaitHandle* System::Threading::ReaderWriterLockSlim::_get_upgradeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_upgradeEvent");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::EventWaitHandle*>(___internal__instance, "upgradeEvent"));
}
// Autogenerated instance field setter
// Set instance field: private System.Threading.EventWaitHandle upgradeEvent
void System::Threading::ReaderWriterLockSlim::_set_upgradeEvent(System::Threading::EventWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_upgradeEvent");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "upgradeEvent", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.EventWaitHandle waitUpgradeEvent
System::Threading::EventWaitHandle* System::Threading::ReaderWriterLockSlim::_get_waitUpgradeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_waitUpgradeEvent");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::EventWaitHandle*>(___internal__instance, "waitUpgradeEvent"));
}
// Autogenerated instance field setter
// Set instance field: private System.Threading.EventWaitHandle waitUpgradeEvent
void System::Threading::ReaderWriterLockSlim::_set_waitUpgradeEvent(System::Threading::EventWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_waitUpgradeEvent");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "waitUpgradeEvent", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 lockID
int64_t System::Threading::ReaderWriterLockSlim::_get_lockID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_lockID");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>(___internal__instance, "lockID"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int64 lockID
void System::Threading::ReaderWriterLockSlim::_set_lockID(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_lockID");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "lockID", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fUpgradeThreadHoldingRead
bool System::Threading::ReaderWriterLockSlim::_get_fUpgradeThreadHoldingRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_fUpgradeThreadHoldingRead");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "fUpgradeThreadHoldingRead"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean fUpgradeThreadHoldingRead
void System::Threading::ReaderWriterLockSlim::_set_fUpgradeThreadHoldingRead(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_fUpgradeThreadHoldingRead");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "fUpgradeThreadHoldingRead", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 owners
uint System::Threading::ReaderWriterLockSlim::_get_owners() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_owners");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "owners"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 owners
void System::Threading::ReaderWriterLockSlim::_set_owners(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_owners");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "owners", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fDisposed
bool System::Threading::ReaderWriterLockSlim::_get_fDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_get_fDisposed");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "fDisposed"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean fDisposed
void System::Threading::ReaderWriterLockSlim::_set_fDisposed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::_set_fDisposed");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "fDisposed", value));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsReadLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsReadLockHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_IsReadLockHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsReadLockHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsUpgradeableReadLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsUpgradeableReadLockHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_IsUpgradeableReadLockHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsUpgradeableReadLockHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsWriteLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsWriteLockHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_IsWriteLockHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWriteLockHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveReadCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveReadCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_RecursiveReadCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RecursiveReadCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveUpgradeCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveUpgradeCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_RecursiveUpgradeCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RecursiveUpgradeCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveWriteCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveWriteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_RecursiveWriteCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RecursiveWriteCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingReadCount
int System::Threading::ReaderWriterLockSlim::get_WaitingReadCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_WaitingReadCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WaitingReadCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingUpgradeCount
int System::Threading::ReaderWriterLockSlim::get_WaitingUpgradeCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_WaitingUpgradeCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WaitingUpgradeCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingWriteCount
int System::Threading::ReaderWriterLockSlim::get_WaitingWriteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::get_WaitingWriteCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WaitingWriteCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.InitializeThreadCounts
void System::Threading::ReaderWriterLockSlim::InitializeThreadCounts() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::InitializeThreadCounts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeThreadCounts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsRWEntryEmpty
bool System::Threading::ReaderWriterLockSlim::IsRWEntryEmpty(System::Threading::ReaderWriterCount* rwc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::IsRWEntryEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ReaderWriterLockSlim", "IsRWEntryEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rwc)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rwc);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsRwHashEntryChanged
bool System::Threading::ReaderWriterLockSlim::IsRwHashEntryChanged(System::Threading::ReaderWriterCount* lrwc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::IsRwHashEntryChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsRwHashEntryChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lrwc)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, lrwc);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.GetThreadRWCount
System::Threading::ReaderWriterCount* System::Threading::ReaderWriterLockSlim::GetThreadRWCount(bool dontAllocate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::GetThreadRWCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetThreadRWCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dontAllocate)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ReaderWriterCount*, false>(this, ___internal__method, dontAllocate);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterReadLock
void System::Threading::ReaderWriterLockSlim::EnterReadLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::EnterReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterReadLockCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterReadLockCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterWriteLock
void System::Threading::ReaderWriterLockSlim::EnterWriteLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::EnterWriteLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterWriteLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLock
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterWriteLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterWriteLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLock
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterWriteLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterWriteLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterWriteLockCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterWriteLockCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock
void System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterUpgradeableReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterUpgradeableReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterUpgradeableReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLockCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnterUpgradeableReadLockCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitReadLock
void System::Threading::ReaderWriterLockSlim::ExitReadLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitWriteLock
void System::Threading::ReaderWriterLockSlim::ExitWriteLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitWriteLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitWriteLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock
void System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitUpgradeableReadLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.LazyCreateEvent
void System::Threading::ReaderWriterLockSlim::LazyCreateEvent(ByRef<System::Threading::EventWaitHandle*> waitEvent, bool makeAutoResetEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::LazyCreateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyCreateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitEvent), ::il2cpp_utils::ExtractType(makeAutoResetEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, byref(waitEvent), makeAutoResetEvent);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.WaitOnEvent
bool System::Threading::ReaderWriterLockSlim::WaitOnEvent(System::Threading::EventWaitHandle* waitEvent, ByRef<uint> numWaiters, System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout, bool isWriteWaiter) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::WaitOnEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitEvent), ::il2cpp_utils::ExtractType(numWaiters), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(isWriteWaiter)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, waitEvent, byref(numWaiters), timeout, isWriteWaiter);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateWaiters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitAndWakeUpAppropriateWaiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateWaitersPreferringWriters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaitersPreferringWriters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaitersPreferringWriters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitAndWakeUpAppropriateWaitersPreferringWriters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateReadWaiters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateReadWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateReadWaiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitAndWakeUpAppropriateReadWaiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsWriterAcquired
bool System::Threading::ReaderWriterLockSlim::IsWriterAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::IsWriterAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWriterAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetWriterAcquired
void System::Threading::ReaderWriterLockSlim::SetWriterAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::SetWriterAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWriterAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearWriterAcquired
void System::Threading::ReaderWriterLockSlim::ClearWriterAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ClearWriterAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearWriterAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetWritersWaiting
void System::Threading::ReaderWriterLockSlim::SetWritersWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::SetWritersWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWritersWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearWritersWaiting
void System::Threading::ReaderWriterLockSlim::ClearWritersWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ClearWritersWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearWritersWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetUpgraderWaiting
void System::Threading::ReaderWriterLockSlim::SetUpgraderWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::SetUpgraderWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUpgraderWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearUpgraderWaiting
void System::Threading::ReaderWriterLockSlim::ClearUpgraderWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ClearUpgraderWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearUpgraderWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.GetNumReaders
uint System::Threading::ReaderWriterLockSlim::GetNumReaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::GetNumReaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNumReaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterMyLock
void System::Threading::ReaderWriterLockSlim::EnterMyLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::EnterMyLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterMyLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterMyLockSpin
void System::Threading::ReaderWriterLockSlim::EnterMyLockSpin() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::EnterMyLockSpin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterMyLockSpin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitMyLock
void System::Threading::ReaderWriterLockSlim::ExitMyLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::ExitMyLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitMyLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SpinWait
void System::Threading::ReaderWriterLockSlim::SpinWait(int SpinCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ReaderWriterLockSlim", "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(SpinCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, SpinCount);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.Dispose
void System::Threading::ReaderWriterLockSlim::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.Dispose
void System::Threading::ReaderWriterLockSlim::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker
#include "System/Threading/ReaderWriterLockSlim_TimeoutTracker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_total
int System::Threading::ReaderWriterLockSlim::TimeoutTracker::_get_m_total() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::_get_m_total");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "m_total"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 m_total
void System::Threading::ReaderWriterLockSlim::TimeoutTracker::_set_m_total(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::_set_m_total");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_total", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_start
int System::Threading::ReaderWriterLockSlim::TimeoutTracker::_get_m_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::_get_m_start");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "m_start"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 m_start
void System::Threading::ReaderWriterLockSlim::TimeoutTracker::_set_m_start(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::_set_m_start");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_start", value));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker.get_RemainingMilliseconds
int System::Threading::ReaderWriterLockSlim::TimeoutTracker::get_RemainingMilliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::get_RemainingMilliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RemainingMilliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker.get_IsExpired
bool System::Threading::ReaderWriterLockSlim::TimeoutTracker::get_IsExpired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::ReaderWriterLockSlim::TimeoutTracker::get_IsExpired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsExpired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskExtensions
#include "System/Threading/Tasks/TaskExtensions.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.AesManaged
#include "System/Security/Cryptography/AesManaged.hpp"
// Including type: System.Security.Cryptography.RijndaelManaged
#include "System/Security/Cryptography/RijndaelManaged.hpp"
// Including type: System.Security.Cryptography.ICryptoTransform
#include "System/Security/Cryptography/ICryptoTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Security.Cryptography.RijndaelManaged m_rijndael
System::Security::Cryptography::RijndaelManaged* System::Security::Cryptography::AesManaged::_get_m_rijndael() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::_get_m_rijndael");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::RijndaelManaged*>(___internal__instance, "m_rijndael"));
}
// Autogenerated instance field setter
// Set instance field: private System.Security.Cryptography.RijndaelManaged m_rijndael
void System::Security::Cryptography::AesManaged::_set_m_rijndael(System::Security::Cryptography::RijndaelManaged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::_set_m_rijndael");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "m_rijndael", value));
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_FeedbackSize
int System::Security::Cryptography::AesManaged::get_FeedbackSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_FeedbackSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FeedbackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_IV
::Array<uint8_t>* System::Security::Cryptography::AesManaged::get_IV() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_IV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.set_IV
void System::Security::Cryptography::AesManaged::set_IV(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::set_IV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_Key
::Array<uint8_t>* System::Security::Cryptography::AesManaged::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_Key");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.set_Key
void System::Security::Cryptography::AesManaged::set_Key(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::set_Key");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_KeySize
int System::Security::Cryptography::AesManaged::get_KeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_KeySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_KeySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.set_KeySize
void System::Security::Cryptography::AesManaged::set_KeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::set_KeySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_KeySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_Mode
System::Security::Cryptography::CipherMode System::Security::Cryptography::AesManaged::get_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_Mode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::CipherMode, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.set_Mode
void System::Security::Cryptography::AesManaged::set_Mode(System::Security::Cryptography::CipherMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::set_Mode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.get_Padding
System::Security::Cryptography::PaddingMode System::Security::Cryptography::AesManaged::get_Padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::get_Padding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::PaddingMode, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.set_Padding
void System::Security::Cryptography::AesManaged::set_Padding(System::Security::Cryptography::PaddingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::set_Padding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.CreateDecryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesManaged::CreateDecryptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::CreateDecryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDecryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.CreateDecryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesManaged::CreateDecryptor(::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::CreateDecryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDecryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(iv)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method, key, iv);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.CreateEncryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesManaged::CreateEncryptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::CreateEncryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEncryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.CreateEncryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesManaged::CreateEncryptor(::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::CreateEncryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEncryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(iv)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method, key, iv);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.Dispose
void System::Security::Cryptography::AesManaged::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.GenerateIV
void System::Security::Cryptography::AesManaged::GenerateIV() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::GenerateIV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateIV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesManaged.GenerateKey
void System::Security::Cryptography::AesManaged::GenerateKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesManaged::GenerateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.AesCryptoServiceProvider
#include "System/Security/Cryptography/AesCryptoServiceProvider.hpp"
// Including type: System.Security.Cryptography.CipherMode
#include "System/Security/Cryptography/CipherMode.hpp"
// Including type: System.Security.Cryptography.PaddingMode
#include "System/Security/Cryptography/PaddingMode.hpp"
// Including type: System.Security.Cryptography.ICryptoTransform
#include "System/Security/Cryptography/ICryptoTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_IV
::Array<uint8_t>* System::Security::Cryptography::AesCryptoServiceProvider::get_IV() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_IV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.set_IV
void System::Security::Cryptography::AesCryptoServiceProvider::set_IV(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::set_IV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_Key
::Array<uint8_t>* System::Security::Cryptography::AesCryptoServiceProvider::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_Key");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.set_Key
void System::Security::Cryptography::AesCryptoServiceProvider::set_Key(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::set_Key");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_KeySize
int System::Security::Cryptography::AesCryptoServiceProvider::get_KeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_KeySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_KeySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.set_KeySize
void System::Security::Cryptography::AesCryptoServiceProvider::set_KeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::set_KeySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_KeySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_FeedbackSize
int System::Security::Cryptography::AesCryptoServiceProvider::get_FeedbackSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_FeedbackSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FeedbackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_Mode
System::Security::Cryptography::CipherMode System::Security::Cryptography::AesCryptoServiceProvider::get_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_Mode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::CipherMode, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.set_Mode
void System::Security::Cryptography::AesCryptoServiceProvider::set_Mode(System::Security::Cryptography::CipherMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::set_Mode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.get_Padding
System::Security::Cryptography::PaddingMode System::Security::Cryptography::AesCryptoServiceProvider::get_Padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::get_Padding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::PaddingMode, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.set_Padding
void System::Security::Cryptography::AesCryptoServiceProvider::set_Padding(System::Security::Cryptography::PaddingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::set_Padding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV
void System::Security::Cryptography::AesCryptoServiceProvider::GenerateIV() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::GenerateIV");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateIV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey
void System::Security::Cryptography::AesCryptoServiceProvider::GenerateKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::GenerateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesCryptoServiceProvider::CreateDecryptor(::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::CreateDecryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDecryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(iv)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method, key, iv);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesCryptoServiceProvider::CreateEncryptor(::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::CreateEncryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEncryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(iv)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method, key, iv);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesCryptoServiceProvider::CreateDecryptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::CreateDecryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDecryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor
System::Security::Cryptography::ICryptoTransform* System::Security::Cryptography::AesCryptoServiceProvider::CreateEncryptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::CreateEncryptor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEncryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::ICryptoTransform*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesCryptoServiceProvider.Dispose
void System::Security::Cryptography::AesCryptoServiceProvider::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesCryptoServiceProvider::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.AesTransform
#include "System/Security/Cryptography/AesTransform.hpp"
// Including type: System.Security.Cryptography.Aes
#include "System/Security/Cryptography/Aes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] Rcon
::Array<uint>* System::Security::Cryptography::AesTransform::_get_Rcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_Rcon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "Rcon"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] Rcon
void System::Security::Cryptography::AesTransform::_set_Rcon(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_Rcon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "Rcon", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] SBox
::Array<uint8_t>* System::Security::Cryptography::AesTransform::_get_SBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_SBox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography", "AesTransform", "SBox"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] SBox
void System::Security::Cryptography::AesTransform::_set_SBox(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_SBox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "SBox", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] iSBox
::Array<uint8_t>* System::Security::Cryptography::AesTransform::_get_iSBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_iSBox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography", "AesTransform", "iSBox"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] iSBox
void System::Security::Cryptography::AesTransform::_set_iSBox(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_iSBox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "iSBox", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] T0
::Array<uint>* System::Security::Cryptography::AesTransform::_get_T0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_T0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "T0"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] T0
void System::Security::Cryptography::AesTransform::_set_T0(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_T0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "T0", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] T1
::Array<uint>* System::Security::Cryptography::AesTransform::_get_T1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_T1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "T1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] T1
void System::Security::Cryptography::AesTransform::_set_T1(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_T1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "T1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] T2
::Array<uint>* System::Security::Cryptography::AesTransform::_get_T2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_T2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "T2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] T2
void System::Security::Cryptography::AesTransform::_set_T2(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_T2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "T2", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] T3
::Array<uint>* System::Security::Cryptography::AesTransform::_get_T3() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_T3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "T3"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] T3
void System::Security::Cryptography::AesTransform::_set_T3(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_T3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "T3", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] iT0
::Array<uint>* System::Security::Cryptography::AesTransform::_get_iT0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_iT0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "iT0"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] iT0
void System::Security::Cryptography::AesTransform::_set_iT0(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_iT0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "iT0", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] iT1
::Array<uint>* System::Security::Cryptography::AesTransform::_get_iT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_iT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "iT1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] iT1
void System::Security::Cryptography::AesTransform::_set_iT1(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_iT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "iT1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] iT2
::Array<uint>* System::Security::Cryptography::AesTransform::_get_iT2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_iT2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "iT2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] iT2
void System::Security::Cryptography::AesTransform::_set_iT2(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_iT2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "iT2", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] iT3
::Array<uint>* System::Security::Cryptography::AesTransform::_get_iT3() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_iT3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("System.Security.Cryptography", "AesTransform", "iT3"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] iT3
void System::Security::Cryptography::AesTransform::_set_iT3(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_iT3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AesTransform", "iT3", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32[] expandedKey
::Array<uint>* System::Security::Cryptography::AesTransform::_get_expandedKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_expandedKey");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>(___internal__instance, "expandedKey"));
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32[] expandedKey
void System::Security::Cryptography::AesTransform::_set_expandedKey(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_expandedKey");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "expandedKey", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Nk
int System::Security::Cryptography::AesTransform::_get_Nk() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_Nk");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "Nk"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 Nk
void System::Security::Cryptography::AesTransform::_set_Nk(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_Nk");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Nk", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Nr
int System::Security::Cryptography::AesTransform::_get_Nr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_get_Nr");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "Nr"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 Nr
void System::Security::Cryptography::AesTransform::_set_Nr(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::_set_Nr");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Nr", value));
}
// Autogenerated method: System.Security.Cryptography.AesTransform..cctor
void System::Security::Cryptography::AesTransform::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography", "AesTransform", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AesTransform.SubByte
uint System::Security::Cryptography::AesTransform::SubByte(uint a) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::SubByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, a);
}
// Autogenerated method: System.Security.Cryptography.AesTransform.Encrypt128
void System::Security::Cryptography::AesTransform::Encrypt128(::Array<uint8_t>* indata, ::Array<uint8_t>* outdata, ::Array<uint>* ekey) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::Encrypt128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Encrypt128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indata), ::il2cpp_utils::ExtractType(outdata), ::il2cpp_utils::ExtractType(ekey)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, indata, outdata, ekey);
}
// Autogenerated method: System.Security.Cryptography.AesTransform.Decrypt128
void System::Security::Cryptography::AesTransform::Decrypt128(::Array<uint8_t>* indata, ::Array<uint8_t>* outdata, ::Array<uint>* ekey) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::Decrypt128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Decrypt128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indata), ::il2cpp_utils::ExtractType(outdata), ::il2cpp_utils::ExtractType(ekey)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, indata, outdata, ekey);
}
// Autogenerated method: System.Security.Cryptography.AesTransform.ECB
void System::Security::Cryptography::AesTransform::ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AesTransform::ECB");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ECB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.RSACertificateExtensions
#include "System/Security/Cryptography/X509Certificates/RSACertificateExtensions.hpp"
// Including type: System.Security.Cryptography.RSA
#include "System/Security/Cryptography/RSA.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey
System::Security::Cryptography::RSA* System::Security::Cryptography::X509Certificates::RSACertificateExtensions::GetRSAPublicKey(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::RSACertificateExtensions::GetRSAPublicKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "RSACertificateExtensions", "GetRSAPublicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::RSA*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificate);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Linq.Error
#include "System/Linq/Error.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Linq.Error.ArgumentNull
System::Exception* System::Linq::Error::ArgumentNull(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::ArgumentNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "ArgumentNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: System.Linq.Error.ArgumentOutOfRange
System::Exception* System::Linq::Error::ArgumentOutOfRange(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::ArgumentOutOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "ArgumentOutOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: System.Linq.Error.MoreThanOneElement
System::Exception* System::Linq::Error::MoreThanOneElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::MoreThanOneElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "MoreThanOneElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Linq.Error.MoreThanOneMatch
System::Exception* System::Linq::Error::MoreThanOneMatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::MoreThanOneMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "MoreThanOneMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Linq.Error.NoElements
System::Exception* System::Linq::Error::NoElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::NoElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "NoElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Linq.Error.NoMatch
System::Exception* System::Linq::Error::NoMatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::NoMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "NoMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Linq.Error.NotSupported
System::Exception* System::Linq::Error::NotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Error::NotSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Error", "NotSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Linq.Enumerable
#include "System/Linq/Enumerable.hpp"
// Including type: System.Linq.Enumerable/System.Linq.Iterator`1
#include "System/Linq/Enumerable_Iterator_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereEnumerableIterator`1
#include "System/Linq/Enumerable_WhereEnumerableIterator_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereArrayIterator`1
#include "System/Linq/Enumerable_WhereArrayIterator_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereListIterator`1
#include "System/Linq/Enumerable_WhereListIterator_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereSelectEnumerableIterator`2
#include "System/Linq/Enumerable_WhereSelectEnumerableIterator_2.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereSelectArrayIterator`2
#include "System/Linq/Enumerable_WhereSelectArrayIterator_2.hpp"
// Including type: System.Linq.Enumerable/System.Linq.WhereSelectListIterator`2
#include "System/Linq/Enumerable_WhereSelectListIterator_2.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<>c__DisplayClass6_0`1
#include "System/Linq/Enumerable_--c__DisplayClass6_0_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<>c__DisplayClass7_0`3
#include "System/Linq/Enumerable_--c__DisplayClass7_0_3.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<SelectManyIterator>d__17`2
#include "System/Linq/Enumerable_-SelectManyIterator-d__17_2.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<TakeIterator>d__25`1
#include "System/Linq/Enumerable_-TakeIterator-d__25_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<SkipIterator>d__31`1
#include "System/Linq/Enumerable_-SkipIterator-d__31_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<ConcatIterator>d__59`1
#include "System/Linq/Enumerable_-ConcatIterator-d__59_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<AppendIterator>d__61`1
#include "System/Linq/Enumerable_-AppendIterator-d__61_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<DistinctIterator>d__68`1
#include "System/Linq/Enumerable_-DistinctIterator-d__68_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<ExceptIterator>d__77`1
#include "System/Linq/Enumerable_-ExceptIterator-d__77_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<ReverseIterator>d__79`1
#include "System/Linq/Enumerable_-ReverseIterator-d__79_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<DefaultIfEmptyIterator>d__95`1
#include "System/Linq/Enumerable_-DefaultIfEmptyIterator-d__95_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<OfTypeIterator>d__97`1
#include "System/Linq/Enumerable_-OfTypeIterator-d__97_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<CastIterator>d__99`1
#include "System/Linq/Enumerable_-CastIterator-d__99_1.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115
#include "System/Linq/Enumerable_-RangeIterator-d__115.hpp"
// Including type: System.Linq.Enumerable/System.Linq.<RepeatIterator>d__117`1
#include "System/Linq/Enumerable_-RepeatIterator-d__117_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Linq.IOrderedEnumerable`1
#include "System/Linq/IOrderedEnumerable_1.hpp"
// Including type: System.Linq.IGrouping`2
#include "System/Linq/IGrouping_2.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Linq.Enumerable.Range
System::Collections::Generic::IEnumerable_1<int>* System::Linq::Enumerable::Range(int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::Range");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Range", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, start, count);
}
// Autogenerated method: System.Linq.Enumerable.RangeIterator
System::Collections::Generic::IEnumerable_1<int>* System::Linq::Enumerable::RangeIterator(int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::RangeIterator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "RangeIterator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, start, count);
}
// Autogenerated method: System.Linq.Enumerable.Sum
int System::Linq::Enumerable::Sum(System::Collections::Generic::IEnumerable_1<int>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::Sum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Sum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Autogenerated method: System.Linq.Enumerable.Min
float System::Linq::Enumerable::Min(System::Collections::Generic::IEnumerable_1<float>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Autogenerated method: System.Linq.Enumerable.Max
int System::Linq::Enumerable::Max(System::Collections::Generic::IEnumerable_1<int>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Autogenerated method: System.Linq.Enumerable.Max
float System::Linq::Enumerable::Max(System::Collections::Generic::IEnumerable_1<float>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115
#include "System/Linq/Enumerable_-RangeIterator-d__115.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$$1__state");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <>1__state
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$$1__state");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>2__current
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$$2__current");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>2__current")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <>2__current
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$$2__current(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$$2__current");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>2__current", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$$l__initialThreadId");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>l__initialThreadId")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <>l__initialThreadId
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$$l__initialThreadId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$$l__initialThreadId");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>l__initialThreadId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 start
int System::Linq::Enumerable::$RangeIterator$d__115::_get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_start");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "start"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 start
void System::Linq::Enumerable::$RangeIterator$d__115::_set_start(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_start");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "start", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>3__start
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$$3__start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$$3__start");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>3__start")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>3__start
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$$3__start(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$$3__start");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>3__start", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <i>5__1
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$i$5__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$i$5__1");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<i>5__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <i>5__1
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$i$5__1(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$i$5__1");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<i>5__1", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 count
int System::Linq::Enumerable::$RangeIterator$d__115::_get_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_count");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "count"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 count
void System::Linq::Enumerable::$RangeIterator$d__115::_set_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_count");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>3__count
int System::Linq::Enumerable::$RangeIterator$d__115::_get_$$3__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_get_$$3__count");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>3__count")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>3__count
void System::Linq::Enumerable::$RangeIterator$d__115::_set_$$3__count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::_set_$$3__count");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>3__count", value));
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.Collections.Generic.IEnumerator<System.Int32>.get_Current
int System::Linq::Enumerable::$RangeIterator$d__115::System_Collections_Generic_IEnumerator$System_Int32$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.Collections.Generic.IEnumerator<System.Int32>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Int32>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.Collections.IEnumerator.get_Current
::Il2CppObject* System::Linq::Enumerable::$RangeIterator$d__115::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.IDisposable.Dispose
void System::Linq::Enumerable::$RangeIterator$d__115::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.MoveNext
bool System::Linq::Enumerable::$RangeIterator$d__115::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.Collections.IEnumerator.Reset
void System::Linq::Enumerable::$RangeIterator$d__115::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator
System::Collections::Generic::IEnumerator_1<int>* System::Linq::Enumerable::$RangeIterator$d__115::System_Collections_Generic_IEnumerable$System_Int32$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<int>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Linq.Enumerable/System.Linq.<RangeIterator>d__115.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* System::Linq::Enumerable::$RangeIterator$d__115::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Linq::Enumerable::$RangeIterator$d__115::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.BitHelper
#include "System/Collections/Generic/BitHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _length
int System::Collections::Generic::BitHelper::_get__length() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_get__length");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "_length"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _length
void System::Collections::Generic::BitHelper::_set__length(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_set__length");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_length", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32* _arrayPtr
int* System::Collections::Generic::BitHelper::_get__arrayPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_get__arrayPtr");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int*>(___internal__instance, "_arrayPtr"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32* _arrayPtr
void System::Collections::Generic::BitHelper::_set__arrayPtr(int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_set__arrayPtr");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_arrayPtr", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32[] _array
::Array<int>* System::Collections::Generic::BitHelper::_get__array() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_get__array");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>(___internal__instance, "_array"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32[] _array
void System::Collections::Generic::BitHelper::_set__array(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_set__array");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_array", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _useStackAlloc
bool System::Collections::Generic::BitHelper::_get__useStackAlloc() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_get__useStackAlloc");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "_useStackAlloc"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean _useStackAlloc
void System::Collections::Generic::BitHelper::_set__useStackAlloc(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::_set__useStackAlloc");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_useStackAlloc", value));
}
// Autogenerated method: System.Collections.Generic.BitHelper.MarkBit
void System::Collections::Generic::BitHelper::MarkBit(int bitPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::MarkBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bitPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bitPosition);
}
// Autogenerated method: System.Collections.Generic.BitHelper.IsMarked
bool System::Collections::Generic::BitHelper::IsMarked(int bitPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::IsMarked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMarked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bitPosition)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bitPosition);
}
// Autogenerated method: System.Collections.Generic.BitHelper.ToIntArrayLength
int System::Collections::Generic::BitHelper::ToIntArrayLength(int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::BitHelper::ToIntArrayLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Collections.Generic", "BitHelper", "ToIntArrayLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, n);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Util.MonoPInvokeCallbackAttribute
#include "Mono/Util/MonoPInvokeCallbackAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.CertHelper
#include "Mono/Unity/CertHelper.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.CertHelper.AddCertificatesToNativeChain
void Mono::Unity::CertHelper::AddCertificatesToNativeChain(Mono::Unity::UnityTls::unitytls_x509list* nativeCertificateChain, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::CertHelper::AddCertificatesToNativeChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "CertHelper", "AddCertificatesToNativeChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativeCertificateChain), ::il2cpp_utils::ExtractType(certificates), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nativeCertificateChain, certificates, errorState);
}
// Autogenerated method: Mono.Unity.CertHelper.AddCertificateToNativeChain
void Mono::Unity::CertHelper::AddCertificateToNativeChain(Mono::Unity::UnityTls::unitytls_x509list* nativeCertificateChain, System::Security::Cryptography::X509Certificates::X509Certificate* certificate, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::CertHelper::AddCertificateToNativeChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "CertHelper", "AddCertificateToNativeChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativeCertificateChain), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nativeCertificateChain, certificate, errorState);
}
// Autogenerated method: Mono.Unity.CertHelper.NativeChainToManagedCollection
System::Security::Cryptography::X509Certificates::X509CertificateCollection* Mono::Unity::CertHelper::NativeChainToManagedCollection(Mono::Unity::UnityTls::unitytls_x509list_ref nativeCertificateChain, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::CertHelper::NativeChainToManagedCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "CertHelper", "NativeChainToManagedCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativeCertificateChain), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateCollection*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nativeCertificateChain, errorState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.Debug
#include "Mono/Unity/Debug.hpp"
// Including type: Mono.Security.Interface.AlertDescription
#include "Mono/Security/Interface/AlertDescription.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.Debug.CheckAndThrow
void Mono::Unity::Debug::CheckAndThrow(Mono::Unity::UnityTls::unitytls_errorstate errorState, ::Il2CppString* context, Mono::Security::Interface::AlertDescription defaultAlert) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::Debug::CheckAndThrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "Debug", "CheckAndThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(defaultAlert)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, errorState, context, defaultAlert);
}
// Autogenerated method: Mono.Unity.Debug.CheckAndThrow
void Mono::Unity::Debug::CheckAndThrow(Mono::Unity::UnityTls::unitytls_errorstate errorState, Mono::Unity::UnityTls::unitytls_x509verify_result verifyResult, ::Il2CppString* context, Mono::Security::Interface::AlertDescription defaultAlert) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::Debug::CheckAndThrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "Debug", "CheckAndThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(verifyResult), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(defaultAlert)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, errorState, verifyResult, context, defaultAlert);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls
#include "Mono/Unity/UnityTls.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code
#include "Mono/Unity/UnityTls_unitytls_error_code.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key_ref
#include "Mono/Unity/UnityTls_unitytls_key_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509_ref
#include "Mono/Unity/UnityTls_unitytls_x509_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509name
#include "Mono/Unity/UnityTls_unitytls_x509name.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite
#include "Mono/Unity/UnityTls_unitytls_ciphersuite.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol
#include "Mono/Unity/UnityTls_unitytls_protocol.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_protocolrange
#include "Mono/Unity/UnityTls_unitytls_tlsctx_protocolrange.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_write_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_read_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_trace_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_certificate_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_callbacks
#include "Mono/Unity/UnityTls_unitytls_tlsctx_callbacks.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct
#include "Mono/Unity/UnityTls_unitytls_interface_struct.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct marshalledInterface
Mono::Unity::UnityTls::unitytls_interface_struct* Mono::Unity::UnityTls::_get_marshalledInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::_get_marshalledInterface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct*>("Mono.Unity", "UnityTls", "marshalledInterface"));
}
// Autogenerated static field setter
// Set static field: static private Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct marshalledInterface
void Mono::Unity::UnityTls::_set_marshalledInterface(Mono::Unity::UnityTls::unitytls_interface_struct* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::_set_marshalledInterface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls", "marshalledInterface", value));
}
// Autogenerated method: Mono.Unity.UnityTls.get_IsSupported
bool Mono::Unity::UnityTls::get_IsSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::get_IsSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTls", "get_IsSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTls.get_NativeInterface
Mono::Unity::UnityTls::unitytls_interface_struct* Mono::Unity::UnityTls::get_NativeInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::get_NativeInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTls", "get_NativeInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_interface_struct*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTls.GetUnityTlsInterface
System::IntPtr Mono::Unity::UnityTls::GetUnityTlsInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::GetUnityTlsInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTls", "GetUnityTlsInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code
#include "Mono/Unity/UnityTls_unitytls_error_code.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_SUCCESS
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_SUCCESS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_SUCCESS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_SUCCESS"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_SUCCESS
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_SUCCESS(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_SUCCESS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_SUCCESS", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_ARGUMENT
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_ARGUMENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_ARGUMENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_ARGUMENT"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_ARGUMENT
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_ARGUMENT(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_ARGUMENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_ARGUMENT", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_FORMAT
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_FORMAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_FORMAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_FORMAT"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_FORMAT
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_FORMAT(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_FORMAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_FORMAT", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_PASSWORD
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_PASSWORD() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_PASSWORD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_PASSWORD"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_PASSWORD
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_PASSWORD(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_PASSWORD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_PASSWORD", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_STATE
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_STATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INVALID_STATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_STATE"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INVALID_STATE
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_STATE(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INVALID_STATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INVALID_STATE", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_BUFFER_OVERFLOW
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_BUFFER_OVERFLOW() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_BUFFER_OVERFLOW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_BUFFER_OVERFLOW"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_BUFFER_OVERFLOW
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_BUFFER_OVERFLOW(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_BUFFER_OVERFLOW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_BUFFER_OVERFLOW", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_OUT_OF_MEMORY
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_OUT_OF_MEMORY() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_OUT_OF_MEMORY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_OUT_OF_MEMORY"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_OUT_OF_MEMORY
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_OUT_OF_MEMORY(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_OUT_OF_MEMORY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_OUT_OF_MEMORY", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INTERNAL_ERROR
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INTERNAL_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_INTERNAL_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INTERNAL_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_INTERNAL_ERROR
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INTERNAL_ERROR(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_INTERNAL_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_INTERNAL_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_NOT_SUPPORTED
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_NOT_SUPPORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_NOT_SUPPORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_NOT_SUPPORTED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_NOT_SUPPORTED
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_NOT_SUPPORTED(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_NOT_SUPPORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_NOT_SUPPORTED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_ENTROPY_SOURCE_FAILED
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_ENTROPY_SOURCE_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_ENTROPY_SOURCE_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_ENTROPY_SOURCE_FAILED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_ENTROPY_SOURCE_FAILED
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_ENTROPY_SOURCE_FAILED(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_ENTROPY_SOURCE_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_ENTROPY_SOURCE_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_STREAM_CLOSED
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_STREAM_CLOSED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_STREAM_CLOSED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_STREAM_CLOSED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_STREAM_CLOSED
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_STREAM_CLOSED(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_STREAM_CLOSED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_STREAM_CLOSED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_CUSTOM_ERROR_START
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_CUSTOM_ERROR_START() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_CUSTOM_ERROR_START");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_CUSTOM_ERROR_START"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_CUSTOM_ERROR_START
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_CUSTOM_ERROR_START(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_CUSTOM_ERROR_START");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_CUSTOM_ERROR_START", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_WOULD_BLOCK
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_WOULD_BLOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_WOULD_BLOCK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_WOULD_BLOCK"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_WOULD_BLOCK
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_WOULD_BLOCK(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_WOULD_BLOCK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_WOULD_BLOCK", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_READ_FAILED
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_READ_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_READ_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_READ_FAILED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_READ_FAILED
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_READ_FAILED(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_READ_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_READ_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_WRITE_FAILED
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_WRITE_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_WRITE_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_WRITE_FAILED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_WRITE_FAILED
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_WRITE_FAILED(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_WRITE_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_WRITE_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_UNKNOWN_ERROR
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_UNKNOWN_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_UNKNOWN_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_UNKNOWN_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_UNKNOWN_ERROR
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_UNKNOWN_ERROR(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_UNKNOWN_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_UNKNOWN_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_CUSTOM_ERROR_END
Mono::Unity::UnityTls::unitytls_error_code Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_CUSTOM_ERROR_END() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_UNITYTLS_USER_CUSTOM_ERROR_END");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_error_code>("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_CUSTOM_ERROR_END"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code UNITYTLS_USER_CUSTOM_ERROR_END
void Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_CUSTOM_ERROR_END(Mono::Unity::UnityTls::unitytls_error_code value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_UNITYTLS_USER_CUSTOM_ERROR_END");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_error_code", "UNITYTLS_USER_CUSTOM_ERROR_END", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint Mono::Unity::UnityTls::unitytls_error_code::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void Mono::Unity::UnityTls::unitytls_error_code::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_error_code::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_SUCCESS
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_SUCCESS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_SUCCESS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_SUCCESS"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_SUCCESS
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_SUCCESS(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_SUCCESS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_SUCCESS", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_NOT_DONE
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_NOT_DONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_NOT_DONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_NOT_DONE"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_NOT_DONE
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_NOT_DONE(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_NOT_DONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_NOT_DONE", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FATAL_ERROR
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FATAL_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FATAL_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FATAL_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FATAL_ERROR
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FATAL_ERROR(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FATAL_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FATAL_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_EXPIRED
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_EXPIRED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_EXPIRED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_EXPIRED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_EXPIRED
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_EXPIRED(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_EXPIRED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_EXPIRED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_REVOKED
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_REVOKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_REVOKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_REVOKED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_REVOKED
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_REVOKED(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_REVOKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_REVOKED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR1
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR1"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR1
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR1(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR1", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR2
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR2"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR2
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR2(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR2", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR3
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR3"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR3
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR3(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR3", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR4
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR4() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR4"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR4
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR4(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR4", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR5
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR5() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR5"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR5
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR5(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR5", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR6
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR6() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR6"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR6
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR6(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR6", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR7
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR7() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR7"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR7
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR7(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR7", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR8
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR8() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_USER_ERROR8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR8"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_USER_ERROR8
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR8(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_USER_ERROR8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_USER_ERROR8", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509verify_result>("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR(Mono::Unity::UnityTls::unitytls_x509verify_result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_x509verify_result", "UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint Mono::Unity::UnityTls::unitytls_x509verify_result::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void Mono::Unity::UnityTls::unitytls_x509verify_result::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_result::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_x509verify_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509_ref
#include "Mono/Unity/UnityTls_unitytls_x509_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback.Invoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_callback::Invoke(void* userData, Mono::Unity::UnityTls::unitytls_x509_ref cert, Mono::Unity::UnityTls::unitytls_x509verify_result result, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, userData, cert, result, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_x509verify_callback::BeginInvoke(void* userData, Mono::Unity::UnityTls::unitytls_x509_ref cert, Mono::Unity::UnityTls::unitytls_x509verify_result result, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, cert, result, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback.EndInvoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_x509verify_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_x509verify_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite
#include "Mono/Unity/UnityTls_unitytls_ciphersuite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite UNITYTLS_CIPHERSUITE_INVALID
Mono::Unity::UnityTls::unitytls_ciphersuite Mono::Unity::UnityTls::unitytls_ciphersuite::_get_UNITYTLS_CIPHERSUITE_INVALID() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_ciphersuite::_get_UNITYTLS_CIPHERSUITE_INVALID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_ciphersuite>("Mono.Unity", "UnityTls/unitytls_ciphersuite", "UNITYTLS_CIPHERSUITE_INVALID"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite UNITYTLS_CIPHERSUITE_INVALID
void Mono::Unity::UnityTls::unitytls_ciphersuite::_set_UNITYTLS_CIPHERSUITE_INVALID(Mono::Unity::UnityTls::unitytls_ciphersuite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_ciphersuite::_set_UNITYTLS_CIPHERSUITE_INVALID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_ciphersuite", "UNITYTLS_CIPHERSUITE_INVALID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint Mono::Unity::UnityTls::unitytls_ciphersuite::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_ciphersuite::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void Mono::Unity::UnityTls::unitytls_ciphersuite::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_ciphersuite::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol
#include "Mono/Unity/UnityTls_unitytls_protocol.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_0
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_protocol>("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_0"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_0
void Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_0(Mono::Unity::UnityTls::unitytls_protocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_0", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_1
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_protocol>("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_1"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_1
void Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_1(Mono::Unity::UnityTls::unitytls_protocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_1", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_2
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_TLS_1_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_protocol>("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_2"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_TLS_1_2
void Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_2(Mono::Unity::UnityTls::unitytls_protocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_TLS_1_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_TLS_1_2", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_INVALID
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_INVALID() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_get_UNITYTLS_PROTOCOL_INVALID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_protocol>("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_INVALID"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol UNITYTLS_PROTOCOL_INVALID
void Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_INVALID(Mono::Unity::UnityTls::unitytls_protocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_set_UNITYTLS_PROTOCOL_INVALID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Unity", "UnityTls/unitytls_protocol", "UNITYTLS_PROTOCOL_INVALID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint Mono::Unity::UnityTls::unitytls_protocol::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void Mono::Unity::UnityTls::unitytls_protocol::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_protocol::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_write_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback.Invoke
System::IntPtr Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::Invoke(void* userData, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, userData, data, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::BeginInvoke(void* userData, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, data, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback.EndInvoke
System::IntPtr Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_write_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_read_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback.Invoke
System::IntPtr Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::Invoke(void* userData, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, userData, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::BeginInvoke(void* userData, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, buffer, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback.EndInvoke
System::IntPtr Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_read_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_trace_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback.Invoke
void Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::Invoke(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* traceMessage, System::IntPtr traceMessageLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(traceMessage), ::il2cpp_utils::ExtractType(traceMessageLen)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userData, ctx, traceMessage, traceMessageLen);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::BeginInvoke(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* traceMessage, System::IntPtr traceMessageLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(traceMessage), ::il2cpp_utils::ExtractType(traceMessageLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, ctx, traceMessage, traceMessageLen, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback.EndInvoke
void Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_certificate_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509name
#include "Mono/Unity/UnityTls_unitytls_x509name.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key_ref
#include "Mono/Unity/UnityTls_unitytls_key_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback.Invoke
void Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::Invoke(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(caList), ::il2cpp_utils::ExtractType(caListLen), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userData, ctx, cn, cnLen, caList, caListLen, chain, key, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::BeginInvoke(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(caList), ::il2cpp_utils::ExtractType(caListLen), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, ctx, cn, cnLen, caList, caListLen, chain, key, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback.EndInvoke
void Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_x509verify_callback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback.Invoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::Invoke(void* userData, Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, userData, chain, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::BeginInvoke(void* userData, Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userData, chain, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback.EndInvoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct
#include "Mono/Unity/UnityTls_unitytls_interface_struct.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_errorstate_create_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_errorstate_raise_error_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_get_ref_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_parse_der_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_parse_pem_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_free_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509_export_der_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_get_ref_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_get_x509_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_create_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_append_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_append_der_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_free_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509verify_default_ca_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509verify_explicit_ca_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_create_server_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_create_client_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_server_require_client_authentication_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_certificate_callback_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_trace_callback_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_x509verify_callback_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_supported_ciphersuites_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_get_ciphersuite_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_get_protocol_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_process_handshake_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_read_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_write_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_notify_close_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_free_t.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_random_generate_bytes_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.UInt64 UNITYTLS_INVALID_HANDLE
uint64_t Mono::Unity::UnityTls::unitytls_interface_struct::_get_UNITYTLS_INVALID_HANDLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_UNITYTLS_INVALID_HANDLE");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>(___internal__instance, "UNITYTLS_INVALID_HANDLE"));
}
// Autogenerated instance field setter
// Set instance field: public readonly System.UInt64 UNITYTLS_INVALID_HANDLE
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_UNITYTLS_INVALID_HANDLE(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_UNITYTLS_INVALID_HANDLE");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "UNITYTLS_INVALID_HANDLE", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_protocolrange UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT
Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange Mono::Unity::UnityTls::unitytls_interface_struct::_get_UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange>(___internal__instance, "UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT"));
}
// Autogenerated instance field setter
// Set instance field: public readonly Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_protocolrange UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT(Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t unitytls_errorstate_create
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_errorstate_create() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_errorstate_create");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t*>(___internal__instance, "unitytls_errorstate_create"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t unitytls_errorstate_create
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_errorstate_create(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_errorstate_create");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_errorstate_create", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t unitytls_errorstate_raise_error
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_errorstate_raise_error() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_errorstate_raise_error");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t*>(___internal__instance, "unitytls_errorstate_raise_error"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t unitytls_errorstate_raise_error
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_errorstate_raise_error(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_errorstate_raise_error");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_errorstate_raise_error", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t unitytls_key_get_ref
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_get_ref() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_get_ref");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t*>(___internal__instance, "unitytls_key_get_ref"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t unitytls_key_get_ref
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_get_ref(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_get_ref");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_key_get_ref", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t unitytls_key_parse_der
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_parse_der() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_parse_der");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t*>(___internal__instance, "unitytls_key_parse_der"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t unitytls_key_parse_der
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_parse_der(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_parse_der");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_key_parse_der", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t unitytls_key_parse_pem
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_parse_pem() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_parse_pem");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t*>(___internal__instance, "unitytls_key_parse_pem"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t unitytls_key_parse_pem
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_parse_pem(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_parse_pem");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_key_parse_pem", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t unitytls_key_free
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_free() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_key_free");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t*>(___internal__instance, "unitytls_key_free"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t unitytls_key_free
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_free(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_key_free");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_key_free", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t unitytls_x509_export_der
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509_export_der() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509_export_der");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t*>(___internal__instance, "unitytls_x509_export_der"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t unitytls_x509_export_der
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509_export_der(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509_export_der");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509_export_der", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t unitytls_x509list_get_ref
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_get_ref() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_get_ref");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t*>(___internal__instance, "unitytls_x509list_get_ref"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t unitytls_x509list_get_ref
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_get_ref(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_get_ref");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_get_ref", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t unitytls_x509list_get_x509
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_get_x509() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_get_x509");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t*>(___internal__instance, "unitytls_x509list_get_x509"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t unitytls_x509list_get_x509
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_get_x509(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_get_x509");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_get_x509", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t unitytls_x509list_create
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_create() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_create");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t*>(___internal__instance, "unitytls_x509list_create"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t unitytls_x509list_create
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_create(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_create");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_create", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t unitytls_x509list_append
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t*>(___internal__instance, "unitytls_x509list_append"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t unitytls_x509list_append
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_append", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t unitytls_x509list_append_der
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append_der() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append_der");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t*>(___internal__instance, "unitytls_x509list_append_der"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t unitytls_x509list_append_der
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append_der(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append_der");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_append_der", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t unitytls_x509list_append_pem
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append_pem() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_append_pem");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t*>(___internal__instance, "unitytls_x509list_append_pem"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t unitytls_x509list_append_pem
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append_pem(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_append_pem");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_append_pem", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t unitytls_x509list_free
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_free() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509list_free");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t*>(___internal__instance, "unitytls_x509list_free"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t unitytls_x509list_free
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_free(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509list_free");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509list_free", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t unitytls_x509verify_default_ca
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509verify_default_ca() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509verify_default_ca");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t*>(___internal__instance, "unitytls_x509verify_default_ca"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t unitytls_x509verify_default_ca
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509verify_default_ca(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509verify_default_ca");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509verify_default_ca", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t unitytls_x509verify_explicit_ca
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509verify_explicit_ca() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_x509verify_explicit_ca");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t*>(___internal__instance, "unitytls_x509verify_explicit_ca"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t unitytls_x509verify_explicit_ca
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509verify_explicit_ca(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_x509verify_explicit_ca");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_x509verify_explicit_ca", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t unitytls_tlsctx_create_server
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_create_server() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_create_server");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t*>(___internal__instance, "unitytls_tlsctx_create_server"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t unitytls_tlsctx_create_server
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_create_server(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_create_server");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_create_server", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t unitytls_tlsctx_create_client
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_create_client() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_create_client");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t*>(___internal__instance, "unitytls_tlsctx_create_client"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t unitytls_tlsctx_create_client
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_create_client(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_create_client");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_create_client", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t unitytls_tlsctx_server_require_client_authentication
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_server_require_client_authentication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_server_require_client_authentication");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t*>(___internal__instance, "unitytls_tlsctx_server_require_client_authentication"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t unitytls_tlsctx_server_require_client_authentication
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_server_require_client_authentication(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_server_require_client_authentication");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_server_require_client_authentication", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t unitytls_tlsctx_set_certificate_callback
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_certificate_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_certificate_callback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t*>(___internal__instance, "unitytls_tlsctx_set_certificate_callback"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t unitytls_tlsctx_set_certificate_callback
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_certificate_callback(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_certificate_callback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_set_certificate_callback", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t unitytls_tlsctx_set_trace_callback
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_trace_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_trace_callback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t*>(___internal__instance, "unitytls_tlsctx_set_trace_callback"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t unitytls_tlsctx_set_trace_callback
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_trace_callback(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_trace_callback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_set_trace_callback", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t unitytls_tlsctx_set_x509verify_callback
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_x509verify_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_x509verify_callback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t*>(___internal__instance, "unitytls_tlsctx_set_x509verify_callback"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t unitytls_tlsctx_set_x509verify_callback
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_x509verify_callback(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_x509verify_callback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_set_x509verify_callback", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t unitytls_tlsctx_set_supported_ciphersuites
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_supported_ciphersuites() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_set_supported_ciphersuites");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t*>(___internal__instance, "unitytls_tlsctx_set_supported_ciphersuites"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t unitytls_tlsctx_set_supported_ciphersuites
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_supported_ciphersuites(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_set_supported_ciphersuites");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_set_supported_ciphersuites", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t unitytls_tlsctx_get_ciphersuite
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_get_ciphersuite() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_get_ciphersuite");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t*>(___internal__instance, "unitytls_tlsctx_get_ciphersuite"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t unitytls_tlsctx_get_ciphersuite
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_get_ciphersuite(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_get_ciphersuite");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_get_ciphersuite", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t unitytls_tlsctx_get_protocol
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_get_protocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_get_protocol");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t*>(___internal__instance, "unitytls_tlsctx_get_protocol"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t unitytls_tlsctx_get_protocol
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_get_protocol(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_get_protocol");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_get_protocol", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t unitytls_tlsctx_process_handshake
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_process_handshake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_process_handshake");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t*>(___internal__instance, "unitytls_tlsctx_process_handshake"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t unitytls_tlsctx_process_handshake
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_process_handshake(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_process_handshake");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_process_handshake", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t unitytls_tlsctx_read
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_read() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_read");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t*>(___internal__instance, "unitytls_tlsctx_read"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t unitytls_tlsctx_read
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_read(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_read");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_read", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t unitytls_tlsctx_write
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_write() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_write");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t*>(___internal__instance, "unitytls_tlsctx_write"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t unitytls_tlsctx_write
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_write(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_write");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_write", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t unitytls_tlsctx_notify_close
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_notify_close() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_notify_close");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t*>(___internal__instance, "unitytls_tlsctx_notify_close"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t unitytls_tlsctx_notify_close
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_notify_close(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_notify_close");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_notify_close", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t unitytls_tlsctx_free
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_free() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_tlsctx_free");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t*>(___internal__instance, "unitytls_tlsctx_free"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t unitytls_tlsctx_free
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_free(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_tlsctx_free");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_tlsctx_free", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t unitytls_random_generate_bytes
Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t* Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_random_generate_bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_get_unitytls_random_generate_bytes");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t*>(___internal__instance, "unitytls_random_generate_bytes"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t unitytls_random_generate_bytes
void Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_random_generate_bytes(Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::_set_unitytls_random_generate_bytes");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "unitytls_random_generate_bytes", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_errorstate_create_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t.Invoke
Mono::Unity::UnityTls::unitytls_errorstate Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_errorstate, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_create_t.EndInvoke
Mono::Unity::UnityTls::unitytls_errorstate Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_create_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_errorstate, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_errorstate_raise_error_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_error_code
#include "Mono/Unity/UnityTls_unitytls_error_code.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::Invoke(Mono::Unity::UnityTls::unitytls_errorstate* errorState, Mono::Unity::UnityTls::unitytls_error_code errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(errorCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, errorState, errorCode);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_errorstate* errorState, Mono::Unity::UnityTls::unitytls_error_code errorCode, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, errorState, errorCode, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_errorstate_raise_error_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_errorstate_raise_error_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_get_ref_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key_ref
#include "Mono/Unity/UnityTls_unitytls_key_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t.Invoke
Mono::Unity::UnityTls::unitytls_key_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::Invoke(Mono::Unity::UnityTls::unitytls_key* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key_ref, false>(this, ___internal__method, key, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_key* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, key, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_get_ref_t.EndInvoke
Mono::Unity::UnityTls::unitytls_key_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_get_ref_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key_ref, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_parse_der_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t.Invoke
Mono::Unity::UnityTls::unitytls_key* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::Invoke(uint8_t* buffer, System::IntPtr bufferLen, uint8_t* password, System::IntPtr passwordLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(passwordLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key*, false>(this, ___internal__method, buffer, bufferLen, password, passwordLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::BeginInvoke(uint8_t* buffer, System::IntPtr bufferLen, uint8_t* password, System::IntPtr passwordLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(passwordLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, bufferLen, password, passwordLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_der_t.EndInvoke
Mono::Unity::UnityTls::unitytls_key* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_der_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_parse_pem_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t.Invoke
Mono::Unity::UnityTls::unitytls_key* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::Invoke(uint8_t* buffer, System::IntPtr bufferLen, uint8_t* password, System::IntPtr passwordLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(passwordLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key*, false>(this, ___internal__method, buffer, bufferLen, password, passwordLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::BeginInvoke(uint8_t* buffer, System::IntPtr bufferLen, uint8_t* password, System::IntPtr passwordLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(passwordLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, bufferLen, password, passwordLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_parse_pem_t.EndInvoke
Mono::Unity::UnityTls::unitytls_key* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_parse_pem_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_key*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_key_free_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::Invoke(Mono::Unity::UnityTls::unitytls_key* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_key* key, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, key, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_key_free_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_key_free_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509_export_der_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509_ref
#include "Mono/Unity/UnityTls_unitytls_x509_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t.Invoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::Invoke(Mono::Unity::UnityTls::unitytls_x509_ref cert, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, cert, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509_ref cert, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, cert, buffer, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509_export_der_t.EndInvoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509_export_der_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_get_ref_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t.Invoke
Mono::Unity::UnityTls::unitytls_x509list_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list* list, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509list_ref, false>(this, ___internal__method, list, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list* list, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, list, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_ref_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509list_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_ref_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509list_ref, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_get_x509_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509_ref
#include "Mono/Unity/UnityTls_unitytls_x509_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t.Invoke
Mono::Unity::UnityTls::unitytls_x509_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list_ref list, System::IntPtr index, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509_ref, false>(this, ___internal__method, list, index, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list_ref list, System::IntPtr index, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, list, index, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_get_x509_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509_ref Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_get_x509_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509_ref, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_create_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t.Invoke
Mono::Unity::UnityTls::unitytls_x509list* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::Invoke(Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509list*, false>(this, ___internal__method, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_create_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509list* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_create_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509list*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_append_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509_ref
#include "Mono/Unity/UnityTls_unitytls_x509_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list* list, Mono::Unity::UnityTls::unitytls_x509_ref cert, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, list, cert, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list* list, Mono::Unity::UnityTls::unitytls_x509_ref cert, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, list, cert, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_append_der_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list* list, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, list, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list* list, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, list, buffer, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_append_der_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_append_der_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509list_free_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list* list) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, list);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list* list, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, list, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509list_free_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509list_free_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509verify_default_ca_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t.Invoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list_ref chain, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, chain, cn, cnLen, cb, userData, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list_ref chain, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, chain, cn, cnLen, cb, userData, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_default_ca_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_default_ca_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_x509verify_explicit_ca_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t.Invoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::Invoke(Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_x509list_ref trustCA, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(trustCA), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, chain, trustCA, cn, cnLen, cb, userData, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_x509list_ref trustCA, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(trustCA), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, chain, trustCA, cn, cnLen, cb, userData, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_x509verify_explicit_ca_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_x509verify_explicit_ca_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_create_server_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_protocolrange
#include "Mono/Unity/UnityTls_unitytls_tlsctx_protocolrange.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_callbacks
#include "Mono/Unity/UnityTls_unitytls_tlsctx_callbacks.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t.Invoke
Mono::Unity::UnityTls::unitytls_tlsctx* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange supportedProtocols, Mono::Unity::UnityTls::unitytls_tlsctx_callbacks callbacks, uint64_t certChain, uint64_t leafCertificateKey, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(supportedProtocols), ::il2cpp_utils::ExtractType(callbacks), ::il2cpp_utils::ExtractType(certChain), ::il2cpp_utils::ExtractType(leafCertificateKey), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_tlsctx*, false>(this, ___internal__method, supportedProtocols, callbacks, certChain, leafCertificateKey, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange supportedProtocols, Mono::Unity::UnityTls::unitytls_tlsctx_callbacks callbacks, uint64_t certChain, uint64_t leafCertificateKey, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(supportedProtocols), ::il2cpp_utils::ExtractType(callbacks), ::il2cpp_utils::ExtractType(certChain), ::il2cpp_utils::ExtractType(leafCertificateKey), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, supportedProtocols, callbacks, certChain, leafCertificateKey, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_server_t.EndInvoke
Mono::Unity::UnityTls::unitytls_tlsctx* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_server_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_tlsctx*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_create_client_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_protocolrange
#include "Mono/Unity/UnityTls_unitytls_tlsctx_protocolrange.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_callbacks
#include "Mono/Unity/UnityTls_unitytls_tlsctx_callbacks.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t.Invoke
Mono::Unity::UnityTls::unitytls_tlsctx* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange supportedProtocols, Mono::Unity::UnityTls::unitytls_tlsctx_callbacks callbacks, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(supportedProtocols), ::il2cpp_utils::ExtractType(callbacks), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_tlsctx*, false>(this, ___internal__method, supportedProtocols, callbacks, cn, cnLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx_protocolrange supportedProtocols, Mono::Unity::UnityTls::unitytls_tlsctx_callbacks callbacks, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(supportedProtocols), ::il2cpp_utils::ExtractType(callbacks), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, supportedProtocols, callbacks, cn, cnLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_create_client_t.EndInvoke
Mono::Unity::UnityTls::unitytls_tlsctx* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_create_client_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_tlsctx*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_server_require_client_authentication_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_x509list_ref clientAuthCAList, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(clientAuthCAList), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, clientAuthCAList, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_x509list_ref clientAuthCAList, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(clientAuthCAList), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, clientAuthCAList, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_server_require_client_authentication_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_server_require_client_authentication_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_certificate_callback_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_certificate_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, cb, userData, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, cb, userData, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_certificate_callback_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_certificate_callback_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_trace_callback_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_trace_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_trace_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, cb, userData, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_trace_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, cb, userData, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_trace_callback_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_trace_callback_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_x509verify_callback_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, cb, userData, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback* cb, void* userData, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, cb, userData, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_x509verify_callback_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_x509verify_callback_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_set_supported_ciphersuites_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite
#include "Mono/Unity/UnityTls_unitytls_ciphersuite.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_ciphersuite* supportedCiphersuites, System::IntPtr supportedCiphersuitesLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(supportedCiphersuites), ::il2cpp_utils::ExtractType(supportedCiphersuitesLen), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, supportedCiphersuites, supportedCiphersuitesLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_ciphersuite* supportedCiphersuites, System::IntPtr supportedCiphersuitesLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(supportedCiphersuites), ::il2cpp_utils::ExtractType(supportedCiphersuitesLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, supportedCiphersuites, supportedCiphersuitesLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_set_supported_ciphersuites_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_set_supported_ciphersuites_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_get_ciphersuite_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_ciphersuite
#include "Mono/Unity/UnityTls_unitytls_ciphersuite.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t.Invoke
Mono::Unity::UnityTls::unitytls_ciphersuite Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_ciphersuite, false>(this, ___internal__method, ctx, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_ciphersuite_t.EndInvoke
Mono::Unity::UnityTls::unitytls_ciphersuite Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_ciphersuite_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_ciphersuite, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_get_protocol_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol
#include "Mono/Unity/UnityTls_unitytls_protocol.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t.Invoke
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_protocol, false>(this, ___internal__method, ctx, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_get_protocol_t.EndInvoke
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_get_protocol_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_protocol, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_process_handshake_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t.Invoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, ctx, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_process_handshake_t.EndInvoke
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_process_handshake_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_read_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t.Invoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, ctx, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, buffer, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_read_t.EndInvoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_read_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_write_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t.Invoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, ctx, data, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, data, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_write_t.EndInvoke
System::IntPtr Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_write_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_notify_close_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_notify_close_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_notify_close_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_tlsctx_free_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::Invoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::BeginInvoke(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ctx, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_tlsctx_free_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_tlsctx_free_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t
#include "Mono/Unity/UnityTls_unitytls_interface_struct_unitytls_random_generate_bytes_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t.Invoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::Invoke(uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t.BeginInvoke
System::IAsyncResult* Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::BeginInvoke(uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, bufferLen, errorState, callback, object);
}
// Autogenerated method: Mono.Unity.UnityTls/Mono.Unity.unitytls_interface_struct/Mono.Unity.unitytls_random_generate_bytes_t.EndInvoke
void Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTls::unitytls_interface_struct::unitytls_random_generate_bytes_t::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTlsContext
#include "Mono/Unity/UnityTlsContext.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: Mono.Security.Interface.MonoTlsConnectionInfo
#include "Mono/Security/Interface/MonoTlsConnectionInfo.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx
#include "Mono/Unity/UnityTls_unitytls_tlsctx.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list
#include "Mono/Unity/UnityTls_unitytls_x509list.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key
#include "Mono/Unity/UnityTls_unitytls_key.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_read_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_write_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_certificate_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback
#include "Mono/Unity/UnityTls_unitytls_tlsctx_x509verify_callback.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_errorstate
#include "Mono/Unity/UnityTls_unitytls_errorstate.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509name
#include "Mono/Unity/UnityTls_unitytls_x509name.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_key_ref
#include "Mono/Unity/UnityTls_unitytls_key_ref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx* tlsContext
Mono::Unity::UnityTls::unitytls_tlsctx* Mono::Unity::UnityTlsContext::_get_tlsContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_tlsContext");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx*>(___internal__instance, "tlsContext"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx* tlsContext
void Mono::Unity::UnityTlsContext::_set_tlsContext(Mono::Unity::UnityTls::unitytls_tlsctx* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_tlsContext");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "tlsContext", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list* requestedClientCertChain
Mono::Unity::UnityTls::unitytls_x509list* Mono::Unity::UnityTlsContext::_get_requestedClientCertChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_requestedClientCertChain");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_x509list*>(___internal__instance, "requestedClientCertChain"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_x509list* requestedClientCertChain
void Mono::Unity::UnityTlsContext::_set_requestedClientCertChain(Mono::Unity::UnityTls::unitytls_x509list* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_requestedClientCertChain");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "requestedClientCertChain", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_key* requestedClientKey
Mono::Unity::UnityTls::unitytls_key* Mono::Unity::UnityTlsContext::_get_requestedClientKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_requestedClientKey");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_key*>(___internal__instance, "requestedClientKey"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_key* requestedClientKey
void Mono::Unity::UnityTlsContext::_set_requestedClientKey(Mono::Unity::UnityTls::unitytls_key* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_requestedClientKey");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "requestedClientKey", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback readCallback
Mono::Unity::UnityTls::unitytls_tlsctx_read_callback* Mono::Unity::UnityTlsContext::_get_readCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_readCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx_read_callback*>(___internal__instance, "readCallback"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_read_callback readCallback
void Mono::Unity::UnityTlsContext::_set_readCallback(Mono::Unity::UnityTls::unitytls_tlsctx_read_callback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_readCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "readCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback writeCallback
Mono::Unity::UnityTls::unitytls_tlsctx_write_callback* Mono::Unity::UnityTlsContext::_get_writeCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_writeCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx_write_callback*>(___internal__instance, "writeCallback"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_write_callback writeCallback
void Mono::Unity::UnityTlsContext::_set_writeCallback(Mono::Unity::UnityTls::unitytls_tlsctx_write_callback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_writeCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writeCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback certificateCallback
Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback* Mono::Unity::UnityTlsContext::_get_certificateCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_certificateCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback*>(___internal__instance, "certificateCallback"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_certificate_callback certificateCallback
void Mono::Unity::UnityTlsContext::_set_certificateCallback(Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_certificateCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "certificateCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback verifyCallback
Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback* Mono::Unity::UnityTlsContext::_get_verifyCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_verifyCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback*>(___internal__instance, "verifyCallback"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Unity.UnityTls/Mono.Unity.unitytls_tlsctx_x509verify_callback verifyCallback
void Mono::Unity::UnityTlsContext::_set_verifyCallback(Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_verifyCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "verifyCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Security.Cryptography.X509Certificates.X509Certificate localClientCertificate
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Unity::UnityTlsContext::_get_localClientCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_localClientCertificate");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509Certificate*>(___internal__instance, "localClientCertificate"));
}
// Autogenerated instance field setter
// Set instance field: private System.Security.Cryptography.X509Certificates.X509Certificate localClientCertificate
void Mono::Unity::UnityTlsContext::_set_localClientCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_localClientCertificate");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "localClientCertificate", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Unity::UnityTlsContext::_get_remoteCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_remoteCertificate");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509Certificate*>(___internal__instance, "remoteCertificate"));
}
// Autogenerated instance field setter
// Set instance field: private System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate
void Mono::Unity::UnityTlsContext::_set_remoteCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_remoteCertificate");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "remoteCertificate", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Security.Interface.MonoTlsConnectionInfo connectioninfo
Mono::Security::Interface::MonoTlsConnectionInfo* Mono::Unity::UnityTlsContext::_get_connectioninfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_connectioninfo");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Security::Interface::MonoTlsConnectionInfo*>(___internal__instance, "connectioninfo"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Security.Interface.MonoTlsConnectionInfo connectioninfo
void Mono::Unity::UnityTlsContext::_set_connectioninfo(Mono::Security::Interface::MonoTlsConnectionInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_connectioninfo");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "connectioninfo", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isAuthenticated
bool Mono::Unity::UnityTlsContext::_get_isAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_isAuthenticated");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "isAuthenticated"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean isAuthenticated
void Mono::Unity::UnityTlsContext::_set_isAuthenticated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_isAuthenticated");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "isAuthenticated", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasContext
bool Mono::Unity::UnityTlsContext::_get_hasContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_hasContext");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "hasContext"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean hasContext
void Mono::Unity::UnityTlsContext::_set_hasContext(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_hasContext");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "hasContext", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean closedGraceful
bool Mono::Unity::UnityTlsContext::_get_closedGraceful() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_closedGraceful");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "closedGraceful"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean closedGraceful
void Mono::Unity::UnityTlsContext::_set_closedGraceful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_closedGraceful");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "closedGraceful", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] writeBuffer
::Array<uint8_t>* Mono::Unity::UnityTlsContext::_get_writeBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_writeBuffer");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>(___internal__instance, "writeBuffer"));
}
// Autogenerated instance field setter
// Set instance field: private System.Byte[] writeBuffer
void Mono::Unity::UnityTlsContext::_set_writeBuffer(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_writeBuffer");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writeBuffer", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] readBuffer
::Array<uint8_t>* Mono::Unity::UnityTlsContext::_get_readBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_readBuffer");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>(___internal__instance, "readBuffer"));
}
// Autogenerated instance field setter
// Set instance field: private System.Byte[] readBuffer
void Mono::Unity::UnityTlsContext::_set_readBuffer(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_readBuffer");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "readBuffer", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.GCHandle handle
System::Runtime::InteropServices::GCHandle Mono::Unity::UnityTlsContext::_get_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_handle");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Runtime::InteropServices::GCHandle>(___internal__instance, "handle"));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.InteropServices.GCHandle handle
void Mono::Unity::UnityTlsContext::_set_handle(System::Runtime::InteropServices::GCHandle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_handle");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "handle", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Exception lastException
System::Exception* Mono::Unity::UnityTlsContext::_get_lastException() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_get_lastException");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Exception*>(___internal__instance, "lastException"));
}
// Autogenerated instance field setter
// Set instance field: private System.Exception lastException
void Mono::Unity::UnityTlsContext::_set_lastException(System::Exception* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::_set_lastException");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "lastException", value));
}
// Autogenerated method: Mono.Unity.UnityTlsContext.ExtractNativeKeyAndChainFromManagedCertificate
void Mono::Unity::UnityTlsContext::ExtractNativeKeyAndChainFromManagedCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* cert, Mono::Unity::UnityTls::unitytls_errorstate* errorState, ByRef<Mono::Unity::UnityTls::unitytls_x509list*> nativeCertChain, ByRef<Mono::Unity::UnityTls::unitytls_key*> nativeKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::ExtractNativeKeyAndChainFromManagedCertificate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsContext", "ExtractNativeKeyAndChainFromManagedCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cert), ::il2cpp_utils::ExtractType(errorState), ::il2cpp_utils::ExtractIndependentType<Mono::Unity::UnityTls::unitytls_x509list*&>(), ::il2cpp_utils::ExtractIndependentType<Mono::Unity::UnityTls::unitytls_key*&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cert, errorState, byref(nativeCertChain), byref(nativeKey));
}
// Autogenerated method: Mono.Unity.UnityTlsContext.WriteCallback
System::IntPtr Mono::Unity::UnityTlsContext::WriteCallback(void* userData, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::WriteCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsContext", "WriteCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, userData, data, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.WriteCallback
System::IntPtr Mono::Unity::UnityTlsContext::WriteCallback(uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::WriteCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, data, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.ReadCallback
System::IntPtr Mono::Unity::UnityTlsContext::ReadCallback(void* userData, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::ReadCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsContext", "ReadCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, userData, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.ReadCallback
System::IntPtr Mono::Unity::UnityTlsContext::ReadCallback(uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::ReadCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(bufferLen), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, buffer, bufferLen, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.VerifyCallback
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTlsContext::VerifyCallback(void* userData, Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::VerifyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsContext", "VerifyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, userData, chain, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.VerifyCallback
Mono::Unity::UnityTls::unitytls_x509verify_result Mono::Unity::UnityTlsContext::VerifyCallback(Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::VerifyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(errorState)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_x509verify_result, false>(this, ___internal__method, chain, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.CertificateCallback
void Mono::Unity::UnityTlsContext::CertificateCallback(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::CertificateCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsContext", "CertificateCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(caList), ::il2cpp_utils::ExtractType(caListLen), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, userData, ctx, cn, cnLen, caList, caListLen, chain, key, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.CertificateCallback
void Mono::Unity::UnityTlsContext::CertificateCallback(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::CertificateCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CertificateCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(cn), ::il2cpp_utils::ExtractType(cnLen), ::il2cpp_utils::ExtractType(caList), ::il2cpp_utils::ExtractType(caListLen), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(errorState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ctx, cn, cnLen, caList, caListLen, chain, key, errorState);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.get_IsAuthenticated
bool Mono::Unity::UnityTlsContext::get_IsAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::get_IsAuthenticated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.get_LocalClientCertificate
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Unity::UnityTlsContext::get_LocalClientCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::get_LocalClientCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalClientCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.Read
System::ValueTuple_2<int, bool> Mono::Unity::UnityTlsContext::Read(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::ValueTuple_2<int, bool>, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.Write
System::ValueTuple_2<int, bool> Mono::Unity::UnityTlsContext::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::ValueTuple_2<int, bool>, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.Shutdown
void Mono::Unity::UnityTlsContext::Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::Shutdown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.Dispose
void Mono::Unity::UnityTlsContext::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.StartHandshake
void Mono::Unity::UnityTlsContext::StartHandshake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::StartHandshake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartHandshake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.ProcessHandshake
bool Mono::Unity::UnityTlsContext::ProcessHandshake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::ProcessHandshake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessHandshake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsContext.FinishHandshake
void Mono::Unity::UnityTlsContext::FinishHandshake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsContext::FinishHandshake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishHandshake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Unity.UnityTlsConversions
#include "Mono/Unity/UnityTlsConversions.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: Mono.Security.Interface.TlsProtocols
#include "Mono/Security/Interface/TlsProtocols.hpp"
// Including type: Mono.Security.Interface.AlertDescription
#include "Mono/Security/Interface/AlertDescription.hpp"
// Including type: Mono.Security.Interface.MonoSslPolicyErrors
#include "Mono/Security/Interface/MonoSslPolicyErrors.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_protocol
#include "Mono/Unity/UnityTls_unitytls_protocol.hpp"
// Including type: Mono.Unity.UnityTls/Mono.Unity.unitytls_x509verify_result
#include "Mono/Unity/UnityTls_unitytls_x509verify_result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTlsConversions.GetMinProtocol
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTlsConversions::GetMinProtocol(System::Security::Authentication::SslProtocols protocols) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsConversions::GetMinProtocol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsConversions", "GetMinProtocol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocols)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_protocol, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, protocols);
}
// Autogenerated method: Mono.Unity.UnityTlsConversions.GetMaxProtocol
Mono::Unity::UnityTls::unitytls_protocol Mono::Unity::UnityTlsConversions::GetMaxProtocol(System::Security::Authentication::SslProtocols protocols) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsConversions::GetMaxProtocol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsConversions", "GetMaxProtocol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocols)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Unity::UnityTls::unitytls_protocol, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, protocols);
}
// Autogenerated method: Mono.Unity.UnityTlsConversions.ConvertProtocolVersion
Mono::Security::Interface::TlsProtocols Mono::Unity::UnityTlsConversions::ConvertProtocolVersion(Mono::Unity::UnityTls::unitytls_protocol protocol) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsConversions::ConvertProtocolVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsConversions", "ConvertProtocolVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocol)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::TlsProtocols, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, protocol);
}
// Autogenerated method: Mono.Unity.UnityTlsConversions.VerifyResultToAlertDescription
Mono::Security::Interface::AlertDescription Mono::Unity::UnityTlsConversions::VerifyResultToAlertDescription(Mono::Unity::UnityTls::unitytls_x509verify_result verifyResult, Mono::Security::Interface::AlertDescription defaultAlert) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsConversions::VerifyResultToAlertDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsConversions", "VerifyResultToAlertDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verifyResult), ::il2cpp_utils::ExtractType(defaultAlert)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::AlertDescription, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, verifyResult, defaultAlert);
}
// Autogenerated method: Mono.Unity.UnityTlsConversions.VerifyResultToPolicyErrror
Mono::Security::Interface::MonoSslPolicyErrors Mono::Unity::UnityTlsConversions::VerifyResultToPolicyErrror(Mono::Unity::UnityTls::unitytls_x509verify_result verifyResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsConversions::VerifyResultToPolicyErrror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Unity", "UnityTlsConversions", "VerifyResultToPolicyErrror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verifyResult)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::MonoSslPolicyErrors, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, verifyResult);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTlsProvider
#include "Mono/Unity/UnityTlsProvider.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: Mono.Security.Interface.IMonoSslStream
#include "Mono/Security/Interface/IMonoSslStream.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: System.Net.Security.SslStream
#include "System/Net/Security/SslStream.hpp"
// Including type: Mono.Security.Interface.ICertificateValidator2
#include "Mono/Security/Interface/ICertificateValidator2.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: Mono.Security.Interface.MonoSslPolicyErrors
#include "Mono/Security/Interface/MonoSslPolicyErrors.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_Name
::Il2CppString* Mono::Unity::UnityTlsProvider::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_ID
System::Guid Mono::Unity::UnityTlsProvider::get_ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_ID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_SupportsSslStream
bool Mono::Unity::UnityTlsProvider::get_SupportsSslStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_SupportsSslStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsSslStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_SupportsMonoExtensions
bool Mono::Unity::UnityTlsProvider::get_SupportsMonoExtensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_SupportsMonoExtensions");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsMonoExtensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_SupportsConnectionInfo
bool Mono::Unity::UnityTlsProvider::get_SupportsConnectionInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_SupportsConnectionInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsConnectionInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_SupportsCleanShutdown
bool Mono::Unity::UnityTlsProvider::get_SupportsCleanShutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_SupportsCleanShutdown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsCleanShutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.get_SupportedProtocols
System::Security::Authentication::SslProtocols Mono::Unity::UnityTlsProvider::get_SupportedProtocols() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::get_SupportedProtocols");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportedProtocols", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Authentication::SslProtocols, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.CreateSslStream
Mono::Security::Interface::IMonoSslStream* Mono::Unity::UnityTlsProvider::CreateSslStream(System::IO::Stream* innerStream, bool leaveInnerStreamOpen, Mono::Security::Interface::MonoTlsSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::CreateSslStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSslStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerStream), ::il2cpp_utils::ExtractType(leaveInnerStreamOpen), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::IMonoSslStream*, false>(this, ___internal__method, innerStream, leaveInnerStreamOpen, settings);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.CreateSslStreamInternal
Mono::Security::Interface::IMonoSslStream* Mono::Unity::UnityTlsProvider::CreateSslStreamInternal(System::Net::Security::SslStream* sslStream, System::IO::Stream* innerStream, bool leaveInnerStreamOpen, Mono::Security::Interface::MonoTlsSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::CreateSslStreamInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSslStreamInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sslStream), ::il2cpp_utils::ExtractType(innerStream), ::il2cpp_utils::ExtractType(leaveInnerStreamOpen), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::IMonoSslStream*, false>(this, ___internal__method, sslStream, innerStream, leaveInnerStreamOpen, settings);
}
// Autogenerated method: Mono.Unity.UnityTlsProvider.ValidateCertificate
bool Mono::Unity::UnityTlsProvider::ValidateCertificate(Mono::Security::Interface::ICertificateValidator2* validator, ::Il2CppString* targetHost, bool serverMode, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates, bool wantsChain, ByRef<System::Security::Cryptography::X509Certificates::X509Chain*> chain, ByRef<Mono::Security::Interface::MonoSslPolicyErrors> errors, ByRef<int> status11) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsProvider::ValidateCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(validator), ::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(certificates), ::il2cpp_utils::ExtractType(wantsChain), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(errors), ::il2cpp_utils::ExtractType(status11)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, validator, targetHost, serverMode, certificates, wantsChain, byref(chain), byref(errors), byref(status11));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Unity.UnityTlsStream
#include "Mono/Unity/UnityTlsStream.hpp"
// Including type: System.Net.Security.SslStream
#include "System/Net/Security/SslStream.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: Mono.Security.Interface.MonoTlsProvider
#include "Mono/Security/Interface/MonoTlsProvider.hpp"
// Including type: Mono.Net.Security.MobileTlsContext
#include "Mono/Net/Security/MobileTlsContext.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Unity.UnityTlsStream.CreateContext
Mono::Net::Security::MobileTlsContext* Mono::Unity::UnityTlsStream::CreateContext(bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Unity::UnityTlsStream::CreateContext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(enabledProtocols), ::il2cpp_utils::ExtractType(serverCertificate), ::il2cpp_utils::ExtractType(clientCertificates), ::il2cpp_utils::ExtractType(askForClientCert)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::MobileTlsContext*, false>(this, ___internal__method, serverMode, targetHost, enabledProtocols, serverCertificate, clientCertificates, askForClientCert);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFObject
#include "Mono/Net/CFObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.IntPtr <Handle>k__BackingField
System::IntPtr Mono::Net::CFObject::_get_$Handle$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::_get_$Handle$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "<Handle>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private System.IntPtr <Handle>k__BackingField
void Mono::Net::CFObject::_set_$Handle$k__BackingField(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::_set_$Handle$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<Handle>k__BackingField", value));
}
// Autogenerated method: Mono.Net.CFObject.get_Handle
System::IntPtr Mono::Net::CFObject::get_Handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::get_Handle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFObject.set_Handle
void Mono::Net::CFObject::set_Handle(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::set_Handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mono.Net.CFObject.dlopen
System::IntPtr Mono::Net::CFObject::dlopen(::Il2CppString* path, int mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::dlopen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "dlopen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, mode);
}
// Autogenerated method: Mono.Net.CFObject.dlsym
System::IntPtr Mono::Net::CFObject::dlsym(System::IntPtr handle, ::Il2CppString* symbol) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::dlsym");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "dlsym", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(symbol)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, symbol);
}
// Autogenerated method: Mono.Net.CFObject.dlclose
void Mono::Net::CFObject::dlclose(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::dlclose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "dlclose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFObject.GetIndirect
System::IntPtr Mono::Net::CFObject::GetIndirect(System::IntPtr handle, ::Il2CppString* symbol) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::GetIndirect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "GetIndirect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(symbol)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, symbol);
}
// Autogenerated method: Mono.Net.CFObject.GetCFObjectHandle
System::IntPtr Mono::Net::CFObject::GetCFObjectHandle(System::IntPtr handle, ::Il2CppString* symbol) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::GetCFObjectHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "GetCFObjectHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(symbol)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, symbol);
}
// Autogenerated method: Mono.Net.CFObject.CFRetain
System::IntPtr Mono::Net::CFObject::CFRetain(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::CFRetain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "CFRetain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFObject.Retain
void Mono::Net::CFObject::Retain() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::Retain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Retain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFObject.CFRelease
void Mono::Net::CFObject::CFRelease(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::CFRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFObject", "CFRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFObject.Release
void Mono::Net::CFObject::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFObject.Dispose
void Mono::Net::CFObject::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Mono.Net.CFObject.Dispose
void Mono::Net::CFObject::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFObject.Finalize
void Mono::Net::CFObject::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFArray
#include "Mono/Net/CFArray.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.IntPtr kCFTypeArrayCallbacks
System::IntPtr Mono::Net::CFArray::_get_kCFTypeArrayCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::_get_kCFTypeArrayCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFArray", "kCFTypeArrayCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.IntPtr kCFTypeArrayCallbacks
void Mono::Net::CFArray::_set_kCFTypeArrayCallbacks(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::_set_kCFTypeArrayCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFArray", "kCFTypeArrayCallbacks", value));
}
// Autogenerated method: Mono.Net.CFArray.get_Count
int Mono::Net::CFArray::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFArray.get_Item
System::IntPtr Mono::Net::CFArray::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, index);
}
// Autogenerated method: Mono.Net.CFArray..cctor
void Mono::Net::CFArray::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFArray", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFArray.CFArrayGetCount
System::IntPtr Mono::Net::CFArray::CFArrayGetCount(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::CFArrayGetCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFArray", "CFArrayGetCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFArray.CFArrayGetValueAtIndex
System::IntPtr Mono::Net::CFArray::CFArrayGetValueAtIndex(System::IntPtr handle, System::IntPtr index) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFArray::CFArrayGetValueAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFArray", "CFArrayGetValueAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFNumber
#include "Mono/Net/CFNumber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.CFNumber.CFNumberGetValue
bool Mono::Net::CFNumber::CFNumberGetValue(System::IntPtr handle, System::IntPtr type, ByRef<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNumber::CFNumberGetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNumber", "CFNumberGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, type, byref(value));
}
// Autogenerated method: Mono.Net.CFNumber.AsInt32
int Mono::Net::CFNumber::AsInt32(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNumber::AsInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNumber", "AsInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFRange
#include "Mono/Net/CFRange.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr Location
System::IntPtr Mono::Net::CFRange::_get_Location() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRange::_get_Location");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "Location"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr Location
void Mono::Net::CFRange::_set_Location(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRange::_set_Location");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Location", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr Length
System::IntPtr Mono::Net::CFRange::_get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRange::_get_Length");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "Length"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr Length
void Mono::Net::CFRange::_set_Length(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRange::_set_Length");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Length", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFString
#include "Mono/Net/CFString.hpp"
// Including type: Mono.Net.CFRange
#include "Mono/Net/CFRange.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String str
::Il2CppString* Mono::Net::CFString::_get_str() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::_get_str");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>(___internal__instance, "str"));
}
// Autogenerated instance field setter
// Set instance field: private System.String str
void Mono::Net::CFString::_set_str(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::_set_str");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "str", value));
}
// Autogenerated method: Mono.Net.CFString.CFStringCreateWithCharacters
System::IntPtr Mono::Net::CFString::CFStringCreateWithCharacters(System::IntPtr alloc, System::IntPtr chars, System::IntPtr length) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::CFStringCreateWithCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "CFStringCreateWithCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alloc), ::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, alloc, chars, length);
}
// Autogenerated method: Mono.Net.CFString.Create
Mono::Net::CFString* Mono::Net::CFString::Create(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Mono.Net.CFString.CFStringGetLength
System::IntPtr Mono::Net::CFString::CFStringGetLength(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::CFStringGetLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "CFStringGetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFString.CFStringGetCharactersPtr
System::IntPtr Mono::Net::CFString::CFStringGetCharactersPtr(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::CFStringGetCharactersPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "CFStringGetCharactersPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFString.CFStringGetCharacters
System::IntPtr Mono::Net::CFString::CFStringGetCharacters(System::IntPtr handle, Mono::Net::CFRange range, System::IntPtr buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::CFStringGetCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "CFStringGetCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(range), ::il2cpp_utils::ExtractType(buffer)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, range, buffer);
}
// Autogenerated method: Mono.Net.CFString.AsString
::Il2CppString* Mono::Net::CFString::AsString(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::AsString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFString", "AsString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: Mono.Net.CFString.ToString
::Il2CppString* Mono::Net::CFString::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFString::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFDictionary
#include "Mono/Net/CFDictionary.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.IntPtr KeyCallbacks
System::IntPtr Mono::Net::CFDictionary::_get_KeyCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::_get_KeyCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFDictionary", "KeyCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.IntPtr KeyCallbacks
void Mono::Net::CFDictionary::_set_KeyCallbacks(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::_set_KeyCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFDictionary", "KeyCallbacks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.IntPtr ValueCallbacks
System::IntPtr Mono::Net::CFDictionary::_get_ValueCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::_get_ValueCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFDictionary", "ValueCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.IntPtr ValueCallbacks
void Mono::Net::CFDictionary::_set_ValueCallbacks(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::_set_ValueCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFDictionary", "ValueCallbacks", value));
}
// Autogenerated method: Mono.Net.CFDictionary.get_Item
System::IntPtr Mono::Net::CFDictionary::get_Item(System::IntPtr key) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, key);
}
// Autogenerated method: Mono.Net.CFDictionary..cctor
void Mono::Net::CFDictionary::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFDictionary", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFDictionary.CFDictionaryGetValue
System::IntPtr Mono::Net::CFDictionary::CFDictionaryGetValue(System::IntPtr handle, System::IntPtr key) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::CFDictionaryGetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFDictionary", "CFDictionaryGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, key);
}
// Autogenerated method: Mono.Net.CFDictionary.GetValue
System::IntPtr Mono::Net::CFDictionary::GetValue(System::IntPtr key) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFDictionary::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, key);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFUrl
#include "Mono/Net/CFUrl.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.CFUrl.CFURLCreateWithString
System::IntPtr Mono::Net::CFUrl::CFURLCreateWithString(System::IntPtr allocator, System::IntPtr str, System::IntPtr baseURL) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFUrl::CFURLCreateWithString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFUrl", "CFURLCreateWithString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allocator), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(baseURL)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, allocator, str, baseURL);
}
// Autogenerated method: Mono.Net.CFUrl.Create
Mono::Net::CFUrl* Mono::Net::CFUrl::Create(::Il2CppString* absolute) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFUrl::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFUrl", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(absolute)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFUrl*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, absolute);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFRunLoop
#include "Mono/Net/CFRunLoop.hpp"
// Including type: Mono.Net.CFString
#include "Mono/Net/CFString.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.CFRunLoop.get_CurrentRunLoop
Mono::Net::CFRunLoop* Mono::Net::CFRunLoop::get_CurrentRunLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::get_CurrentRunLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "get_CurrentRunLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFRunLoop*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFRunLoop.CFRunLoopAddSource
void Mono::Net::CFRunLoop::CFRunLoopAddSource(System::IntPtr rl, System::IntPtr source, System::IntPtr mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::CFRunLoopAddSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "CFRunLoopAddSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rl), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rl, source, mode);
}
// Autogenerated method: Mono.Net.CFRunLoop.CFRunLoopRemoveSource
void Mono::Net::CFRunLoop::CFRunLoopRemoveSource(System::IntPtr rl, System::IntPtr source, System::IntPtr mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::CFRunLoopRemoveSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "CFRunLoopRemoveSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rl), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rl, source, mode);
}
// Autogenerated method: Mono.Net.CFRunLoop.CFRunLoopRunInMode
int Mono::Net::CFRunLoop::CFRunLoopRunInMode(System::IntPtr mode, double seconds, bool returnAfterSourceHandled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::CFRunLoopRunInMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "CFRunLoopRunInMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(returnAfterSourceHandled)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode, seconds, returnAfterSourceHandled);
}
// Autogenerated method: Mono.Net.CFRunLoop.CFRunLoopGetCurrent
System::IntPtr Mono::Net::CFRunLoop::CFRunLoopGetCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::CFRunLoopGetCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "CFRunLoopGetCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFRunLoop.CFRunLoopStop
void Mono::Net::CFRunLoop::CFRunLoopStop(System::IntPtr rl) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::CFRunLoopStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFRunLoop", "CFRunLoopStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rl);
}
// Autogenerated method: Mono.Net.CFRunLoop.AddSource
void Mono::Net::CFRunLoop::AddSource(System::IntPtr source, Mono::Net::CFString* mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::AddSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, mode);
}
// Autogenerated method: Mono.Net.CFRunLoop.RemoveSource
void Mono::Net::CFRunLoop::RemoveSource(System::IntPtr source, Mono::Net::CFString* mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::RemoveSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, mode);
}
// Autogenerated method: Mono.Net.CFRunLoop.RunInMode
int Mono::Net::CFRunLoop::RunInMode(Mono::Net::CFString* mode, double seconds, bool returnAfterSourceHandled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::RunInMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunInMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(returnAfterSourceHandled)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, mode, seconds, returnAfterSourceHandled);
}
// Autogenerated method: Mono.Net.CFRunLoop.Stop
void Mono::Net::CFRunLoop::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFProxyType
#include "Mono/Net/CFProxyType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType None
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType None
void Mono::Net::CFProxyType::_set_None(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType AutoConfigurationUrl
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_AutoConfigurationUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_AutoConfigurationUrl");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "AutoConfigurationUrl"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType AutoConfigurationUrl
void Mono::Net::CFProxyType::_set_AutoConfigurationUrl(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_AutoConfigurationUrl");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "AutoConfigurationUrl", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType AutoConfigurationJavaScript
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_AutoConfigurationJavaScript() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_AutoConfigurationJavaScript");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "AutoConfigurationJavaScript"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType AutoConfigurationJavaScript
void Mono::Net::CFProxyType::_set_AutoConfigurationJavaScript(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_AutoConfigurationJavaScript");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "AutoConfigurationJavaScript", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType FTP
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_FTP() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_FTP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "FTP"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType FTP
void Mono::Net::CFProxyType::_set_FTP(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_FTP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "FTP", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType HTTP
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_HTTP() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_HTTP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "HTTP"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType HTTP
void Mono::Net::CFProxyType::_set_HTTP(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_HTTP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "HTTP", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType HTTPS
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_HTTPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_HTTPS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "HTTPS"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType HTTPS
void Mono::Net::CFProxyType::_set_HTTPS(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_HTTPS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "HTTPS", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.CFProxyType SOCKS
Mono::Net::CFProxyType Mono::Net::CFProxyType::_get_SOCKS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_SOCKS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFProxyType>("Mono.Net", "CFProxyType", "SOCKS"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.CFProxyType SOCKS
void Mono::Net::CFProxyType::_set_SOCKS(Mono::Net::CFProxyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_SOCKS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxyType", "SOCKS", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Mono::Net::CFProxyType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Mono::Net::CFProxyType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxyType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFProxy
#include "Mono/Net/CFProxy.hpp"
// Including type: Mono.Net.CFDictionary
#include "Mono/Net/CFDictionary.hpp"
// Including type: Mono.Net.CFProxyType
#include "Mono/Net/CFProxyType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyAutoConfigurationJavaScriptKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyAutoConfigurationJavaScriptKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyAutoConfigurationJavaScriptKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyAutoConfigurationJavaScriptKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyAutoConfigurationJavaScriptKey
void Mono::Net::CFProxy::_set_kCFProxyAutoConfigurationJavaScriptKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyAutoConfigurationJavaScriptKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyAutoConfigurationJavaScriptKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyAutoConfigurationURLKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyAutoConfigurationURLKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyAutoConfigurationURLKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyAutoConfigurationURLKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyAutoConfigurationURLKey
void Mono::Net::CFProxy::_set_kCFProxyAutoConfigurationURLKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyAutoConfigurationURLKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyAutoConfigurationURLKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyHostNameKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyHostNameKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyHostNameKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyHostNameKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyHostNameKey
void Mono::Net::CFProxy::_set_kCFProxyHostNameKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyHostNameKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyHostNameKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyPasswordKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyPasswordKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyPasswordKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyPasswordKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyPasswordKey
void Mono::Net::CFProxy::_set_kCFProxyPasswordKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyPasswordKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyPasswordKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyPortNumberKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyPortNumberKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyPortNumberKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyPortNumberKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyPortNumberKey
void Mono::Net::CFProxy::_set_kCFProxyPortNumberKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyPortNumberKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyPortNumberKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeKey
void Mono::Net::CFProxy::_set_kCFProxyTypeKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyUsernameKey
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyUsernameKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyUsernameKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyUsernameKey"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyUsernameKey
void Mono::Net::CFProxy::_set_kCFProxyUsernameKey(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyUsernameKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyUsernameKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeAutoConfigurationURL
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeAutoConfigurationURL() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeAutoConfigurationURL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeAutoConfigurationURL"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeAutoConfigurationURL
void Mono::Net::CFProxy::_set_kCFProxyTypeAutoConfigurationURL(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeAutoConfigurationURL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeAutoConfigurationURL", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeAutoConfigurationJavaScript
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeAutoConfigurationJavaScript() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeAutoConfigurationJavaScript");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeAutoConfigurationJavaScript"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeAutoConfigurationJavaScript
void Mono::Net::CFProxy::_set_kCFProxyTypeAutoConfigurationJavaScript(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeAutoConfigurationJavaScript");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeAutoConfigurationJavaScript", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeFTP
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeFTP() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeFTP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeFTP"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeFTP
void Mono::Net::CFProxy::_set_kCFProxyTypeFTP(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeFTP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeFTP", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeHTTP
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeHTTP() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeHTTP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeHTTP"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeHTTP
void Mono::Net::CFProxy::_set_kCFProxyTypeHTTP(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeHTTP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeHTTP", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeHTTPS
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeHTTPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeHTTPS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeHTTPS"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeHTTPS
void Mono::Net::CFProxy::_set_kCFProxyTypeHTTPS(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeHTTPS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeHTTPS", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFProxyTypeSOCKS
System::IntPtr Mono::Net::CFProxy::_get_kCFProxyTypeSOCKS() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_kCFProxyTypeSOCKS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxy", "kCFProxyTypeSOCKS"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFProxyTypeSOCKS
void Mono::Net::CFProxy::_set_kCFProxyTypeSOCKS(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_kCFProxyTypeSOCKS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxy", "kCFProxyTypeSOCKS", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.CFDictionary settings
Mono::Net::CFDictionary* Mono::Net::CFProxy::_get_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_get_settings");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFDictionary*>(___internal__instance, "settings"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.CFDictionary settings
void Mono::Net::CFProxy::_set_settings(Mono::Net::CFDictionary* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::_set_settings");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "settings", value));
}
// Autogenerated method: Mono.Net.CFProxy.get_AutoConfigurationJavaScript
System::IntPtr Mono::Net::CFProxy::get_AutoConfigurationJavaScript() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_AutoConfigurationJavaScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AutoConfigurationJavaScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_AutoConfigurationUrl
System::IntPtr Mono::Net::CFProxy::get_AutoConfigurationUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_AutoConfigurationUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AutoConfigurationUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_HostName
::Il2CppString* Mono::Net::CFProxy::get_HostName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_HostName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HostName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_Password
::Il2CppString* Mono::Net::CFProxy::get_Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_Password");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Password", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_Port
int Mono::Net::CFProxy::get_Port() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_Port");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Port", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_ProxyType
Mono::Net::CFProxyType Mono::Net::CFProxy::get_ProxyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_ProxyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProxyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFProxyType, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.get_Username
::Il2CppString* Mono::Net::CFProxy::get_Username() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::get_Username");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Username", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy..cctor
void Mono::Net::CFProxy::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFProxy", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxy.CFProxyTypeToEnum
Mono::Net::CFProxyType Mono::Net::CFProxy::CFProxyTypeToEnum(System::IntPtr type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxy::CFProxyTypeToEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFProxy", "CFProxyTypeToEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFProxyType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFProxySettings
#include "Mono/Net/CFProxySettings.hpp"
// Including type: Mono.Net.CFDictionary
#include "Mono/Net/CFDictionary.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesHTTPEnable
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPEnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPEnable"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesHTTPEnable
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPEnable(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPEnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPEnable", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesHTTPPort
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPPort");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPPort"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesHTTPPort
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPPort(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPPort");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPPort", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesHTTPProxy
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPProxy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesHTTPProxy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPProxy"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesHTTPProxy
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPProxy(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesHTTPProxy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesHTTPProxy", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigEnable
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigEnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigEnable"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigEnable
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigEnable(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigEnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigEnable", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigJavaScript
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigJavaScript() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigJavaScript");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigJavaScript"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigJavaScript
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigJavaScript(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigJavaScript");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigJavaScript", value));
}
// Autogenerated static field getter
// Get static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigURLString
System::IntPtr Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigURLString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_kCFNetworkProxiesProxyAutoConfigURLString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigURLString"));
}
// Autogenerated static field setter
// Set static field: static private System.IntPtr kCFNetworkProxiesProxyAutoConfigURLString
void Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigURLString(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_kCFNetworkProxiesProxyAutoConfigURLString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFProxySettings", "kCFNetworkProxiesProxyAutoConfigURLString", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.CFDictionary settings
Mono::Net::CFDictionary* Mono::Net::CFProxySettings::_get_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_get_settings");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFDictionary*>(___internal__instance, "settings"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.CFDictionary settings
void Mono::Net::CFProxySettings::_set_settings(Mono::Net::CFDictionary* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::_set_settings");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "settings", value));
}
// Autogenerated method: Mono.Net.CFProxySettings.get_Dictionary
Mono::Net::CFDictionary* Mono::Net::CFProxySettings::get_Dictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::get_Dictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Dictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFDictionary*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFProxySettings..cctor
void Mono::Net::CFProxySettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFProxySettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFProxySettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFNetwork
#include "Mono/Net/CFNetwork.hpp"
// Including type: Mono.Net.CFNetwork/Mono.Net.GetProxyData
#include "Mono/Net/CFNetwork_GetProxyData.hpp"
// Including type: Mono.Net.CFNetwork/Mono.Net.CFProxyAutoConfigurationResultCallback
#include "Mono/Net/CFNetwork_CFProxyAutoConfigurationResultCallback.hpp"
// Including type: Mono.Net.CFNetwork/Mono.Net.CFWebProxy
#include "Mono/Net/CFNetwork_CFWebProxy.hpp"
// Including type: Mono.Net.CFNetwork/Mono.Net.<>c__DisplayClass13_0
#include "Mono/Net/CFNetwork_--c__DisplayClass13_0.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Threading.AutoResetEvent
#include "System/Threading/AutoResetEvent.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Mono.Net.CFStreamClientContext
#include "Mono/Net/CFStreamClientContext.hpp"
// Including type: Mono.Net.CFArray
#include "Mono/Net/CFArray.hpp"
// Including type: Mono.Net.CFUrl
#include "Mono/Net/CFUrl.hpp"
// Including type: Mono.Net.CFProxy
#include "Mono/Net/CFProxy.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: Mono.Net.CFDictionary
#include "Mono/Net/CFDictionary.hpp"
// Including type: Mono.Net.CFProxySettings
#include "Mono/Net/CFProxySettings.hpp"
// Including type: System.Net.IWebProxy
#include "System/Net/IWebProxy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object lock_obj
::Il2CppObject* Mono::Net::CFNetwork::_get_lock_obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_get_lock_obj");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("Mono.Net", "CFNetwork", "lock_obj"));
}
// Autogenerated static field setter
// Set static field: static private System.Object lock_obj
void Mono::Net::CFNetwork::_set_lock_obj(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_set_lock_obj");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFNetwork", "lock_obj", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Queue`1<Mono.Net.CFNetwork/Mono.Net.GetProxyData> get_proxy_queue
System::Collections::Generic::Queue_1<Mono::Net::CFNetwork::GetProxyData*>* Mono::Net::CFNetwork::_get_get_proxy_queue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_get_get_proxy_queue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::Queue_1<Mono::Net::CFNetwork::GetProxyData*>*>("Mono.Net", "CFNetwork", "get_proxy_queue"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Queue`1<Mono.Net.CFNetwork/Mono.Net.GetProxyData> get_proxy_queue
void Mono::Net::CFNetwork::_set_get_proxy_queue(System::Collections::Generic::Queue_1<Mono::Net::CFNetwork::GetProxyData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_set_get_proxy_queue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFNetwork", "get_proxy_queue", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AutoResetEvent proxy_event
System::Threading::AutoResetEvent* Mono::Net::CFNetwork::_get_proxy_event() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_get_proxy_event");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::AutoResetEvent*>("Mono.Net", "CFNetwork", "proxy_event"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AutoResetEvent proxy_event
void Mono::Net::CFNetwork::_set_proxy_event(System::Threading::AutoResetEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::_set_proxy_event");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net", "CFNetwork", "proxy_event", value));
}
// Autogenerated method: Mono.Net.CFNetwork..cctor
void Mono::Net::CFNetwork::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkCopyProxiesForAutoConfigurationScriptSequential
System::IntPtr Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScriptSequential(System::IntPtr proxyAutoConfigurationScript, System::IntPtr targetURL, ByRef<System::IntPtr> error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScriptSequential");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkCopyProxiesForAutoConfigurationScriptSequential", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigurationScript), ::il2cpp_utils::ExtractType(targetURL), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigurationScript, targetURL, byref(error));
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkExecuteProxyAutoConfigurationURL
System::IntPtr Mono::Net::CFNetwork::CFNetworkExecuteProxyAutoConfigurationURL(System::IntPtr proxyAutoConfigURL, System::IntPtr targetURL, Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback* cb, ByRef<Mono::Net::CFStreamClientContext> clientContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkExecuteProxyAutoConfigurationURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkExecuteProxyAutoConfigurationURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigURL), ::il2cpp_utils::ExtractType(targetURL), ::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(clientContext)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigURL, targetURL, cb, byref(clientContext));
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkCopyProxiesForAutoConfigurationScriptThread
void Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScriptThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScriptThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkCopyProxiesForAutoConfigurationScriptThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkCopyProxiesForAutoConfigurationScript
System::IntPtr Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScript(System::IntPtr proxyAutoConfigurationScript, System::IntPtr targetURL, ByRef<System::IntPtr> error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkCopyProxiesForAutoConfigurationScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkCopyProxiesForAutoConfigurationScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigurationScript), ::il2cpp_utils::ExtractType(targetURL), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigurationScript, targetURL, byref(error));
}
// Autogenerated method: Mono.Net.CFNetwork.CopyProxiesForAutoConfigurationScript
Mono::Net::CFArray* Mono::Net::CFNetwork::CopyProxiesForAutoConfigurationScript(System::IntPtr proxyAutoConfigurationScript, Mono::Net::CFUrl* targetURL) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CopyProxiesForAutoConfigurationScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CopyProxiesForAutoConfigurationScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigurationScript), ::il2cpp_utils::ExtractType(targetURL)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFArray*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigurationScript, targetURL);
}
// Autogenerated method: Mono.Net.CFNetwork.GetProxiesForAutoConfigurationScript
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::GetProxiesForAutoConfigurationScript(System::IntPtr proxyAutoConfigurationScript, Mono::Net::CFUrl* targetURL) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxiesForAutoConfigurationScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetProxiesForAutoConfigurationScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigurationScript), ::il2cpp_utils::ExtractType(targetURL)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Net::CFProxy*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigurationScript, targetURL);
}
// Autogenerated method: Mono.Net.CFNetwork.GetProxiesForAutoConfigurationScript
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::GetProxiesForAutoConfigurationScript(System::IntPtr proxyAutoConfigurationScript, System::Uri* targetUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxiesForAutoConfigurationScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetProxiesForAutoConfigurationScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigurationScript), ::il2cpp_utils::ExtractType(targetUri)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Net::CFProxy*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigurationScript, targetUri);
}
// Autogenerated method: Mono.Net.CFNetwork.ExecuteProxyAutoConfigurationURL
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::ExecuteProxyAutoConfigurationURL(System::IntPtr proxyAutoConfigURL, System::Uri* targetURL) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::ExecuteProxyAutoConfigurationURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "ExecuteProxyAutoConfigurationURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigURL), ::il2cpp_utils::ExtractType(targetURL)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Net::CFProxy*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigURL, targetURL);
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkCopyProxiesForURL
System::IntPtr Mono::Net::CFNetwork::CFNetworkCopyProxiesForURL(System::IntPtr url, System::IntPtr proxySettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkCopyProxiesForURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkCopyProxiesForURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(proxySettings)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, url, proxySettings);
}
// Autogenerated method: Mono.Net.CFNetwork.CopyProxiesForURL
Mono::Net::CFArray* Mono::Net::CFNetwork::CopyProxiesForURL(Mono::Net::CFUrl* url, Mono::Net::CFDictionary* proxySettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CopyProxiesForURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CopyProxiesForURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(proxySettings)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFArray*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, url, proxySettings);
}
// Autogenerated method: Mono.Net.CFNetwork.GetProxiesForURL
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::GetProxiesForURL(Mono::Net::CFUrl* url, Mono::Net::CFProxySettings* proxySettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxiesForURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetProxiesForURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(proxySettings)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Net::CFProxy*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, url, proxySettings);
}
// Autogenerated method: Mono.Net.CFNetwork.GetProxiesForUri
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::GetProxiesForUri(System::Uri* uri, Mono::Net::CFProxySettings* proxySettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxiesForUri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetProxiesForUri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(proxySettings)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Net::CFProxy*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri, proxySettings);
}
// Autogenerated method: Mono.Net.CFNetwork.CFNetworkCopySystemProxySettings
System::IntPtr Mono::Net::CFNetwork::CFNetworkCopySystemProxySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFNetworkCopySystemProxySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "CFNetworkCopySystemProxySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFNetwork.GetSystemProxySettings
Mono::Net::CFProxySettings* Mono::Net::CFNetwork::GetSystemProxySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetSystemProxySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetSystemProxySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::CFProxySettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.CFNetwork.GetDefaultProxy
System::Net::IWebProxy* Mono::Net::CFNetwork::GetDefaultProxy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetDefaultProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork", "GetDefaultProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IWebProxy*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.CFNetwork/Mono.Net.GetProxyData
#include "Mono/Net/CFNetwork_GetProxyData.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr script
System::IntPtr Mono::Net::CFNetwork::GetProxyData::_get_script() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_get_script");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "script"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr script
void Mono::Net::CFNetwork::GetProxyData::_set_script(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_set_script");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "script", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr targetUri
System::IntPtr Mono::Net::CFNetwork::GetProxyData::_get_targetUri() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_get_targetUri");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "targetUri"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr targetUri
void Mono::Net::CFNetwork::GetProxyData::_set_targetUri(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_set_targetUri");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "targetUri", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr error
System::IntPtr Mono::Net::CFNetwork::GetProxyData::_get_error() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_get_error");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "error"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr error
void Mono::Net::CFNetwork::GetProxyData::_set_error(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_set_error");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr result
System::IntPtr Mono::Net::CFNetwork::GetProxyData::_get_result() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_get_result");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IntPtr>(___internal__instance, "result"));
}
// Autogenerated instance field setter
// Set instance field: public System.IntPtr result
void Mono::Net::CFNetwork::GetProxyData::_set_result(System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_set_result");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "result", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ManualResetEvent evt
System::Threading::ManualResetEvent* Mono::Net::CFNetwork::GetProxyData::_get_evt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_get_evt");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ManualResetEvent*>(___internal__instance, "evt"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.ManualResetEvent evt
void Mono::Net::CFNetwork::GetProxyData::_set_evt(System::Threading::ManualResetEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::_set_evt");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "evt", value));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.GetProxyData.Dispose
void Mono::Net::CFNetwork::GetProxyData::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::GetProxyData::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFNetwork/Mono.Net.CFProxyAutoConfigurationResultCallback
#include "Mono/Net/CFNetwork_CFProxyAutoConfigurationResultCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFProxyAutoConfigurationResultCallback.Invoke
void Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::Invoke(System::IntPtr client, System::IntPtr proxyList, System::IntPtr error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(client), ::il2cpp_utils::ExtractType(proxyList), ::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, client, proxyList, error);
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFProxyAutoConfigurationResultCallback.BeginInvoke
System::IAsyncResult* Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::BeginInvoke(System::IntPtr client, System::IntPtr proxyList, System::IntPtr error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(client), ::il2cpp_utils::ExtractType(proxyList), ::il2cpp_utils::ExtractType(error), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, client, proxyList, error, callback, object);
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFProxyAutoConfigurationResultCallback.EndInvoke
void Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFNetwork/Mono.Net.CFWebProxy
#include "Mono/Net/CFNetwork_CFWebProxy.hpp"
// Including type: System.Net.ICredentials
#include "System/Net/ICredentials.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: Mono.Net.CFProxy
#include "Mono/Net/CFProxy.hpp"
// Including type: System.Net.NetworkCredential
#include "System/Net/NetworkCredential.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Net.ICredentials credentials
System::Net::ICredentials* Mono::Net::CFNetwork::CFWebProxy::_get_credentials() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::_get_credentials");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::ICredentials*>(___internal__instance, "credentials"));
}
// Autogenerated instance field setter
// Set instance field: private System.Net.ICredentials credentials
void Mono::Net::CFNetwork::CFWebProxy::_set_credentials(System::Net::ICredentials* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::_set_credentials");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "credentials", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean userSpecified
bool Mono::Net::CFNetwork::CFWebProxy::_get_userSpecified() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::_get_userSpecified");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "userSpecified"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean userSpecified
void Mono::Net::CFNetwork::CFWebProxy::_set_userSpecified(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::_set_userSpecified");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "userSpecified", value));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.get_Credentials
System::Net::ICredentials* Mono::Net::CFNetwork::CFWebProxy::get_Credentials() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::get_Credentials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Credentials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::ICredentials*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.GetProxyUri
System::Uri* Mono::Net::CFNetwork::CFWebProxy::GetProxyUri(Mono::Net::CFProxy* proxy, ByRef<System::Net::NetworkCredential*> credentials) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::GetProxyUri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork/CFWebProxy", "GetProxyUri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxy), ::il2cpp_utils::ExtractIndependentType<System::Net::NetworkCredential*&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Uri*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxy, byref(credentials));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.GetProxyUriFromScript
System::Uri* Mono::Net::CFNetwork::CFWebProxy::GetProxyUriFromScript(System::IntPtr script, System::Uri* targetUri, ByRef<System::Net::NetworkCredential*> credentials) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::GetProxyUriFromScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork/CFWebProxy", "GetProxyUriFromScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(script), ::il2cpp_utils::ExtractType(targetUri), ::il2cpp_utils::ExtractIndependentType<System::Net::NetworkCredential*&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Uri*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, script, targetUri, byref(credentials));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.ExecuteProxyAutoConfigurationURL
System::Uri* Mono::Net::CFNetwork::CFWebProxy::ExecuteProxyAutoConfigurationURL(System::IntPtr proxyAutoConfigURL, System::Uri* targetUri, ByRef<System::Net::NetworkCredential*> credentials) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::ExecuteProxyAutoConfigurationURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork/CFWebProxy", "ExecuteProxyAutoConfigurationURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxyAutoConfigURL), ::il2cpp_utils::ExtractType(targetUri), ::il2cpp_utils::ExtractIndependentType<System::Net::NetworkCredential*&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Uri*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxyAutoConfigURL, targetUri, byref(credentials));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.SelectProxy
System::Uri* Mono::Net::CFNetwork::CFWebProxy::SelectProxy(::Array<Mono::Net::CFProxy*>* proxies, System::Uri* targetUri, ByRef<System::Net::NetworkCredential*> credentials) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::SelectProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net", "CFNetwork/CFWebProxy", "SelectProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxies), ::il2cpp_utils::ExtractType(targetUri), ::il2cpp_utils::ExtractIndependentType<System::Net::NetworkCredential*&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Uri*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, proxies, targetUri, byref(credentials));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.GetProxy
System::Uri* Mono::Net::CFNetwork::CFWebProxy::GetProxy(System::Uri* targetUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::GetProxy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetUri)})));
  return ::il2cpp_utils::RunMethodThrow<System::Uri*, false>(this, ___internal__method, targetUri);
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.CFWebProxy.IsBypassed
bool Mono::Net::CFNetwork::CFWebProxy::IsBypassed(System::Uri* targetUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::CFWebProxy::IsBypassed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsBypassed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetUri)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, targetUri);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFNetwork/Mono.Net.<>c__DisplayClass13_0
#include "Mono/Net/CFNetwork_--c__DisplayClass13_0.hpp"
// Including type: Mono.Net.CFProxy
#include "Mono/Net/CFProxy.hpp"
// Including type: Mono.Net.CFRunLoop
#include "Mono/Net/CFRunLoop.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Mono.Net.CFProxy[] proxies
::Array<Mono::Net::CFProxy*>* Mono::Net::CFNetwork::$$c__DisplayClass13_0::_get_proxies() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::$$c__DisplayClass13_0::_get_proxies");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<Mono::Net::CFProxy*>*>(___internal__instance, "proxies"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.CFProxy[] proxies
void Mono::Net::CFNetwork::$$c__DisplayClass13_0::_set_proxies(::Array<Mono::Net::CFProxy*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::$$c__DisplayClass13_0::_set_proxies");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "proxies", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.CFRunLoop runLoop
Mono::Net::CFRunLoop* Mono::Net::CFNetwork::$$c__DisplayClass13_0::_get_runLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::$$c__DisplayClass13_0::_get_runLoop");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::CFRunLoop*>(___internal__instance, "runLoop"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.CFRunLoop runLoop
void Mono::Net::CFNetwork::$$c__DisplayClass13_0::_set_runLoop(Mono::Net::CFRunLoop* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::$$c__DisplayClass13_0::_set_runLoop");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "runLoop", value));
}
// Autogenerated method: Mono.Net.CFNetwork/Mono.Net.<>c__DisplayClass13_0.<ExecuteProxyAutoConfigurationURL>b__0
void Mono::Net::CFNetwork::$$c__DisplayClass13_0::$ExecuteProxyAutoConfigurationURL$b__0(System::IntPtr client, System::IntPtr proxyList, System::IntPtr error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFNetwork::$$c__DisplayClass13_0::<ExecuteProxyAutoConfigurationURL>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExecuteProxyAutoConfigurationURL>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(client), ::il2cpp_utils::ExtractType(proxyList), ::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, client, proxyList, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.BufferOffsetSize
#include "Mono/Net/Security/BufferOffsetSize.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte[] Buffer
::Array<uint8_t>* Mono::Net::Security::BufferOffsetSize::_get_Buffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_get_Buffer");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>(___internal__instance, "Buffer"));
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] Buffer
void Mono::Net::Security::BufferOffsetSize::_set_Buffer(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_set_Buffer");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Buffer", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Offset
int Mono::Net::Security::BufferOffsetSize::_get_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_get_Offset");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "Offset"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 Offset
void Mono::Net::Security::BufferOffsetSize::_set_Offset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_set_Offset");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Offset", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Size
int Mono::Net::Security::BufferOffsetSize::_get_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_get_Size");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "Size"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 Size
void Mono::Net::Security::BufferOffsetSize::_set_Size(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_set_Size");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Size", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 TotalBytes
int Mono::Net::Security::BufferOffsetSize::_get_TotalBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_get_TotalBytes");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "TotalBytes"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 TotalBytes
void Mono::Net::Security::BufferOffsetSize::_set_TotalBytes(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_set_TotalBytes");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "TotalBytes", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Complete
bool Mono::Net::Security::BufferOffsetSize::_get_Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_get_Complete");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "Complete"));
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean Complete
void Mono::Net::Security::BufferOffsetSize::_set_Complete(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::_set_Complete");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Complete", value));
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize.get_EndOffset
int Mono::Net::Security::BufferOffsetSize::get_EndOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::get_EndOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize.get_Remaining
int Mono::Net::Security::BufferOffsetSize::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::get_Remaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Remaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize.ToString
::Il2CppString* Mono::Net::Security::BufferOffsetSize::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.BufferOffsetSize2
#include "Mono/Net/Security/BufferOffsetSize2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 InitialSize
int Mono::Net::Security::BufferOffsetSize2::_get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize2::_get_InitialSize");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "InitialSize"));
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Int32 InitialSize
void Mono::Net::Security::BufferOffsetSize2::_set_InitialSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize2::_set_InitialSize");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "InitialSize", value));
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize2.Reset
void Mono::Net::Security::BufferOffsetSize2::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize2::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize2.MakeRoom
void Mono::Net::Security::BufferOffsetSize2::MakeRoom(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize2::MakeRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: Mono.Net.Security.BufferOffsetSize2.AppendData
void Mono::Net::Security::BufferOffsetSize2::AppendData(::Array<uint8_t>* buffer, int offset, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::BufferOffsetSize2::AppendData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, size);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.AsyncOperationStatus Initialize
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncOperationStatus::_get_Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_get_Initialize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>("Mono.Net.Security", "AsyncOperationStatus", "Initialize"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.AsyncOperationStatus Initialize
void Mono::Net::Security::AsyncOperationStatus::_set_Initialize(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_set_Initialize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "AsyncOperationStatus", "Initialize", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.AsyncOperationStatus Continue
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncOperationStatus::_get_Continue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_get_Continue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>("Mono.Net.Security", "AsyncOperationStatus", "Continue"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.AsyncOperationStatus Continue
void Mono::Net::Security::AsyncOperationStatus::_set_Continue(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_set_Continue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "AsyncOperationStatus", "Continue", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.AsyncOperationStatus ReadDone
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncOperationStatus::_get_ReadDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_get_ReadDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>("Mono.Net.Security", "AsyncOperationStatus", "ReadDone"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.AsyncOperationStatus ReadDone
void Mono::Net::Security::AsyncOperationStatus::_set_ReadDone(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_set_ReadDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "AsyncOperationStatus", "ReadDone", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.AsyncOperationStatus Complete
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncOperationStatus::_get_Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_get_Complete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>("Mono.Net.Security", "AsyncOperationStatus", "Complete"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.AsyncOperationStatus Complete
void Mono::Net::Security::AsyncOperationStatus::_set_Complete(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_set_Complete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "AsyncOperationStatus", "Complete", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Mono::Net::Security::AsyncOperationStatus::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Mono::Net::Security::AsyncOperationStatus::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncOperationStatus::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncProtocolResult
#include "Mono/Net/Security/AsyncProtocolResult.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <UserResult>k__BackingField
int Mono::Net::Security::AsyncProtocolResult::_get_$UserResult$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::_get_$UserResult$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<UserResult>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 <UserResult>k__BackingField
void Mono::Net::Security::AsyncProtocolResult::_set_$UserResult$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::_set_$UserResult$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<UserResult>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
System::Runtime::ExceptionServices::ExceptionDispatchInfo* Mono::Net::Security::AsyncProtocolResult::_get_$Error$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::_get_$Error$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>(___internal__instance, "<Error>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
void Mono::Net::Security::AsyncProtocolResult::_set_$Error$k__BackingField(System::Runtime::ExceptionServices::ExceptionDispatchInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::_set_$Error$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<Error>k__BackingField", value));
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolResult.get_UserResult
int Mono::Net::Security::AsyncProtocolResult::get_UserResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::get_UserResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolResult.get_Error
System::Runtime::ExceptionServices::ExceptionDispatchInfo* Mono::Net::Security::AsyncProtocolResult::get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolResult::get_Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.AsyncProtocolRequest
#include "Mono/Net/Security/AsyncProtocolRequest.hpp"
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<StartOperation>d__23
#include "Mono/Net/Security/AsyncProtocolRequest_-StartOperation-d__23.hpp"
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<ProcessOperation>d__24
#include "Mono/Net/Security/AsyncProtocolRequest_-ProcessOperation-d__24.hpp"
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<InnerRead>d__25
#include "Mono/Net/Security/AsyncProtocolRequest_-InnerRead-d__25.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: Mono.Net.Security.AsyncProtocolResult
#include "Mono/Net/Security/AsyncProtocolResult.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Net.Security.MobileAuthenticatedStream <Parent>k__BackingField
Mono::Net::Security::MobileAuthenticatedStream* Mono::Net::Security::AsyncProtocolRequest::_get_$Parent$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_$Parent$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream*>(___internal__instance, "<Parent>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Net.Security.MobileAuthenticatedStream <Parent>k__BackingField
void Mono::Net::Security::AsyncProtocolRequest::_set_$Parent$k__BackingField(Mono::Net::Security::MobileAuthenticatedStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_$Parent$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<Parent>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean <RunSynchronously>k__BackingField
bool Mono::Net::Security::AsyncProtocolRequest::_get_$RunSynchronously$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_$RunSynchronously$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>(___internal__instance, "<RunSynchronously>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean <RunSynchronously>k__BackingField
void Mono::Net::Security::AsyncProtocolRequest::_set_$RunSynchronously$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_$RunSynchronously$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<RunSynchronously>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <UserResult>k__BackingField
int Mono::Net::Security::AsyncProtocolRequest::_get_$UserResult$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_$UserResult$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<UserResult>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <UserResult>k__BackingField
void Mono::Net::Security::AsyncProtocolRequest::_set_$UserResult$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_$UserResult$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<UserResult>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Started
int Mono::Net::Security::AsyncProtocolRequest::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_Started");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "Started"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 Started
void Mono::Net::Security::AsyncProtocolRequest::_set_Started(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_Started");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "Started", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 RequestedSize
int Mono::Net::Security::AsyncProtocolRequest::_get_RequestedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_RequestedSize");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "RequestedSize"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 RequestedSize
void Mono::Net::Security::AsyncProtocolRequest::_set_RequestedSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_RequestedSize");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "RequestedSize", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 WriteRequested
int Mono::Net::Security::AsyncProtocolRequest::_get_WriteRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_WriteRequested");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "WriteRequested"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 WriteRequested
void Mono::Net::Security::AsyncProtocolRequest::_set_WriteRequested(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_WriteRequested");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "WriteRequested", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object locker
::Il2CppObject* Mono::Net::Security::AsyncProtocolRequest::_get_locker() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_get_locker");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>(___internal__instance, "locker"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Object locker
void Mono::Net::Security::AsyncProtocolRequest::_set_locker(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::_set_locker");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "locker", value));
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.get_Parent
Mono::Net::Security::MobileAuthenticatedStream* Mono::Net::Security::AsyncProtocolRequest::get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::get_Parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::MobileAuthenticatedStream*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.get_RunSynchronously
bool Mono::Net::Security::AsyncProtocolRequest::get_RunSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::get_RunSynchronously");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RunSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.get_Name
::Il2CppString* Mono::Net::Security::AsyncProtocolRequest::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.get_UserResult
int Mono::Net::Security::AsyncProtocolRequest::get_UserResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::get_UserResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.set_UserResult
void Mono::Net::Security::AsyncProtocolRequest::set_UserResult(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::set_UserResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UserResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.RequestRead
void Mono::Net::Security::AsyncProtocolRequest::RequestRead(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::RequestRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.RequestWrite
void Mono::Net::Security::AsyncProtocolRequest::RequestWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::RequestWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.StartOperation
System::Threading::Tasks::Task_1<Mono::Net::Security::AsyncProtocolResult*>* Mono::Net::Security::AsyncProtocolRequest::StartOperation(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::StartOperation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<Mono::Net::Security::AsyncProtocolResult*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.ProcessOperation
System::Threading::Tasks::Task* Mono::Net::Security::AsyncProtocolRequest::ProcessOperation(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::ProcessOperation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.InnerRead
System::Threading::Tasks::Task_1<System::Nullable_1<int>>* Mono::Net::Security::AsyncProtocolRequest::InnerRead(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::InnerRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Nullable_1<int>>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.Run
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncProtocolRequest::Run(Mono::Net::Security::AsyncOperationStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::AsyncOperationStatus, false>(this, ___internal__method, status);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest.ToString
::Il2CppString* Mono::Net::Security::AsyncProtocolRequest::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<StartOperation>d__23
#include "Mono/Net/Security/AsyncProtocolRequest_-StartOperation-d__23.hpp"
// Including type: Mono.Net.Security.AsyncProtocolResult
#include "Mono/Net/Security/AsyncProtocolResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
int Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$1__state");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>1__state
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$1__state");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Mono.Net.Security.AsyncProtocolResult> <>t__builder
System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<Mono::Net::Security::AsyncProtocolResult*> Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$t__builder");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<Mono::Net::Security::AsyncProtocolResult*>>(___internal__instance, "<>t__builder")));
}
// Autogenerated instance field setter
// Set instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Mono.Net.Security.AsyncProtocolResult> <>t__builder
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$t__builder(System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<Mono::Net::Security::AsyncProtocolResult*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$t__builder");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>t__builder", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$4__this");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "<>4__this")));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$4__this(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$4__this");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
System::Threading::CancellationToken Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_cancellationToken");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::CancellationToken>(___internal__instance, "cancellationToken"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.CancellationToken cancellationToken
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_cancellationToken(System::Threading::CancellationToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_cancellationToken");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "cancellationToken", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__1
System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_get_$$u__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter>(___internal__instance, "<>u__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__1
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$u__1(System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::_set_$$u__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__1", value));
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<StartOperation>d__23.MoveNext
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<StartOperation>d__23.SetStateMachine
void Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$StartOperation$d__23::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<ProcessOperation>d__24
#include "Mono/Net/Security/AsyncProtocolRequest_-ProcessOperation-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
int Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$1__state");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>1__state
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$1__state");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
System::Runtime::CompilerServices::AsyncTaskMethodBuilder Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$t__builder");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::AsyncTaskMethodBuilder>(___internal__instance, "<>t__builder")));
}
// Autogenerated instance field setter
// Set instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$t__builder(System::Runtime::CompilerServices::AsyncTaskMethodBuilder value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$t__builder");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>t__builder", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
System::Threading::CancellationToken Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_cancellationToken");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::CancellationToken>(___internal__instance, "cancellationToken"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.CancellationToken cancellationToken
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_cancellationToken(System::Threading::CancellationToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_cancellationToken");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "cancellationToken", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$4__this");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "<>4__this")));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$4__this(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$4__this");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.AsyncOperationStatus <status>5__1
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$status$5__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$status$5__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>(___internal__instance, "<status>5__1")));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.AsyncOperationStatus <status>5__1
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$status$5__1(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$status$5__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<status>5__1", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.AsyncOperationStatus <newStatus>5__2
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$newStatus$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$newStatus$5__2");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncOperationStatus>(___internal__instance, "<newStatus>5__2")));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.AsyncOperationStatus <newStatus>5__2
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$newStatus$5__2(Mono::Net::Security::AsyncOperationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$newStatus$5__2");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<newStatus>5__2", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Nullable`1<System.Int32>> <>u__1
typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<System::Nullable_1<int>>::ConfiguredTaskAwaiter Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$u__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<System::Nullable_1<int>>::ConfiguredTaskAwaiter>(___internal__instance, "<>u__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Nullable`1<System.Int32>> <>u__1
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$u__1(typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<System::Nullable_1<int>>::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$u__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__1", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__2
System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_get_$$u__2");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter>(___internal__instance, "<>u__2")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__2
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$u__2(System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::_set_$$u__2");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__2", value));
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<ProcessOperation>d__24.MoveNext
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<ProcessOperation>d__24.SetStateMachine
void Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$ProcessOperation$d__24::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<InnerRead>d__25
#include "Mono/Net/Security/AsyncProtocolRequest_-InnerRead-d__25.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
int Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$1__state");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>1__state
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$1__state");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Nullable`1<System.Int32>> <>t__builder
System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<System::Nullable_1<int>> Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$t__builder");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<System::Nullable_1<int>>>(___internal__instance, "<>t__builder")));
}
// Autogenerated instance field setter
// Set instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Nullable`1<System.Int32>> <>t__builder
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$t__builder(System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<System::Nullable_1<int>> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$t__builder");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>t__builder", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$4__this");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "<>4__this")));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.AsyncProtocolRequest <>4__this
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$4__this(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$4__this");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
System::Threading::CancellationToken Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_cancellationToken");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::CancellationToken>(___internal__instance, "cancellationToken"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.CancellationToken cancellationToken
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_cancellationToken(System::Threading::CancellationToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_cancellationToken");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "cancellationToken", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <requestedSize>5__1
int Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$requestedSize$5__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$requestedSize$5__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<requestedSize>5__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <requestedSize>5__1
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$requestedSize$5__1(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$requestedSize$5__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<requestedSize>5__1", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Int32> <totalRead>5__2
System::Nullable_1<int> Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$totalRead$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$totalRead$5__2");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Nullable_1<int>>(___internal__instance, "<totalRead>5__2")));
}
// Autogenerated instance field setter
// Set instance field: private System.Nullable`1<System.Int32> <totalRead>5__2
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$totalRead$5__2(System::Nullable_1<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$totalRead$5__2");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<totalRead>5__2", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Int32> <>u__1
typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<int>::ConfiguredTaskAwaiter Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_get_$$u__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<int>::ConfiguredTaskAwaiter>(___internal__instance, "<>u__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Int32> <>u__1
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$u__1(typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<int>::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::_set_$$u__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__1", value));
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<InnerRead>d__25.MoveNext
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncProtocolRequest/Mono.Net.Security.<InnerRead>d__25.SetStateMachine
void Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncProtocolRequest::$InnerRead$d__25::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.AsyncHandshakeRequest
#include "Mono/Net/Security/AsyncHandshakeRequest.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.Security.AsyncHandshakeRequest.Run
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncHandshakeRequest::Run(Mono::Net::Security::AsyncOperationStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncHandshakeRequest::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::AsyncOperationStatus, false>(this, ___internal__method, status);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.AsyncReadOrWriteRequest
#include "Mono/Net/Security/AsyncReadOrWriteRequest.hpp"
// Including type: Mono.Net.Security.BufferOffsetSize
#include "Mono/Net/Security/BufferOffsetSize.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Net.Security.BufferOffsetSize <UserBuffer>k__BackingField
Mono::Net::Security::BufferOffsetSize* Mono::Net::Security::AsyncReadOrWriteRequest::_get_$UserBuffer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::_get_$UserBuffer$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::BufferOffsetSize*>(___internal__instance, "<UserBuffer>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Net.Security.BufferOffsetSize <UserBuffer>k__BackingField
void Mono::Net::Security::AsyncReadOrWriteRequest::_set_$UserBuffer$k__BackingField(Mono::Net::Security::BufferOffsetSize* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::_set_$UserBuffer$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<UserBuffer>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <CurrentSize>k__BackingField
int Mono::Net::Security::AsyncReadOrWriteRequest::_get_$CurrentSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::_get_$CurrentSize$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<CurrentSize>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <CurrentSize>k__BackingField
void Mono::Net::Security::AsyncReadOrWriteRequest::_set_$CurrentSize$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::_set_$CurrentSize$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<CurrentSize>k__BackingField", value));
}
// Autogenerated method: Mono.Net.Security.AsyncReadOrWriteRequest.get_UserBuffer
Mono::Net::Security::BufferOffsetSize* Mono::Net::Security::AsyncReadOrWriteRequest::get_UserBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::get_UserBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::BufferOffsetSize*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncReadOrWriteRequest.get_CurrentSize
int Mono::Net::Security::AsyncReadOrWriteRequest::get_CurrentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::get_CurrentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.AsyncReadOrWriteRequest.set_CurrentSize
void Mono::Net::Security::AsyncReadOrWriteRequest::set_CurrentSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::set_CurrentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mono.Net.Security.AsyncReadOrWriteRequest.ToString
::Il2CppString* Mono::Net::Security::AsyncReadOrWriteRequest::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadOrWriteRequest::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.AsyncReadRequest
#include "Mono/Net/Security/AsyncReadRequest.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.Security.AsyncReadRequest.Run
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncReadRequest::Run(Mono::Net::Security::AsyncOperationStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncReadRequest::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::AsyncOperationStatus, false>(this, ___internal__method, status);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.AsyncWriteRequest
#include "Mono/Net/Security/AsyncWriteRequest.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.Security.AsyncWriteRequest.Run
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::AsyncWriteRequest::Run(Mono::Net::Security::AsyncOperationStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::AsyncWriteRequest::Run");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::AsyncOperationStatus, false>(this, ___internal__method, status);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.ServerCertValidationCallbackWrapper
#include "Mono/Net/Security/ServerCertValidationCallbackWrapper.hpp"
// Including type: System.Net.ServerCertValidationCallback
#include "System/Net/ServerCertValidationCallback.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: Mono.Security.Interface.MonoSslPolicyErrors
#include "Mono/Security/Interface/MonoSslPolicyErrors.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.Security.ServerCertValidationCallbackWrapper.Invoke
bool Mono::Net::Security::ServerCertValidationCallbackWrapper::Invoke(System::Net::ServerCertValidationCallback* callback, System::Security::Cryptography::X509Certificates::X509Certificate* certificate, System::Security::Cryptography::X509Certificates::X509Chain* chain, Mono::Security::Interface::MonoSslPolicyErrors sslPolicyErrors) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ServerCertValidationCallbackWrapper::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(sslPolicyErrors)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, callback, certificate, chain, sslPolicyErrors);
}
// Autogenerated method: Mono.Net.Security.ServerCertValidationCallbackWrapper.BeginInvoke
System::IAsyncResult* Mono::Net::Security::ServerCertValidationCallbackWrapper::BeginInvoke(System::Net::ServerCertValidationCallback* callback, System::Security::Cryptography::X509Certificates::X509Certificate* certificate, System::Security::Cryptography::X509Certificates::X509Chain* chain, Mono::Security::Interface::MonoSslPolicyErrors sslPolicyErrors, System::AsyncCallback* __callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ServerCertValidationCallbackWrapper::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(sslPolicyErrors), ::il2cpp_utils::ExtractType(__callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, certificate, chain, sslPolicyErrors, __callback, object);
}
// Autogenerated method: Mono.Net.Security.ServerCertValidationCallbackWrapper.EndInvoke
bool Mono::Net::Security::ServerCertValidationCallbackWrapper::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ServerCertValidationCallbackWrapper::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.ChainValidationHelper
#include "Mono/Net/Security/ChainValidationHelper.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: Mono.Security.Interface.MonoTlsProvider
#include "Mono/Security/Interface/MonoTlsProvider.hpp"
// Including type: System.Net.ServerCertValidationCallback
#include "System/Net/ServerCertValidationCallback.hpp"
// Including type: System.Net.Security.LocalCertSelectionCallback
#include "System/Net/Security/LocalCertSelectionCallback.hpp"
// Including type: Mono.Net.Security.ServerCertValidationCallbackWrapper
#include "Mono/Net/Security/ServerCertValidationCallbackWrapper.hpp"
// Including type: Mono.Net.Security.MonoTlsStream
#include "Mono/Net/Security/MonoTlsStream.hpp"
// Including type: System.Net.HttpWebRequest
#include "System/Net/HttpWebRequest.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: Mono.Security.Interface.ValidationResult
#include "Mono/Security/Interface/ValidationResult.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: System.Net.Security.SslPolicyErrors
#include "System/Net/Security/SslPolicyErrors.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Object sender
::Il2CppObject* Mono::Net::Security::ChainValidationHelper::_get_sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_sender");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>(___internal__instance, "sender"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Object sender
void Mono::Net::Security::ChainValidationHelper::_set_sender(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_sender");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "sender", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Security.Interface.MonoTlsSettings settings
Mono::Security::Interface::MonoTlsSettings* Mono::Net::Security::ChainValidationHelper::_get_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_settings");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Security::Interface::MonoTlsSettings*>(___internal__instance, "settings"));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Security.Interface.MonoTlsSettings settings
void Mono::Net::Security::ChainValidationHelper::_set_settings(Mono::Security::Interface::MonoTlsSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_settings");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "settings", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Security.Interface.MonoTlsProvider provider
Mono::Security::Interface::MonoTlsProvider* Mono::Net::Security::ChainValidationHelper::_get_provider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_provider");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Security::Interface::MonoTlsProvider*>(___internal__instance, "provider"));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Security.Interface.MonoTlsProvider provider
void Mono::Net::Security::ChainValidationHelper::_set_provider(Mono::Security::Interface::MonoTlsProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_provider");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "provider", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Net.ServerCertValidationCallback certValidationCallback
System::Net::ServerCertValidationCallback* Mono::Net::Security::ChainValidationHelper::_get_certValidationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_certValidationCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::ServerCertValidationCallback*>(___internal__instance, "certValidationCallback"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Net.ServerCertValidationCallback certValidationCallback
void Mono::Net::Security::ChainValidationHelper::_set_certValidationCallback(System::Net::ServerCertValidationCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_certValidationCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "certValidationCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Net.Security.LocalCertSelectionCallback certSelectionCallback
System::Net::Security::LocalCertSelectionCallback* Mono::Net::Security::ChainValidationHelper::_get_certSelectionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_certSelectionCallback");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Security::LocalCertSelectionCallback*>(___internal__instance, "certSelectionCallback"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Net.Security.LocalCertSelectionCallback certSelectionCallback
void Mono::Net::Security::ChainValidationHelper::_set_certSelectionCallback(System::Net::Security::LocalCertSelectionCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_certSelectionCallback");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "certSelectionCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Net.Security.ServerCertValidationCallbackWrapper callbackWrapper
Mono::Net::Security::ServerCertValidationCallbackWrapper* Mono::Net::Security::ChainValidationHelper::_get_callbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_callbackWrapper");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::ServerCertValidationCallbackWrapper*>(___internal__instance, "callbackWrapper"));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Net.Security.ServerCertValidationCallbackWrapper callbackWrapper
void Mono::Net::Security::ChainValidationHelper::_set_callbackWrapper(Mono::Net::Security::ServerCertValidationCallbackWrapper* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_callbackWrapper");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "callbackWrapper", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Net.Security.MonoTlsStream tlsStream
Mono::Net::Security::MonoTlsStream* Mono::Net::Security::ChainValidationHelper::_get_tlsStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_tlsStream");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MonoTlsStream*>(___internal__instance, "tlsStream"));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Net.Security.MonoTlsStream tlsStream
void Mono::Net::Security::ChainValidationHelper::_set_tlsStream(Mono::Net::Security::MonoTlsStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_tlsStream");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "tlsStream", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Net.HttpWebRequest request
System::Net::HttpWebRequest* Mono::Net::Security::ChainValidationHelper::_get_request() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_get_request");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::HttpWebRequest*>(___internal__instance, "request"));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Net.HttpWebRequest request
void Mono::Net::Security::ChainValidationHelper::_set_request(System::Net::HttpWebRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::_set_request");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "request", value));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.get_Settings
Mono::Security::Interface::MonoTlsSettings* Mono::Net::Security::ChainValidationHelper::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::get_Settings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::MonoTlsSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.GetInternalValidator
Mono::Security::Interface::ICertificateValidator* Mono::Net::Security::ChainValidationHelper::GetInternalValidator(Mono::Security::Interface::MonoTlsProvider* provider, Mono::Security::Interface::MonoTlsSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::GetInternalValidator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "ChainValidationHelper", "GetInternalValidator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::ICertificateValidator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, settings);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.Create
Mono::Net::Security::ChainValidationHelper* Mono::Net::Security::ChainValidationHelper::Create(Mono::Security::Interface::MonoTlsProvider* provider, ByRef<Mono::Security::Interface::MonoTlsSettings*> settings, Mono::Net::Security::MonoTlsStream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "ChainValidationHelper", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::ChainValidationHelper*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, byref(settings), stream);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.DefaultSelectionCallback
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Net::Security::ChainValidationHelper::DefaultSelectionCallback(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* localCertificates, System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::Array<::Il2CppString*>* acceptableIssuers) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::DefaultSelectionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "ChainValidationHelper", "DefaultSelectionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(localCertificates), ::il2cpp_utils::ExtractType(remoteCertificate), ::il2cpp_utils::ExtractType(acceptableIssuers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetHost, localCertificates, remoteCertificate, acceptableIssuers);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.SelectClientCertificate
bool Mono::Net::Security::ChainValidationHelper::SelectClientCertificate(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* localCertificates, System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::Array<::Il2CppString*>* acceptableIssuers, ByRef<System::Security::Cryptography::X509Certificates::X509Certificate*> clientCertificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::SelectClientCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectClientCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(localCertificates), ::il2cpp_utils::ExtractType(remoteCertificate), ::il2cpp_utils::ExtractType(acceptableIssuers), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, targetHost, localCertificates, remoteCertificate, acceptableIssuers, byref(clientCertificate));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateCertificate
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateCertificate(::Il2CppString* host, bool serverMode, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::ValidateCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(certs)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::ValidationResult*, false>(this, ___internal__method, host, serverMode, certs);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateCertificate
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateCertificate(::Il2CppString* host, bool serverMode, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::ValidateCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(leaf), ::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::ValidationResult*, false>(this, ___internal__method, host, serverMode, leaf, chain);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateChain
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateChain(::Il2CppString* host, bool server, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain* chain, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs, System::Net::Security::SslPolicyErrors errors) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::ValidateChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(server), ::il2cpp_utils::ExtractType(leaf), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(certs), ::il2cpp_utils::ExtractType(errors)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::ValidationResult*, false>(this, ___internal__method, host, server, leaf, chain, certs, errors);
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateChain
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateChain_(::Il2CppString* host, bool server, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, ByRef<System::Security::Cryptography::X509Certificates::X509Chain*> chain, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs, System::Net::Security::SslPolicyErrors errors) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::ChainValidationHelper::ValidateChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(server), ::il2cpp_utils::ExtractType(leaf), ::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(certs), ::il2cpp_utils::ExtractType(errors)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::ValidationResult*, false>(this, ___internal__method, host, server, leaf, byref(chain), certs, errors);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.MobileAuthenticatedStream
#include "Mono/Net/Security/MobileAuthenticatedStream.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType
#include "Mono/Net/Security/MobileAuthenticatedStream_OperationType.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<ProcessAuthentication>d__47
#include "Mono/Net/Security/MobileAuthenticatedStream_-ProcessAuthentication-d__47.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<StartOperation>d__58
#include "Mono/Net/Security/MobileAuthenticatedStream_-StartOperation-d__58.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<>c__DisplayClass66_0
#include "Mono/Net/Security/MobileAuthenticatedStream_--c__DisplayClass66_0.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<InnerRead>d__66
#include "Mono/Net/Security/MobileAuthenticatedStream_-InnerRead-d__66.hpp"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<InnerWrite>d__67
#include "Mono/Net/Security/MobileAuthenticatedStream_-InnerWrite-d__67.hpp"
// Including type: Mono.Net.Security.MobileTlsContext
#include "Mono/Net/Security/MobileTlsContext.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: Mono.Net.Security.AsyncProtocolRequest
#include "Mono/Net/Security/AsyncProtocolRequest.hpp"
// Including type: Mono.Net.Security.BufferOffsetSize2
#include "Mono/Net/Security/BufferOffsetSize2.hpp"
// Including type: System.Net.Security.SslStream
#include "System/Net/Security/SslStream.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: Mono.Security.Interface.MonoTlsProvider
#include "Mono/Security/Interface/MonoTlsProvider.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Mono.Net.Security.BufferOffsetSize
#include "Mono/Net/Security/BufferOffsetSize.hpp"
// Including type: Mono.Net.Security.AsyncOperationStatus
#include "Mono/Net/Security/AsyncOperationStatus.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 uniqueNameInteger
int Mono::Net::Security::MobileAuthenticatedStream::_get_uniqueNameInteger() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_uniqueNameInteger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Mono.Net.Security", "MobileAuthenticatedStream", "uniqueNameInteger"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 uniqueNameInteger
void Mono::Net::Security::MobileAuthenticatedStream::_set_uniqueNameInteger(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_uniqueNameInteger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "MobileAuthenticatedStream", "uniqueNameInteger", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 nextId
int Mono::Net::Security::MobileAuthenticatedStream::_get_nextId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_nextId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Mono.Net.Security", "MobileAuthenticatedStream", "nextId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 nextId
void Mono::Net::Security::MobileAuthenticatedStream::_set_nextId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_nextId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "MobileAuthenticatedStream", "nextId", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.MobileTlsContext xobileTlsContext
Mono::Net::Security::MobileTlsContext* Mono::Net::Security::MobileAuthenticatedStream::_get_xobileTlsContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_xobileTlsContext");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileTlsContext*>(___internal__instance, "xobileTlsContext"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.MobileTlsContext xobileTlsContext
void Mono::Net::Security::MobileAuthenticatedStream::_set_xobileTlsContext(Mono::Net::Security::MobileTlsContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_xobileTlsContext");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "xobileTlsContext", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.ExceptionServices.ExceptionDispatchInfo lastException
System::Runtime::ExceptionServices::ExceptionDispatchInfo* Mono::Net::Security::MobileAuthenticatedStream::_get_lastException() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_lastException");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>(___internal__instance, "lastException"));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.ExceptionServices.ExceptionDispatchInfo lastException
void Mono::Net::Security::MobileAuthenticatedStream::_set_lastException(System::Runtime::ExceptionServices::ExceptionDispatchInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_lastException");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "lastException", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.AsyncProtocolRequest asyncHandshakeRequest
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::MobileAuthenticatedStream::_get_asyncHandshakeRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_asyncHandshakeRequest");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "asyncHandshakeRequest"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.AsyncProtocolRequest asyncHandshakeRequest
void Mono::Net::Security::MobileAuthenticatedStream::_set_asyncHandshakeRequest(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_asyncHandshakeRequest");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "asyncHandshakeRequest", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.AsyncProtocolRequest asyncReadRequest
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::MobileAuthenticatedStream::_get_asyncReadRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_asyncReadRequest");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "asyncReadRequest"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.AsyncProtocolRequest asyncReadRequest
void Mono::Net::Security::MobileAuthenticatedStream::_set_asyncReadRequest(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_asyncReadRequest");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "asyncReadRequest", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.AsyncProtocolRequest asyncWriteRequest
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::MobileAuthenticatedStream::_get_asyncWriteRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_asyncWriteRequest");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "asyncWriteRequest"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.AsyncProtocolRequest asyncWriteRequest
void Mono::Net::Security::MobileAuthenticatedStream::_set_asyncWriteRequest(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_asyncWriteRequest");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "asyncWriteRequest", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.BufferOffsetSize2 readBuffer
Mono::Net::Security::BufferOffsetSize2* Mono::Net::Security::MobileAuthenticatedStream::_get_readBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_readBuffer");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::BufferOffsetSize2*>(___internal__instance, "readBuffer"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.BufferOffsetSize2 readBuffer
void Mono::Net::Security::MobileAuthenticatedStream::_set_readBuffer(Mono::Net::Security::BufferOffsetSize2* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_readBuffer");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "readBuffer", value));
}
// Autogenerated instance field getter
// Get instance field: private Mono.Net.Security.BufferOffsetSize2 writeBuffer
Mono::Net::Security::BufferOffsetSize2* Mono::Net::Security::MobileAuthenticatedStream::_get_writeBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_writeBuffer");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::BufferOffsetSize2*>(___internal__instance, "writeBuffer"));
}
// Autogenerated instance field setter
// Set instance field: private Mono.Net.Security.BufferOffsetSize2 writeBuffer
void Mono::Net::Security::MobileAuthenticatedStream::_set_writeBuffer(Mono::Net::Security::BufferOffsetSize2* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_writeBuffer");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "writeBuffer", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Object ioLock
::Il2CppObject* Mono::Net::Security::MobileAuthenticatedStream::_get_ioLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_ioLock");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>(___internal__instance, "ioLock"));
}
// Autogenerated instance field setter
// Set instance field: private System.Object ioLock
void Mono::Net::Security::MobileAuthenticatedStream::_set_ioLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_ioLock");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "ioLock", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 closeRequested
int Mono::Net::Security::MobileAuthenticatedStream::_get_closeRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_closeRequested");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "closeRequested"));
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 closeRequested
void Mono::Net::Security::MobileAuthenticatedStream::_set_closeRequested(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_closeRequested");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "closeRequested", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean shutdown
bool Mono::Net::Security::MobileAuthenticatedStream::_get_shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_shutdown");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "shutdown"));
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean shutdown
void Mono::Net::Security::MobileAuthenticatedStream::_set_shutdown(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_shutdown");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "shutdown", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Net.Security.SslStream <SslStream>k__BackingField
System::Net::Security::SslStream* Mono::Net::Security::MobileAuthenticatedStream::_get_$SslStream$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_$SslStream$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Net::Security::SslStream*>(___internal__instance, "<SslStream>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Net.Security.SslStream <SslStream>k__BackingField
void Mono::Net::Security::MobileAuthenticatedStream::_set_$SslStream$k__BackingField(System::Net::Security::SslStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_$SslStream$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<SslStream>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Security.Interface.MonoTlsSettings <Settings>k__BackingField
Mono::Security::Interface::MonoTlsSettings* Mono::Net::Security::MobileAuthenticatedStream::_get_$Settings$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_$Settings$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Security::Interface::MonoTlsSettings*>(___internal__instance, "<Settings>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Security.Interface.MonoTlsSettings <Settings>k__BackingField
void Mono::Net::Security::MobileAuthenticatedStream::_set_$Settings$k__BackingField(Mono::Security::Interface::MonoTlsSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_$Settings$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<Settings>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly Mono.Security.Interface.MonoTlsProvider <Provider>k__BackingField
Mono::Security::Interface::MonoTlsProvider* Mono::Net::Security::MobileAuthenticatedStream::_get_$Provider$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_$Provider$k__BackingField");
  static auto ___internal__instance = this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Security::Interface::MonoTlsProvider*>(___internal__instance, "<Provider>k__BackingField")));
}
// Autogenerated instance field setter
// Set instance field: private readonly Mono.Security.Interface.MonoTlsProvider <Provider>k__BackingField
void Mono::Net::Security::MobileAuthenticatedStream::_set_$Provider$k__BackingField(Mono::Security::Interface::MonoTlsProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_$Provider$k__BackingField");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<Provider>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: readonly System.Int32 ID
int Mono::Net::Security::MobileAuthenticatedStream::_get_ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_get_ID");
  static auto ___internal__instance = this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "ID"));
}
// Autogenerated instance field setter
// Set instance field: readonly System.Int32 ID
void Mono::Net::Security::MobileAuthenticatedStream::_set_ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::_set_ID");
  static auto ___internal__instance = this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "ID", value));
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_Settings
Mono::Security::Interface::MonoTlsSettings* Mono::Net::Security::MobileAuthenticatedStream::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::MonoTlsSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_Provider
Mono::Security::Interface::MonoTlsProvider* Mono::Net::Security::MobileAuthenticatedStream::get_Provider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_Provider");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Provider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::MonoTlsProvider*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_AuthenticatedStream
System::Net::Security::AuthenticatedStream* Mono::Net::Security::MobileAuthenticatedStream::get_AuthenticatedStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_AuthenticatedStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AuthenticatedStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::Security::AuthenticatedStream*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_InternalLocalCertificate
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Net::Security::MobileAuthenticatedStream::get_InternalLocalCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_InternalLocalCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InternalLocalCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.CheckThrow
void Mono::Net::Security::MobileAuthenticatedStream::CheckThrow(bool authSuccessCheck, bool shutdownCheck) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::CheckThrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(authSuccessCheck), ::il2cpp_utils::ExtractType(shutdownCheck)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, authSuccessCheck, shutdownCheck);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.GetSSPIException
System::Exception* Mono::Net::Security::MobileAuthenticatedStream::GetSSPIException(System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::GetSSPIException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "MobileAuthenticatedStream", "GetSSPIException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, e);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.GetIOException
System::Exception* Mono::Net::Security::MobileAuthenticatedStream::GetIOException(System::Exception* e, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::GetIOException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "MobileAuthenticatedStream", "GetIOException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, e, message);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.SetException
System::Runtime::ExceptionServices::ExceptionDispatchInfo* Mono::Net::Security::MobileAuthenticatedStream::SetException(System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::SetException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method, e);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.AuthenticateAsClient
void Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsClient(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsClient");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateAsClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(clientCertificates), ::il2cpp_utils::ExtractType(enabledSslProtocols), ::il2cpp_utils::ExtractType(checkCertificateRevocation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetHost, clientCertificates, enabledSslProtocols, checkCertificateRevocation);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.AuthenticateAsServer
void Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateAsServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCertificate), ::il2cpp_utils::ExtractType(clientCertificateRequired), ::il2cpp_utils::ExtractType(enabledSslProtocols), ::il2cpp_utils::ExtractType(checkCertificateRevocation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCertificate, clientCertificateRequired, enabledSslProtocols, checkCertificateRevocation);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.ProcessAuthentication
System::Threading::Tasks::Task* Mono::Net::Security::MobileAuthenticatedStream::ProcessAuthentication(bool runSynchronously, bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool clientCertRequired) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::ProcessAuthentication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAuthentication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(runSynchronously), ::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(enabledProtocols), ::il2cpp_utils::ExtractType(serverCertificate), ::il2cpp_utils::ExtractType(clientCertificates), ::il2cpp_utils::ExtractType(clientCertRequired)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, runSynchronously, serverMode, targetHost, enabledProtocols, serverCertificate, clientCertificates, clientCertRequired);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.CreateContext
Mono::Net::Security::MobileTlsContext* Mono::Net::Security::MobileAuthenticatedStream::CreateContext(bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::CreateContext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverMode), ::il2cpp_utils::ExtractType(targetHost), ::il2cpp_utils::ExtractType(enabledProtocols), ::il2cpp_utils::ExtractType(serverCertificate), ::il2cpp_utils::ExtractType(clientCertificates), ::il2cpp_utils::ExtractType(askForClientCert)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::MobileTlsContext*, false>(this, ___internal__method, serverMode, targetHost, enabledProtocols, serverCertificate, clientCertificates, askForClientCert);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.StartOperation
System::Threading::Tasks::Task_1<int>* Mono::Net::Security::MobileAuthenticatedStream::StartOperation(Mono::Net::Security::MobileAuthenticatedStream::OperationType type, Mono::Net::Security::AsyncProtocolRequest* asyncRequest, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::StartOperation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(asyncRequest), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, type, asyncRequest, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InternalRead
int Mono::Net::Security::MobileAuthenticatedStream::InternalRead(::Array<uint8_t>* buffer, int offset, int size, ByRef<bool> outWantMore) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InternalRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, size, byref(outWantMore));
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InternalRead
System::ValueTuple_2<int, bool> Mono::Net::Security::MobileAuthenticatedStream::InternalRead(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InternalRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncRequest), ::il2cpp_utils::ExtractType(internalBuffer), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<System::ValueTuple_2<int, bool>, false>(this, ___internal__method, asyncRequest, internalBuffer, buffer, offset, size);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InternalWrite
bool Mono::Net::Security::MobileAuthenticatedStream::InternalWrite(::Array<uint8_t>* buffer, int offset, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InternalWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buffer, offset, size);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InternalWrite
bool Mono::Net::Security::MobileAuthenticatedStream::InternalWrite(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize2* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InternalWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncRequest), ::il2cpp_utils::ExtractType(internalBuffer), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, asyncRequest, internalBuffer, buffer, offset, size);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InnerRead
System::Threading::Tasks::Task_1<int>* Mono::Net::Security::MobileAuthenticatedStream::InnerRead(bool sync, int requestedSize, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InnerRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sync), ::il2cpp_utils::ExtractType(requestedSize), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, sync, requestedSize, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.InnerWrite
System::Threading::Tasks::Task* Mono::Net::Security::MobileAuthenticatedStream::InnerWrite(bool sync, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::InnerWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InnerWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sync), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, sync, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.ProcessHandshake
Mono::Net::Security::AsyncOperationStatus Mono::Net::Security::MobileAuthenticatedStream::ProcessHandshake(Mono::Net::Security::AsyncOperationStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::ProcessHandshake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessHandshake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Net::Security::AsyncOperationStatus, false>(this, ___internal__method, status);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.ProcessRead
System::ValueTuple_2<int, bool> Mono::Net::Security::MobileAuthenticatedStream::ProcessRead(Mono::Net::Security::BufferOffsetSize* userBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::ProcessRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<System::ValueTuple_2<int, bool>, false>(this, ___internal__method, userBuffer);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.ProcessWrite
System::ValueTuple_2<int, bool> Mono::Net::Security::MobileAuthenticatedStream::ProcessWrite(Mono::Net::Security::BufferOffsetSize* userBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::ProcessWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<System::ValueTuple_2<int, bool>, false>(this, ___internal__method, userBuffer);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.<InnerWrite>b__67_0
void Mono::Net::Security::MobileAuthenticatedStream::$InnerWrite$b__67_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::<InnerWrite>b__67_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InnerWrite>b__67_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_IsAuthenticated
bool Mono::Net::Security::MobileAuthenticatedStream::get_IsAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_IsAuthenticated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_CanRead
bool Mono::Net::Security::MobileAuthenticatedStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_CanWrite
bool Mono::Net::Security::MobileAuthenticatedStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_CanSeek
bool Mono::Net::Security::MobileAuthenticatedStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_Length
int64_t Mono::Net::Security::MobileAuthenticatedStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_Length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_Position
int64_t Mono::Net::Security::MobileAuthenticatedStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.set_Position
void Mono::Net::Security::MobileAuthenticatedStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::set_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_ReadTimeout
int Mono::Net::Security::MobileAuthenticatedStream::get_ReadTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_ReadTimeout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.get_WriteTimeout
int Mono::Net::Security::MobileAuthenticatedStream::get_WriteTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::get_WriteTimeout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream..cctor
void Mono::Net::Security::MobileAuthenticatedStream::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Mono.Net.Security", "MobileAuthenticatedStream", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.BeginRead
System::IAsyncResult* Mono::Net::Security::MobileAuthenticatedStream::BeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::BeginRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(asyncCallback), ::il2cpp_utils::ExtractType(asyncState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, asyncCallback, asyncState);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.EndRead
int Mono::Net::Security::MobileAuthenticatedStream::EndRead(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::EndRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.BeginWrite
System::IAsyncResult* Mono::Net::Security::MobileAuthenticatedStream::BeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::BeginWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(asyncCallback), ::il2cpp_utils::ExtractType(asyncState)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, asyncCallback, asyncState);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.EndWrite
void Mono::Net::Security::MobileAuthenticatedStream::EndWrite(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::EndWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.Read
int Mono::Net::Security::MobileAuthenticatedStream::Read(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.Write
void Mono::Net::Security::MobileAuthenticatedStream::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.ReadAsync
System::Threading::Tasks::Task_1<int>* Mono::Net::Security::MobileAuthenticatedStream::ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::ReadAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.WriteAsync
System::Threading::Tasks::Task* Mono::Net::Security::MobileAuthenticatedStream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::WriteAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.Dispose
void Mono::Net::Security::MobileAuthenticatedStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.Flush
void Mono::Net::Security::MobileAuthenticatedStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.Seek
int64_t Mono::Net::Security::MobileAuthenticatedStream::Seek(int64_t offset, System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::Seek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream.SetLength
void Mono::Net::Security::MobileAuthenticatedStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::SetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType
#include "Mono/Net/Security/MobileAuthenticatedStream_OperationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Read
Mono::Net::Security::MobileAuthenticatedStream::OperationType Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream::OperationType>("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Read"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Read
void Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Read(Mono::Net::Security::MobileAuthenticatedStream::OperationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Write
Mono::Net::Security::MobileAuthenticatedStream::OperationType Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Write");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream::OperationType>("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Write"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Write
void Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Write(Mono::Net::Security::MobileAuthenticatedStream::OperationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Write");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Write", value));
}
// Autogenerated static field getter
// Get static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Shutdown
Mono::Net::Security::MobileAuthenticatedStream::OperationType Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_Shutdown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream::OperationType>("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Shutdown"));
}
// Autogenerated static field setter
// Set static field: static public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType Shutdown
void Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Shutdown(Mono::Net::Security::MobileAuthenticatedStream::OperationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_Shutdown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Net.Security", "MobileAuthenticatedStream/OperationType", "Shutdown", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_get_value__");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "value__"));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::OperationType::_set_value__");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "value__", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<ProcessAuthentication>d__47
#include "Mono/Net/Security/MobileAuthenticatedStream_-ProcessAuthentication-d__47.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: Mono.Net.Security.AsyncProtocolResult
#include "Mono/Net/Security/AsyncProtocolResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
int Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$1__state");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>1__state
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$1__state");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
System::Runtime::CompilerServices::AsyncTaskMethodBuilder Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$t__builder");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::AsyncTaskMethodBuilder>(___internal__instance, "<>t__builder")));
}
// Autogenerated instance field setter
// Set instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$t__builder(System::Runtime::CompilerServices::AsyncTaskMethodBuilder value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$t__builder");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>t__builder", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean serverMode
bool Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_serverMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_serverMode");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "serverMode"));
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean serverMode
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_serverMode(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_serverMode");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "serverMode", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_serverCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_serverCertificate");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509Certificate*>(___internal__instance, "serverCertificate"));
}
// Autogenerated instance field setter
// Set instance field: public System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_serverCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_serverCertificate");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "serverCertificate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String targetHost
::Il2CppString* Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_targetHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_targetHost");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>(___internal__instance, "targetHost"));
}
// Autogenerated instance field setter
// Set instance field: public System.String targetHost
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_targetHost(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_targetHost");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "targetHost", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.MobileAuthenticatedStream <>4__this
Mono::Net::Security::MobileAuthenticatedStream* Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$4__this");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream*>(___internal__instance, "<>4__this")));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.MobileAuthenticatedStream <>4__this
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$4__this(Mono::Net::Security::MobileAuthenticatedStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$4__this");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean runSynchronously
bool Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_runSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_runSynchronously");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "runSynchronously"));
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean runSynchronously
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_runSynchronously(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_runSynchronously");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "runSynchronously", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Security.Authentication.SslProtocols enabledProtocols
System::Security::Authentication::SslProtocols Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_enabledProtocols() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_enabledProtocols");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>(___internal__instance, "enabledProtocols"));
}
// Autogenerated instance field setter
// Set instance field: public System.Security.Authentication.SslProtocols enabledProtocols
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_enabledProtocols(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_enabledProtocols");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "enabledProtocols", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates
System::Security::Cryptography::X509Certificates::X509CertificateCollection* Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_clientCertificates() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_clientCertificates");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>(___internal__instance, "clientCertificates"));
}
// Autogenerated instance field setter
// Set instance field: public System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_clientCertificates(System::Security::Cryptography::X509Certificates::X509CertificateCollection* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_clientCertificates");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "clientCertificates", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean clientCertRequired
bool Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_clientCertRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_clientCertRequired");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(___internal__instance, "clientCertRequired"));
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean clientCertRequired
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_clientCertRequired(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_clientCertRequired");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "clientCertRequired", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<Mono.Net.Security.AsyncProtocolResult> <>u__1
typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_get_$$u__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter>(___internal__instance, "<>u__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<Mono.Net.Security.AsyncProtocolResult> <>u__1
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$u__1(typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::_set_$$u__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__1", value));
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<ProcessAuthentication>d__47.MoveNext
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<ProcessAuthentication>d__47.SetStateMachine
void Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<StartOperation>d__58
#include "Mono/Net/Security/MobileAuthenticatedStream_-StartOperation-d__58.hpp"
// Including type: Mono.Net.Security.AsyncProtocolRequest
#include "Mono/Net/Security/AsyncProtocolRequest.hpp"
// Including type: Mono.Net.Security.AsyncProtocolResult
#include "Mono/Net/Security/AsyncProtocolResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
int Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$1__state");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 <>1__state
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$1__state(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$1__state");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Int32> <>t__builder
System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<int> Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$t__builder");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<int>>(___internal__instance, "<>t__builder")));
}
// Autogenerated instance field setter
// Set instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Int32> <>t__builder
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$t__builder(System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$t__builder");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>t__builder", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.MobileAuthenticatedStream <>4__this
Mono::Net::Security::MobileAuthenticatedStream* Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$4__this");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream*>(___internal__instance, "<>4__this")));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.MobileAuthenticatedStream <>4__this
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$4__this(Mono::Net::Security::MobileAuthenticatedStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$4__this");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType type
Mono::Net::Security::MobileAuthenticatedStream::OperationType Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_type");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::MobileAuthenticatedStream::OperationType>(___internal__instance, "type"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.OperationType type
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_type(Mono::Net::Security::MobileAuthenticatedStream::OperationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_type");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "type", value));
}
// Autogenerated instance field getter
// Get instance field: public Mono.Net.Security.AsyncProtocolRequest asyncRequest
Mono::Net::Security::AsyncProtocolRequest* Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_asyncRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_asyncRequest");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Mono::Net::Security::AsyncProtocolRequest*>(___internal__instance, "asyncRequest"));
}
// Autogenerated instance field setter
// Set instance field: public Mono.Net.Security.AsyncProtocolRequest asyncRequest
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_asyncRequest(Mono::Net::Security::AsyncProtocolRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_asyncRequest");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "asyncRequest", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
System::Threading::CancellationToken Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_cancellationToken");
  static auto ___internal__instance = *this;
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::CancellationToken>(___internal__instance, "cancellationToken"));
}
// Autogenerated instance field setter
// Set instance field: public System.Threading.CancellationToken cancellationToken
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_cancellationToken(System::Threading::CancellationToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_cancellationToken");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "cancellationToken", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<Mono.Net.Security.AsyncProtocolResult> <>u__1
typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_get_$$u__1");
  static auto ___internal__instance = *this;
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter>(___internal__instance, "<>u__1")));
}
// Autogenerated instance field setter
// Set instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<Mono.Net.Security.AsyncProtocolResult> <>u__1
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$u__1(typename System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<Mono::Net::Security::AsyncProtocolResult*>::ConfiguredTaskAwaiter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::_set_$$u__1");
  static auto ___internal__instance = *this;
  THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>u__1", value));
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<StartOperation>d__58.MoveNext
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: Mono.Net.Security.MobileAuthenticatedStream/Mono.Net.Security.<StartOperation>d__58.SetStateMachine
void Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
