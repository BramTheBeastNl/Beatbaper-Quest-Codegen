// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ISliderDidDissolveEvent
#include "GlobalNamespace/ISliderDidDissolveEvent.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ISliderDidDissolveEvent.HandleSliderDidDissolve
void GlobalNamespace::ISliderDidDissolveEvent::HandleSliderDidDissolve(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISliderDidDissolveEvent::HandleSliderDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController/Pool
#include "GlobalNamespace/SliderController_Pool.hpp"
// Including type: SliderController/<DissolveCoroutine>d__70
#include "GlobalNamespace/SliderController_-DissolveCoroutine-d__70.hpp"
// Including type: SliderIntensityEffect
#include "GlobalNamespace/SliderIntensityEffect.hpp"
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: SliderMovement
#include "GlobalNamespace/SliderMovement.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: ISliderDidFinishJumpEvent
#include "GlobalNamespace/ISliderDidFinishJumpEvent.hpp"
// Including type: ISliderDidStartDissolvingEvent
#include "GlobalNamespace/ISliderDidStartDissolvingEvent.hpp"
// Including type: ISliderDidDissolveEvent
#include "GlobalNamespace/ISliderDidDissolveEvent.hpp"
// Including type: ISliderHeadDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderHeadDidMovePastCutMarkEvent.hpp"
// Including type: ISliderTailDidMovePastCutMarkEvent
#include "GlobalNamespace/ISliderTailDidMovePastCutMarkEvent.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: FixedUpdateVector3SmoothValue
#include "GlobalNamespace/FixedUpdateVector3SmoothValue.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSaberAttractPointNormalizedPosition
float GlobalNamespace::SliderController::_get_kSaberAttractPointNormalizedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::_get_kSaberAttractPointNormalizedPosition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController", "kSaberAttractPointNormalizedPosition"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSaberAttractPointNormalizedPosition
void GlobalNamespace::SliderController::_set_kSaberAttractPointNormalizedPosition(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::_set_kSaberAttractPointNormalizedPosition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController", "kSaberAttractPointNormalizedPosition", value));
}
// Autogenerated instance field getter
// Get instance field: protected SliderIntensityEffect _sliderIntensityEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect*& GlobalNamespace::SliderController::dyn__sliderIntensityEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderIntensityEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderIntensityEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMeshController _sliderMeshController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& GlobalNamespace::SliderController::dyn__sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderMeshController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMovement _sliderMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMovement*& GlobalNamespace::SliderController::dyn__sliderMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _closeInteractionSaberPosSmoothParam
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__closeInteractionSaberPosSmoothParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__closeInteractionSaberPosSmoothParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_closeInteractionSaberPosSmoothParam"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawnController*& GlobalNamespace::SliderController::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SliderController::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::SliderController::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SliderController::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidFinishJumpEvent> _sliderDidFinishMovement
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidFinishMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidFinishMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidFinishMovement"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidStartDissolvingEvent> _sliderDidStartDissolving
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidStartDissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidStartDissolving"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderDidDissolveEvent> _sliderDidDissolve
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*& GlobalNamespace::SliderController::dyn__sliderDidDissolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDidDissolve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDidDissolve"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderHeadDidMovePastCutMarkEvent> _sliderHeadDidMovePastCutMark
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*& GlobalNamespace::SliderController::dyn__sliderHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderHeadDidMovePastCutMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderHeadDidMovePastCutMark"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<ISliderTailDidMovePastCutMarkEvent> _sliderTailDidMovePastCutMark
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*& GlobalNamespace::SliderController::dyn__sliderTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderTailDidMovePastCutMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderTailDidMovePastCutMark"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderController/LengthType _lengthType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::LengthType& GlobalNamespace::SliderController::dyn__lengthType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__lengthType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::LengthType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderData _sliderData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderData*& GlobalNamespace::SliderController::dyn__sliderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _saber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& GlobalNamespace::SliderController::dyn__saber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__saber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headJumpOffsetY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__headJumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__headJumpOffsetY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headJumpOffsetY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sliderDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__sliderDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _initColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SliderController::dyn__initColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__initColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _attractingSaber
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderController::dyn__attractingSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__attractingSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_attractingSaber"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _randomValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__randomValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__randomValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _zDistanceBetweenNotes
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__zDistanceBetweenNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__zDistanceBetweenNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zDistanceBetweenNotes"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::dyn__jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__jumpDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FixedUpdateVector3SmoothValue _closeSmoothedSaberInteractionPos
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FixedUpdateVector3SmoothValue*& GlobalNamespace::SliderController::dyn__closeSmoothedSaberInteractionPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::dyn__closeSmoothedSaberInteractionPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_closeSmoothedSaberInteractionPos"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FixedUpdateVector3SmoothValue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController.get_sliderDidFinishJumpEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>* GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDidStartDissolvingEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>* GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDidDissolveEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>* GlobalNamespace::SliderController::get_sliderDidDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDidDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDidDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderHeadDidMovePastCutMark
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>* GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderHeadDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderTailDidMovePastCutMark
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>* GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderTailDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_lengthType
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::get_lengthType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_lengthType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lengthType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderController::LengthType, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderData
::GlobalNamespace::SliderData* GlobalNamespace::SliderController::get_sliderData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderData*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_saberInteractionParam
float GlobalNamespace::SliderController::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderMeshController
::GlobalNamespace::SliderMeshController* GlobalNamespace::SliderController::get_sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderMeshController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderMeshController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderMeshController*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderMovement
::GlobalNamespace::SliderMovement* GlobalNamespace::SliderController::get_sliderMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderMovement*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_initColor
::UnityEngine::Color GlobalNamespace::SliderController::get_initColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_initColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_randomValue
float GlobalNamespace::SliderController::get_randomValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_randomValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_randomValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_zDistanceBetweenNotes
float GlobalNamespace::SliderController::get_zDistanceBetweenNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_zDistanceBetweenNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_zDistanceBetweenNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_jumpDistance
float GlobalNamespace::SliderController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_jumpDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_headJumpOffsetY
float GlobalNamespace::SliderController::get_headJumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_headJumpOffsetY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headJumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderDuration
float GlobalNamespace::SliderController::get_sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_closeSmoothedSaberInteractionPos
::GlobalNamespace::FixedUpdateVector3SmoothValue* GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_closeSmoothedSaberInteractionPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::FixedUpdateVector3SmoothValue*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.get_sliderIntensityEffect
::GlobalNamespace::SliderIntensityEffect* GlobalNamespace::SliderController::get_sliderIntensityEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::get_sliderIntensityEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sliderIntensityEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderIntensityEffect*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Init
void GlobalNamespace::SliderController::Init(::GlobalNamespace::SliderController::LengthType lengthType, ::GlobalNamespace::SliderData* sliderData, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 tailNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, ::UnityEngine::Vector3 tailNoteJumpEndPos, float jumpDuration, float startNoteJumpGravity, float endNoteJumpGravity, float noteUniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lengthType), ::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(headNoteJumpStartPos), ::il2cpp_utils::ExtractType(tailNoteJumpStartPos), ::il2cpp_utils::ExtractType(headNoteJumpEndPos), ::il2cpp_utils::ExtractType(tailNoteJumpEndPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(startNoteJumpGravity), ::il2cpp_utils::ExtractType(endNoteJumpGravity), ::il2cpp_utils::ExtractType(noteUniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lengthType, sliderData, worldRotation, headNoteJumpStartPos, tailNoteJumpStartPos, headNoteJumpEndPos, tailNoteJumpEndPos, jumpDuration, startNoteJumpGravity, endNoteJumpGravity, noteUniformScale);
}
// Autogenerated method: SliderController.Awake
void GlobalNamespace::SliderController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Start
void GlobalNamespace::SliderController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.OnDestroy
void GlobalNamespace::SliderController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.Update
void GlobalNamespace::SliderController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.FixedUpdate
void GlobalNamespace::SliderController::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.ManualUpdate
void GlobalNamespace::SliderController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.UpdateMaterialPropertyBlock
void GlobalNamespace::SliderController::UpdateMaterialPropertyBlock(float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::UpdateMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderController.DissolveCoroutine
::System::Collections::IEnumerator* GlobalNamespace::SliderController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: SliderController.Dissolve
void GlobalNamespace::SliderController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Dissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: SliderController.Hide
void GlobalNamespace::SliderController::Hide(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: SliderController.Pause
void GlobalNamespace::SliderController::Pause(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated method: SliderController.IsNoteStartOfThisSlider
bool GlobalNamespace::SliderController::IsNoteStartOfThisSlider(::GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::IsNoteStartOfThisSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNoteStartOfThisSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, noteData);
}
// Autogenerated method: SliderController.HandleMovementDidFinish
void GlobalNamespace::SliderController::HandleMovementDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleMovementDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMovementDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleHeadDidMovePastCutMark
void GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHeadDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleTailDidMovePastCutMark
void GlobalNamespace::SliderController::HandleTailDidMovePastCutMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleTailDidMovePastCutMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTailDidMovePastCutMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.HandleNoteWasMissed
void GlobalNamespace::SliderController::HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: SliderController.HandleNoteWasCut
void GlobalNamespace::SliderController::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: SliderController.HandleFadeInDidStart
void GlobalNamespace::SliderController::HandleFadeInDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::HandleFadeInDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFadeInDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController.SetSaberAttraction
void GlobalNamespace::SliderController::SetSaberAttraction(bool saberAttraction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::SetSaberAttraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSaberAttraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberAttraction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberAttraction);
}
// Autogenerated method: SliderController.GetSaberInteractionPoint
::UnityEngine::Vector3 GlobalNamespace::SliderController::GetSaberInteractionPoint(::GlobalNamespace::Saber* saber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::GetSaberInteractionPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderController", "GetSaberInteractionPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, saber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/LengthType
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Short
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Short() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Short");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Short"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Short
void GlobalNamespace::SliderController::LengthType::_set_Short(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Short");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Short", value));
}
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Medium
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Medium() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Medium");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Medium"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Medium
void GlobalNamespace::SliderController::LengthType::_set_Medium(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Medium");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Medium", value));
}
// Autogenerated static field getter
// Get static field: static public SliderController/LengthType Long
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::LengthType::_get_Long() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_get_Long");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SliderController::LengthType>("", "SliderController/LengthType", "Long"));
}
// Autogenerated static field setter
// Set static field: static public SliderController/LengthType Long
void GlobalNamespace::SliderController::LengthType::_set_Long(::GlobalNamespace::SliderController::LengthType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::_set_Long");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/LengthType", "Long", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderController::LengthType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::LengthType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool
#include "GlobalNamespace/SliderController_Pool.hpp"
// Including type: SliderController/Pool/Short
#include "GlobalNamespace/SliderController_Pool_Short.hpp"
// Including type: SliderController/Pool/Medium
#include "GlobalNamespace/SliderController_Pool_Medium.hpp"
// Including type: SliderController/Pool/Long
#include "GlobalNamespace/SliderController_Pool_Long.hpp"
// Including type: Zenject.MonoMemoryPool`1
#include "Zenject/MonoMemoryPool_1.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController/LengthType
#include "GlobalNamespace/SliderController.hpp"
// Including type: BeatmapObjectSpawnMovementData/SliderSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_SliderSpawnData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToUseMedium
float GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseMedium() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseMedium");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController/Pool", "kMinDistanceToUseMedium"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToUseMedium
void GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseMedium(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseMedium");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/Pool", "kMinDistanceToUseMedium", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToUseLong
float GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_get_kMinDistanceToUseLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderController/Pool", "kMinDistanceToUseLong"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToUseLong
void GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseLong(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::_set_kMinDistanceToUseLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderController/Pool", "kMinDistanceToUseLong", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Short _shortPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Short*& GlobalNamespace::SliderController::Pool::dyn__shortPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__shortPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Short**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Medium _mediumPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Medium*& GlobalNamespace::SliderController::Pool::dyn__mediumPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__mediumPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mediumPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Medium**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SliderController/Pool/Long _longPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::Pool::Long*& GlobalNamespace::SliderController::Pool::dyn__longPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::dyn__longPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_longPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController::Pool::Long**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController/Pool.GetPool
::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>* GlobalNamespace::SliderController::Pool::GetPool(::GlobalNamespace::SliderController::LengthType lengthType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::GetPool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lengthType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::MonoMemoryPool_1<::GlobalNamespace::SliderController*>*, false>(this, ___internal__method, lengthType);
}
// Autogenerated method: SliderController/Pool.GetLengthFromSliderData
::GlobalNamespace::SliderController::LengthType GlobalNamespace::SliderController::Pool::GetLengthFromSliderData(::GlobalNamespace::SliderData* sliderNoteData, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData sliderSpawnData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::Pool::GetLengthFromSliderData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderController/Pool", "GetLengthFromSliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderNoteData), ::il2cpp_utils::ExtractType(sliderSpawnData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SliderController::LengthType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sliderNoteData, sliderSpawnData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Short
#include "GlobalNamespace/SliderController_Pool_Short.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Medium
#include "GlobalNamespace/SliderController_Pool_Medium.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderController/Pool/Long
#include "GlobalNamespace/SliderController_Pool_Long.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderController/<DissolveCoroutine>d__70
#include "GlobalNamespace/SliderController_-DissolveCoroutine-d__70.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController*& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.IDisposable.Dispose
void GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.MoveNext
bool GlobalNamespace::SliderController::$DissolveCoroutine$d__70::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SliderController/<DissolveCoroutine>d__70.System.Collections.IEnumerator.Reset
void GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::$DissolveCoroutine$d__70::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderControllerBase
#include "GlobalNamespace/SliderControllerBase.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::SliderControllerBase::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected CutoutAnimateEffect _cutoutAnimateEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CutoutAnimateEffect*& GlobalNamespace::SliderControllerBase::dyn__cutoutAnimateEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__cutoutAnimateEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutoutAnimateEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CutoutAnimateEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _dissolving
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderControllerBase::dyn__dissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::dyn__dissolving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dissolving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderControllerBase.AnimateCutout
void GlobalNamespace::SliderControllerBase::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderControllerBase::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderHapticFeedbackInteractionEffect
#include "GlobalNamespace/SliderHapticFeedbackInteractionEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kVibrationSaberInteractionParamThreshold
float GlobalNamespace::SliderHapticFeedbackInteractionEffect::_get_kVibrationSaberInteractionParamThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::_get_kVibrationSaberInteractionParamThreshold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderHapticFeedbackInteractionEffect", "kVibrationSaberInteractionParamThreshold"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVibrationSaberInteractionParamThreshold
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::_set_kVibrationSaberInteractionParamThreshold(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::_set_kVibrationSaberInteractionParamThreshold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderHapticFeedbackInteractionEffect", "kVibrationSaberInteractionParamThreshold", value));
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _hapticPreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticPreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGamePause _gamePause
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IGamePause*& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__gamePause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__gamePause");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gamePause"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IGamePause**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberType _saberType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberType& GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::dyn__saberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Update
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Vibrate
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Vibrate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Vibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Vibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.Start
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.StartEffect
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderHapticFeedbackInteractionEffect.EndEffect
void GlobalNamespace::SliderHapticFeedbackInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderHapticFeedbackInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderIntensityEffect
#include "GlobalNamespace/SliderIntensityEffect.hpp"
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
// Including type: SliderIntensityEffect/IntensityCalculationDelegate
#include "GlobalNamespace/SliderIntensityEffect_IntensityCalculationDelegate.hpp"
// Including type: SliderIntensityEffect/<ProcessEffectCoroutine>d__27
#include "GlobalNamespace/SliderIntensityEffect_-ProcessEffectCoroutine-d__27.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _longSliderHeadIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__longSliderHeadIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__longSliderHeadIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_longSliderHeadIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shortSliderHeadIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__shortSliderHeadIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__shortSliderHeadIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortSliderHeadIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__tailIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__tailIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__fadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__fadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stayOffDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__stayOffDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__stayOffDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stayOffDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashBoost
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashBoost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashBoost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashBoost"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashInDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _flashOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__flashOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::SliderIntensityEffect::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action fadeInDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderIntensityEffect::dyn_fadeInDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn_fadeInDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _coreIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__coreIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__coreIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coreIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _effectIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__effectIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__effectIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effectIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _halfJumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__halfJumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__halfJumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_halfJumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sliderDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn__sliderDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__sliderDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single headIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::dyn_headIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn_headIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/IntensityCalculationDelegate _intensityCalculationDelegate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate*& GlobalNamespace::SliderIntensityEffect::dyn__intensityCalculationDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__intensityCalculationDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intensityCalculationDelegate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement[] _dipEffectFadeElements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& GlobalNamespace::SliderIntensityEffect::dyn__dipEffectFadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__dipEffectFadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dipEffectFadeElements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement[] _flashEffectFadeElements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& GlobalNamespace::SliderIntensityEffect::dyn__flashEffectFadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::dyn__flashEffectFadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flashEffectFadeElements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderIntensityEffect.get_intensity
float GlobalNamespace::SliderIntensityEffect::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.add_fadeInDidStartEvent
void GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_fadeInDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderIntensityEffect.remove_fadeInDidStartEvent
void GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_fadeInDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderIntensityEffect.Awake
void GlobalNamespace::SliderIntensityEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.Init
void GlobalNamespace::SliderIntensityEffect::Init(float sliderDuration, float halfJumpDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderDuration), ::il2cpp_utils::ExtractType(halfJumpDuration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderDuration, halfJumpDuration);
}
// Autogenerated method: SliderIntensityEffect.ManualUpdate
void GlobalNamespace::SliderIntensityEffect::ManualUpdate(float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderIntensityEffect.ProcessEffectCoroutine
::System::Collections::IEnumerator* GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>* fadeElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEffectCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeElements)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, fadeElements);
}
// Autogenerated method: SliderIntensityEffect.StartIntensityDipEffect
void GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartIntensityDipEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.StartFlashEffect
void GlobalNamespace::SliderIntensityEffect::StartFlashEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::StartFlashEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartFlashEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect.<Awake>b__24_0
void GlobalNamespace::SliderIntensityEffect::$Awake$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::<Awake>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__24_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single endIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_endIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_endIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly EaseType easeType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_easeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "easeType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EaseType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Action startCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::FadeElement::dyn_startCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderIntensityEffect/IntensityCalculationDelegate
#include "GlobalNamespace/SliderIntensityEffect_IntensityCalculationDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.Invoke
float GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::Invoke(float timeSinceLastSection, float timeSinceHeadNoteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceLastSection), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, timeSinceLastSection, timeSinceHeadNoteJump);
}
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::BeginInvoke(float timeSinceLastSection, float timeSinceHeadNoteJump, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeSinceLastSection), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, timeSinceLastSection, timeSinceHeadNoteJump, callback, object);
}
// Autogenerated method: SliderIntensityEffect/IntensityCalculationDelegate.EndInvoke
float GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SliderIntensityEffect/<ProcessEffectCoroutine>d__27
#include "GlobalNamespace/SliderIntensityEffect_-ProcessEffectCoroutine-d__27.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: SliderIntensityEffect/FadeElement
#include "GlobalNamespace/SliderIntensityEffect_FadeElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.IEnumerable`1<SliderIntensityEffect/FadeElement> fadeElements
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_fadeElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_fadeElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeElements"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SliderIntensityEffect <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<SliderIntensityEffect/FadeElement> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderIntensityEffect/FadeElement <fadeElement>5__3
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::FadeElement*& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$fadeElement$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$fadeElement$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<fadeElement>5__3"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderIntensityEffect::FadeElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>5__4
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$startTime$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::dyn_$startTime$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.System.IDisposable.Dispose
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.MoveNext
bool GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.<>m__Finally1
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderIntensityEffect/<ProcessEffectCoroutine>d__27.System.Collections.IEnumerator.Reset
void GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__27::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderInteractionEffect
#include "GlobalNamespace/SliderInteractionEffect.hpp"
// Including type: SliderInteractionManager
#include "GlobalNamespace/SliderInteractionManager.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SliderInteractionManager _sliderInteractionManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderInteractionManager*& GlobalNamespace::SliderInteractionEffect::dyn__sliderInteractionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::dyn__sliderInteractionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderInteractionManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderInteractionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderInteractionEffect.get_saberInteractionParam
float GlobalNamespace::SliderInteractionEffect::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.get_colorType
::GlobalNamespace::ColorType GlobalNamespace::SliderInteractionEffect::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.Start
void GlobalNamespace::SliderInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.OnDestroy
void GlobalNamespace::SliderInteractionEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.StartEffect
void GlobalNamespace::SliderInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderInteractionEffect.EndEffect
void GlobalNamespace::SliderInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionEffect.HandleSliderWasAddedToActiveSliders
void GlobalNamespace::SliderInteractionEffect::HandleSliderWasAddedToActiveSliders(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::HandleSliderWasAddedToActiveSliders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasAddedToActiveSliders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderInteractionEffect.HandleAllSliderWereRemovedFromActiveSliders
void GlobalNamespace::SliderInteractionEffect::HandleAllSliderWereRemovedFromActiveSliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionEffect::HandleAllSliderWereRemovedFromActiveSliders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAllSliderWereRemovedFromActiveSliders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderInteractionManager
#include "GlobalNamespace/SliderInteractionManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorType _colorType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& GlobalNamespace::SliderInteractionManager::dyn__colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__colorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::SliderInteractionManager::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <saberInteractionParam>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderInteractionManager::dyn_$saberInteractionParam$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_$saberInteractionParam$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<saberInteractionParam>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> sliderWasAddedToActiveSlidersEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::SliderInteractionManager::dyn_sliderWasAddedToActiveSlidersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_sliderWasAddedToActiveSlidersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sliderWasAddedToActiveSlidersEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action allSliderWereRemovedFromActiveSlidersEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderInteractionManager::dyn_allSliderWereRemovedFromActiveSlidersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn_allSliderWereRemovedFromActiveSlidersEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allSliderWereRemovedFromActiveSlidersEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<SliderController> _activeSliders
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SliderController*>*& GlobalNamespace::SliderInteractionManager::dyn__activeSliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::dyn__activeSliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeSliders"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SliderController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderInteractionManager.get_colorType
::GlobalNamespace::ColorType GlobalNamespace::SliderInteractionManager::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.get_saberInteractionParam
float GlobalNamespace::SliderInteractionManager::get_saberInteractionParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::get_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.set_saberInteractionParam
void GlobalNamespace::SliderInteractionManager::set_saberInteractionParam(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::set_saberInteractionParam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberInteractionParam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.add_sliderWasAddedToActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::add_sliderWasAddedToActiveSlidersEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::add_sliderWasAddedToActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sliderWasAddedToActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.remove_sliderWasAddedToActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::remove_sliderWasAddedToActiveSlidersEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::remove_sliderWasAddedToActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sliderWasAddedToActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.add_allSliderWereRemovedFromActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::add_allSliderWereRemovedFromActiveSlidersEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::add_allSliderWereRemovedFromActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_allSliderWereRemovedFromActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.remove_allSliderWereRemovedFromActiveSlidersEvent
void GlobalNamespace::SliderInteractionManager::remove_allSliderWereRemovedFromActiveSlidersEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::remove_allSliderWereRemovedFromActiveSlidersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_allSliderWereRemovedFromActiveSlidersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderInteractionManager.Start
void GlobalNamespace::SliderInteractionManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.OnDestroy
void GlobalNamespace::SliderInteractionManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.Update
void GlobalNamespace::SliderInteractionManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderInteractionManager.AddActiveSlider
void GlobalNamespace::SliderInteractionManager::AddActiveSlider(::GlobalNamespace::SliderController* newSliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::AddActiveSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddActiveSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSliderController);
}
// Autogenerated method: SliderInteractionManager.RemoveActiveSlider
void GlobalNamespace::SliderInteractionManager::RemoveActiveSlider(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::RemoveActiveSlider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveActiveSlider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated method: SliderInteractionManager.HandleSliderWasSpawned
void GlobalNamespace::SliderInteractionManager::HandleSliderWasSpawned(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::HandleSliderWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated method: SliderInteractionManager.HandleSliderWasDespawned
void GlobalNamespace::SliderInteractionManager::HandleSliderWasDespawned(::GlobalNamespace::SliderController* sliderController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderInteractionManager::HandleSliderWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshConstructor
#include "GlobalNamespace/SliderMeshConstructor.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: VertexPath
#include "GlobalNamespace/VertexPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::SliderMeshConstructor::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3[] reusableVerts
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshConstructor::dyn_reusableVerts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableVerts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableVerts"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector2[] reusableUvs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& GlobalNamespace::SliderMeshConstructor::dyn_reusableUvs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableUvs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableUvs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3[] reusableNormals
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshConstructor::dyn_reusableNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableNormals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableNormals"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32[] reusableTriangles
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::SliderMeshConstructor::dyn_reusableTriangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn_reusableTriangles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reusableTriangles"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::SliderMeshConstructor::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshConstructor.get_mesh
::UnityEngine::Mesh* GlobalNamespace::SliderMeshConstructor::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshConstructor.CreateMeshIfNonExisting
void GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateMeshIfNonExisting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMeshIfNonExisting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshConstructor.CreateSliderMesh
void GlobalNamespace::SliderMeshConstructor::CreateSliderMesh(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateSliderMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.CreateSliderMeshInternal
void GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::CreateSliderMeshInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMeshInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.GetVertexCount
int GlobalNamespace::SliderMeshConstructor::GetVertexCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::GetVertexCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVertexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructor.GetTrianglesCount
int GlobalNamespace::SliderMeshConstructor::GetTrianglesCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructor::GetTrianglesCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrianglesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshConstructorCrossedStrips
#include "GlobalNamespace/SliderMeshConstructorCrossedStrips.hpp"
// Including type: VertexPath
#include "GlobalNamespace/VertexPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32[] _triangleMap
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::SliderMeshConstructorCrossedStrips::dyn__triangleMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::dyn__triangleMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_triangleMap"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.CreateSliderMeshInternal
void GlobalNamespace::SliderMeshConstructorCrossedStrips::CreateSliderMeshInternal(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::CreateSliderMeshInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSliderMeshInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.GetVertexCount
int GlobalNamespace::SliderMeshConstructorCrossedStrips::GetVertexCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::GetVertexCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVertexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated method: SliderMeshConstructorCrossedStrips.GetTrianglesCount
int GlobalNamespace::SliderMeshConstructorCrossedStrips::GetTrianglesCount(::GlobalNamespace::VertexPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshConstructorCrossedStrips::GetTrianglesCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrianglesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: SliderMeshConstructor
#include "GlobalNamespace/SliderMeshConstructor.hpp"
// Including type: PathsHolder
#include "GlobalNamespace/PathsHolder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultGameNoteSize
float GlobalNamespace::SliderMeshController::_get_kDefaultGameNoteSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::_get_kDefaultGameNoteSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SliderMeshController", "kDefaultGameNoteSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultGameNoteSize
void GlobalNamespace::SliderMeshController::_set_kDefaultGameNoteSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::_set_kDefaultGameNoteSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderMeshController", "kDefaultGameNoteSize", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfFixedVertexPathSegments
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SliderMeshController::dyn__numberOfFixedVertexPathSegments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__numberOfFixedVertexPathSegments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfFixedVertexPathSegments"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _controlPointDistancePerSqrtNotesDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__controlPointDistancePerSqrtNotesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__controlPointDistancePerSqrtNotesDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controlPointDistancePerSqrtNotesDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleAnchorPointOffsetAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleAnchorPointOffsetAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleAnchorPointOffsetAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleAnchorPointOffsetAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointZDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointZDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointZDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointZDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointYDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointYDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointYDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointYDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _middleControlPointXDistanceModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMeshController::dyn__middleControlPointXDistanceModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__middleControlPointXDistanceModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_middleControlPointXDistanceModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SliderMeshConstructor _sliderMeshConstructor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshConstructor*& GlobalNamespace::SliderMeshController::dyn__sliderMeshConstructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__sliderMeshConstructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshConstructor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshConstructor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PathsHolder _pathsHolder
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PathsHolder*& GlobalNamespace::SliderMeshController::dyn__pathsHolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__pathsHolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pathsHolder"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PathsHolder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> _reusableAnchorsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::SliderMeshController::dyn__reusableAnchorsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableAnchorsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableAnchorsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _reusableControlPointsArray4
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableControlPointsArray4"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3[] _reusableControlPointsArray2
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::dyn__reusableControlPointsArray2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusableControlPointsArray2"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMeshController.get_pathLength
float GlobalNamespace::SliderMeshController::get_pathLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::get_pathLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pathLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshController.get_mesh
::UnityEngine::Mesh* GlobalNamespace::SliderMeshController::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SliderMeshController.CreateBezierPathAndMesh
void GlobalNamespace::SliderMeshController::CreateBezierPathAndMesh(::GlobalNamespace::SliderData* sliderData, ::UnityEngine::Vector3 headNotePos, ::UnityEngine::Vector3 tailNotePos, float jumpSpeed, float noteUniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::CreateBezierPathAndMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBezierPathAndMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(headNotePos), ::il2cpp_utils::ExtractType(tailNotePos), ::il2cpp_utils::ExtractType(jumpSpeed), ::il2cpp_utils::ExtractType(noteUniformScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, headNotePos, tailNotePos, jumpSpeed, noteUniformScale);
}
// Autogenerated method: SliderMeshController.CutDirectionToControlPointPosition
::UnityEngine::Vector3 GlobalNamespace::SliderMeshController::CutDirectionToControlPointPosition(::GlobalNamespace::NoteCutDirection noteCutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMeshController::CutDirectionToControlPointPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderMeshController", "CutDirectionToControlPointPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutDirection)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noteCutDirection);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderMovement
#include "GlobalNamespace/SliderMovement.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& GlobalNamespace::SliderMovement::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& GlobalNamespace::SliderMovement::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action movementDidFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_movementDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_movementDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movementDidFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> movementDidMoveEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<float>*& GlobalNamespace::SliderMovement::dyn_movementDidMoveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_movementDidMoveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movementDidMoveEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action headDidMovePastCutMarkEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_headDidMovePastCutMarkEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_headDidMovePastCutMarkEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headDidMovePastCutMarkEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action tailDidMovePastCutMarkEvent
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::SliderMovement::dyn_tailDidMovePastCutMarkEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn_tailDidMovePastCutMarkEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailDidMovePastCutMarkEvent"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headNoteJumpStartPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__headNoteJumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteJumpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteJumpStartPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headNoteJumpEndPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__headNoteJumpEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteJumpEndPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteJumpEndPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headNoteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__headNoteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailNoteTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__tailNoteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailNoteTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailNoteTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SliderMovement::dyn__localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SliderMovement::dyn__worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__worldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _inverseWorldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SliderMovement::dyn__inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__inverseWorldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inverseWorldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _jumpDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__jumpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_jumpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _headNoteGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__headNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headNoteGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headNoteGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _tailNoteGravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__tailNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailNoteGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailNoteGravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SliderMovement::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _movementEndReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__movementEndReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__movementEndReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementEndReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _headDidMovePastCutMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__headDidMovePastCutMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__headDidMovePastCutMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headDidMovePastCutMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _tailDidMovePastCutMarkReported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SliderMovement::dyn__tailDidMovePastCutMarkReported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__tailDidMovePastCutMarkReported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tailDidMovePastCutMarkReported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeSinceHeadNoteJump
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SliderMovement::dyn__timeSinceHeadNoteJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::dyn__timeSinceHeadNoteJump");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceHeadNoteJump"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderMovement.get_jumpDuration
float GlobalNamespace::SliderMovement::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_headNoteGravity
float GlobalNamespace::SliderMovement::get_headNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_headNoteGravity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headNoteGravity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_tailNoteGravity
float GlobalNamespace::SliderMovement::get_tailNoteGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_tailNoteGravity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tailNoteGravity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.get_timeSinceHeadNoteJump
float GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeSinceHeadNoteJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.add_movementDidFinishEvent
void GlobalNamespace::SliderMovement::add_movementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_movementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_movementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_movementDidFinishEvent
void GlobalNamespace::SliderMovement::remove_movementDidFinishEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_movementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_movementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_movementDidMoveEvent
void GlobalNamespace::SliderMovement::add_movementDidMoveEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_movementDidMoveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_movementDidMoveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_movementDidMoveEvent
void GlobalNamespace::SliderMovement::remove_movementDidMoveEvent(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_movementDidMoveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_movementDidMoveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_headDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_headDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.add_tailDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.remove_tailDidMovePastCutMarkEvent
void GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SliderMovement.Init
void GlobalNamespace::SliderMovement::Init(float headNoteTime, float tailNoteTime, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, float jumpDuration, float headNoteGravity, float tailNoteGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headNoteTime), ::il2cpp_utils::ExtractType(tailNoteTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(headNoteJumpStartPos), ::il2cpp_utils::ExtractType(headNoteJumpEndPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(headNoteGravity), ::il2cpp_utils::ExtractType(tailNoteGravity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, headNoteTime, tailNoteTime, worldRotation, headNoteJumpStartPos, headNoteJumpEndPos, jumpDuration, headNoteGravity, tailNoteGravity);
}
// Autogenerated method: SliderMovement.StartMovement
void GlobalNamespace::SliderMovement::StartMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::StartMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderMovement.ManualUpdate
void GlobalNamespace::SliderMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderParticleInteractionEffect
#include "GlobalNamespace/SliderParticleInteractionEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::SliderParticleInteractionEffect::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SliderParticleInteractionEffect::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SliderParticleInteractionEffect::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _startColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SliderParticleInteractionEffect::dyn__startColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__startColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _saber
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& GlobalNamespace::SliderParticleInteractionEffect::dyn__saber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::dyn__saber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saber"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderParticleInteractionEffect.Update
void GlobalNamespace::SliderParticleInteractionEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderParticleInteractionEffect.SetPSStartColor
void GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPSStartColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: SliderParticleInteractionEffect.Start
void GlobalNamespace::SliderParticleInteractionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SliderParticleInteractionEffect.StartEffect
void GlobalNamespace::SliderParticleInteractionEffect::StartEffect(float saberInteractionParam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::StartEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberInteractionParam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberInteractionParam);
}
// Autogenerated method: SliderParticleInteractionEffect.EndEffect
void GlobalNamespace::SliderParticleInteractionEffect::EndEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::EndEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderShaderHelper
#include "GlobalNamespace/SliderShaderHelper.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11135C8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 colorPropertyId
int GlobalNamespace::SliderShaderHelper::_get_colorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_colorPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "colorPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 colorPropertyId
void GlobalNamespace::SliderShaderHelper::_set_colorPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_colorPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "colorPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11135D8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 saberAttractionPointPropertyId
int GlobalNamespace::SliderShaderHelper::_get_saberAttractionPointPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_saberAttractionPointPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "saberAttractionPointPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 saberAttractionPointPropertyId
void GlobalNamespace::SliderShaderHelper::_set_saberAttractionPointPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_saberAttractionPointPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "saberAttractionPointPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11135E8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
int GlobalNamespace::SliderShaderHelper::_get_timeSinceHeadNoteJumpPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_timeSinceHeadNoteJumpPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "timeSinceHeadNoteJumpPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
void GlobalNamespace::SliderShaderHelper::_set_timeSinceHeadNoteJumpPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_timeSinceHeadNoteJumpPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "timeSinceHeadNoteJumpPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11135F8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 headNoteJumpDataPropertyId
int GlobalNamespace::SliderShaderHelper::_get_headNoteJumpDataPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_headNoteJumpDataPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "headNoteJumpDataPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 headNoteJumpDataPropertyId
void GlobalNamespace::SliderShaderHelper::_set_headNoteJumpDataPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_headNoteJumpDataPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "headNoteJumpDataPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113608
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailNoteJumpDataPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailNoteJumpDataPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailNoteJumpDataPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailNoteJumpDataPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailNoteJumpDataPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailNoteJumpDataPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113618
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 jumpSpeedPropertyId
int GlobalNamespace::SliderShaderHelper::_get_jumpSpeedPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_jumpSpeedPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "jumpSpeedPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 jumpSpeedPropertyId
void GlobalNamespace::SliderShaderHelper::_set_jumpSpeedPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_jumpSpeedPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "jumpSpeedPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113628
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 jumpDistancePropertyId
int GlobalNamespace::SliderShaderHelper::_get_jumpDistancePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_jumpDistancePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "jumpDistancePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 jumpDistancePropertyId
void GlobalNamespace::SliderShaderHelper::_set_jumpDistancePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_jumpDistancePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "jumpDistancePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113638
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 randomPropertyId
int GlobalNamespace::SliderShaderHelper::_get_randomPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_randomPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "randomPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 randomPropertyId
void GlobalNamespace::SliderShaderHelper::_set_randomPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_randomPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "randomPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113648
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 headFadeLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_headFadeLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_headFadeLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "headFadeLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 headFadeLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_headFadeLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_headFadeLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "headFadeLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113658
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailFadeLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailFadeLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailFadeLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailFadeLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailFadeLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailFadeLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailFadeLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailFadeLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113668
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 sliderZLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_sliderZLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_sliderZLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "sliderZLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 sliderZLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_sliderZLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_sliderZLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "sliderZLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113678
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 sliderLengthPropertyId
int GlobalNamespace::SliderShaderHelper::_get_sliderLengthPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_sliderLengthPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "sliderLengthPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 sliderLengthPropertyId
void GlobalNamespace::SliderShaderHelper::_set_sliderLengthPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_sliderLengthPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "sliderLengthPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113688
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
int GlobalNamespace::SliderShaderHelper::_get_tailHeadNoteJumpOffsetDifferencePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_tailHeadNoteJumpOffsetDifferencePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "tailHeadNoteJumpOffsetDifferencePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
void GlobalNamespace::SliderShaderHelper::_set_tailHeadNoteJumpOffsetDifferencePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_tailHeadNoteJumpOffsetDifferencePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "tailHeadNoteJumpOffsetDifferencePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113698
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 saberAttractionMultiplier
int GlobalNamespace::SliderShaderHelper::_get_saberAttractionMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_get_saberAttractionMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SliderShaderHelper", "saberAttractionMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 saberAttractionMultiplier
void GlobalNamespace::SliderShaderHelper::_set_saberAttractionMultiplier(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::_set_saberAttractionMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SliderShaderHelper", "saberAttractionMultiplier", value));
}
// Autogenerated method: SliderShaderHelper..cctor
void GlobalNamespace::SliderShaderHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SliderShaderHelper.SetTimeSinceHeadNoteJump
void GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetTimeSinceHeadNoteJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, time);
}
// Autogenerated method: SliderShaderHelper.SetTailHeadNoteJumpOffsetDifference
void GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float tailHeadNoteJumpOffsetDifference) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetTailHeadNoteJumpOffsetDifference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(tailHeadNoteJumpOffsetDifference)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, tailHeadNoteJumpOffsetDifference);
}
// Autogenerated method: SliderShaderHelper.SetSaberAttractionPoint
void GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Vector3 attractPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetSaberAttractionPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(attractPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, attractPoint);
}
// Autogenerated method: SliderShaderHelper.EnableSaberAttraction
void GlobalNamespace::SliderShaderHelper::EnableSaberAttraction(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, bool enableSaberAttraction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::EnableSaberAttraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "EnableSaberAttraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(enableSaberAttraction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, enableSaberAttraction);
}
// Autogenerated method: SliderShaderHelper.SetColor
void GlobalNamespace::SliderShaderHelper::SetColor(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, color);
}
// Autogenerated method: SliderShaderHelper.SetInitialProperties
void GlobalNamespace::SliderShaderHelper::SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color sliderColor, float headNoteGravity, float tailNoteGravity, float noteJumpMovementSpeed, float jumpDistance, float sliderZLength, float sliderLength, bool hasHeadNote, bool hasTailNote, float randomValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetInitialProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetInitialProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderColor), ::il2cpp_utils::ExtractType(headNoteGravity), ::il2cpp_utils::ExtractType(tailNoteGravity), ::il2cpp_utils::ExtractType(noteJumpMovementSpeed), ::il2cpp_utils::ExtractType(jumpDistance), ::il2cpp_utils::ExtractType(sliderZLength), ::il2cpp_utils::ExtractType(sliderLength), ::il2cpp_utils::ExtractType(hasHeadNote), ::il2cpp_utils::ExtractType(hasTailNote), ::il2cpp_utils::ExtractType(randomValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderColor, headNoteGravity, tailNoteGravity, noteJumpMovementSpeed, jumpDistance, sliderZLength, sliderLength, hasHeadNote, hasTailNote, randomValue);
}
// Autogenerated method: SliderShaderHelper.SetInitialProperties
void GlobalNamespace::SliderShaderHelper::SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float noteJumpMovementSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::SetInitialProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "SetInitialProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(noteJumpMovementSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderController, noteJumpMovementSpeed);
}
// Autogenerated method: SliderShaderHelper.UpdateMaterialPropertyBlock
void GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float timeSinceHeadNoteJump, float jumpOffsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SliderShaderHelper", "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialPropertyBlock), ::il2cpp_utils::ExtractType(sliderController), ::il2cpp_utils::ExtractType(timeSinceHeadNoteJump), ::il2cpp_utils::ExtractType(jumpOffsetY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materialPropertyBlock, sliderController, timeSinceHeadNoteJump, jumpOffsetY);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SliderShaderWarmup
#include "GlobalNamespace/SliderShaderWarmup.hpp"
// Including type: SliderMeshController
#include "GlobalNamespace/SliderMeshController.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SliderMeshController _sliderMeshController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& GlobalNamespace::SliderShaderWarmup::dyn__sliderMeshController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::dyn__sliderMeshController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sliderMeshController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SliderMeshController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::SliderShaderWarmup::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SliderShaderWarmup.Start
void GlobalNamespace::SliderShaderWarmup::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StaticJumpOffsetYProvider
#include "GlobalNamespace/StaticJumpOffsetYProvider.hpp"
// Including type: StaticJumpOffsetYProvider/InitData
#include "GlobalNamespace/StaticJumpOffsetYProvider_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly StaticJumpOffsetYProvider/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StaticJumpOffsetYProvider::InitData*& GlobalNamespace::StaticJumpOffsetYProvider::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StaticJumpOffsetYProvider::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StaticJumpOffsetYProvider.get_jumpOffsetY
float GlobalNamespace::StaticJumpOffsetYProvider::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StaticJumpOffsetYProvider/InitData
#include "GlobalNamespace/StaticJumpOffsetYProvider_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single jumpyYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StaticJumpOffsetYProvider::InitData::dyn_jumpyYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticJumpOffsetYProvider::InitData::dyn_jumpyYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpyYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager
#include "GlobalNamespace/TutorialBeatmapObjectManager.hpp"
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SliderData
#include "GlobalNamespace/SliderData.hpp"
// Including type: SliderController
#include "GlobalNamespace/SliderController.hpp"
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<TutorialNoteController> _tutorialNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::TutorialNoteController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__tutorialNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__tutorialNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tutorialNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::TutorialNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<BombNoteController> _bombNotePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BombNoteController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__bombNotePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__bombNotePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombNotePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BombNoteController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<ObstacleController> _obstaclePoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ObstacleController*>*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__obstaclePoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__obstaclePoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstaclePoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TutorialBeatmapObjectManager/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TutorialBeatmapObjectManager::InitData*& GlobalNamespace::TutorialBeatmapObjectManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TutorialBeatmapObjectManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TutorialBeatmapObjectManager.Init
void GlobalNamespace::TutorialBeatmapObjectManager::Init(::GlobalNamespace::TutorialBeatmapObjectManager::InitData* initData, ::GlobalNamespace::TutorialNoteController::Pool* tutorialNotePool, ::GlobalNamespace::BombNoteController::Pool* bombNotePool, ::GlobalNamespace::ObstacleController::Pool* obstaclePool) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initData), ::il2cpp_utils::ExtractType(tutorialNotePool), ::il2cpp_utils::ExtractType(bombNotePool), ::il2cpp_utils::ExtractType(obstaclePool)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initData, tutorialNotePool, bombNotePool, obstaclePool);
}
// Autogenerated method: TutorialBeatmapObjectManager.get_activeObstacleControllers
::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>* GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessObstacleData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessObstacleData(::GlobalNamespace::ObstacleData* obstacleData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData> obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessObstacleData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessObstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleData, byref(obstacleSpawnData), rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessNoteData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessNoteData(::GlobalNamespace::NoteData* noteData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData> noteSpawnData, float rotation, bool forceIsFirstNoteBehaviour) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessNoteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(forceIsFirstNoteBehaviour)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteData, byref(noteSpawnData), rotation, forceIsFirstNoteBehaviour);
}
// Autogenerated method: TutorialBeatmapObjectManager.ProcessSliderData
void GlobalNamespace::TutorialBeatmapObjectManager::ProcessSliderData(::GlobalNamespace::SliderData* sliderData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData> sliderSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::ProcessSliderData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSliderData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderData), ::il2cpp_utils::ExtractType(sliderSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderData, byref(sliderSpawnData), rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(::GlobalNamespace::SliderController* sliderNoteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderNoteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderNoteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single cutAngleTolerance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TutorialBeatmapObjectManager::InitData::dyn_cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialBeatmapObjectManager::InitData::dyn_cutAngleTolerance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutAngleTolerance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BpmController
#include "GlobalNamespace/BpmController.hpp"
// Including type: BpmController/InitData
#include "GlobalNamespace/BpmController_InitData.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: BPMChangeBeatmapEventData
#include "GlobalNamespace/BPMChangeBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::BpmController::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDataCallbackWrapper _beatmapDataCallback
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::BpmController::dyn__beatmapDataCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__beatmapDataCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallback"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentBpm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BpmController::dyn__currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::dyn__currentBpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentBpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BpmController.get_currentBpm
float GlobalNamespace::BpmController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BpmController.Dispose
void GlobalNamespace::BpmController::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BpmController.HandleBpmChangeBeatmapEvent
void GlobalNamespace::BpmController::HandleBpmChangeBeatmapEvent(::GlobalNamespace::BPMChangeBeatmapEventData* bpmChangeBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::HandleBpmChangeBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBpmChangeBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bpmChangeBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bpmChangeBeatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BpmController/InitData
#include "GlobalNamespace/BpmController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single startBpm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BpmController::InitData::dyn_startBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BpmController::InitData::dyn_startBpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startBpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBpmController
#include "GlobalNamespace/IBpmController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBpmController.get_currentBpm
float GlobalNamespace::IBpmController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBpmController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BadNoteCutEffectSpawner
#include "GlobalNamespace/BadNoteCutEffectSpawner.hpp"
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FlyingSpriteSpawner _failFlyingSpriteSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingSpriteSpawner*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__failFlyingSpriteSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__failFlyingSpriteSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failFlyingSpriteSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingSpriteSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly CoreGameHUDController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController::InitData*& GlobalNamespace::BadNoteCutEffectSpawner::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CoreGameHUDController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BadNoteCutEffectSpawner.Start
void GlobalNamespace::BadNoteCutEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.OnDestroy
void GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.HandleNoteWasCut
void GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffectSpawner
#include "GlobalNamespace/BeatEffectSpawner.hpp"
// Including type: BeatEffectSpawner/InitData
#include "GlobalNamespace/BeatEffectSpawner_InitData.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _effectDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatEffectSpawner::dyn__effectDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__effectDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effectDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _bombColorEffect
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BeatEffectSpawner::dyn__bombColorEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__bombColorEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombColorEffect"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::BeatEffectSpawner::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::BeatEffectSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::BeatEffectSpawner::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatEffectSpawner/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatEffectSpawner::InitData*& GlobalNamespace::BeatEffectSpawner::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatEffectSpawner::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BloomFogSO _bloomFog
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomFogSO*& GlobalNamespace::BeatEffectSpawner::dyn__bloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__bloomFog");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bloomFog"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomFogSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SongController _songController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SongController*& GlobalNamespace::BeatEffectSpawner::dyn__songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__songController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MemoryPoolContainer`1<BeatEffect> _beatEffectPoolContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BeatEffect*>*& GlobalNamespace::BeatEffectSpawner::dyn__beatEffectPoolContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::dyn__beatEffectPoolContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatEffectPoolContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::BeatEffect*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatEffectSpawner.Init
void GlobalNamespace::BeatEffectSpawner::Init(::GlobalNamespace::BeatEffect::Pool* beatEffectPool) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffectPool)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatEffectPool);
}
// Autogenerated method: BeatEffectSpawner.Start
void GlobalNamespace::BeatEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.OnDestroy
void GlobalNamespace::BeatEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.Update
void GlobalNamespace::BeatEffectSpawner::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.HandleNoteDidStartJump
void GlobalNamespace::BeatEffectSpawner::HandleNoteDidStartJump(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatEffectSpawner.HandleBeatEffectDidFinish
void GlobalNamespace::BeatEffectSpawner::HandleBeatEffectDidFinish(::GlobalNamespace::BeatEffect* beatEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::HandleBeatEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffectSpawner/InitData
#include "GlobalNamespace/BeatEffectSpawner_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean hideNoteSpawnEffect
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BeatEffectSpawner::InitData::dyn_hideNoteSpawnEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffectSpawner::InitData::dyn_hideNoteSpawnEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideNoteSpawnEffect"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner
#include "GlobalNamespace/FlyingScoreSpawner.hpp"
// Including type: FlyingScoreSpawner/SpawnPosition
#include "GlobalNamespace/FlyingScoreSpawner_SpawnPosition.hpp"
// Including type: FlyingScoreSpawner/InitData
#include "GlobalNamespace/FlyingScoreSpawner_InitData.hpp"
// Including type: IReadonlyCutScoreBuffer
#include "GlobalNamespace/IReadonlyCutScoreBuffer.hpp"
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly FlyingScoreEffect/Pool _flyingScoreEffectPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingScoreEffect::Pool*& GlobalNamespace::FlyingScoreSpawner::dyn__flyingScoreEffectPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::dyn__flyingScoreEffectPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flyingScoreEffectPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingScoreEffect::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FlyingScoreSpawner/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingScoreSpawner::InitData*& GlobalNamespace::FlyingScoreSpawner::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingScoreSpawner::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingScoreSpawner.SpawnFlyingScore
void GlobalNamespace::FlyingScoreSpawner::SpawnFlyingScore(::GlobalNamespace::IReadonlyCutScoreBuffer* cutScoreBuffer, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnFlyingScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnFlyingScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutScoreBuffer, color);
}
// Autogenerated method: FlyingScoreSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingScoreSpawner::HandleFlyingObjectEffectDidFinish(::GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner/SpawnPosition
#include "GlobalNamespace/FlyingScoreSpawner_SpawnPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FlyingScoreSpawner/SpawnPosition Underground
::GlobalNamespace::FlyingScoreSpawner::SpawnPosition GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_Underground() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_Underground");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlyingScoreSpawner::SpawnPosition>("", "FlyingScoreSpawner/SpawnPosition", "Underground"));
}
// Autogenerated static field setter
// Set static field: static public FlyingScoreSpawner/SpawnPosition Underground
void GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_Underground(::GlobalNamespace::FlyingScoreSpawner::SpawnPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_Underground");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlyingScoreSpawner/SpawnPosition", "Underground", value));
}
// Autogenerated static field getter
// Get static field: static public FlyingScoreSpawner/SpawnPosition AboveGround
::GlobalNamespace::FlyingScoreSpawner::SpawnPosition GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_AboveGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_AboveGround");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlyingScoreSpawner::SpawnPosition>("", "FlyingScoreSpawner/SpawnPosition", "AboveGround"));
}
// Autogenerated static field setter
// Set static field: static public FlyingScoreSpawner/SpawnPosition AboveGround
void GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_AboveGround(::GlobalNamespace::FlyingScoreSpawner::SpawnPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_AboveGround");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlyingScoreSpawner/SpawnPosition", "AboveGround", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FlyingScoreSpawner::SpawnPosition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::SpawnPosition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner/InitData
#include "GlobalNamespace/FlyingScoreSpawner_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly FlyingScoreSpawner/SpawnPosition spawnPosition
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingScoreSpawner::SpawnPosition& GlobalNamespace::FlyingScoreSpawner::InitData::dyn_spawnPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreSpawner::InitData::dyn_spawnPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnPosition"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingScoreSpawner::SpawnPosition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _sprite
[[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& GlobalNamespace::FlyingSpriteSpawner::dyn__sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__sprite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sprite"))->offset;
  return *reinterpret_cast<::UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::FlyingSpriteSpawner::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingSpriteSpawner::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _xSpread
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingSpriteSpawner::dyn__xSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__xSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetYPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingSpriteSpawner::dyn__targetYPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__targetYPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetYPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetZPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingSpriteSpawner::dyn__targetZPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__targetZPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetZPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlyingSpriteSpawner::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _shake
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlyingSpriteSpawner::dyn__shake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__shake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FlyingSpriteEffect/Pool _flyingSpriteEffectPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingSpriteEffect::Pool*& GlobalNamespace::FlyingSpriteSpawner::dyn__flyingSpriteEffectPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::dyn__flyingSpriteEffectPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flyingSpriteEffectPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingSpriteEffect::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingSpriteSpawner.SpawnFlyingSprite
void GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rotation, ::UnityEngine::Quaternion inverseRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnFlyingSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inverseRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rotation, inverseRotation);
}
// Autogenerated method: FlyingSpriteSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish(::GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingTextSpawner
#include "GlobalNamespace/FlyingTextSpawner.hpp"
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingTextSpawner::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _xSpread
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingTextSpawner::dyn__xSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__xSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetYPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingTextSpawner::dyn__targetYPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__targetYPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetYPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _targetZPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingTextSpawner::dyn__targetZPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__targetZPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetZPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlyingTextSpawner::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fontSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingTextSpawner::dyn__fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__fontSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fontSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _shake
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlyingTextSpawner::dyn__shake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__shake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FlyingTextEffect/Pool _flyingTextEffectPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingTextEffect::Pool*& GlobalNamespace::FlyingTextSpawner::dyn__flyingTextEffectPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::dyn__flyingTextEffectPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flyingTextEffectPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingTextEffect::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingTextSpawner.SpawnText
void GlobalNamespace::FlyingTextSpawner::SpawnText(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rotation, ::UnityEngine::Quaternion inverseRotation, ::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::SpawnText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inverseRotation), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rotation, inverseRotation, text);
}
// Autogenerated method: FlyingTextSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingTextSpawner::HandleFlyingObjectEffectDidFinish(::GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissedNoteEffectSpawner
#include "GlobalNamespace/MissedNoteEffectSpawner.hpp"
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FlyingSpriteSpawner _missedNoteFlyingSpriteSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingSpriteSpawner*& GlobalNamespace::MissedNoteEffectSpawner::dyn__missedNoteFlyingSpriteSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::dyn__missedNoteFlyingSpriteSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missedNoteFlyingSpriteSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingSpriteSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::MissedNoteEffectSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::MissedNoteEffectSpawner::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly CoreGameHUDController/InitData _initData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController::InitData*& GlobalNamespace::MissedNoteEffectSpawner::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CoreGameHUDController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _spawnPosZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MissedNoteEffectSpawner::dyn__spawnPosZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::dyn__spawnPosZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnPosZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MissedNoteEffectSpawner.Start
void GlobalNamespace::MissedNoteEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissedNoteEffectSpawner.OnDestroy
void GlobalNamespace::MissedNoteEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissedNoteEffectSpawner.HandleNoteWasMissed
void GlobalNamespace::MissedNoteEffectSpawner::HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissedNoteEffectSpawner::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutCoreEffectsSpawner
#include "GlobalNamespace/NoteCutCoreEffectsSpawner.hpp"
// Including type: NoteCutParticlesEffect
#include "GlobalNamespace/NoteCutParticlesEffect.hpp"
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: NoteCutHapticEffect
#include "GlobalNamespace/NoteCutHapticEffect.hpp"
// Including type: ShockwaveEffect
#include "GlobalNamespace/ShockwaveEffect.hpp"
// Including type: BombExplosionEffect
#include "GlobalNamespace/BombExplosionEffect.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kNormalNoteSparkleParticlesCount
int GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kNormalNoteSparkleParticlesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kNormalNoteSparkleParticlesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutCoreEffectsSpawner", "kNormalNoteSparkleParticlesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kNormalNoteSparkleParticlesCount
void GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kNormalNoteSparkleParticlesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kNormalNoteSparkleParticlesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutCoreEffectsSpawner", "kNormalNoteSparkleParticlesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kNormalNoteExplosionParticlesCount
int GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kNormalNoteExplosionParticlesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kNormalNoteExplosionParticlesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutCoreEffectsSpawner", "kNormalNoteExplosionParticlesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kNormalNoteExplosionParticlesCount
void GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kNormalNoteExplosionParticlesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kNormalNoteExplosionParticlesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutCoreEffectsSpawner", "kNormalNoteExplosionParticlesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kBurstSliderElementSparkleParticlesCount
int GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kBurstSliderElementSparkleParticlesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kBurstSliderElementSparkleParticlesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutCoreEffectsSpawner", "kBurstSliderElementSparkleParticlesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBurstSliderElementSparkleParticlesCount
void GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kBurstSliderElementSparkleParticlesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kBurstSliderElementSparkleParticlesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutCoreEffectsSpawner", "kBurstSliderElementSparkleParticlesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kBurstSliderElementParticlesCount
int GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kBurstSliderElementParticlesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_get_kBurstSliderElementParticlesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutCoreEffectsSpawner", "kBurstSliderElementParticlesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBurstSliderElementParticlesCount
void GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kBurstSliderElementParticlesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::_set_kBurstSliderElementParticlesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutCoreEffectsSpawner", "kBurstSliderElementParticlesCount", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shockWaveYPos
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__shockWaveYPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__shockWaveYPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shockWaveYPos"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteCutParticlesEffect _noteCutParticlesEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutParticlesEffect*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteCutParticlesEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteCutParticlesEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteCutParticlesEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteCutParticlesEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteDebrisSpawner _noteDebrisSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebrisSpawner*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteDebrisSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteDebrisSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDebrisSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebrisSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteCutHapticEffect _noteCutHapticEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutHapticEffect*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteCutHapticEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__noteCutHapticEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteCutHapticEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteCutHapticEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ShockwaveEffect _shockwaveEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ShockwaveEffect*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__shockwaveEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__shockwaveEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shockwaveEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ShockwaveEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BombExplosionEffect _bombExplosionEffect
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BombExplosionEffect*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__bombExplosionEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__bombExplosionEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bombExplosionEffect"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BombExplosionEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.Start
void GlobalNamespace::NoteCutCoreEffectsSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.OnDestroy
void GlobalNamespace::NoteCutCoreEffectsSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.HandleNoteWasCut
void GlobalNamespace::NoteCutCoreEffectsSpawner::HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: NoteCutCoreEffectsSpawner.SpawnNoteCutEffect
void GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnNoteCutEffect(ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo, ::GlobalNamespace::NoteController* noteController, int sparkleParticlesCount, int explosionParticlesCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnNoteCutEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnNoteCutEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(sparkleParticlesCount), ::il2cpp_utils::ExtractType(explosionParticlesCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(noteCutInfo), noteController, sparkleParticlesCount, explosionParticlesCount);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.SpawnBombCutEffect
void GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnBombCutEffect(ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo, ::GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnBombCutEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombCutEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(noteCutInfo), noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutScoreSpawner
#include "GlobalNamespace/NoteCutScoreSpawner.hpp"
// Including type: FlyingScoreSpawner
#include "GlobalNamespace/FlyingScoreSpawner.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: ScoringElement
#include "GlobalNamespace/ScoringElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FlyingScoreSpawner _flyingScoreSpawner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlyingScoreSpawner*& GlobalNamespace::NoteCutScoreSpawner::dyn__flyingScoreSpawner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutScoreSpawner::dyn__flyingScoreSpawner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flyingScoreSpawner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlyingScoreSpawner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IScoreController*& GlobalNamespace::NoteCutScoreSpawner::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutScoreSpawner::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutScoreSpawner.Start
void GlobalNamespace::NoteCutScoreSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutScoreSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutScoreSpawner.OnDestroy
void GlobalNamespace::NoteCutScoreSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutScoreSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutScoreSpawner.HandleScoringForNoteStarted
void GlobalNamespace::NoteCutScoreSpawner::HandleScoringForNoteStarted(::GlobalNamespace::ScoringElement* scoringElement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutScoreSpawner::HandleScoringForNoteStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoringForNoteStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoringElement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scoringElement);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMinLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_get_kMinLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMinLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMinLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_set_kMinLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMinLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMaxLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_get_kMaxLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMaxLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMaxLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_set_kMaxLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMaxLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kLifeTimeOffset
float GlobalNamespace::NoteDebrisSpawner::_get_kLifeTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_get_kLifeTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kLifeTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLifeTimeOffset
void GlobalNamespace::NoteDebrisSpawner::_set_kLifeTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::_set_kLifeTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kLifeTimeOffset", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebrisSpawner::dyn__rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cutDirMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebrisSpawner::dyn__cutDirMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__cutDirMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutDirMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fromCenterSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebrisSpawner::dyn__fromCenterSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__fromCenterSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fromCenterSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _moveSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::NoteDebrisSpawner::dyn__moveSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__moveSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteDebris/Pool _normalNotesDebrisPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris::Pool*& GlobalNamespace::NoteDebrisSpawner::dyn__normalNotesDebrisPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__normalNotesDebrisPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalNotesDebrisPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebris::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteDebris/Pool _burstSliderHeadNotesDebrisPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris::Pool*& GlobalNamespace::NoteDebrisSpawner::dyn__burstSliderHeadNotesDebrisPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__burstSliderHeadNotesDebrisPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderHeadNotesDebrisPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebris::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteDebris/Pool _burstSliderElementNotesDebrisPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris::Pool*& GlobalNamespace::NoteDebrisSpawner::dyn__burstSliderElementNotesDebrisPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__burstSliderElementNotesDebrisPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burstSliderElementNotesDebrisPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NoteDebris::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<NoteData/GameplayType,NoteDebris/Pool> _poolForNoteGameplayType
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NoteData::GameplayType, ::GlobalNamespace::NoteDebris::Pool*>*& GlobalNamespace::NoteDebrisSpawner::dyn__poolForNoteGameplayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__poolForNoteGameplayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poolForNoteGameplayType"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NoteData::GameplayType, ::GlobalNamespace::NoteDebris::Pool*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<NoteDebris,NoteDebris/Pool> _poolForNoteDebris
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NoteDebris*, ::GlobalNamespace::NoteDebris::Pool*>*& GlobalNamespace::NoteDebrisSpawner::dyn__poolForNoteDebris() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::dyn__poolForNoteDebris");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poolForNoteDebris"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NoteDebris*, ::GlobalNamespace::NoteDebris::Pool*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteDebrisSpawner.Start
void GlobalNamespace::NoteDebrisSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSpawner.SpawnDebris
void GlobalNamespace::NoteDebrisSpawner::SpawnDebris(::GlobalNamespace::NoteData::GameplayType noteGameplayType, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Vector3 cutNormal, float saberSpeed, ::UnityEngine::Vector3 saberDir, ::UnityEngine::Vector3 notePos, ::UnityEngine::Quaternion noteRotation, ::UnityEngine::Vector3 noteScale, ::GlobalNamespace::ColorType colorType, float timeToNextColorNote, ::UnityEngine::Vector3 moveVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::SpawnDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteGameplayType), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(saberSpeed), ::il2cpp_utils::ExtractType(saberDir), ::il2cpp_utils::ExtractType(notePos), ::il2cpp_utils::ExtractType(noteRotation), ::il2cpp_utils::ExtractType(noteScale), ::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(timeToNextColorNote), ::il2cpp_utils::ExtractType(moveVec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteGameplayType, cutPoint, cutNormal, saberSpeed, saberDir, notePos, noteRotation, noteScale, colorType, timeToNextColorNote, moveVec);
}
// Autogenerated method: NoteDebrisSpawner.HandleNoteDebrisDidFinish
void GlobalNamespace::NoteDebrisSpawner::HandleNoteDebrisDidFinish(::GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::HandleNoteDebrisDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDebrisDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDebris)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteDebris);
}
// Autogenerated method: NoteDebrisSpawner.SpawnNoteDebris
void GlobalNamespace::NoteDebrisSpawner::SpawnNoteDebris(::GlobalNamespace::NoteData::GameplayType noteGameplayType, ByRef<::GlobalNamespace::NoteDebris*> debris0, ByRef<::GlobalNamespace::NoteDebris*> debris1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::SpawnNoteDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnNoteDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteGameplayType), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::NoteDebris*&>(), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::NoteDebris*&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteGameplayType, byref(debris0), byref(debris1));
}
// Autogenerated method: NoteDebrisSpawner.DespawnNoteDebris
void GlobalNamespace::NoteDebrisSpawner::DespawnNoteDebris(::GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisSpawner::DespawnNoteDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnNoteDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDebris)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteDebris);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleSaberSparkleEffectManager
#include "GlobalNamespace/ObstacleSaberSparkleEffectManager.hpp"
// Including type: ObstacleSaberSparkleEffect
#include "GlobalNamespace/ObstacleSaberSparkleEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ObstacleSaberSparkleEffect _obstacleSaberSparkleEffectPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ObstacleSaberSparkleEffect*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__obstacleSaberSparkleEffectPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__obstacleSaberSparkleEffectPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleSaberSparkleEffectPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ObstacleSaberSparkleEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__rumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__rumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblePreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<SaberType> sparkleEffectDidStartEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SaberType>*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn_sparkleEffectDidStartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn_sparkleEffectDidStartEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sparkleEffectDidStartEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::SaberType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<SaberType> sparkleEffectDidEndEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SaberType>*& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn_sparkleEffectDidEndEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn_sparkleEffectDidEndEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sparkleEffectDidEndEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::SaberType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber[] _sabers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Saber*>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__sabers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__sabers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sabers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::Saber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ObstacleSaberSparkleEffect[] _effects
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ObstacleSaberSparkleEffect*>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__effects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__effects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effects"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ObstacleSaberSparkleEffect*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _effectsTransforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__effectsTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__effectsTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effectsTransforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] _isSystemActive
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__isSystemActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__isSystemActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isSystemActive"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] _wasSystemActive
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__wasSystemActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__wasSystemActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasSystemActive"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _burnMarkPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__burnMarkPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::dyn__burnMarkPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnMarkPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.add_sparkleEffectDidStartEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidStartEvent(::System::Action_1<::GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sparkleEffectDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.remove_sparkleEffectDidStartEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidStartEvent(::System::Action_1<::GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sparkleEffectDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.add_sparkleEffectDidEndEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidEndEvent(::System::Action_1<::GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidEndEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sparkleEffectDidEndEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.remove_sparkleEffectDidEndEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidEndEvent(::System::Action_1<::GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidEndEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sparkleEffectDidEndEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.Start
void GlobalNamespace::ObstacleSaberSparkleEffectManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.OnDisable
void GlobalNamespace::ObstacleSaberSparkleEffectManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.Update
void GlobalNamespace::ObstacleSaberSparkleEffectManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.GetEffectRotation
::UnityEngine::Quaternion GlobalNamespace::ObstacleSaberSparkleEffectManager::GetEffectRotation(::UnityEngine::Vector3 pos, ::UnityEngine::Transform* transform, ::UnityEngine::Bounds bounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::GetEffectRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffectRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(bounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pos, transform, bounds);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.BurnMarkPosForSaberType
::UnityEngine::Vector3 GlobalNamespace::ObstacleSaberSparkleEffectManager::BurnMarkPosForSaberType(::GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::BurnMarkPosForSaberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BurnMarkPosForSaberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, saberType);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.GetBurnMarkPos
bool GlobalNamespace::ObstacleSaberSparkleEffectManager::GetBurnMarkPos(::UnityEngine::Bounds bounds, ::UnityEngine::Transform* transform, ::UnityEngine::Vector3 bladeBottomPos, ::UnityEngine::Vector3 bladeTopPos, ByRef<::UnityEngine::Vector3> burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObstacleSaberSparkleEffectManager::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bounds), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bounds, transform, bladeBottomPos, bladeTopPos, byref(burnMarkPos));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatEffectDidFinishEvent
#include "GlobalNamespace/IBeatEffectDidFinishEvent.hpp"
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatEffectDidFinishEvent.HandleBeatEffectDidFinish
void GlobalNamespace::IBeatEffectDidFinishEvent::HandleBeatEffectDidFinish(::GlobalNamespace::BeatEffect* beatEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IBeatEffectDidFinishEvent::HandleBeatEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beatEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: IBeatEffectDidFinishEvent
#include "GlobalNamespace/IBeatEffectDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::BeatEffect::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _spriteTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BeatEffect::dyn__spriteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__spriteTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _tubeBloomPrePassLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::BeatEffect::dyn__tubeBloomPrePassLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__tubeBloomPrePassLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tubeBloomPrePassLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _lightIntensityCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::BeatEffect::dyn__lightIntensityCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__lightIntensityCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _spriteXScaleCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::BeatEffect::dyn__spriteXScaleCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__spriteXScaleCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteXScaleCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _spriteYScaleCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::BeatEffect::dyn__spriteYScaleCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__spriteYScaleCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteYScaleCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _transparencyCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::BeatEffect::dyn__transparencyCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__transparencyCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transparencyCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<IBeatEffectDidFinishEvent> _didFinishEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::IBeatEffectDidFinishEvent*>*& GlobalNamespace::BeatEffect::dyn__didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__didFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didFinishEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::IBeatEffectDidFinishEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _animationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatEffect::dyn__animationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__animationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elapsedTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeatEffect::dyn__elapsedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__elapsedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elapsedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BeatEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatEffect.get_didFinishEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::IBeatEffectDidFinishEvent*>* GlobalNamespace::BeatEffect::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::IBeatEffectDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffect.Init
void GlobalNamespace::BeatEffect::Init(::UnityEngine::Color color, float animationDuration, ::UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(animationDuration), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, animationDuration, rotation);
}
// Autogenerated method: BeatEffect.ManualUpdate
void GlobalNamespace::BeatEffect::ManualUpdate(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatEffect::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombExplosionEffect
#include "GlobalNamespace/BombExplosionEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _debrisPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::BombExplosionEffect::dyn__debrisPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__debrisPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_debrisPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _explosionPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::BombExplosionEffect::dyn__explosionPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__explosionPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _debrisCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BombExplosionEffect::dyn__debrisCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__debrisCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_debrisCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _explosionParticlesCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BombExplosionEffect::dyn__explosionParticlesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__explosionParticlesCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionParticlesCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::BombExplosionEffect::dyn__emitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__emitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _explosionPSEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::BombExplosionEffect::dyn__explosionPSEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::dyn__explosionPSEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPSEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BombExplosionEffect.Awake
void GlobalNamespace::BombExplosionEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombExplosionEffect.SpawnExplosion
void GlobalNamespace::BombExplosionEffect::SpawnExplosion(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::SpawnExplosion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnExplosion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
// Including type: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7
#include "GlobalNamespace/CutoutAnimateEffect_-AnimateToCutoutCoroutine-d__7.hpp"
// Including type: CutoutEffect
#include "GlobalNamespace/CutoutEffect.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private CutoutEffect[] _cuttoutEffects
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CutoutEffect*>& GlobalNamespace::CutoutAnimateEffect::dyn__cuttoutEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::dyn__cuttoutEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cuttoutEffects"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::CutoutEffect*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _transitionCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::CutoutAnimateEffect::dyn__transitionCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::dyn__transitionCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transitionCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <animating>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CutoutAnimateEffect::dyn_$animating$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::dyn_$animating$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<animating>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CutoutAnimateEffect.get_animating
bool GlobalNamespace::CutoutAnimateEffect::get_animating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::get_animating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.set_animating
void GlobalNamespace::CutoutAnimateEffect::set_animating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::set_animating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_animating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CutoutAnimateEffect.Start
void GlobalNamespace::CutoutAnimateEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.AnimateToCutoutCoroutine
::System::Collections::IEnumerator* GlobalNamespace::CutoutAnimateEffect::AnimateToCutoutCoroutine(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::AnimateToCutoutCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToCutoutCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated method: CutoutAnimateEffect.SetCutout
void GlobalNamespace::CutoutAnimateEffect::SetCutout(float cutout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutout);
}
// Autogenerated method: CutoutAnimateEffect.ResetEffect
void GlobalNamespace::CutoutAnimateEffect::ResetEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::ResetEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.AnimateCutout
void GlobalNamespace::CutoutAnimateEffect::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7
#include "GlobalNamespace/CutoutAnimateEffect_-AnimateToCutoutCoroutine-d__7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CutoutAnimateEffect <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CutoutAnimateEffect*& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CutoutAnimateEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cutoutStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_cutoutStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_cutoutStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutoutStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cutoutEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_cutoutEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_cutoutEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutoutEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$elapsedTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::dyn_$elapsedTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.IDisposable.Dispose
void GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.MoveNext
bool GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.IEnumerator.Reset
void GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CutoutEffect
#include "GlobalNamespace/CutoutEffect.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113D60
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutPropertyID
int GlobalNamespace::CutoutEffect::_get__cutoutPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::_get__cutoutPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CutoutEffect", "_cutoutPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutPropertyID
void GlobalNamespace::CutoutEffect::_set__cutoutPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::_set__cutoutPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CutoutEffect", "_cutoutPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1113D70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutTexOffsetPropertyID
int GlobalNamespace::CutoutEffect::_get__cutoutTexOffsetPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::_get__cutoutTexOffsetPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CutoutEffect", "_cutoutTexOffsetPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutTexOffsetPropertyID
void GlobalNamespace::CutoutEffect::_set__cutoutTexOffsetPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::_set__cutoutTexOffsetPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CutoutEffect", "_cutoutTexOffsetPropertyID", value));
}
// Autogenerated instance field getter
// Get instance field: private MaterialPropertyBlockController _materialPropertyBlockController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& GlobalNamespace::CutoutEffect::dyn__materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::dyn__materialPropertyBlockController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlockController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialPropertyBlockController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoolSO _useRandomCutoutOffset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& GlobalNamespace::CutoutEffect::dyn__useRandomCutoutOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::dyn__useRandomCutoutOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useRandomCutoutOffset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoolSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _cutoutOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CutoutEffect::dyn__cutoutOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::dyn__cutoutOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutoutOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _randomNoiseTexOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CutoutEffect::dyn__randomNoiseTexOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::dyn__randomNoiseTexOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomNoiseTexOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _cutout
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CutoutEffect::dyn__cutout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::dyn__cutout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutout"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CutoutEffect.get_useRandomCutoutOffset
bool GlobalNamespace::CutoutEffect::get_useRandomCutoutOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::get_useRandomCutoutOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useRandomCutoutOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutEffect..cctor
void GlobalNamespace::CutoutEffect::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CutoutEffect", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CutoutEffect.Start
void GlobalNamespace::CutoutEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutEffect.SetCutout
void GlobalNamespace::CutoutEffect::SetCutout(float cutout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutout);
}
// Autogenerated method: CutoutEffect.SetCutout
void GlobalNamespace::CutoutEffect::SetCutout(float cutout, ::UnityEngine::Vector3 cutoutOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CutoutEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout), ::il2cpp_utils::ExtractType(cutoutOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutout, cutoutOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmitParticles
#include "GlobalNamespace/EmitParticles.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::EmitParticles::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmitParticles::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EmitParticles.Emit
void GlobalNamespace::EmitParticles::Emit(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EmitParticles::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
// Including type: FireworkItemController/FireworkItemParticleSystem
#include "GlobalNamespace/FireworkItemController_FireworkItemParticleSystem.hpp"
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
// Including type: FireworkItemController/<FireCoroutine>d__29
#include "GlobalNamespace/FireworkItemController_-FireCoroutine-d__29.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FireworkItemController/FireworkItemParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem*>& GlobalNamespace::FireworkItemController::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight[] _lights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>& GlobalNamespace::FireworkItemController::dyn__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::FireworkItemController::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lightFlashDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::dyn__lightFlashDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lightFlashDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightFlashDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _lightIntensityCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FireworkItemController::dyn__lightIntensityCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lightIntensityCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lightIntensityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::dyn__lightIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lightIntensityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightIntensityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _randomizeColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::dyn__randomizeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__randomizeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomizeColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _lightsColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FireworkItemController::dyn__lightsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lightsColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _lightsColorGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& GlobalNamespace::FireworkItemController::dyn__lightsColorGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__lightsColorGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsColorGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _randomizeSpeed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::dyn__randomizeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__randomizeSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomizeSpeed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::dyn__minSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__minSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::dyn__maxSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__maxSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip[] _explosionClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::FireworkItemController::dyn__explosionClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__explosionClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RandomObjectPicker`1<UnityEngine.AudioClip> _randomAudioPicker
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>*& GlobalNamespace::FireworkItemController::dyn__randomAudioPicker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__randomAudioPicker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomAudioPicker"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLight _directionalLight
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DirectionalLight*& GlobalNamespace::FireworkItemController::dyn__directionalLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__directionalLight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLight"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DirectionalLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _directionalLightIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::dyn__directionalLightIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__directionalLightIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLightIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<FireworkItemController> didFinishEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::FireworkItemController*>*& GlobalNamespace::FireworkItemController::dyn_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::dyn_didFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didFinishEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::GlobalNamespace::FireworkItemController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworkItemController.set_directionalLight
void GlobalNamespace::FireworkItemController::set_directionalLight(::GlobalNamespace::DirectionalLight* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::set_directionalLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directionalLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.set_directionalLightIntensity
void GlobalNamespace::FireworkItemController::set_directionalLightIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::set_directionalLightIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directionalLightIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.add_didFinishEvent
void GlobalNamespace::FireworkItemController::add_didFinishEvent(::System::Action_1<::GlobalNamespace::FireworkItemController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.remove_didFinishEvent
void GlobalNamespace::FireworkItemController::remove_didFinishEvent(::System::Action_1<::GlobalNamespace::FireworkItemController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.Awake
void GlobalNamespace::FireworkItemController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.OnDisable
void GlobalNamespace::FireworkItemController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.Fire
void GlobalNamespace::FireworkItemController::Fire() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.FireCoroutine
::System::Collections::IEnumerator* GlobalNamespace::FireworkItemController::FireCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.SetLightsColor
void GlobalNamespace::FireworkItemController::SetLightsColor(float intensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::SetLightsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(intensity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, intensity);
}
// Autogenerated method: FireworkItemController.PlayExplosionSound
void GlobalNamespace::FireworkItemController::PlayExplosionSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::PlayExplosionSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayExplosionSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.InitializeParticleSystem
void GlobalNamespace::FireworkItemController::InitializeParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::InitializeParticleSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeParticleSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworkItemController/FireworkItemParticleSystem
#include "GlobalNamespace/FireworkItemController_FireworkItemParticleSystem.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _isSubemitter
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__isSubemitter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__isSubemitter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isSubemitter"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _useMainColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__useMainColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__useMainColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useMainColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _useOwnGradient
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__useOwnGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__useOwnGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useOwnGradient"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Gradient _particleColorGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__particleColorGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__particleColorGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleColorGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _randomizeSpeed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__randomizeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::FireworkItemParticleSystem::dyn__randomizeSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomizeSpeed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworkItemController/<FireCoroutine>d__29
#include "GlobalNamespace/FireworkItemController_-FireCoroutine-d__29.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FireworkItemController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworkItemController*& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworkItemController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <soundTimeToCenter>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$soundTimeToCenter$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$soundTimeToCenter$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<soundTimeToCenter>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__3
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$elapsedTime$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$elapsedTime$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <explosionSoundFired>5__4
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$explosionSoundFired$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::dyn_$explosionSoundFired$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<explosionSoundFired>5__4"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.IDisposable.Dispose
void GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.MoveNext
bool GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.IEnumerator.Reset
void GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: FireworksController/<SpawningCoroutine>d__8
#include "GlobalNamespace/FireworksController_-SpawningCoroutine-d__8.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _spawnSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FireworksController::dyn__spawnSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__spawnSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minSpawnInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn__minSpawnInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__minSpawnInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minSpawnInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxSpawnInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn__maxSpawnInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__maxSpawnInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxSpawnInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DirectionalLight[] _directionalLights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DirectionalLight*>& GlobalNamespace::FireworksController::dyn__directionalLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__directionalLights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directionalLights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DirectionalLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lightsIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn__lightsIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__lightsIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _currentLightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FireworksController::dyn__currentLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__currentLightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentLightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FireworkItemController/Pool _fireworkItemPool
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworkItemController::Pool*& GlobalNamespace::FireworksController::dyn__fireworkItemPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__fireworkItemPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireworkItemPool"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworkItemController::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworksController.OnEnable
void GlobalNamespace::FireworksController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.SpawningCoroutine
::System::Collections::IEnumerator* GlobalNamespace::FireworksController::SpawningCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::SpawningCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawningCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.HandleFireworkItemControllerDidFinish
void GlobalNamespace::FireworksController::HandleFireworkItemControllerDidFinish(::GlobalNamespace::FireworkItemController* fireworkItemController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::HandleFireworkItemControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFireworkItemControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fireworkItemController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fireworkItemController);
}
// Autogenerated method: FireworksController.OnDrawGizmosSelected
void GlobalNamespace::FireworksController::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworksController/<SpawningCoroutine>d__8
#include "GlobalNamespace/FireworksController_-SpawningCoroutine-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FireworksController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworksController*& GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.MoveNext
bool GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworksItemPoolInstaller
#include "GlobalNamespace/FireworksItemPoolInstaller.hpp"
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FireworksController _fireworksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworksController*& GlobalNamespace::FireworksItemPoolInstaller::dyn__fireworksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksItemPoolInstaller::dyn__fireworksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireworksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FireworkItemController _fireworkItemControllerPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworkItemController*& GlobalNamespace::FireworksItemPoolInstaller::dyn__fireworkItemControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksItemPoolInstaller::dyn__fireworkItemControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireworkItemControllerPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworkItemController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworksItemPoolInstaller.InstallBindings
void GlobalNamespace::FireworksItemPoolInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksItemPoolInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatingTransformEffect
#include "GlobalNamespace/FloatingTransformEffect.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _positionMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FloatingTransformEffect::dyn__positionMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__positionMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _rotationMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FloatingTransformEffect::dyn__rotationMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__rotationMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _rotationTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FloatingTransformEffect::dyn__rotationTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__rotationTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxRotationDegrees
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__maxRotationDegrees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__maxRotationDegrees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxRotationDegrees"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _xAmplitude
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__xAmplitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__xAmplitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xAmplitude"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _xFrequency
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__xFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__xFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xFrequency"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _yAmplitude
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__yAmplitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__yAmplitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yAmplitude"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _yFrequency
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__yFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__yFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yFrequency"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _zAmplitude
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__zAmplitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__zAmplitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zAmplitude"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _zFrequency
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::FloatingTransformEffect::dyn__zFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__zFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zFrequency"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FloatingTransformEffect::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _origin
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FloatingTransformEffect::dyn__origin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__origin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_origin"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _offsetX
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__offsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__offsetX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offsetX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _offsetY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__offsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__offsetY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offsetY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _offsetZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__offsetZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__offsetZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offsetZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _amplitudeX
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__amplitudeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__amplitudeX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_amplitudeX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _amplitudeY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__amplitudeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__amplitudeY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_amplitudeY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _amplitudeZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__amplitudeZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__amplitudeZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_amplitudeZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _frequencyX
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__frequencyX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__frequencyX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frequencyX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _frequencyY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__frequencyY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__frequencyY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frequencyY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _frequencyZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FloatingTransformEffect::dyn__frequencyZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__frequencyZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frequencyZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _targetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::FloatingTransformEffect::dyn__targetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::dyn__targetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FloatingTransformEffect.Start
void GlobalNamespace::FloatingTransformEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatingTransformEffect.Tick
void GlobalNamespace::FloatingTransformEffect::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatingTransformEffect.Refresh
void GlobalNamespace::FloatingTransformEffect::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatingTransformEffect.GetPoint
::UnityEngine::Vector3 GlobalNamespace::FloatingTransformEffect::GetPoint(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FloatingTransformEffect::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IFlyingObjectEffectDidFinishEvent
#include "GlobalNamespace/IFlyingObjectEffectDidFinishEvent.hpp"
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IFlyingObjectEffectDidFinishEvent.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::IFlyingObjectEffectDidFinishEvent::HandleFlyingObjectEffectDidFinish(::GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IFlyingObjectEffectDidFinishEvent::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: IFlyingObjectEffectDidFinishEvent
#include "GlobalNamespace/IFlyingObjectEffectDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _moveAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FlyingObjectEffect::dyn__moveAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__moveAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moveAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shakeFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingObjectEffect::dyn__shakeFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__shakeFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shakeFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _shakeStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingObjectEffect::dyn__shakeStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__shakeStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shakeStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _shakeStrengthAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FlyingObjectEffect::dyn__shakeStrengthAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__shakeStrengthAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shakeStrengthAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlyingObjectEffect::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _shakeRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::FlyingObjectEffect::dyn__shakeRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__shakeRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shakeRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::FlyingObjectEffect::dyn__rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elapsedTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingObjectEffect::dyn__elapsedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__elapsedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elapsedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FlyingObjectEffect::dyn__startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _targetPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FlyingObjectEffect::dyn__targetPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__targetPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingObjectEffect::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _shake
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlyingObjectEffect::dyn__shake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__shake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LazyCopyHashSet`1<IFlyingObjectEffectDidFinishEvent> _didFinishEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>*& GlobalNamespace::FlyingObjectEffect::dyn__didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::dyn__didFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didFinishEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingObjectEffect.get_didFinishEvent
::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>* GlobalNamespace::FlyingObjectEffect::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: FlyingObjectEffect.InitAndPresent
void GlobalNamespace::FlyingObjectEffect::InitAndPresent(float duration, ::UnityEngine::Vector3 targetPos, ::UnityEngine::Quaternion rotation, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, targetPos, rotation, shake);
}
// Autogenerated method: FlyingObjectEffect.Update
void GlobalNamespace::FlyingObjectEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingObjectEffect.ManualUpdate
void GlobalNamespace::FlyingObjectEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingObjectEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreEffect
#include "GlobalNamespace/FlyingScoreEffect.hpp"
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: IReadonlyCutScoreBuffer
#include "GlobalNamespace/IReadonlyCutScoreBuffer.hpp"
// Including type: CutScoreBuffer
#include "GlobalNamespace/CutScoreBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FlyingScoreEffect::dyn__fadeAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__fadeAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _maxCutDistanceScoreIndicator
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::FlyingScoreEffect::dyn__maxCutDistanceScoreIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__maxCutDistanceScoreIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxCutDistanceScoreIndicator"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& GlobalNamespace::FlyingScoreEffect::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlyingScoreEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _colorAMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlyingScoreEffect::dyn__colorAMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__colorAMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorAMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _registeredToCallbacks
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlyingScoreEffect::dyn__registeredToCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__registeredToCallbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registeredToCallbacks"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IReadonlyCutScoreBuffer _cutScoreBuffer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IReadonlyCutScoreBuffer*& GlobalNamespace::FlyingScoreEffect::dyn__cutScoreBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::dyn__cutScoreBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cutScoreBuffer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IReadonlyCutScoreBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingScoreEffect.InitAndPresent
void GlobalNamespace::FlyingScoreEffect::InitAndPresent(::GlobalNamespace::IReadonlyCutScoreBuffer* cutScoreBuffer, float duration, ::UnityEngine::Vector3 targetPos, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutScoreBuffer, duration, targetPos, color);
}
// Autogenerated method: FlyingScoreEffect.HandleCutScoreBufferDidChange
void GlobalNamespace::FlyingScoreEffect::HandleCutScoreBufferDidChange(::GlobalNamespace::CutScoreBuffer* cutScoreBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::HandleCutScoreBufferDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreBufferDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutScoreBuffer);
}
// Autogenerated method: FlyingScoreEffect.RefreshScore
void GlobalNamespace::FlyingScoreEffect::RefreshScore(int score, int maxPossibleCutScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::RefreshScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(maxPossibleCutScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, score, maxPossibleCutScore);
}
// Autogenerated method: FlyingScoreEffect.HandleCutScoreBufferDidFinish
void GlobalNamespace::FlyingScoreEffect::HandleCutScoreBufferDidFinish(::GlobalNamespace::CutScoreBuffer* cutScoreBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::HandleCutScoreBufferDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutScoreBuffer);
}
// Autogenerated method: FlyingScoreEffect.UnregisterCallbacksIfNeeded
void GlobalNamespace::FlyingScoreEffect::UnregisterCallbacksIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::UnregisterCallbacksIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCallbacksIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingScoreEffect.ManualUpdate
void GlobalNamespace::FlyingScoreEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingScoreEffect/Pool.OnDespawned
void GlobalNamespace::FlyingScoreEffect::Pool::OnDespawned(::GlobalNamespace::FlyingScoreEffect* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingScoreEffect::Pool::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteEffect
#include "GlobalNamespace/FlyingSpriteEffect.hpp"
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer _spriteRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::FlyingSpriteEffect::dyn__spriteRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteEffect::dyn__spriteRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spriteRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FlyingSpriteEffect::dyn__fadeAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteEffect::dyn__fadeAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlyingSpriteEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingSpriteEffect.InitAndPresent
void GlobalNamespace::FlyingSpriteEffect::InitAndPresent(float duration, ::UnityEngine::Vector3 targetPos, ::UnityEngine::Quaternion rotation, ::UnityEngine::Sprite* sprite, ::UnityEngine::Material* material, ::UnityEngine::Color color, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(sprite), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, targetPos, rotation, sprite, material, color, shake);
}
// Autogenerated method: FlyingSpriteEffect.ManualUpdate
void GlobalNamespace::FlyingSpriteEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingSpriteEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingTextEffect
#include "GlobalNamespace/FlyingTextEffect.hpp"
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& GlobalNamespace::FlyingTextEffect::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextEffect::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeAnimationCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FlyingTextEffect::dyn__fadeAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextEffect::dyn__fadeAnimationCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeAnimationCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::FlyingTextEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlyingTextEffect.InitAndPresent
void GlobalNamespace::FlyingTextEffect::InitAndPresent(::StringW text, float duration, ::UnityEngine::Vector3 targetPos, ::UnityEngine::Quaternion rotation, ::UnityEngine::Color color, float fontSize, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(fontSize), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text, duration, targetPos, rotation, color, fontSize, shake);
}
// Autogenerated method: FlyingTextEffect.ManualUpdate
void GlobalNamespace::FlyingTextEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlyingTextEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GhostDuplicationEffect
#include "GlobalNamespace/GhostDuplicationEffect.hpp"
// Including type: GhostDuplicationEffect/GhostEffectParams
#include "GlobalNamespace/GhostDuplicationEffect_GhostEffectParams.hpp"
// Including type: GhostDuplicationEffect/<>c__DisplayClass7_0
#include "GlobalNamespace/GhostDuplicationEffect_--c__DisplayClass7_0.hpp"
// Including type: GhostDuplicationEffect/<HideRedundantWithDelay>d__8
#include "GlobalNamespace/GhostDuplicationEffect_-HideRedundantWithDelay-d__8.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup[] _canvases
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::CanvasGroup*>& GlobalNamespace::GhostDuplicationEffect::dyn__canvases() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::dyn__canvases");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvases"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::CanvasGroup*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GhostDuplicationEffect::dyn_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::dyn_isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& GlobalNamespace::GhostDuplicationEffect::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostDuplicationEffect.set_hide
void GlobalNamespace::GhostDuplicationEffect::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.get_size
float GlobalNamespace::GhostDuplicationEffect::get_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::get_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.set_size
void GlobalNamespace::GhostDuplicationEffect::set_size(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::set_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.get_alpha
float GlobalNamespace::GhostDuplicationEffect::get_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::get_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.set_alpha
void GlobalNamespace::GhostDuplicationEffect::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.OnDestroy
void GlobalNamespace::GhostDuplicationEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Awake
void GlobalNamespace::GhostDuplicationEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Init
void GlobalNamespace::GhostDuplicationEffect::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Animate
void GlobalNamespace::GhostDuplicationEffect::Animate(::GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostEffectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ghostEffectParams)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ghostEffectParams);
}
// Autogenerated method: GhostDuplicationEffect.HideRedundantWithDelay
::System::Collections::IEnumerator* GlobalNamespace::GhostDuplicationEffect::HideRedundantWithDelay(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::HideRedundantWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideRedundantWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: GhostDuplicationEffect.SetDistances
void GlobalNamespace::GhostDuplicationEffect::SetDistances(float distance, ::UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::SetDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance, direction);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GhostDuplicationEffect/<>c__DisplayClass7_0
#include "GlobalNamespace/GhostDuplicationEffect_--c__DisplayClass7_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GhostDuplicationEffect <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostDuplicationEffect*& GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostDuplicationEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GhostDuplicationEffect/GhostEffectParams ghostEffectParams
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostDuplicationEffect::GhostEffectParams& GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_ghostEffectParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_ghostEffectParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostEffectParams"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostDuplicationEffect::GhostEffectParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 direction
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_direction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::dyn_direction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "direction"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__0
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__1
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__2
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__2(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__3
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__3(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GhostDuplicationEffect/<HideRedundantWithDelay>d__8
#include "GlobalNamespace/GhostDuplicationEffect_-HideRedundantWithDelay-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GhostDuplicationEffect <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostDuplicationEffect*& GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostDuplicationEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.IDisposable.Dispose
void GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.MoveNext
bool GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelFailedTextEffect
#include "GlobalNamespace/LevelFailedTextEffect.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::LevelFailedTextEffect::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFailedTextEffect::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LevelFailedTextEffect.ShowEffect
void GlobalNamespace::LevelFailedTextEffect::ShowEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFailedTextEffect::ShowEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentLightSimpleController
#include "GlobalNamespace/EnvironmentLightSimpleController.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::EnvironmentLightSimpleController::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentLightSimpleController::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _colorId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EnvironmentLightSimpleController::dyn__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentLightSimpleController::dyn__colorId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::EnvironmentLightSimpleController::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentLightSimpleController::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnvironmentLightSimpleController.LateUpdate
void GlobalNamespace::EnvironmentLightSimpleController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentLightSimpleController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: MenuLightsManager/<Start>d__4
#include "GlobalNamespace/MenuLightsManager_-Start-d__4.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MenuLightsPresetSO _defaultPreset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuLightsPresetSO*& GlobalNamespace::MenuLightsManager::dyn__defaultPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::dyn__defaultPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultPreset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MenuLightsPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MenuLightsManager::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::MenuLightsManager::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MenuLightsPresetSO _preset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuLightsPresetSO*& GlobalNamespace::MenuLightsManager::dyn__preset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::dyn__preset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_preset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MenuLightsPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MenuLightsManager.Start
::System::Collections::IEnumerator* GlobalNamespace::MenuLightsManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager.Update
void GlobalNamespace::MenuLightsManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager.IsColorVeryCloseToColor
bool GlobalNamespace::MenuLightsManager::IsColorVeryCloseToColor(::UnityEngine::Color color0, ::UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::IsColorVeryCloseToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsColorVeryCloseToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, color0, color1);
}
// Autogenerated method: MenuLightsManager.SetColor
void GlobalNamespace::MenuLightsManager::SetColor(int lightId, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lightId, color);
}
// Autogenerated method: MenuLightsManager.CurrentColorForID
::UnityEngine::Color GlobalNamespace::MenuLightsManager::CurrentColorForID(int lightId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::CurrentColorForID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CurrentColorForID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, lightId);
}
// Autogenerated method: MenuLightsManager.SetColorsFromPreset
bool GlobalNamespace::MenuLightsManager::SetColorsFromPreset(::GlobalNamespace::MenuLightsPresetSO* preset, float interpolationFactor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::SetColorsFromPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorsFromPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset), ::il2cpp_utils::ExtractType(interpolationFactor)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, preset, interpolationFactor);
}
// Autogenerated method: MenuLightsManager.RefreshLightsDictForPreset
void GlobalNamespace::MenuLightsManager::RefreshLightsDictForPreset(::GlobalNamespace::MenuLightsPresetSO* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::RefreshLightsDictForPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLightsDictForPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, preset);
}
// Autogenerated method: MenuLightsManager.SetColorPreset
void GlobalNamespace::MenuLightsManager::SetColorPreset(::GlobalNamespace::MenuLightsPresetSO* preset, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::SetColorPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, preset, animated);
}
// Autogenerated method: MenuLightsManager.RefreshColors
void GlobalNamespace::MenuLightsManager::RefreshColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::RefreshColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuLightsManager/<Start>d__4
#include "GlobalNamespace/MenuLightsManager_-Start-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MenuLightsManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuLightsManager*& GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MenuLightsManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.IDisposable.Dispose
void GlobalNamespace::MenuLightsManager::$Start$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.MoveNext
bool GlobalNamespace::MenuLightsManager::$Start$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutHapticEffect
#include "GlobalNamespace/NoteCutHapticEffect.hpp"
// Including type: NoteCutHapticEffect/Type
#include "GlobalNamespace/NoteCutHapticEffect_Type.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _normalPreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::NoteCutHapticEffect::dyn__normalPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::dyn__normalPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalPreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _shortNormalPreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::NoteCutHapticEffect::dyn__shortNormalPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::dyn__shortNormalPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortNormalPreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _shortWeakPreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& GlobalNamespace::NoteCutHapticEffect::dyn__shortWeakPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::dyn__shortWeakPreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shortWeakPreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& GlobalNamespace::NoteCutHapticEffect::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutHapticEffect.HitNote
void GlobalNamespace::NoteCutHapticEffect::HitNote(::GlobalNamespace::SaberType saberType, ::GlobalNamespace::NoteCutHapticEffect::Type type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::HitNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HitNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType), ::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saberType, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutHapticEffect/Type
#include "GlobalNamespace/NoteCutHapticEffect_Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteCutHapticEffect/Type Normal
::GlobalNamespace::NoteCutHapticEffect::Type GlobalNamespace::NoteCutHapticEffect::Type::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutHapticEffect::Type>("", "NoteCutHapticEffect/Type", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutHapticEffect/Type Normal
void GlobalNamespace::NoteCutHapticEffect::Type::_set_Normal(::GlobalNamespace::NoteCutHapticEffect::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutHapticEffect/Type", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutHapticEffect/Type ShortNormal
::GlobalNamespace::NoteCutHapticEffect::Type GlobalNamespace::NoteCutHapticEffect::Type::_get_ShortNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_get_ShortNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutHapticEffect::Type>("", "NoteCutHapticEffect/Type", "ShortNormal"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutHapticEffect/Type ShortNormal
void GlobalNamespace::NoteCutHapticEffect::Type::_set_ShortNormal(::GlobalNamespace::NoteCutHapticEffect::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_set_ShortNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutHapticEffect/Type", "ShortNormal", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutHapticEffect/Type ShortWeak
::GlobalNamespace::NoteCutHapticEffect::Type GlobalNamespace::NoteCutHapticEffect::Type::_get_ShortWeak() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_get_ShortWeak");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NoteCutHapticEffect::Type>("", "NoteCutHapticEffect/Type", "ShortWeak"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutHapticEffect/Type ShortWeak
void GlobalNamespace::NoteCutHapticEffect::Type::_set_ShortWeak(::GlobalNamespace::NoteCutHapticEffect::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::_set_ShortWeak");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutHapticEffect/Type", "ShortWeak", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NoteCutHapticEffect::Type::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::Type::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutParticlesEffect
#include "GlobalNamespace/NoteCutParticlesEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _sparklesPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _explosionPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _explosionCorePS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionCorePS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _explosionPrePassBloomPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPrePassBloomPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPrePassBloomPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPrePassBloomPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _sparklesPSEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesPSEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MainModule _sparklesPSMainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSMainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSMainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesPSMainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.ShapeModule _sparklesPSShapeModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSShapeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesPSShapeModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesPSShapeModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::ShapeModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MinMaxCurve _sparklesLifetimeMinMaxCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MinMaxCurve& GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesLifetimeMinMaxCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__sparklesLifetimeMinMaxCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesLifetimeMinMaxCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MinMaxCurve*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _explosionPSEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPSEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPSEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPSEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _explosionCorePSEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionCorePSEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.MainModule _explosionCorePSMainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSMainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSMainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionCorePSMainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.ShapeModule _explosionCorePSShapeModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSShapeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionCorePSShapeModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionCorePSShapeModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::ShapeModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.ShapeModule _explosionPrePassBloomPSShapeModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPrePassBloomPSShapeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::dyn__explosionPrePassBloomPSShapeModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionPrePassBloomPSShapeModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::ShapeModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutParticlesEffect.Awake
void GlobalNamespace::NoteCutParticlesEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutParticlesEffect.SpawnParticles
void GlobalNamespace::NoteCutParticlesEffect::SpawnParticles(::UnityEngine::Vector3 cutPoint, ::UnityEngine::Vector3 cutNormal, ::UnityEngine::Vector3 saberDir, float saberSpeed, ::UnityEngine::Vector3 noteMovementVec, ::UnityEngine::Color32 color, int sparkleParticlesCount, int explosionParticlesCount, float lifetimeMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutParticlesEffect::SpawnParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(saberDir), ::il2cpp_utils::ExtractType(saberSpeed), ::il2cpp_utils::ExtractType(noteMovementVec), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(sparkleParticlesCount), ::il2cpp_utils::ExtractType(explosionParticlesCount), ::il2cpp_utils::ExtractType(lifetimeMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cutPoint, cutNormal, saberDir, saberSpeed, noteMovementVec, color, sparkleParticlesCount, explosionParticlesCount, lifetimeMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteTrailParticleSystem
#include "GlobalNamespace/NoteTrailParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::NoteTrailParticleSystem::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailParticleSystem::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::NoteTrailParticleSystem::dyn__emitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailParticleSystem::dyn__emitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteTrailParticleSystem.Awake
void GlobalNamespace::NoteTrailParticleSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailParticleSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailParticleSystem.Emit
void GlobalNamespace::NoteTrailParticleSystem::Emit(::UnityEngine::Vector3 startPos, ::UnityEngine::Vector3 endPos, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteTrailParticleSystem::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startPos, endPos, count);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OneTimeLightColorEffect
#include "GlobalNamespace/OneTimeLightColorEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorSO _color
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& GlobalNamespace::OneTimeLightColorEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneTimeLightColorEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneTimeLightColorEffect::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneTimeLightColorEffect::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lightsId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneTimeLightColorEffect::dyn__lightsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneTimeLightColorEffect::dyn__lightsId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightsId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightWithIdManager _lightWithIdManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::OneTimeLightColorEffect::dyn__lightWithIdManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneTimeLightColorEffect::dyn__lightWithIdManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightWithIdManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OneTimeLightColorEffect.Update
void GlobalNamespace::OneTimeLightColorEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneTimeLightColorEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberBurnMarkArea
#include "GlobalNamespace/SaberBurnMarkArea.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer _saberBurnMarkLinePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::SaberBurnMarkArea::dyn__saberBurnMarkLinePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__saberBurnMarkLinePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberBurnMarkLinePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _blackMarkLineRandomOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberBurnMarkArea::dyn__blackMarkLineRandomOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__blackMarkLineRandomOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blackMarkLineRandomOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _textureWidth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberBurnMarkArea::dyn__textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__textureWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textureWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _textureHeight
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberBurnMarkArea::dyn__textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__textureHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textureHeight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _burnMarksFadeOutStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberBurnMarkArea::dyn__burnMarksFadeOutStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__burnMarksFadeOutStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnMarksFadeOutStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader _fadeOutShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SaberBurnMarkArea::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SaberBurnMarkArea::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SaberBurnMarkArea::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _fadeOutStrengthShaderPropertyID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutStrengthShaderPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutStrengthShaderPropertyID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutStrengthShaderPropertyID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber[] _sabers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Saber*>& GlobalNamespace::SaberBurnMarkArea::dyn__sabers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__sabers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sabers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::Saber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Plane _plane
[[deprecated("Use field access instead!")]] ::UnityEngine::Plane& GlobalNamespace::SaberBurnMarkArea::dyn__plane() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__plane");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_plane"))->offset;
  return *reinterpret_cast<::UnityEngine::Plane*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _prevBurnMarkPos
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SaberBurnMarkArea::dyn__prevBurnMarkPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__prevBurnMarkPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBurnMarkPos"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] _prevBurnMarkPosValid
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::SaberBurnMarkArea::dyn__prevBurnMarkPosValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__prevBurnMarkPosValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBurnMarkPosValid"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer[] _lineRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LineRenderer*>& GlobalNamespace::SaberBurnMarkArea::dyn__lineRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__lineRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lineRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::LineRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _camera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::SaberBurnMarkArea::dyn__camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__camera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_camera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _linePoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SaberBurnMarkArea::dyn__linePoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__linePoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_linePoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture[] _renderTextures
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RenderTexture*>& GlobalNamespace::SaberBurnMarkArea::dyn__renderTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__renderTextures");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderTextures"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RenderTexture*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::SaberBurnMarkArea::dyn__emitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__emitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _fadeOutMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::dyn__fadeOutMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberBurnMarkArea.Start
void GlobalNamespace::SaberBurnMarkArea::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDestroy
void GlobalNamespace::SaberBurnMarkArea::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnEnable
void GlobalNamespace::SaberBurnMarkArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDisable
void GlobalNamespace::SaberBurnMarkArea::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos(::UnityEngine::Vector3 bladeBottomPos, ::UnityEngine::Vector3 bladeTopPos, ByRef<::UnityEngine::Vector3> burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, byref(burnMarkPos));
}
// Autogenerated method: SaberBurnMarkArea.WorldToCameraBurnMarkPos
::UnityEngine::Vector3 GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldToCameraBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: SaberBurnMarkArea.LateUpdate
void GlobalNamespace::SaberBurnMarkArea::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkArea::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberBurnMarkSparkles
#include "GlobalNamespace/SaberBurnMarkSparkles.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _sparklesPS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SaberBurnMarkSparkles::dyn__sparklesPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__sparklesPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesPS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _burnMarksPSPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksPSPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksPSPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnMarksPSPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.BoxCollider _boxCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& GlobalNamespace::SaberBurnMarkSparkles::dyn__boxCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__boxCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boxCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::BoxCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::SaberBurnMarkSparkles::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& GlobalNamespace::SaberBurnMarkSparkles::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber[] _sabers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Saber*>& GlobalNamespace::SaberBurnMarkSparkles::dyn__sabers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__sabers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sabers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::Saber*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Plane _plane
[[deprecated("Use field access instead!")]] ::UnityEngine::Plane& GlobalNamespace::SaberBurnMarkSparkles::dyn__plane() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__plane");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_plane"))->offset;
  return *reinterpret_cast<::UnityEngine::Plane*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _prevBurnMarkPos
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SaberBurnMarkSparkles::dyn__prevBurnMarkPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__prevBurnMarkPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBurnMarkPos"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] _prevBurnMarkPosValid
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::SaberBurnMarkSparkles::dyn__prevBurnMarkPosValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__prevBurnMarkPosValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBurnMarkPosValid"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _burnMarksPS
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnMarksPS"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule[] _burnMarksEmissionModules
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksEmissionModules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__burnMarksEmissionModules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_burnMarksEmissionModules"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _sparklesEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::SaberBurnMarkSparkles::dyn__sparklesEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::dyn__sparklesEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sparklesEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberBurnMarkSparkles.Start
void GlobalNamespace::SaberBurnMarkSparkles::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDestroy
void GlobalNamespace::SaberBurnMarkSparkles::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnEnable
void GlobalNamespace::SaberBurnMarkSparkles::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDisable
void GlobalNamespace::SaberBurnMarkSparkles::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos(::UnityEngine::Vector3 bladeBottomPos, ::UnityEngine::Vector3 bladeTopPos, ByRef<::UnityEngine::Vector3> burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, byref(burnMarkPos));
}
// Autogenerated method: SaberBurnMarkSparkles.LateUpdate
void GlobalNamespace::SaberBurnMarkSparkles::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberBurnMarkSparkles::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberTrail
#include "GlobalNamespace/SaberTrail.hpp"
// Including type: SaberTrailRenderer
#include "GlobalNamespace/SaberTrailRenderer.hpp"
// Including type: IBladeMovementData
#include "GlobalNamespace/IBladeMovementData.hpp"
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
// Including type: BladeMovementDataElement
#include "GlobalNamespace/BladeMovementDataElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kIgnoredFramesCount
int GlobalNamespace::SaberTrail::_get_kIgnoredFramesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_get_kIgnoredFramesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kIgnoredFramesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kIgnoredFramesCount
void GlobalNamespace::SaberTrail::_set_kIgnoredFramesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_set_kIgnoredFramesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kIgnoredFramesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kSnapshotCapacityMargin
int GlobalNamespace::SaberTrail::_get_kSnapshotCapacityMargin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_get_kSnapshotCapacityMargin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kSnapshotCapacityMargin"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kSnapshotCapacityMargin
void GlobalNamespace::SaberTrail::_set_kSnapshotCapacityMargin(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_set_kSnapshotCapacityMargin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kSnapshotCapacityMargin", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kScaleCheckFramesInterval
int GlobalNamespace::SaberTrail::_get_kScaleCheckFramesInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_get_kScaleCheckFramesInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kScaleCheckFramesInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kScaleCheckFramesInterval
void GlobalNamespace::SaberTrail::_set_kScaleCheckFramesInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::_set_kScaleCheckFramesInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kScaleCheckFramesInterval", value));
}
// Autogenerated instance field getter
// Get instance field: private SaberTrailRenderer _trailRendererPrefab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberTrailRenderer*& GlobalNamespace::SaberTrail::dyn__trailRendererPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__trailRendererPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailRendererPrefab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberTrailRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _trailDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrail::dyn__trailDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__trailDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _samplingFrequency
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberTrail::dyn__samplingFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__samplingFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_samplingFrequency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _granularity
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberTrail::dyn__granularity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__granularity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_granularity"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _whiteSectionMaxDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrail::dyn__whiteSectionMaxDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__whiteSectionMaxDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_whiteSectionMaxDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _colorOverwrite
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SaberTrail::dyn__colorOverwrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__colorOverwrite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorOverwrite"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _forcedColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SaberTrail::dyn__forcedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__forcedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forcedColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SaberTrail::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IBladeMovementData _movementData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBladeMovementData*& GlobalNamespace::SaberTrail::dyn__movementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__movementData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBladeMovementData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastTrailElementTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrail::dyn__lastTrailElementTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__lastTrailElementTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastTrailElementTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberTrailRenderer _trailRenderer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberTrailRenderer*& GlobalNamespace::SaberTrail::dyn__trailRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__trailRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailRenderer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaberTrailRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TrailElementCollection _trailElementCollection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TrailElementCollection*& GlobalNamespace::SaberTrail::dyn__trailElementCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__trailElementCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailElementCollection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TrailElementCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sampleStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrail::dyn__sampleStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__sampleStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sampleStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _framesPassed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberTrail::dyn__framesPassed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__framesPassed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_framesPassed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastZScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrail::dyn__lastZScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__lastZScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastZScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _framesToScaleCheck
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberTrail::dyn__framesToScaleCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__framesToScaleCheck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_framesToScaleCheck"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _inited
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SaberTrail::dyn__inited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::dyn__inited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberTrail.Awake
void GlobalNamespace::SaberTrail::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.Setup
void GlobalNamespace::SaberTrail::Setup(::UnityEngine::Color color, ::GlobalNamespace::IBladeMovementData* movementData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(movementData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, movementData);
}
// Autogenerated method: SaberTrail.Init
void GlobalNamespace::SaberTrail::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.ResetTrailData
void GlobalNamespace::SaberTrail::ResetTrailData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::ResetTrailData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetTrailData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.LateUpdate
void GlobalNamespace::SaberTrail::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnEnable
void GlobalNamespace::SaberTrail::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnDisable
void GlobalNamespace::SaberTrail::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnDestroy
void GlobalNamespace::SaberTrail::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.GetTrailWidth
float GlobalNamespace::SaberTrail::GetTrailWidth(::GlobalNamespace::BladeMovementDataElement lastAddedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::GetTrailWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrailWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastAddedData)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, lastAddedData);
}
// Autogenerated method: SaberTrail.OnDrawGizmosSelected
void GlobalNamespace::SaberTrail::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrail::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberTrailRenderer
#include "GlobalNamespace/SaberTrailRenderer.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1114980
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Bounds _bounds
::UnityEngine::Bounds GlobalNamespace::SaberTrailRenderer::_get__bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_get__bounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Bounds>("", "SaberTrailRenderer", "_bounds"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Bounds _bounds
void GlobalNamespace::SaberTrailRenderer::_set__bounds(::UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_set__bounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "_bounds", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1114990
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _saberTravelledDistanceId
int GlobalNamespace::SaberTrailRenderer::_get__saberTravelledDistanceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_get__saberTravelledDistanceId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrailRenderer", "_saberTravelledDistanceId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _saberTravelledDistanceId
void GlobalNamespace::SaberTrailRenderer::_set__saberTravelledDistanceId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_set__saberTravelledDistanceId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "_saberTravelledDistanceId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinMotionBlurSpeed
float GlobalNamespace::SaberTrailRenderer::_get_kMinMotionBlurSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_get_kMinMotionBlurSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberTrailRenderer", "kMinMotionBlurSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinMotionBlurSpeed
void GlobalNamespace::SaberTrailRenderer::_set_kMinMotionBlurSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_set_kMinMotionBlurSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "kMinMotionBlurSpeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMotionBlurStrength
float GlobalNamespace::SaberTrailRenderer::_get_kMotionBlurStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_get_kMotionBlurStrength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberTrailRenderer", "kMotionBlurStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMotionBlurStrength
void GlobalNamespace::SaberTrailRenderer::_set_kMotionBlurStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::_set_kMotionBlurStrength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "kMotionBlurStrength", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::SaberTrailRenderer::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::SaberTrailRenderer::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::SaberTrailRenderer::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _vertices
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SaberTrailRenderer::dyn__vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__vertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vertices"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] _indices
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::SaberTrailRenderer::dyn__indices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__indices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_indices"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _uvs
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& GlobalNamespace::SaberTrailRenderer::dyn__uvs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__uvs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uvs"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& GlobalNamespace::SaberTrailRenderer::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _trailWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrailRenderer::dyn__trailWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__trailWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _trailDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrailRenderer::dyn__trailDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__trailDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trailDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _segmentDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrailRenderer::dyn__segmentDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__segmentDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_segmentDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _granularity
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaberTrailRenderer::dyn__granularity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__granularity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_granularity"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _whiteSectionMaxDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SaberTrailRenderer::dyn__whiteSectionMaxDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::dyn__whiteSectionMaxDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_whiteSectionMaxDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberTrailRenderer..cctor
void GlobalNamespace::SaberTrailRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTrailRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.Init
void GlobalNamespace::SaberTrailRenderer::Init(float trailWidth, float trailDuration, int granularity, float whiteSectionMaxDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailWidth), ::il2cpp_utils::ExtractType(trailDuration), ::il2cpp_utils::ExtractType(granularity), ::il2cpp_utils::ExtractType(whiteSectionMaxDuration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, trailWidth, trailDuration, granularity, whiteSectionMaxDuration);
}
// Autogenerated method: SaberTrailRenderer.OnDestroy
void GlobalNamespace::SaberTrailRenderer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnValidate
void GlobalNamespace::SaberTrailRenderer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnEnable
void GlobalNamespace::SaberTrailRenderer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnDisable
void GlobalNamespace::SaberTrailRenderer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.SetTrailWidth
void GlobalNamespace::SaberTrailRenderer::SetTrailWidth(float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::SetTrailWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrailWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, width);
}
// Autogenerated method: SaberTrailRenderer.UpdateMesh
void GlobalNamespace::SaberTrailRenderer::UpdateMesh(::GlobalNamespace::TrailElementCollection* trailElementCollection, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::UpdateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailElementCollection), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, trailElementCollection, color);
}
// Autogenerated method: SaberTrailRenderer.UpdateVertices
void GlobalNamespace::SaberTrailRenderer::UpdateVertices(::GlobalNamespace::TrailElementCollection* trailElementCollection, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::UpdateVertices");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailElementCollection), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, trailElementCollection, color);
}
// Autogenerated method: SaberTrailRenderer.UpdateIndices
void GlobalNamespace::SaberTrailRenderer::UpdateIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaberTrailRenderer::UpdateIndices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIndices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SplineUtils
#include "GlobalNamespace/SplineUtils.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SplineUtils.Interpolate
::UnityEngine::Vector3 GlobalNamespace::SplineUtils::Interpolate(::UnityEngine::Vector3 t0, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 t1, float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineUtils::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SplineUtils", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t0), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t0, p0, p1, t1, f);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrailElement
#include "GlobalNamespace/TrailElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TrailElement::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::dyn_position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 normal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TrailElement::dyn_normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::dyn_normal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "normal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single distance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrailElement::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single localDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrailElement::dyn_localDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::dyn_localDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrailElement::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::dyn_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrailElement.SetData
void GlobalNamespace::TrailElement::SetData(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, end, time);
}
// Autogenerated method: TrailElement.CopyFrom
void GlobalNamespace::TrailElement::CopyFrom(::GlobalNamespace::TrailElement* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::CopyFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TrailElement.SetDistance
void GlobalNamespace::TrailElement::SetDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::SetDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TrailElement.UpdateLocalDistance
void GlobalNamespace::TrailElement::UpdateLocalDistance(::GlobalNamespace::TrailElement* prev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElement::UpdateLocalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prev);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
// Including type: TrailElementCollection/InterpolationState
#include "GlobalNamespace/TrailElementCollection_InterpolationState.hpp"
// Including type: TrailElement
#include "GlobalNamespace/TrailElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _capacity
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrailElementCollection::dyn__capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::dyn__capacity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capacity"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly TrailElement[] _snapshots
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TrailElement*>& GlobalNamespace::TrailElementCollection::dyn__snapshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::dyn__snapshots");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_snapshots"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TrailElement*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _headIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TrailElementCollection::dyn__headIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::dyn__headIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _totalDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TrailElementCollection::dyn__totalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::dyn__totalDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TrailElementCollection.InitSnapshots
void GlobalNamespace::TrailElementCollection::InitSnapshots(::UnityEngine::Vector3 defaultStartPosition, ::UnityEngine::Vector3 defaultEndPosition, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::InitSnapshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitSnapshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultStartPosition), ::il2cpp_utils::ExtractType(defaultEndPosition), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, defaultStartPosition, defaultEndPosition, time);
}
// Autogenerated method: TrailElementCollection.SetHeadData
void GlobalNamespace::TrailElementCollection::SetHeadData(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::SetHeadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHeadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, end, time);
}
// Autogenerated method: TrailElementCollection.MoveTailToHead
void GlobalNamespace::TrailElementCollection::MoveTailToHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::MoveTailToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTailToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.UpdateDistances
void GlobalNamespace::TrailElementCollection::UpdateDistances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::UpdateDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.Interpolate
void GlobalNamespace::TrailElementCollection::Interpolate(float t, ByRef<::GlobalNamespace::TrailElementCollection::InterpolationState> lerpState, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> normal, ByRef<float> time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(lerpState), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, byref(lerpState), byref(position), byref(normal), byref(time));
}
// Autogenerated method: TrailElementCollection.UpdateLerpState
void GlobalNamespace::TrailElementCollection::UpdateLerpState(float t, ByRef<::GlobalNamespace::TrailElementCollection::InterpolationState> interpolationState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::UpdateLerpState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLerpState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(interpolationState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, byref(interpolationState));
}
// Autogenerated method: TrailElementCollection.GetElement
::GlobalNamespace::TrailElement* GlobalNamespace::TrailElementCollection::GetElement(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TrailElementCollection::GetElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TrailElement*, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShockwaveEffect
#include "GlobalNamespace/ShockwaveEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _shockwavePS
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ShockwaveEffect::dyn__shockwavePS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::dyn__shockwavePS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shockwavePS"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IntSO _maxShockwaveParticles
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IntSO*& GlobalNamespace::ShockwaveEffect::dyn__maxShockwaveParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::dyn__maxShockwaveParticles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxShockwaveParticles"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IntSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _shockwavePSEmitParams
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& GlobalNamespace::ShockwaveEffect::dyn__shockwavePSEmitParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::dyn__shockwavePSEmitParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shockwavePSEmitParams"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmitParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevShockwaveParticleSpawnTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ShockwaveEffect::dyn__prevShockwaveParticleSpawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::dyn__prevShockwaveParticleSpawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevShockwaveParticleSpawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShockwaveEffect.Start
void GlobalNamespace::ShockwaveEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShockwaveEffect.SpawnShockwave
void GlobalNamespace::ShockwaveEffect::SpawnShockwave(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShockwaveEffect::SpawnShockwave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnShockwave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnLaserAnimation
#include "GlobalNamespace/SpawnLaserAnimation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _centerThresholdTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SpawnLaserAnimation::dyn__centerThresholdTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__centerThresholdTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centerThresholdTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _horizontalLasersTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SpawnLaserAnimation::dyn__horizontalLasersTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__horizontalLasersTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_horizontalLasersTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _leftHorizontalLaser
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::SpawnLaserAnimation::dyn__leftHorizontalLaser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__leftHorizontalLaser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHorizontalLaser"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight _rightHorizontalLaser
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& GlobalNamespace::SpawnLaserAnimation::dyn__rightHorizontalLaser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__rightHorizontalLaser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHorizontalLaser"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TubeBloomPrePassLight**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _normalizedDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnLaserAnimation::dyn__normalizedDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__normalizedDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalizedDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _alphaMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnLaserAnimation::dyn__alphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__alphaMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alphaMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _laserLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnLaserAnimation::dyn__laserLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__laserLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _centerDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnLaserAnimation::dyn__centerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__centerDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centerDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpawnLaserAnimation::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnLaserAnimation.InitIfNeeded
void GlobalNamespace::SpawnLaserAnimation::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnLaserAnimation.LateUpdate
void GlobalNamespace::SpawnLaserAnimation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnLaserAnimation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BackgroundTextureGradientSwitchEventEffect
#include "GlobalNamespace/BackgroundTextureGradientSwitchEventEffect.hpp"
// Including type: BloomPrePassBackgroundTextureGradient
#include "GlobalNamespace/BloomPrePassBackgroundTextureGradient.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: ColorBoostBeatmapEventData
#include "GlobalNamespace/ColorBoostBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundTextureGradient _defaultTextureGradient
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundTextureGradient*& GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__defaultTextureGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__defaultTextureGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultTextureGradient"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundTextureGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BloomPrePassBackgroundTextureGradient _boostTextureGradient
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundTextureGradient*& GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__boostTextureGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__boostTextureGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boostTextureGradient"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BloomPrePassBackgroundTextureGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BackgroundTextureGradientSwitchEventEffect.Start
void GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BackgroundTextureGradientSwitchEventEffect.OnDestroy
void GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BackgroundTextureGradientSwitchEventEffect.HandleBeatmapEvent
void GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::HandleBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BackgroundTextureGradientSwitchEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameObjectSwitchEventEffect
#include "GlobalNamespace/GameObjectSwitchEventEffect.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: ColorBoostBeatmapEventData
#include "GlobalNamespace/ColorBoostBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _deactivateOnBoostObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GameObjectSwitchEventEffect::dyn__deactivateOnBoostObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::dyn__deactivateOnBoostObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deactivateOnBoostObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _activateOnBoostObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GameObjectSwitchEventEffect::dyn__activateOnBoostObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::dyn__activateOnBoostObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activateOnBoostObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::GameObjectSwitchEventEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::GameObjectSwitchEventEffect::dyn__beatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::dyn__beatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameObjectSwitchEventEffect.Start
void GlobalNamespace::GameObjectSwitchEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameObjectSwitchEventEffect.OnDestroy
void GlobalNamespace::GameObjectSwitchEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameObjectSwitchEventEffect.HandleBeatmapEvent
void GlobalNamespace::GameObjectSwitchEventEffect::HandleBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* basicBeatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::HandleBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basicBeatmapEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, basicBeatmapEventData);
}
// Autogenerated method: GameObjectSwitchEventEffect.ToggleObjects
void GlobalNamespace::GameObjectSwitchEventEffect::ToggleObjects(bool isBoostOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectSwitchEventEffect::ToggleObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isBoostOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isBoostOn);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HeadObstacleLowPassAudioEffect
#include "GlobalNamespace/HeadObstacleLowPassAudioEffect.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: MainAudioEffects
#include "GlobalNamespace/MainAudioEffects.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerHeadAndObstacleInteraction*& GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__playerHeadAndObstacleInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__playerHeadAndObstacleInteraction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerHeadAndObstacleInteraction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlayerHeadAndObstacleInteraction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MainAudioEffects _mainAudioEffects
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MainAudioEffects*& GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__mainAudioEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__mainAudioEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainAudioEffects"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MainAudioEffects**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _headWasInObstacle
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__headWasInObstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadObstacleLowPassAudioEffect::dyn__headWasInObstacle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headWasInObstacle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HeadObstacleLowPassAudioEffect.Update
void GlobalNamespace::HeadObstacleLowPassAudioEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadObstacleLowPassAudioEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorGroup
#include "GlobalNamespace/LightColorGroup.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LightColorGroupParent
#include "GlobalNamespace/LightColorGroupParent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disableAutomaticIdAssignment
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightColorGroup::dyn__disableAutomaticIdAssignment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroup::dyn__disableAutomaticIdAssignment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disableAutomaticIdAssignment"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<LightColorGroupParent> _lightColorGroupParents
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupParent*>*& GlobalNamespace::LightColorGroup::dyn__lightColorGroupParents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroup::dyn__lightColorGroupParents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColorGroupParents"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupParent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorGroupEffect
#include "GlobalNamespace/LightColorGroupEffect.hpp"
// Including type: LightColorGroupEffect/InitData
#include "GlobalNamespace/LightColorGroupEffect_InitData.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: IBpmController
#include "GlobalNamespace/IBpmController.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: LightColorBeatmapEventData
#include "GlobalNamespace/LightColorBeatmapEventData.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1114B20
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color offColor
::UnityEngine::Color GlobalNamespace::LightColorGroupEffect::_get_offColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::_get_offColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color>("", "LightColorGroupEffect", "offColor"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color offColor
void GlobalNamespace::LightColorGroupEffect::_set_offColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::_set_offColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightColorGroupEffect", "offColor", value));
}
// Autogenerated instance field getter
// Get instance field: protected readonly ColorManager _colorManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& GlobalNamespace::LightColorGroupEffect::dyn__colorManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__colorManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ColorManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _lightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightColorGroupEffect::dyn__lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__lightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LightWithIdManager _lightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& GlobalNamespace::LightColorGroupEffect::dyn__lightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__lightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightWithIdManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.SongTimeTweeningManager _tweeningManager
[[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& GlobalNamespace::LightColorGroupEffect::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<::Tweening::SongTimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::LightColorGroupEffect::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBpmController _bpmController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IBpmController*& GlobalNamespace::LightColorGroupEffect::dyn__bpmController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__bpmController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bpmController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IBpmController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.FloatTween _floatTween
[[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& GlobalNamespace::LightColorGroupEffect::dyn__floatTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__floatTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_floatTween"))->offset;
  return *reinterpret_cast<::Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapDataCallbackWrapper _lightColorBeatmapEventCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::LightColorGroupEffect::dyn__lightColorBeatmapEventCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__lightColorBeatmapEventCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColorBeatmapEventCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fromStrobeFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorGroupEffect::dyn__fromStrobeFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__fromStrobeFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fromStrobeFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _toStrobeFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightColorGroupEffect::dyn__toStrobeFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__toStrobeFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toStrobeFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _fromColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightColorGroupEffect::dyn__fromColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__fromColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fromColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _toColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightColorGroupEffect::dyn__toColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__toColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _alternativeFromColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightColorGroupEffect::dyn__alternativeFromColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__alternativeFromColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternativeFromColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _alternativeToColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LightColorGroupEffect::dyn__alternativeToColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__alternativeToColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternativeToColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _usingBoostColors
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LightColorGroupEffect::dyn__usingBoostColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::dyn__usingBoostColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_usingBoostColors"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightColorGroupEffect..cctor
void GlobalNamespace::LightColorGroupEffect::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightColorGroupEffect", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LightColorGroupEffect.Cleanup
void GlobalNamespace::LightColorGroupEffect::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightColorGroupEffect.HandleColorChangeBeatmapEvent
void GlobalNamespace::LightColorGroupEffect::HandleColorChangeBeatmapEvent(::GlobalNamespace::LightColorBeatmapEventData* currentEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::HandleColorChangeBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorChangeBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentEventData);
}
// Autogenerated method: LightColorGroupEffect.UseBoostColors
void GlobalNamespace::LightColorGroupEffect::UseBoostColors(bool useBoostColors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::UseBoostColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UseBoostColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useBoostColors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, useBoostColors);
}
// Autogenerated method: LightColorGroupEffect.GetColor
::UnityEngine::Color GlobalNamespace::LightColorGroupEffect::GetColor(::GlobalNamespace::EnvironmentColorType colorType, bool colorBoost, float brightness) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::GetColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(colorBoost), ::il2cpp_utils::ExtractType(brightness)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, colorType, colorBoost, brightness);
}
// Autogenerated method: LightColorGroupEffect.SetData
void GlobalNamespace::LightColorGroupEffect::SetData(::UnityEngine::Color fromColor, ::UnityEngine::Color toColor, ::UnityEngine::Color alternativeFromColor, ::UnityEngine::Color alternativeToColor, float fromStrobeBeatFrequency, float toStrobeBeatFrequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromColor), ::il2cpp_utils::ExtractType(toColor), ::il2cpp_utils::ExtractType(alternativeFromColor), ::il2cpp_utils::ExtractType(alternativeToColor), ::il2cpp_utils::ExtractType(fromStrobeBeatFrequency), ::il2cpp_utils::ExtractType(toStrobeBeatFrequency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromColor, toColor, alternativeFromColor, alternativeToColor, fromStrobeBeatFrequency, toStrobeBeatFrequency);
}
// Autogenerated method: LightColorGroupEffect.SetColor
void GlobalNamespace::LightColorGroupEffect::SetColor(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorGroupEffect/InitData
#include "GlobalNamespace/LightColorGroupEffect_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 groupId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightColorGroupEffect::InitData::dyn_groupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::InitData::dyn_groupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groupId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 elementId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightColorGroupEffect::InitData::dyn_elementId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::InitData::dyn_elementId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elementId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 lightId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightColorGroupEffect::InitData::dyn_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffect::InitData::dyn_lightId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorGroupEffectManager
#include "GlobalNamespace/LightColorGroupEffectManager.hpp"
// Including type: LightGroup
#include "GlobalNamespace/LightGroup.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: BeatmapDataCallbackWrapper
#include "GlobalNamespace/BeatmapDataCallbackWrapper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LightColorGroupEffect
#include "GlobalNamespace/LightColorGroupEffect.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: ColorBoostBeatmapEventData
#include "GlobalNamespace/ColorBoostBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LightGroup[] _lightGroups
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroup*>& GlobalNamespace::LightColorGroupEffectManager::dyn__lightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::dyn__lightGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightGroups"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightGroup*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapCallbacksController _beatmapCallbacksController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& GlobalNamespace::LightColorGroupEffectManager::dyn__beatmapCallbacksController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::dyn__beatmapCallbacksController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapCallbacksController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapCallbacksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& GlobalNamespace::LightColorGroupEffectManager::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& GlobalNamespace::LightColorGroupEffectManager::dyn__colorBoostBeatmapDataCallbackWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::dyn__colorBoostBeatmapDataCallbackWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorBoostBeatmapDataCallbackWrapper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeatmapDataCallbackWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<LightColorGroupEffect> _lightColorGroupEffects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>*& GlobalNamespace::LightColorGroupEffectManager::dyn__lightColorGroupEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::dyn__lightColorGroupEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightColorGroupEffects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightColorGroupEffectManager.get_lightGroups
::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::LightGroup*>* GlobalNamespace::LightColorGroupEffectManager::get_lightGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::get_lightGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::LightGroup*>*, false>(this, ___internal__method);
}
// Autogenerated method: LightColorGroupEffectManager.Start
void GlobalNamespace::LightColorGroupEffectManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightColorGroupEffectManager.OnDestroy
void GlobalNamespace::LightColorGroupEffectManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightColorGroupEffectManager.HandleColorBoostBeatmapEvent
void GlobalNamespace::LightColorGroupEffectManager::HandleColorBoostBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::HandleColorBoostBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorBoostBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorGroupParent
#include "GlobalNamespace/LightColorGroupParent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightColorHelpers
#include "GlobalNamespace/LightColorHelpers.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightColorHelpers.AdjustColorWithStrobe
::UnityEngine::Color GlobalNamespace::LightColorHelpers::AdjustColorWithStrobe(::UnityEngine::Color fromColor, ::UnityEngine::Color toColor, ::UnityEngine::Color offColor, float t, float fromStrobeFrequency, float toStrobeFrequency, float tweenDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorHelpers::AdjustColorWithStrobe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightColorHelpers", "AdjustColorWithStrobe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromColor), ::il2cpp_utils::ExtractType(toColor), ::il2cpp_utils::ExtractType(offColor), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(fromStrobeFrequency), ::il2cpp_utils::ExtractType(toStrobeFrequency), ::il2cpp_utils::ExtractType(tweenDuration)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromColor, toColor, offColor, t, fromStrobeFrequency, toStrobeFrequency, tweenDuration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: WhiteColorOrAlphaGroupEffect
#include "GlobalNamespace/WhiteColorOrAlphaGroupEffect.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: Tweening.SongTimeTweeningManager
#include "Tweening/SongTimeTweeningManager.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Including type: IBpmController
#include "GlobalNamespace/IBpmController.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
// Including type: LightColorGroupEffect/InitData
#include "GlobalNamespace/LightColorGroupEffect_InitData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Color _defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::WhiteColorOrAlphaGroupEffect::dyn__defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WhiteColorOrAlphaGroupEffect::dyn__defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WhiteColorOrAlphaGroupEffect.GetColor
::UnityEngine::Color GlobalNamespace::WhiteColorOrAlphaGroupEffect::GetColor(::GlobalNamespace::EnvironmentColorType colorType, bool colorBoost, float brightness) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WhiteColorOrAlphaGroupEffect::GetColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(colorBoost), ::il2cpp_utils::ExtractType(brightness)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, colorType, colorBoost, brightness);
}
