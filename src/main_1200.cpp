// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Org.BouncyCastle.X509.Extension.X509ExtensionUtilities
#include "Org/BouncyCastle/X509/Extension/X509ExtensionUtilities.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Object
#include "Org/BouncyCastle/Asn1/Asn1Object.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1OctetString
#include "Org/BouncyCastle/Asn1/Asn1OctetString.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.Extension.X509ExtensionUtilities.FromExtensionValue
Org::BouncyCastle::Asn1::Asn1Object* Org::BouncyCastle::X509::Extension::X509ExtensionUtilities::FromExtensionValue(Org::BouncyCastle::Asn1::Asn1OctetString* extensionValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::Extension::X509ExtensionUtilities::FromExtensionValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509.Extension", "X509ExtensionUtilities", "FromExtensionValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(extensionValue)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::Asn1Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, extensionValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.PemParser
#include "Org/BouncyCastle/X509/PemParser.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Sequence
#include "Org/BouncyCastle/Asn1/Asn1Sequence.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.PemParser.ReadLine
::Il2CppString* Org::BouncyCastle::X509::PemParser::ReadLine(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::PemParser::ReadLine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.PemParser.ReadPemObject
Org::BouncyCastle::Asn1::Asn1Sequence* Org::BouncyCastle::X509::PemParser::ReadPemObject(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::PemParser::ReadPemObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadPemObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::Asn1Sequence*, false>(this, ___internal__method, inStream);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509Certificate
#include "Org/BouncyCastle/X509/X509Certificate.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509CertificateStructure
#include "Org/BouncyCastle/Asn1/X509/X509CertificateStructure.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.BasicConstraints
#include "Org/BouncyCastle/Asn1/X509/BasicConstraints.hpp"
// Including type: Org.BouncyCastle.Crypto.AsymmetricKeyParameter
#include "Org/BouncyCastle/Crypto/AsymmetricKeyParameter.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Name
#include "Org/BouncyCastle/Asn1/X509/X509Name.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Extensions
#include "Org/BouncyCastle/Asn1/X509/X509Extensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_Version
int Org::BouncyCastle::X509::X509Certificate::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_Version");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_SerialNumber
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::X509::X509Certificate::get_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_SerialNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SerialNumber", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Math::BigInteger*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_IssuerDN
Org::BouncyCastle::Asn1::X509::X509Name* Org::BouncyCastle::X509::X509Certificate::get_IssuerDN() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_IssuerDN");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IssuerDN", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Name*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_SubjectDN
Org::BouncyCastle::Asn1::X509::X509Name* Org::BouncyCastle::X509::X509Certificate::get_SubjectDN() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_SubjectDN");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SubjectDN", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Name*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_NotBefore
System::DateTime Org::BouncyCastle::X509::X509Certificate::get_NotBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_NotBefore");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_NotBefore", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_NotAfter
System::DateTime Org::BouncyCastle::X509::X509Certificate::get_NotAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_NotAfter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_NotAfter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.GetSignature
::Array<uint8_t>* Org::BouncyCastle::X509::X509Certificate::GetSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::GetSignature");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSignature", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.get_SigAlgName
::Il2CppString* Org::BouncyCastle::X509::X509Certificate::get_SigAlgName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::get_SigAlgName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SigAlgName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.GetPublicKey
Org::BouncyCastle::Crypto::AsymmetricKeyParameter* Org::BouncyCastle::X509::X509Certificate::GetPublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::GetPublicKey");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPublicKey", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Crypto::AsymmetricKeyParameter*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.GetEncoded
::Array<uint8_t>* Org::BouncyCastle::X509::X509Certificate::GetEncoded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::GetEncoded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEncoded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.GetX509Extensions
Org::BouncyCastle::Asn1::X509::X509Extensions* Org::BouncyCastle::X509::X509Certificate::GetX509Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::GetX509Extensions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetX509Extensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Extensions*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.Equals
bool Org::BouncyCastle::X509::X509Certificate::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(other)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.GetHashCode
int Org::BouncyCastle::X509::X509Certificate::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Certificate.ToString
::Il2CppString* Org::BouncyCastle::X509::X509Certificate::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Certificate::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509CertificateParser
#include "Org/BouncyCastle/X509/X509CertificateParser.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Set
#include "Org/BouncyCastle/Asn1/Asn1Set.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Org.BouncyCastle.X509.PemParser
#include "Org/BouncyCastle/X509/PemParser.hpp"
// Including type: Org.BouncyCastle.X509.X509Certificate
#include "Org/BouncyCastle/X509/X509Certificate.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1InputStream
#include "Org/BouncyCastle/Asn1/Asn1InputStream.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509CertificateStructure
#include "Org/BouncyCastle/Asn1/X509/X509CertificateStructure.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly Org.BouncyCastle.X509.PemParser PemCertParser
Org::BouncyCastle::X509::PemParser* Org::BouncyCastle::X509::X509CertificateParser::_get_PemCertParser() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::_get_PemCertParser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::X509::PemParser*>("Org.BouncyCastle.X509", "X509CertificateParser", "PemCertParser"));
}
// Autogenerated static field setter
// Set static field: static private readonly Org.BouncyCastle.X509.PemParser PemCertParser
void Org::BouncyCastle::X509::X509CertificateParser::_set_PemCertParser(Org::BouncyCastle::X509::PemParser* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::_set_PemCertParser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.X509", "X509CertificateParser", "PemCertParser", value));
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadDerCertificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::ReadDerCertificate(Org::BouncyCastle::Asn1::Asn1InputStream* dIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadDerCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadDerCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dIn)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method, dIn);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.GetCertificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::GetCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::GetCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadPemCertificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::ReadPemCertificate(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadPemCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadPemCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.CreateX509Certificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::CreateX509Certificate(Org::BouncyCastle::Asn1::X509::X509CertificateStructure* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::CreateX509Certificate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateX509Certificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(c)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method, c);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadCertificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::ReadCertificate(::Array<uint8_t>* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method, input);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadCertificates
System::Collections::ICollection* Org::BouncyCastle::X509::X509CertificateParser::ReadCertificates(::Array<uint8_t>* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadCertificates");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCertificates", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::ICollection*, false>(this, ___internal__method, input);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadCertificate
Org::BouncyCastle::X509::X509Certificate* Org::BouncyCastle::X509::X509CertificateParser::ReadCertificate(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Certificate*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser.ReadCertificates
System::Collections::ICollection* Org::BouncyCastle::X509::X509CertificateParser::ReadCertificates(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::ReadCertificates");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCertificates", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::ICollection*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CertificateParser..cctor
void Org::BouncyCastle::X509::X509CertificateParser::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CertificateParser::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509CertificateParser", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509Crl
#include "Org/BouncyCastle/X509/X509Crl.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.CertificateList
#include "Org/BouncyCastle/Asn1/X509/CertificateList.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Name
#include "Org/BouncyCastle/Asn1/X509/X509Name.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Org.BouncyCastle.Utilities.Date.DateTimeObject
#include "Org/BouncyCastle/Utilities/Date/DateTimeObject.hpp"
// Including type: Org.BouncyCastle.Utilities.Collections.ISet
#include "Org/BouncyCastle/Utilities/Collections/ISet.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Extensions
#include "Org/BouncyCastle/Asn1/X509/X509Extensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_Version
int Org::BouncyCastle::X509::X509Crl::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_Version");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_IssuerDN
Org::BouncyCastle::Asn1::X509::X509Name* Org::BouncyCastle::X509::X509Crl::get_IssuerDN() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_IssuerDN");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IssuerDN", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Name*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_ThisUpdate
System::DateTime Org::BouncyCastle::X509::X509Crl::get_ThisUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_ThisUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_ThisUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_NextUpdate
Org::BouncyCastle::Utilities::Date::DateTimeObject* Org::BouncyCastle::X509::X509Crl::get_NextUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_NextUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_NextUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Utilities::Date::DateTimeObject*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.LoadCrlEntries
Org::BouncyCastle::Utilities::Collections::ISet* Org::BouncyCastle::X509::X509Crl::LoadCrlEntries() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::LoadCrlEntries");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadCrlEntries", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Utilities::Collections::ISet*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.GetRevokedCertificates
Org::BouncyCastle::Utilities::Collections::ISet* Org::BouncyCastle::X509::X509Crl::GetRevokedCertificates() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::GetRevokedCertificates");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRevokedCertificates", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Utilities::Collections::ISet*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.GetSignature
::Array<uint8_t>* Org::BouncyCastle::X509::X509Crl::GetSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::GetSignature");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSignature", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_SigAlgName
::Il2CppString* Org::BouncyCastle::X509::X509Crl::get_SigAlgName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_SigAlgName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SigAlgName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.get_IsIndirectCrl
bool Org::BouncyCastle::X509::X509Crl::get_IsIndirectCrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::get_IsIndirectCrl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsIndirectCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.GetX509Extensions
Org::BouncyCastle::Asn1::X509::X509Extensions* Org::BouncyCastle::X509::X509Crl::GetX509Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::GetX509Extensions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetX509Extensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Extensions*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.Equals
bool Org::BouncyCastle::X509::X509Crl::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(other)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.GetHashCode
int Org::BouncyCastle::X509::X509Crl::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509Crl.ToString
::Il2CppString* Org::BouncyCastle::X509::X509Crl::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509Crl::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509CrlEntry
#include "Org/BouncyCastle/X509/X509CrlEntry.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.CrlEntry
#include "Org/BouncyCastle/Asn1/X509/CrlEntry.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Name
#include "Org/BouncyCastle/Asn1/X509/X509Name.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Extensions
#include "Org/BouncyCastle/Asn1/X509/X509Extensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.loadCertificateIssuer
Org::BouncyCastle::Asn1::X509::X509Name* Org::BouncyCastle::X509::X509CrlEntry::loadCertificateIssuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::loadCertificateIssuer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "loadCertificateIssuer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Name*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.GetCertificateIssuer
Org::BouncyCastle::Asn1::X509::X509Name* Org::BouncyCastle::X509::X509CrlEntry::GetCertificateIssuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::GetCertificateIssuer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCertificateIssuer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Name*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.get_SerialNumber
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::X509::X509CrlEntry::get_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::get_SerialNumber");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SerialNumber", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Math::BigInteger*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.get_RevocationDate
System::DateTime Org::BouncyCastle::X509::X509CrlEntry::get_RevocationDate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::get_RevocationDate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_RevocationDate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.GetX509Extensions
Org::BouncyCastle::Asn1::X509::X509Extensions* Org::BouncyCastle::X509::X509CrlEntry::GetX509Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::GetX509Extensions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetX509Extensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Extensions*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.Equals
bool Org::BouncyCastle::X509::X509CrlEntry::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(other)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.GetHashCode
int Org::BouncyCastle::X509::X509CrlEntry::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlEntry.ToString
::Il2CppString* Org::BouncyCastle::X509::X509CrlEntry::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlEntry::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509CrlParser
#include "Org/BouncyCastle/X509/X509CrlParser.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Set
#include "Org/BouncyCastle/Asn1/Asn1Set.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Org.BouncyCastle.X509.PemParser
#include "Org/BouncyCastle/X509/PemParser.hpp"
// Including type: Org.BouncyCastle.X509.X509Crl
#include "Org/BouncyCastle/X509/X509Crl.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1InputStream
#include "Org/BouncyCastle/Asn1/Asn1InputStream.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.CertificateList
#include "Org/BouncyCastle/Asn1/X509/CertificateList.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly Org.BouncyCastle.X509.PemParser PemCrlParser
Org::BouncyCastle::X509::PemParser* Org::BouncyCastle::X509::X509CrlParser::_get_PemCrlParser() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::_get_PemCrlParser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::X509::PemParser*>("Org.BouncyCastle.X509", "X509CrlParser", "PemCrlParser"));
}
// Autogenerated static field setter
// Set static field: static private readonly Org.BouncyCastle.X509.PemParser PemCrlParser
void Org::BouncyCastle::X509::X509CrlParser::_set_PemCrlParser(Org::BouncyCastle::X509::PemParser* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::_set_PemCrlParser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.X509", "X509CrlParser", "PemCrlParser", value));
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.ReadPemCrl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::ReadPemCrl(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::ReadPemCrl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadPemCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.ReadDerCrl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::ReadDerCrl(Org::BouncyCastle::Asn1::Asn1InputStream* dIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::ReadDerCrl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadDerCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dIn)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method, dIn);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.GetCrl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::GetCrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::GetCrl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.CreateX509Crl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::CreateX509Crl(Org::BouncyCastle::Asn1::X509::CertificateList* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::CreateX509Crl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateX509Crl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(c)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method, c);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.ReadCrl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::ReadCrl(::Array<uint8_t>* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::ReadCrl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method, input);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser.ReadCrl
Org::BouncyCastle::X509::X509Crl* Org::BouncyCastle::X509::X509CrlParser::ReadCrl(System::IO::Stream* inStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::ReadCrl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadCrl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStream)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::X509::X509Crl*, false>(this, ___internal__method, inStream);
}
// Autogenerated method: Org.BouncyCastle.X509.X509CrlParser..cctor
void Org::BouncyCastle::X509::X509CrlParser::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509CrlParser::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509CrlParser", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509SignatureUtilities
#include "Org/BouncyCastle/X509/X509SignatureUtilities.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Null
#include "Org/BouncyCastle/Asn1/Asn1Null.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier
#include "Org/BouncyCastle/Asn1/X509/AlgorithmIdentifier.hpp"
// Including type: Org.BouncyCastle.Asn1.DerObjectIdentifier
#include "Org/BouncyCastle/Asn1/DerObjectIdentifier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly Org.BouncyCastle.Asn1.Asn1Null derNull
Org::BouncyCastle::Asn1::Asn1Null* Org::BouncyCastle::X509::X509SignatureUtilities::_get_derNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509SignatureUtilities::_get_derNull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Asn1::Asn1Null*>("Org.BouncyCastle.X509", "X509SignatureUtilities", "derNull"));
}
// Autogenerated static field setter
// Set static field: static private readonly Org.BouncyCastle.Asn1.Asn1Null derNull
void Org::BouncyCastle::X509::X509SignatureUtilities::_set_derNull(Org::BouncyCastle::Asn1::Asn1Null* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509SignatureUtilities::_set_derNull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.X509", "X509SignatureUtilities", "derNull", value));
}
// Autogenerated method: Org.BouncyCastle.X509.X509SignatureUtilities.GetSignatureName
::Il2CppString* Org::BouncyCastle::X509::X509SignatureUtilities::GetSignatureName(Org::BouncyCastle::Asn1::X509::AlgorithmIdentifier* sigAlgId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509SignatureUtilities::GetSignatureName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509SignatureUtilities", "GetSignatureName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sigAlgId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sigAlgId);
}
// Autogenerated method: Org.BouncyCastle.X509.X509SignatureUtilities.GetDigestAlgName
::Il2CppString* Org::BouncyCastle::X509::X509SignatureUtilities::GetDigestAlgName(Org::BouncyCastle::Asn1::DerObjectIdentifier* digestAlgOID) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509SignatureUtilities::GetDigestAlgName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509SignatureUtilities", "GetDigestAlgName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(digestAlgOID)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, digestAlgOID);
}
// Autogenerated method: Org.BouncyCastle.X509.X509SignatureUtilities..cctor
void Org::BouncyCastle::X509::X509SignatureUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509SignatureUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509SignatureUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.X509.X509V2AttributeCertificate
#include "Org/BouncyCastle/X509/X509V2AttributeCertificate.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.AttributeCertificate
#include "Org/BouncyCastle/Asn1/X509/AttributeCertificate.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Org.BouncyCastle.Asn1.X509.X509Extensions
#include "Org/BouncyCastle/Asn1/X509/X509Extensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.X509.X509V2AttributeCertificate.GetObject
Org::BouncyCastle::Asn1::X509::AttributeCertificate* Org::BouncyCastle::X509::X509V2AttributeCertificate::GetObject(System::IO::Stream* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509V2AttributeCertificate::GetObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.X509", "X509V2AttributeCertificate", "GetObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::AttributeCertificate*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input);
}
// Autogenerated method: Org.BouncyCastle.X509.X509V2AttributeCertificate.GetX509Extensions
Org::BouncyCastle::Asn1::X509::X509Extensions* Org::BouncyCastle::X509::X509V2AttributeCertificate::GetX509Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509V2AttributeCertificate::GetX509Extensions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetX509Extensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Asn1::X509::X509Extensions*, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.X509.X509V2AttributeCertificate.Equals
bool Org::BouncyCastle::X509::X509V2AttributeCertificate::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509V2AttributeCertificate::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(obj)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Org.BouncyCastle.X509.X509V2AttributeCertificate.GetHashCode
int Org::BouncyCastle::X509::X509V2AttributeCertificate::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::X509::X509V2AttributeCertificate::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSO.get_color
UnityEngine::Color GlobalNamespace::ColorSO::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSO::get_color");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: ColorSchemeSO
#include "GlobalNamespace/ColorSchemeSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorScheme.get_colorSchemeId
::Il2CppString* GlobalNamespace::ColorScheme::get_colorSchemeId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_colorSchemeId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_colorSchemeId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_colorSchemeName
::Il2CppString* GlobalNamespace::ColorScheme::get_colorSchemeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_colorSchemeName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_colorSchemeName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_isEditable
bool GlobalNamespace::ColorScheme::get_isEditable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_isEditable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isEditable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_saberAColor
UnityEngine::Color GlobalNamespace::ColorScheme::get_saberAColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_saberAColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_saberAColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_saberBColor
UnityEngine::Color GlobalNamespace::ColorScheme::get_saberBColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_saberBColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_saberBColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_environmentColor0
UnityEngine::Color GlobalNamespace::ColorScheme::get_environmentColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_environmentColor0");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_environmentColor0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_environmentColor1
UnityEngine::Color GlobalNamespace::ColorScheme::get_environmentColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_environmentColor1");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_environmentColor1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_supportsEnvironmentColorBoost
bool GlobalNamespace::ColorScheme::get_supportsEnvironmentColorBoost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_supportsEnvironmentColorBoost");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_supportsEnvironmentColorBoost", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_environmentColor0Boost
UnityEngine::Color GlobalNamespace::ColorScheme::get_environmentColor0Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_environmentColor0Boost");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_environmentColor0Boost", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_environmentColor1Boost
UnityEngine::Color GlobalNamespace::ColorScheme::get_environmentColor1Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_environmentColor1Boost");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_environmentColor1Boost", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorScheme.get_obstaclesColor
UnityEngine::Color GlobalNamespace::ColorScheme::get_obstaclesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorScheme::get_obstaclesColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_obstaclesColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeSO
#include "GlobalNamespace/ColorSchemeSO.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeSO.get_colorScheme
GlobalNamespace::ColorScheme* GlobalNamespace::ColorSchemeSO::get_colorScheme() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeSO::get_colorScheme");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_colorScheme", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorScheme*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSchemesListSO
#include "GlobalNamespace/ColorSchemesListSO.hpp"
// Including type: ColorSchemeSO
#include "GlobalNamespace/ColorSchemeSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemesListSO.get_colorSchemes
::Array<GlobalNamespace::ColorSchemeSO*>* GlobalNamespace::ColorSchemesListSO::get_colorSchemes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemesListSO::get_colorSchemes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_colorSchemes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::ColorSchemeSO*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultipliedAndAddedColorSO
#include "GlobalNamespace/MultipliedAndAddedColorSO.hpp"
// Including type: SimpleColorSO
#include "GlobalNamespace/SimpleColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultipliedAndAddedColorSO.get_color
UnityEngine::Color GlobalNamespace::MultipliedAndAddedColorSO::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultipliedAndAddedColorSO::get_color");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultipliedColorSO
#include "GlobalNamespace/MultipliedColorSO.hpp"
// Including type: SimpleColorSO
#include "GlobalNamespace/SimpleColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultipliedColorSO.get_color
UnityEngine::Color GlobalNamespace::MultipliedColorSO::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultipliedColorSO::get_color");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleColorSO
#include "GlobalNamespace/SimpleColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleColorSO.SetColor
void GlobalNamespace::SimpleColorSO::SetColor(UnityEngine::Color c) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleColorSO::SetColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(c)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: SimpleColorSO.get_color
UnityEngine::Color GlobalNamespace::SimpleColorSO::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleColorSO::get_color");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LayerMasks
#include "GlobalNamespace/LayerMasks.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4AC
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.LayerMask saberLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::_get_saberLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_saberLayerMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LayerMask>("", "LayerMasks", "saberLayerMask"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.LayerMask saberLayerMask
void GlobalNamespace::LayerMasks::_set_saberLayerMask(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_saberLayerMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "saberLayerMask", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4BC
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.LayerMask noteLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::_get_noteLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_noteLayerMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LayerMask>("", "LayerMasks", "noteLayerMask"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.LayerMask noteLayerMask
void GlobalNamespace::LayerMasks::_set_noteLayerMask(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_noteLayerMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "noteLayerMask", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4CC
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.LayerMask noteDebrisLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::_get_noteDebrisLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_noteDebrisLayerMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LayerMask>("", "LayerMasks", "noteDebrisLayerMask"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.LayerMask noteDebrisLayerMask
void GlobalNamespace::LayerMasks::_set_noteDebrisLayerMask(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_noteDebrisLayerMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "noteDebrisLayerMask", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4DC
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.LayerMask cutEffectParticlesLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::_get_cutEffectParticlesLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_cutEffectParticlesLayerMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LayerMask>("", "LayerMasks", "cutEffectParticlesLayerMask"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.LayerMask cutEffectParticlesLayerMask
void GlobalNamespace::LayerMasks::_set_cutEffectParticlesLayerMask(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_cutEffectParticlesLayerMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "cutEffectParticlesLayerMask", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4EC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 noteDebrisLayer
int GlobalNamespace::LayerMasks::_get_noteDebrisLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_noteDebrisLayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LayerMasks", "noteDebrisLayer"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 noteDebrisLayer
void GlobalNamespace::LayerMasks::_set_noteDebrisLayer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_noteDebrisLayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "noteDebrisLayer", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xCFF4FC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 cutEffectParticlesLayer
int GlobalNamespace::LayerMasks::_get_cutEffectParticlesLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_get_cutEffectParticlesLayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LayerMasks", "cutEffectParticlesLayer"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 cutEffectParticlesLayer
void GlobalNamespace::LayerMasks::_set_cutEffectParticlesLayer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::_set_cutEffectParticlesLayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LayerMasks", "cutEffectParticlesLayer", value));
}
// Autogenerated method: LayerMasks.GetLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::GetLayerMask(::Il2CppString* layerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::GetLayerMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "LayerMasks", "GetLayerMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerName)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerName);
}
// Autogenerated method: LayerMasks.GetLayerMask
UnityEngine::LayerMask GlobalNamespace::LayerMasks::GetLayerMask(int layerNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::GetLayerMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "LayerMasks", "GetLayerMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerNum)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNum);
}
// Autogenerated method: LayerMasks.GetLayer
int GlobalNamespace::LayerMasks::GetLayer(::Il2CppString* layerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::GetLayer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "LayerMasks", "GetLayer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerName)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerName);
}
// Autogenerated method: LayerMasks..cctor
void GlobalNamespace::LayerMasks::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LayerMasks::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "LayerMasks", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone
#include "GlobalNamespace/DynamicBone.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: DynamicBone/Particle
#include "GlobalNamespace/DynamicBone_Particle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: DynamicBoneColliderBase
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBone.Start
void GlobalNamespace::DynamicBone::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.FixedUpdate
void GlobalNamespace::DynamicBone::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.Update
void GlobalNamespace::DynamicBone::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.LateUpdate
void GlobalNamespace::DynamicBone::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.PreUpdate
void GlobalNamespace::DynamicBone::PreUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::PreUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PreUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.CheckDistance
void GlobalNamespace::DynamicBone::CheckDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::CheckDistance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CheckDistance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.OnEnable
void GlobalNamespace::DynamicBone::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.OnDisable
void GlobalNamespace::DynamicBone::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.OnValidate
void GlobalNamespace::DynamicBone::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::OnValidate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.OnDrawGizmosSelected
void GlobalNamespace::DynamicBone::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.SetWeight
void GlobalNamespace::DynamicBone::SetWeight(float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::SetWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(w)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, w);
}
// Autogenerated method: DynamicBone.GetWeight
float GlobalNamespace::DynamicBone::GetWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::GetWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.UpdateDynamicBones
void GlobalNamespace::DynamicBone::UpdateDynamicBones(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateDynamicBones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateDynamicBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: DynamicBone.SetupParticles
void GlobalNamespace::DynamicBone::SetupParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::SetupParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetupParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.AppendParticles
void GlobalNamespace::DynamicBone::AppendParticles(UnityEngine::Transform* b, int parentIndex, float boneLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::AppendParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AppendParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(b, parentIndex, boneLength)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, b, parentIndex, boneLength);
}
// Autogenerated method: DynamicBone.UpdateParameters
void GlobalNamespace::DynamicBone::UpdateParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateParameters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateParameters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.InitTransforms
void GlobalNamespace::DynamicBone::InitTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::InitTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.ResetParticlesPosition
void GlobalNamespace::DynamicBone::ResetParticlesPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::ResetParticlesPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetParticlesPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.UpdateParticles1
void GlobalNamespace::DynamicBone::UpdateParticles1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateParticles1");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateParticles1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.UpdateParticles2
void GlobalNamespace::DynamicBone::UpdateParticles2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateParticles2");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateParticles2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.SkipUpdateParticles
void GlobalNamespace::DynamicBone::SkipUpdateParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::SkipUpdateParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SkipUpdateParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBone.MirrorVector
UnityEngine::Vector3 GlobalNamespace::DynamicBone::MirrorVector(UnityEngine::Vector3 v, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::MirrorVector");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "DynamicBone", "MirrorVector", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v, axis)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v, axis);
}
// Autogenerated method: DynamicBone.ApplyParticlesToTransforms
void GlobalNamespace::DynamicBone::ApplyParticlesToTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::ApplyParticlesToTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ApplyParticlesToTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/UpdateMode
#include "GlobalNamespace/DynamicBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode Normal
GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode Normal
void GlobalNamespace::DynamicBone::UpdateMode::_set_Normal(GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode AnimatePhysics
GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_AnimatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_get_AnimatePhysics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "AnimatePhysics"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode AnimatePhysics
void GlobalNamespace::DynamicBone::UpdateMode::_set_AnimatePhysics(GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_set_AnimatePhysics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "AnimatePhysics", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode UnscaledTime
GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_UnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_get_UnscaledTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "UnscaledTime"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode UnscaledTime
void GlobalNamespace::DynamicBone::UpdateMode::_set_UnscaledTime(GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::UpdateMode::_set_UnscaledTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "UnscaledTime", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/FreezeAxis
#include "GlobalNamespace/DynamicBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis None
GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "None"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis None
void GlobalNamespace::DynamicBone::FreezeAxis::_set_None(GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "None", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis X
GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "X"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis X
void GlobalNamespace::DynamicBone::FreezeAxis::_set_X(GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "X", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis Y
GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "Y"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis Y
void GlobalNamespace::DynamicBone::FreezeAxis::_set_Y(GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis Z
GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "Z"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis Z
void GlobalNamespace::DynamicBone::FreezeAxis::_set_Z(GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBone::FreezeAxis::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "Z", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/Particle
#include "GlobalNamespace/DynamicBone_Particle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneCollider
#include "GlobalNamespace/DynamicBoneCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBoneCollider.OnValidate
void GlobalNamespace::DynamicBoneCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::OnValidate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBoneCollider.OutsideSphere
void GlobalNamespace::DynamicBoneCollider::OutsideSphere(UnityEngine::Vector3& particlePosition, float particleRadius, UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::OutsideSphere");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "OutsideSphere", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius, sphereCenter, sphereRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, particlePosition, particleRadius, sphereCenter, sphereRadius);
}
// Autogenerated method: DynamicBoneCollider.InsideSphere
void GlobalNamespace::DynamicBoneCollider::InsideSphere(UnityEngine::Vector3& particlePosition, float particleRadius, UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::InsideSphere");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "InsideSphere", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius, sphereCenter, sphereRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, particlePosition, particleRadius, sphereCenter, sphereRadius);
}
// Autogenerated method: DynamicBoneCollider.OutsideCapsule
void GlobalNamespace::DynamicBoneCollider::OutsideCapsule(UnityEngine::Vector3& particlePosition, float particleRadius, UnityEngine::Vector3 capsuleP0, UnityEngine::Vector3 capsuleP1, float capsuleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::OutsideCapsule");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "OutsideCapsule", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius, capsuleP0, capsuleP1, capsuleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, particlePosition, particleRadius, capsuleP0, capsuleP1, capsuleRadius);
}
// Autogenerated method: DynamicBoneCollider.InsideCapsule
void GlobalNamespace::DynamicBoneCollider::InsideCapsule(UnityEngine::Vector3& particlePosition, float particleRadius, UnityEngine::Vector3 capsuleP0, UnityEngine::Vector3 capsuleP1, float capsuleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::InsideCapsule");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "InsideCapsule", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius, capsuleP0, capsuleP1, capsuleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, particlePosition, particleRadius, capsuleP0, capsuleP1, capsuleRadius);
}
// Autogenerated method: DynamicBoneCollider.OnDrawGizmosSelected
void GlobalNamespace::DynamicBoneCollider::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBoneCollider.Collide
void GlobalNamespace::DynamicBoneCollider::Collide(UnityEngine::Vector3& particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneCollider::Collide");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particlePosition, particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBoneColliderBase.Collide
void GlobalNamespace::DynamicBoneColliderBase::Collide(UnityEngine::Vector3& particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Collide");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particlePosition, particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase/Direction
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction X
GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "X"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction X
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_X(GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "X", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction Y
GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "Y"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction Y
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Y(GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction Z
GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "Z"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction Z
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Z(GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "Z", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase/Bound
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Bound Outside
GlobalNamespace::DynamicBoneColliderBase::Bound GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Outside() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Outside");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBoneColliderBase::Bound>("", "DynamicBoneColliderBase/Bound", "Outside"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Bound Outside
void GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Outside(GlobalNamespace::DynamicBoneColliderBase::Bound value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Outside");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Bound", "Outside", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Bound Inside
GlobalNamespace::DynamicBoneColliderBase::Bound GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Inside() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Inside");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DynamicBoneColliderBase::Bound>("", "DynamicBoneColliderBase/Bound", "Inside"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Bound Inside
void GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Inside(GlobalNamespace::DynamicBoneColliderBase::Bound value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Inside");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Bound", "Inside", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBonePlaneCollider
#include "GlobalNamespace/DynamicBonePlaneCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBonePlaneCollider.OnValidate
void GlobalNamespace::DynamicBonePlaneCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBonePlaneCollider::OnValidate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.OnDrawGizmosSelected
void GlobalNamespace::DynamicBonePlaneCollider::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBonePlaneCollider::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.Collide
void GlobalNamespace::DynamicBonePlaneCollider::Collide(UnityEngine::Vector3& particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DynamicBonePlaneCollider::Collide");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particlePosition, particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Baker
#include "RootMotion/Baker.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Baker.OpenUserManual
void RootMotion::Baker::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OpenScriptReference
void RootMotion::Baker::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.SupportGroup
void RootMotion::Baker::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.ASThread
void RootMotion::Baker::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.get_isBaking
bool RootMotion::Baker::get_isBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::get_isBaking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_isBaking
void RootMotion::Baker::set_isBaking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::set_isBaking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_isBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.get_bakingProgress
float RootMotion::Baker::get_bakingProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::get_bakingProgress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_bakingProgress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_bakingProgress
void RootMotion::Baker::set_bakingProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::set_bakingProgress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_bakingProgress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.GetCharacterRoot
UnityEngine::Transform* RootMotion::Baker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OnStartBaking
void RootMotion::Baker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OnSetLoopFrame
void RootMotion::Baker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.Baker.OnSetCurves
void RootMotion::Baker::OnSetCurves(UnityEngine::AnimationClip*& clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: RootMotion.Baker.OnSetKeyframes
void RootMotion::Baker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, lastFrame)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated method: RootMotion.Baker.get_clipLength
float RootMotion::Baker::get_clipLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::get_clipLength");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_clipLength", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_clipLength
void RootMotion::Baker::set_clipLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::set_clipLength");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_clipLength", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.BakeClip
void RootMotion::Baker::BakeClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::BakeClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BakeClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.StartBaking
void RootMotion::Baker::StartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::StartBaking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StartBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.StopBaking
void RootMotion::Baker::StopBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::StopBaking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StopBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Baker/Mode
#include "RootMotion/Baker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/Mode AnimationClips
RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_AnimationClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_get_AnimationClips");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "AnimationClips"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/Mode AnimationClips
void RootMotion::Baker::Mode::_set_AnimationClips(RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_set_AnimationClips");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "AnimationClips", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/Mode AnimationStates
RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_AnimationStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_get_AnimationStates");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "AnimationStates"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/Mode AnimationStates
void RootMotion::Baker::Mode::_set_AnimationStates(RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_set_AnimationStates");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "AnimationStates", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/Mode PlayableDirector
RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_PlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_get_PlayableDirector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "PlayableDirector"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/Mode PlayableDirector
void RootMotion::Baker::Mode::_set_PlayableDirector(RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_set_PlayableDirector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "PlayableDirector", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/Mode Realtime
RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_Realtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_get_Realtime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "Realtime"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/Mode Realtime
void RootMotion::Baker::Mode::_set_Realtime(RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::Mode::_set_Realtime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "Realtime", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.GenericBaker
#include "RootMotion/GenericBaker.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.BakerTransform
#include "RootMotion/BakerTransform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.GenericBaker.Awake
void RootMotion::GenericBaker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.IsIgnored
bool RootMotion::GenericBaker::IsIgnored(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::IsIgnored");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsIgnored", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.GenericBaker.BakePosition
bool RootMotion::GenericBaker::BakePosition(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::BakePosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BakePosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.GenericBaker.GetCharacterRoot
UnityEngine::Transform* RootMotion::GenericBaker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.OnStartBaking
void RootMotion::GenericBaker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.OnSetLoopFrame
void RootMotion::GenericBaker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.GenericBaker.OnSetCurves
void RootMotion::GenericBaker::OnSetCurves(UnityEngine::AnimationClip*& clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: RootMotion.GenericBaker.OnSetKeyframes
void RootMotion::GenericBaker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::GenericBaker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, lastFrame)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.TQ
#include "RootMotion/TQ.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.AvatarUtility
#include "RootMotion/AvatarUtility.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Avatar
#include "UnityEngine/Avatar.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: RootMotion.TQ
#include "RootMotion/TQ.hpp"
// Including type: UnityEngine.HumanBodyBones
#include "UnityEngine/HumanBodyBones.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.AvatarUtility.GetPostRotation
UnityEngine::Quaternion RootMotion::AvatarUtility::GetPostRotation(UnityEngine::Avatar* avatar, UnityEngine::AvatarIKGoal avatarIKGoal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AvatarUtility::GetPostRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "GetPostRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(avatar, avatarIKGoal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, avatar, avatarIKGoal);
}
// Autogenerated method: RootMotion.AvatarUtility.GetIKGoalTQ
RootMotion::TQ* RootMotion::AvatarUtility::GetIKGoalTQ(UnityEngine::Avatar* avatar, float humanScale, UnityEngine::AvatarIKGoal avatarIKGoal, RootMotion::TQ* bodyPositionRotation, RootMotion::TQ* boneTQ) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AvatarUtility::GetIKGoalTQ");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "GetIKGoalTQ", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(avatar, humanScale, avatarIKGoal, bodyPositionRotation, boneTQ)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::TQ*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, avatar, humanScale, avatarIKGoal, bodyPositionRotation, boneTQ);
}
// Autogenerated method: RootMotion.AvatarUtility.HumanIDFromAvatarIKGoal
UnityEngine::HumanBodyBones RootMotion::AvatarUtility::HumanIDFromAvatarIKGoal(UnityEngine::AvatarIKGoal avatarIKGoal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AvatarUtility::HumanIDFromAvatarIKGoal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "HumanIDFromAvatarIKGoal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(avatarIKGoal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::HumanBodyBones, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, avatarIKGoal);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BakerUtilities
#include "RootMotion/BakerUtilities.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BakerUtilities.ReduceKeyframes
void RootMotion::BakerUtilities::ReduceKeyframes(UnityEngine::AnimationCurve* curve, float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerUtilities::ReduceKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "ReduceKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curve, maxError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curve, maxError);
}
// Autogenerated method: RootMotion.BakerUtilities.GetReducedKeyframes
::Array<UnityEngine::Keyframe>* RootMotion::BakerUtilities::GetReducedKeyframes(UnityEngine::AnimationCurve* curve, float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerUtilities::GetReducedKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "GetReducedKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curve, maxError)));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Keyframe>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curve, maxError);
}
// Autogenerated method: RootMotion.BakerUtilities.SetLoopFrame
void RootMotion::BakerUtilities::SetLoopFrame(float time, UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerUtilities::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "SetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, curve)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, curve);
}
// Autogenerated method: RootMotion.BakerUtilities.SetTangentMode
void RootMotion::BakerUtilities::SetTangentMode(UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerUtilities::SetTangentMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "SetTangentMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curve)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curve);
}
// Autogenerated method: RootMotion.BakerUtilities.EnsureQuaternionContinuity
UnityEngine::Quaternion RootMotion::BakerUtilities::EnsureQuaternionContinuity(UnityEngine::Quaternion lastQ, UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerUtilities::EnsureQuaternionContinuity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "EnsureQuaternionContinuity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lastQ, q)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lastQ, q);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BakerHumanoidQT
#include "RootMotion/BakerHumanoidQT.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Avatar
#include "UnityEngine/Avatar.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BakerHumanoidQT.Reset
void RootMotion::BakerHumanoidQT::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetIKKeyframes
void RootMotion::BakerHumanoidQT::SetIKKeyframes(float time, UnityEngine::Avatar* avatar, float humanScale, UnityEngine::Vector3 bodyPosition, UnityEngine::Quaternion bodyRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::SetIKKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetIKKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, avatar, humanScale, bodyPosition, bodyRotation)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, avatar, humanScale, bodyPosition, bodyRotation);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetKeyframes
void RootMotion::BakerHumanoidQT::SetKeyframes(float time, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::SetKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, pos, rot)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, pos, rot);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MoveLastKeyframes
void RootMotion::BakerHumanoidQT::MoveLastKeyframes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::MoveLastKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveLastKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetLoopFrame
void RootMotion::BakerHumanoidQT::SetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MoveLastKeyframe
void RootMotion::BakerHumanoidQT::MoveLastKeyframe(float time, UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::MoveLastKeyframe");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveLastKeyframe", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, curve)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, curve);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MultiplyLength
void RootMotion::BakerHumanoidQT::MultiplyLength(UnityEngine::AnimationCurve* curve, float mlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::MultiplyLength");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MultiplyLength", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curve, mlp)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, curve, mlp);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetCurves
void RootMotion::BakerHumanoidQT::SetCurves(UnityEngine::AnimationClip*& clip, float maxError, float lengthMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerHumanoidQT::SetCurves");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip, maxError, lengthMlp)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, maxError, lengthMlp);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BakerMuscle
#include "RootMotion/BakerMuscle.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BakerMuscle.MuscleNameToPropertyName
::Il2CppString* RootMotion::BakerMuscle::MuscleNameToPropertyName(::Il2CppString* n) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::MuscleNameToPropertyName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MuscleNameToPropertyName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(n)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, n);
}
// Autogenerated method: RootMotion.BakerMuscle.MultiplyLength
void RootMotion::BakerMuscle::MultiplyLength(UnityEngine::AnimationCurve* curve, float mlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::MultiplyLength");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MultiplyLength", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curve, mlp)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, curve, mlp);
}
// Autogenerated method: RootMotion.BakerMuscle.SetCurves
void RootMotion::BakerMuscle::SetCurves(UnityEngine::AnimationClip*& clip, float maxError, float lengthMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::SetCurves");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip, maxError, lengthMlp)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, maxError, lengthMlp);
}
// Autogenerated method: RootMotion.BakerMuscle.Reset
void RootMotion::BakerMuscle::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerMuscle.SetKeyframe
void RootMotion::BakerMuscle::SetKeyframe(float time, ::Array<float>* muscles) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::SetKeyframe");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetKeyframe", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, muscles)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, muscles);
}
// Autogenerated method: RootMotion.BakerMuscle.SetLoopFrame
void RootMotion::BakerMuscle::SetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerMuscle::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BakerTransform
#include "RootMotion/BakerTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BakerTransform.SetRelativeSpace
void RootMotion::BakerTransform::SetRelativeSpace(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::SetRelativeSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetRelativeSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(position, rotation)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.BakerTransform.SetCurves
void RootMotion::BakerTransform::SetCurves(UnityEngine::AnimationClip*& clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::SetCurves");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: RootMotion.BakerTransform.AddRootMotionCurves
void RootMotion::BakerTransform::AddRootMotionCurves(UnityEngine::AnimationClip*& clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::AddRootMotionCurves");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddRootMotionCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: RootMotion.BakerTransform.Reset
void RootMotion::BakerTransform::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerTransform.ReduceKeyframes
void RootMotion::BakerTransform::ReduceKeyframes(float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::ReduceKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReduceKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(maxError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxError);
}
// Autogenerated method: RootMotion.BakerTransform.SetKeyframes
void RootMotion::BakerTransform::SetKeyframes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::SetKeyframes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerTransform.AddLoopFrame
void RootMotion::BakerTransform::AddLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BakerTransform::AddLoopFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.HumanoidBaker
#include "RootMotion/HumanoidBaker.hpp"
// Including type: RootMotion.BakerMuscle
#include "RootMotion/BakerMuscle.hpp"
// Including type: RootMotion.BakerHumanoidQT
#include "RootMotion/BakerHumanoidQT.hpp"
// Including type: UnityEngine.HumanPoseHandler
#include "UnityEngine/HumanPoseHandler.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.HumanoidBaker.Awake
void RootMotion::HumanoidBaker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.UpdateHumanPose
void RootMotion::HumanoidBaker::UpdateHumanPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::UpdateHumanPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateHumanPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.GetCharacterRoot
UnityEngine::Transform* RootMotion::HumanoidBaker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnStartBaking
void RootMotion::HumanoidBaker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetLoopFrame
void RootMotion::HumanoidBaker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetCurves
void RootMotion::HumanoidBaker::OnSetCurves(UnityEngine::AnimationClip*& clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetKeyframes
void RootMotion::HumanoidBaker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time, lastFrame)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Axis
#include "RootMotion/Axis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis X
RootMotion::Axis RootMotion::Axis::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Axis>("RootMotion", "Axis", "X"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis X
void RootMotion::Axis::_set_X(RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "X", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis Y
RootMotion::Axis RootMotion::Axis::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Axis>("RootMotion", "Axis", "Y"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis Y
void RootMotion::Axis::_set_Y(RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis Z
RootMotion::Axis RootMotion::Axis::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Axis>("RootMotion", "Axis", "Z"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis Z
void RootMotion::Axis::_set_Z(RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Axis::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "Z", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.AxisTools
#include "RootMotion/AxisTools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.Axis
#include "RootMotion/Axis.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.AxisTools.ToVector3
UnityEngine::Vector3 RootMotion::AxisTools::ToVector3(RootMotion::Axis axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::ToVector3");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "ToVector3", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(axis)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, axis);
}
// Autogenerated method: RootMotion.AxisTools.ToAxis
RootMotion::Axis RootMotion::AxisTools::ToAxis(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::ToAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "ToAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::Axis, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisToPoint
RootMotion::Axis RootMotion::AxisTools::GetAxisToPoint(UnityEngine::Transform* t, UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::GetAxisToPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisToPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, worldPosition)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::Axis, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, worldPosition);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisToDirection
RootMotion::Axis RootMotion::AxisTools::GetAxisToDirection(UnityEngine::Transform* t, UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::GetAxisToDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisToDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, direction)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::Axis, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, direction);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToPoint
UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToPoint(UnityEngine::Transform* t, UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::GetAxisVectorToPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, worldPosition)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, worldPosition);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToDirection
UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToDirection(UnityEngine::Transform* t, UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::GetAxisVectorToDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, direction)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, direction);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToDirection
UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToDirection(UnityEngine::Quaternion r, UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::AxisTools::GetAxisVectorToDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(r, direction)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, r, direction);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedLimbOrientations
#include "RootMotion/BipedLimbOrientations.hpp"
// Including type: RootMotion.BipedLimbOrientations/LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedLimbOrientations.get_UMA
RootMotion::BipedLimbOrientations* RootMotion::BipedLimbOrientations::get_UMA() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedLimbOrientations::get_UMA");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedLimbOrientations", "get_UMA", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedLimbOrientations*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: RootMotion.BipedLimbOrientations.get_MaxBiped
RootMotion::BipedLimbOrientations* RootMotion::BipedLimbOrientations::get_MaxBiped() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedLimbOrientations::get_MaxBiped");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedLimbOrientations", "get_MaxBiped", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedLimbOrientations*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedLimbOrientations/LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BipedNaming
#include "RootMotion/BipedNaming.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String[] typeLeft
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeLeft"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeLeft
void RootMotion::BipedNaming::_set_typeLeft(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeLeft", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeRight
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeRight"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeRight
void RootMotion::BipedNaming::_set_typeRight(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeRight", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeSpine
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeSpine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeSpine"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeSpine
void RootMotion::BipedNaming::_set_typeSpine(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeSpine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeSpine", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeHead
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeHead");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeHead"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeHead
void RootMotion::BipedNaming::_set_typeHead(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeHead");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeHead", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeArm
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeArm"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeArm
void RootMotion::BipedNaming::_set_typeArm(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeArm", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeLeg
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeLeg"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeLeg
void RootMotion::BipedNaming::_set_typeLeg(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeLeg", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeTail
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeTail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeTail"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeTail
void RootMotion::BipedNaming::_set_typeTail(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeTail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeTail", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeEye
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeEye"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeEye
void RootMotion::BipedNaming::_set_typeEye(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeEye", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExclude
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExclude() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExclude");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExclude"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExclude
void RootMotion::BipedNaming::_set_typeExclude(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExclude");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExclude", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeSpine
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeSpine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeSpine"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeSpine
void RootMotion::BipedNaming::_set_typeExcludeSpine(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeSpine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeSpine", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeHead
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeHead");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeHead"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeHead
void RootMotion::BipedNaming::_set_typeExcludeHead(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeHead");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeHead", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeArm
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeArm"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeArm
void RootMotion::BipedNaming::_set_typeExcludeArm(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeArm", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeLeg
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeLeg"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeLeg
void RootMotion::BipedNaming::_set_typeExcludeLeg(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeLeg", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeTail
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeTail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeTail"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeTail
void RootMotion::BipedNaming::_set_typeExcludeTail(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeTail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeTail", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeEye
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_typeExcludeEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_typeExcludeEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "typeExcludeEye"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeEye
void RootMotion::BipedNaming::_set_typeExcludeEye(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_typeExcludeEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeEye", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] pelvis
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "pelvis"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] pelvis
void RootMotion::BipedNaming::_set_pelvis(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] hand
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_hand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "hand"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] hand
void RootMotion::BipedNaming::_set_hand(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_hand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "hand", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] foot
::Array<::Il2CppString*>* RootMotion::BipedNaming::_get_foot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_get_foot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("RootMotion", "BipedNaming", "foot"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] foot
void RootMotion::BipedNaming::_set_foot(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::_set_foot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "foot", value));
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfType
::Array<UnityEngine::Transform*>* RootMotion::BipedNaming::GetBonesOfType(RootMotion::BipedNaming::BoneType boneType, ::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBonesOfType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneType, bones)));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneType, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfSide
::Array<UnityEngine::Transform*>* RootMotion::BipedNaming::GetBonesOfSide(RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBonesOfSide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfSide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneSide, bones)));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfTypeAndSide
::Array<UnityEngine::Transform*>* RootMotion::BipedNaming::GetBonesOfTypeAndSide(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBonesOfTypeAndSide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfTypeAndSide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneType, boneSide, bones)));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneType, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetFirstBoneOfTypeAndSide
UnityEngine::Transform* RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetFirstBoneOfTypeAndSide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneType, boneSide, bones)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneType, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetNamingMatch
UnityEngine::Transform* RootMotion::BipedNaming::GetNamingMatch(::Array<UnityEngine::Transform*>* transforms, ::Array<::Array<::Il2CppString*>*>* namings) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetNamingMatch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetNamingMatch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transforms, namings)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transforms, namings);
}
// Creating initializer_list -> params proxy for: UnityEngine.Transform GetNamingMatch(UnityEngine.Transform[] transforms, params System.String[][] namings)
UnityEngine::Transform* RootMotion::BipedNaming::GetNamingMatch(::Array<UnityEngine::Transform*>* transforms, std::initializer_list<::Array<::Il2CppString*>*> namings) {
  return RootMotion::BipedNaming::GetNamingMatch(transforms, ::Array<::Array<::Il2CppString*>*>::New(namings));
}
// Autogenerated method: RootMotion.BipedNaming.GetBoneType
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::GetBoneType(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBoneType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBoneType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedNaming::BoneType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.GetBoneSide
RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::GetBoneSide(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBoneSide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBoneSide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedNaming::BoneSide, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.GetBone
UnityEngine::Transform* RootMotion::BipedNaming::GetBone(::Array<UnityEngine::Transform*>* transforms, RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<::Array<::Il2CppString*>*>* namings) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::GetBone");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBone", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transforms, boneType, boneSide, namings)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transforms, boneType, boneSide, namings);
}
// Creating initializer_list -> params proxy for: UnityEngine.Transform GetBone(UnityEngine.Transform[] transforms, RootMotion.BipedNaming/BoneType boneType, RootMotion.BipedNaming/BoneSide boneSide, params System.String[][] namings)
UnityEngine::Transform* RootMotion::BipedNaming::GetBone(::Array<UnityEngine::Transform*>* transforms, RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, std::initializer_list<::Array<::Il2CppString*>*> namings) {
  return RootMotion::BipedNaming::GetBone(transforms, boneType, boneSide, ::Array<::Array<::Il2CppString*>*>::New(namings));
}
// Autogenerated method: RootMotion.BipedNaming.isLeft
bool RootMotion::BipedNaming::isLeft(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isLeft");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isLeft", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isRight
bool RootMotion::BipedNaming::isRight(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isRight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isRight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isSpine
bool RootMotion::BipedNaming::isSpine(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isSpine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isSpine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isHead
bool RootMotion::BipedNaming::isHead(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isHead");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isHead", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isArm
bool RootMotion::BipedNaming::isArm(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isArm");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isArm", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isLeg
bool RootMotion::BipedNaming::isLeg(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isLeg");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isLeg", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isTail
bool RootMotion::BipedNaming::isTail(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isTail");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isTail", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isEye
bool RootMotion::BipedNaming::isEye(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isEye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isEye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isTypeExclude
bool RootMotion::BipedNaming::isTypeExclude(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::isTypeExclude");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isTypeExclude", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.matchesNaming
bool RootMotion::BipedNaming::matchesNaming(::Il2CppString* boneName, ::Array<::Il2CppString*>* namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::matchesNaming");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "matchesNaming", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName, namingConvention)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.excludesNaming
bool RootMotion::BipedNaming::excludesNaming(::Il2CppString* boneName, ::Array<::Il2CppString*>* namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::excludesNaming");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "excludesNaming", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName, namingConvention)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.matchesLastLetter
bool RootMotion::BipedNaming::matchesLastLetter(::Il2CppString* boneName, ::Array<::Il2CppString*>* namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::matchesLastLetter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "matchesLastLetter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName, namingConvention)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.LastLetterIs
bool RootMotion::BipedNaming::LastLetterIs(::Il2CppString* boneName, ::Il2CppString* letter) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::LastLetterIs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "LastLetterIs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName, letter)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName, letter);
}
// Autogenerated method: RootMotion.BipedNaming.firstLetter
::Il2CppString* RootMotion::BipedNaming::firstLetter(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::firstLetter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "firstLetter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.lastLetter
::Il2CppString* RootMotion::BipedNaming::lastLetter(::Il2CppString* boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::lastLetter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "lastLetter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneName)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming..cctor
void RootMotion::BipedNaming::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedNaming/BoneType
#include "RootMotion/BipedNaming.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Unassigned
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Unassigned() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Unassigned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Unassigned"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Unassigned
void RootMotion::BipedNaming::BoneType::_set_Unassigned(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Unassigned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Unassigned", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Spine
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Spine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Spine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Spine
void RootMotion::BipedNaming::BoneType::_set_Spine(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Spine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Spine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Head
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Head
void RootMotion::BipedNaming::BoneType::_set_Head(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Arm
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Arm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Arm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Arm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Arm
void RootMotion::BipedNaming::BoneType::_set_Arm(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Arm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Arm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Leg
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Leg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Leg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Leg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Leg
void RootMotion::BipedNaming::BoneType::_set_Leg(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Leg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Leg", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Tail
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Tail() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Tail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Tail"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Tail
void RootMotion::BipedNaming::BoneType::_set_Tail(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Tail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Tail", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneType Eye
RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_get_Eye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Eye"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneType Eye
void RootMotion::BipedNaming::BoneType::_set_Eye(RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneType::_set_Eye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Eye", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedNaming/BoneSide
#include "RootMotion/BipedNaming.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneSide Center
RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Center"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneSide Center
void RootMotion::BipedNaming::BoneSide::_set_Center(RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneSide Left
RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Left"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneSide Left
void RootMotion::BipedNaming::BoneSide::_set_Left(RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/BoneSide Right
RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Right"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/BoneSide Right
void RootMotion::BipedNaming::BoneSide::_set_Right(RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedNaming::BoneSide::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedReferences/AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedReferences.get_isFilled
bool RootMotion::BipedReferences::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::get_isFilled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.get_isEmpty
bool RootMotion::BipedReferences::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.IsEmpty
bool RootMotion::BipedReferences::IsEmpty(bool includeRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::IsEmpty");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(includeRoot)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, includeRoot);
}
// Autogenerated method: RootMotion.BipedReferences.Contains
bool RootMotion::BipedReferences::Contains(UnityEngine::Transform* t, bool ignoreRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, ignoreRoot)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t, ignoreRoot);
}
// Autogenerated method: RootMotion.BipedReferences.AutoDetectReferences
bool RootMotion::BipedReferences::AutoDetectReferences(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, root, autoDetectParams)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectReferencesByNaming
void RootMotion::BipedReferences::DetectReferencesByNaming(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::DetectReferencesByNaming");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectReferencesByNaming", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, root, autoDetectParams)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AssignHumanoidReferences
void RootMotion::BipedReferences::AssignHumanoidReferences(RootMotion::BipedReferences*& references, UnityEngine::Animator* animator, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AssignHumanoidReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AssignHumanoidReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, animator, autoDetectParams)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, animator, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.SetupError
bool RootMotion::BipedReferences::SetupError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SetupError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SetupWarning
bool RootMotion::BipedReferences::SetupWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SetupWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.IsNeckBone
bool RootMotion::BipedReferences::IsNeckBone(UnityEngine::Transform* bone, UnityEngine::Transform* leftUpperArm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::IsNeckBone");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "IsNeckBone", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone, leftUpperArm)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, leftUpperArm);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToEyes
bool RootMotion::BipedReferences::AddBoneToEyes(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToEyes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToEyes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone, references, autoDetectParams)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, references, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToSpine
bool RootMotion::BipedReferences::AddBoneToSpine(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToSpine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToSpine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone, references, autoDetectParams)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, references, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectLimb
void RootMotion::BipedReferences::DetectLimb(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, UnityEngine::Transform*& firstBone, UnityEngine::Transform*& secondBone, UnityEngine::Transform*& lastBone, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::DetectLimb");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectLimb", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boneType, boneSide, firstBone, secondBone, lastBone, transforms)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneType, boneSide, firstBone, secondBone, lastBone, transforms);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToHierarchy
void RootMotion::BipedReferences::AddBoneToHierarchy(::Array<UnityEngine::Transform*>*& bones, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToHierarchy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToHierarchy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bones, transform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, transform);
}
// Autogenerated method: RootMotion.BipedReferences.LimbError
bool RootMotion::BipedReferences::LimbError(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::LimbError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone1, bone2, bone3, errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.LimbWarning
bool RootMotion::BipedReferences::LimbWarning(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::LimbWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone1, bone2, bone3, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SpineError
bool RootMotion::BipedReferences::SpineError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SpineError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SpineWarning
bool RootMotion::BipedReferences::SpineWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SpineWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.EyesError
bool RootMotion::BipedReferences::EyesError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::EyesError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.EyesWarning
bool RootMotion::BipedReferences::EyesWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::EyesWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.RootHeightWarning
bool RootMotion::BipedReferences::RootHeightWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::RootHeightWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "RootHeightWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.FacingAxisWarning
bool RootMotion::BipedReferences::FacingAxisWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::FacingAxisWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "FacingAxisWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.GetVerticalOffset
float RootMotion::BipedReferences::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(p1, p2, rotation)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, p1, p2, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedReferences/AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedReferences/AutoDetectParams.get_Default
RootMotion::BipedReferences::AutoDetectParams RootMotion::BipedReferences::AutoDetectParams::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AutoDetectParams::get_Default");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "BipedReferences/AutoDetectParams", "get_Default", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedReferences::AutoDetectParams, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Comments
#include "RootMotion/Comments.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.DemoGUIMessage
#include "RootMotion/DemoGUIMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.DemoGUIMessage.OnGUI
void RootMotion::DemoGUIMessage::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::DemoGUIMessage::OnGUI");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Hierarchy
#include "RootMotion/Hierarchy.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Hierarchy.HierarchyIsValid
bool RootMotion::Hierarchy::HierarchyIsValid(::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bones)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsDuplicate
UnityEngine::Object* RootMotion::Hierarchy::ContainsDuplicate(::Array<UnityEngine::Object*>* objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::ContainsDuplicate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsDuplicate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(objects)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, objects);
}
// Autogenerated method: RootMotion.Hierarchy.IsAncestor
bool RootMotion::Hierarchy::IsAncestor(UnityEngine::Transform* transform, UnityEngine::Transform* ancestor) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::IsAncestor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsAncestor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, ancestor)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, ancestor);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsChild
bool RootMotion::Hierarchy::ContainsChild(UnityEngine::Transform* transform, UnityEngine::Transform* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::ContainsChild");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsChild", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, child)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, child);
}
// Autogenerated method: RootMotion.Hierarchy.AddAncestors
void RootMotion::Hierarchy::AddAncestors(UnityEngine::Transform* transform, UnityEngine::Transform* blocker, ::Array<UnityEngine::Transform*>*& array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::AddAncestors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "AddAncestors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, blocker, array)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, blocker, array);
}
// Autogenerated method: RootMotion.Hierarchy.GetAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetAncestor(UnityEngine::Transform* transform, int minChildCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetAncestor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetAncestor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, minChildCount)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, minChildCount);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(UnityEngine::Transform* t1, UnityEngine::Transform* t2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t1, t2)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t1, t2);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transforms)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestorRecursive
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestorRecursive(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestorRecursive");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestorRecursive", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, transforms)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.IsCommonAncestor
bool RootMotion::Hierarchy::IsCommonAncestor(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::IsCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsCommonAncestor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, transforms)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.InspectorComment
#include "RootMotion/InspectorComment.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode None
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode None
void RootMotion::InterpolationMode::_set_None(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutCubic
void RootMotion::InterpolationMode::_set_InOutCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutQuintic
void RootMotion::InterpolationMode::_set_InOutQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutSine
void RootMotion::InterpolationMode::_set_InOutSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuintic
void RootMotion::InterpolationMode::_set_InQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuartic
void RootMotion::InterpolationMode::_set_InQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InCubic
void RootMotion::InterpolationMode::_set_InCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuadratic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuadratic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuadratic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuadratic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuadratic
void RootMotion::InterpolationMode::_set_InQuadratic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuadratic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuadratic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElastic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElastic
void RootMotion::InterpolationMode::_set_InElastic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticSmall
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticSmall
void RootMotion::InterpolationMode::_set_InElasticSmall(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticBig
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticBig
void RootMotion::InterpolationMode::_set_InElasticBig(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InSine
void RootMotion::InterpolationMode::_set_InSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InBack
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InBack
void RootMotion::InterpolationMode::_set_InBack(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuintic
void RootMotion::InterpolationMode::_set_OutQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuartic
void RootMotion::InterpolationMode::_set_OutQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutCubic
void RootMotion::InterpolationMode::_set_OutCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInCubic
void RootMotion::InterpolationMode::_set_OutInCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInQuartic
void RootMotion::InterpolationMode::_set_OutInQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElastic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElastic
void RootMotion::InterpolationMode::_set_OutElastic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticSmall
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticSmall
void RootMotion::InterpolationMode::_set_OutElasticSmall(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticBig
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticBig
void RootMotion::InterpolationMode::_set_OutElasticBig(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutSine
void RootMotion::InterpolationMode::_set_OutSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBack
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBack
void RootMotion::InterpolationMode::_set_OutBack(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBackCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackCubic
void RootMotion::InterpolationMode::_set_OutBackCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBackCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBackQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackQuartic
void RootMotion::InterpolationMode::_set_OutBackQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBackQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_BackInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInCubic
void RootMotion::InterpolationMode::_set_BackInCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_BackInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_BackInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInQuartic
void RootMotion::InterpolationMode::_set_BackInQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_BackInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInQuartic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Interp
#include "RootMotion/Interp.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Interp.Float
float RootMotion::Interp::Float(float t, RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::Float");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "Float", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, mode)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, mode);
}
// Autogenerated method: RootMotion.Interp.V3
UnityEngine::Vector3 RootMotion::Interp::V3(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, float t, RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::V3");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "V3", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v1, v2, t, mode)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2, t, mode);
}
// Autogenerated method: RootMotion.Interp.LerpValue
float RootMotion::Interp::LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::LerpValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "LerpValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value, target, increaseSpeed, decreaseSpeed)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, target, increaseSpeed, decreaseSpeed);
}
// Autogenerated method: RootMotion.Interp.None
float RootMotion::Interp::None(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::None");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "None", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutCubic
float RootMotion::Interp::InOutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutQuintic
float RootMotion::Interp::InOutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutQuintic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutQuintic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuintic
float RootMotion::Interp::InQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuintic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuintic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuartic
float RootMotion::Interp::InQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuartic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuartic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InCubic
float RootMotion::Interp::InCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuadratic
float RootMotion::Interp::InQuadratic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuadratic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuadratic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuintic
float RootMotion::Interp::OutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutQuintic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuintic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuartic
float RootMotion::Interp::OutQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutQuartic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuartic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutCubic
float RootMotion::Interp::OutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInCubic
float RootMotion::Interp::OutInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutInCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInQuartic
float RootMotion::Interp::OutInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutInQuartic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInQuartic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInCubic
float RootMotion::Interp::BackInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::BackInCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInQuartic
float RootMotion::Interp::BackInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::BackInQuartic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInQuartic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackCubic
float RootMotion::Interp::OutBackCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBackCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackQuartic
float RootMotion::Interp::OutBackQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBackQuartic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackQuartic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticSmall
float RootMotion::Interp::OutElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElasticSmall");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticSmall", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticBig
float RootMotion::Interp::OutElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElasticBig");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticBig", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticSmall
float RootMotion::Interp::InElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElasticSmall");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticSmall", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticBig
float RootMotion::Interp::InElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElasticBig");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticBig", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InSine
float RootMotion::Interp::InSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InSine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InSine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutSine
float RootMotion::Interp::OutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutSine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutSine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutSine
float RootMotion::Interp::InOutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutSine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutSine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElastic
float RootMotion::Interp::InElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElastic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElastic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElastic
float RootMotion::Interp::OutElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElastic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElastic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InBack
float RootMotion::Interp::InBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InBack");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "InBack", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBack
float RootMotion::Interp::OutBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBack");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBack", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, b, c)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.LargeHeader
#include "RootMotion/LargeHeader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.LayerMaskExtensions
#include "RootMotion/LayerMaskExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.LayerMaskExtensions.Contains
bool RootMotion::LayerMaskExtensions::Contains(UnityEngine::LayerMask mask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(mask, layer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, layer);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerNames)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::Create(::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::Array<int>* layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerNumbers)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNumbers);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.Int32[] layerNumbers)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(std::initializer_list<int> layerNumbers) {
  return RootMotion::LayerMaskExtensions::Create(::Array<int>::New(layerNumbers));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.NamesToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::NamesToMask(::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::NamesToMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "NamesToMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerNames)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask NamesToMask(params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::NamesToMask(std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::NamesToMask(::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.LayerNumbersToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::LayerNumbersToMask(::Array<int>* layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::LayerNumbersToMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "LayerNumbersToMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerNumbers)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNumbers);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask LayerNumbersToMask(params System.Int32[] layerNumbers)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::LayerNumbersToMask(std::initializer_list<int> layerNumbers) {
  return RootMotion::LayerMaskExtensions::LayerNumbersToMask(::Array<int>::New(layerNumbers));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Inverse
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Inverse(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Inverse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Inverse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.AddToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::AddToMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::AddToMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "AddToMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original, layerNames)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask AddToMask(UnityEngine.LayerMask original, params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::AddToMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::AddToMask(original, ::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.RemoveFromMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::RemoveFromMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::RemoveFromMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "RemoveFromMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original, layerNames)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask RemoveFromMask(UnityEngine.LayerMask original, params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::RemoveFromMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::RemoveFromMask(original, ::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNames
::Array<::Il2CppString*>* RootMotion::LayerMaskExtensions::MaskToNames(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToNames");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNames", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original)));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNumbers
::Array<int>* RootMotion::LayerMaskExtensions::MaskToNumbers(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToNumbers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNumbers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original)));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::Il2CppString* RootMotion::LayerMaskExtensions::MaskToString(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::Il2CppString* RootMotion::LayerMaskExtensions::MaskToString(UnityEngine::LayerMask original, ::Il2CppString* delimiter) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(original, delimiter)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, delimiter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.QuaTools
#include "RootMotion/QuaTools.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.QuaTools.Lerp
UnityEngine::Quaternion RootMotion::QuaTools::Lerp(UnityEngine::Quaternion fromRotation, UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Lerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromRotation, toRotation, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.Slerp
UnityEngine::Quaternion RootMotion::QuaTools::Slerp(UnityEngine::Quaternion fromRotation, UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::Slerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Slerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromRotation, toRotation, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.LinearBlend
UnityEngine::Quaternion RootMotion::QuaTools::LinearBlend(UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::LinearBlend");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "LinearBlend", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(q, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.SphericalBlend
UnityEngine::Quaternion RootMotion::QuaTools::SphericalBlend(UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::SphericalBlend");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "SphericalBlend", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(q, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.FromToAroundAxis
UnityEngine::Quaternion RootMotion::QuaTools::FromToAroundAxis(UnityEngine::Vector3 fromDirection, UnityEngine::Vector3 toDirection, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::FromToAroundAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToAroundAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromDirection, toDirection, axis)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromDirection, toDirection, axis);
}
// Autogenerated method: RootMotion.QuaTools.RotationToLocalSpace
UnityEngine::Quaternion RootMotion::QuaTools::RotationToLocalSpace(UnityEngine::Quaternion space, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::RotationToLocalSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "RotationToLocalSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(space, rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, space, rotation);
}
// Autogenerated method: RootMotion.QuaTools.FromToRotation
UnityEngine::Quaternion RootMotion::QuaTools::FromToRotation(UnityEngine::Quaternion from, UnityEngine::Quaternion to) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::FromToRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(from, to)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: RootMotion.QuaTools.GetAxis
UnityEngine::Vector3 RootMotion::QuaTools::GetAxis(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::GetAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "GetAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v);
}
// Autogenerated method: RootMotion.QuaTools.ClampRotation
UnityEngine::Quaternion RootMotion::QuaTools::ClampRotation(UnityEngine::Quaternion rotation, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ClampRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation, clampWeight, clampSmoothing)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.ClampAngle
float RootMotion::QuaTools::ClampAngle(float angle, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ClampAngle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampAngle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(angle, clampWeight, clampSmoothing)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.MatchRotation
UnityEngine::Quaternion RootMotion::QuaTools::MatchRotation(UnityEngine::Quaternion targetRotation, UnityEngine::Vector3 targetforwardAxis, UnityEngine::Vector3 targetUpAxis, UnityEngine::Vector3 forwardAxis, UnityEngine::Vector3 upAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::MatchRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "MatchRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(targetRotation, targetforwardAxis, targetUpAxis, forwardAxis, upAxis)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetRotation, targetforwardAxis, targetUpAxis, forwardAxis, upAxis);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
UnityEngine::Vector3 RootMotion::QuaTools::ToBiPolar(UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(euler)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
float RootMotion::QuaTools::ToBiPolar(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(angle)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.SolverManager
#include "RootMotion/SolverManager.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.SolverManager.Disable
void RootMotion::SolverManager::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Disable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.InitiateSolver
void RootMotion::SolverManager::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolver
void RootMotion::SolverManager::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FixTransforms
void RootMotion::SolverManager::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FixTransforms");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.OnDisable
void RootMotion::SolverManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Start
void RootMotion::SolverManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.get_animatePhysics
bool RootMotion::SolverManager::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Initiate
void RootMotion::SolverManager::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Update
void RootMotion::SolverManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FindAnimatorRecursive
void RootMotion::SolverManager::FindAnimatorRecursive(UnityEngine::Transform* t, bool findInChildren) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FindAnimatorRecursive");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FindAnimatorRecursive", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, findInChildren)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, findInChildren);
}
// Autogenerated method: RootMotion.SolverManager.get_isAnimated
bool RootMotion::SolverManager::get_isAnimated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::get_isAnimated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isAnimated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FixedUpdate
void RootMotion::SolverManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.LateUpdate
void RootMotion::SolverManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolverExternal
void RootMotion::SolverManager::UpdateSolverExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::UpdateSolverExternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolverExternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.TriggerEventBroadcaster
#include "RootMotion/TriggerEventBroadcaster.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerEnter
void RootMotion::TriggerEventBroadcaster::OnTriggerEnter(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(collider)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerStay
void RootMotion::TriggerEventBroadcaster::OnTriggerStay(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(collider)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerExit
void RootMotion::TriggerEventBroadcaster::OnTriggerExit(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(collider)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.V3Tools
#include "RootMotion/V3Tools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.V3Tools.Lerp
UnityEngine::Vector3 RootMotion::V3Tools::Lerp(UnityEngine::Vector3 fromVector, UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Lerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromVector, toVector, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.Slerp
UnityEngine::Vector3 RootMotion::V3Tools::Slerp(UnityEngine::Vector3 fromVector, UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::Slerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Slerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromVector, toVector, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractVertical
UnityEngine::Vector3 RootMotion::V3Tools::ExtractVertical(UnityEngine::Vector3 v, UnityEngine::Vector3 verticalAxis, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ExtractVertical");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractVertical", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v, verticalAxis, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v, verticalAxis, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractHorizontal
UnityEngine::Vector3 RootMotion::V3Tools::ExtractHorizontal(UnityEngine::Vector3 v, UnityEngine::Vector3 normal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ExtractHorizontal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractHorizontal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v, normal, weight)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v, normal, weight);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(direction, normalDirection, clampWeight, clampSmoothing)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(direction, normalDirection, clampWeight, clampSmoothing, changed)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, changed);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, float& clampValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(direction, normalDirection, clampWeight, clampSmoothing, clampValue)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, clampValue);
}
// Autogenerated method: RootMotion.V3Tools.LineToPlane
UnityEngine::Vector3 RootMotion::V3Tools::LineToPlane(UnityEngine::Vector3 origin, UnityEngine::Vector3 direction, UnityEngine::Vector3 planeNormal, UnityEngine::Vector3 planePoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::LineToPlane");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "LineToPlane", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(origin, direction, planeNormal, planePoint)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, origin, direction, planeNormal, planePoint);
}
// Autogenerated method: RootMotion.V3Tools.PointToPlane
UnityEngine::Vector3 RootMotion::V3Tools::PointToPlane(UnityEngine::Vector3 point, UnityEngine::Vector3 planePosition, UnityEngine::Vector3 planeNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::PointToPlane");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "PointToPlane", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(point, planePosition, planeNormal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, point, planePosition, planeNormal);
}
// Autogenerated method: RootMotion.V3Tools.TransformPointUnscaled
UnityEngine::Vector3 RootMotion::V3Tools::TransformPointUnscaled(UnityEngine::Transform* t, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::TransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "TransformPointUnscaled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, point)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, point);
}
// Autogenerated method: RootMotion.V3Tools.InverseTransformPointUnscaled
UnityEngine::Vector3 RootMotion::V3Tools::InverseTransformPointUnscaled(UnityEngine::Transform* t, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::InverseTransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "InverseTransformPointUnscaled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, point)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, point);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Warning
#include "RootMotion/Warning.hpp"
// Including type: RootMotion.Warning/Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean logged
bool RootMotion::Warning::_get_logged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::_get_logged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("RootMotion", "Warning", "logged"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean logged
void RootMotion::Warning::_set_logged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::_set_logged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Warning", "logged", value));
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::Il2CppString* message, RootMotion::Warning::Logger* logger, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message, logger, logInEditMode)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, logger, logInEditMode);
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::Il2CppString* message, UnityEngine::Transform* context, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message, context, logInEditMode)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, context, logInEditMode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Warning/Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Warning/Logger.Invoke
void RootMotion::Warning::Logger::Invoke(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.Warning/Logger.BeginInvoke
System::IAsyncResult* RootMotion::Warning::Logger::BeginInvoke(::Il2CppString* message, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, message, callback, object);
}
// Autogenerated method: RootMotion.Warning/Logger.EndInvoke
void RootMotion::Warning::Logger::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Demos.Navigator
#include "RootMotion/Demos/Navigator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AI.NavMeshPath
#include "UnityEngine/AI/NavMeshPath.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Demos.Navigator.get_normalizedDeltaPosition
UnityEngine::Vector3 RootMotion::Demos::Navigator::get_normalizedDeltaPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::get_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_normalizedDeltaPosition
void RootMotion::Demos::Navigator::set_normalizedDeltaPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::set_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.get_state
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::get_state");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::Demos::Navigator::State, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_state
void RootMotion::Demos::Navigator::set_state(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::set_state");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.Initiate
void RootMotion::Demos::Navigator::Initiate(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.Demos.Navigator.Update
void RootMotion::Demos::Navigator::Update(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(targetPosition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.CalculatePath
void RootMotion::Demos::Navigator::CalculatePath(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::CalculatePath");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CalculatePath", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(targetPosition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Find
bool RootMotion::Demos::Navigator::Find(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Find");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(targetPosition)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Stop
void RootMotion::Demos::Navigator::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Stop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.HorDistance
float RootMotion::Demos::Navigator::HorDistance(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::HorDistance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HorDistance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(p1, p2)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.Demos.Navigator.Visualize
void RootMotion::Demos::Navigator::Visualize() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Visualize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.Navigator/State
#include "RootMotion/Demos/Navigator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/State Idle
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/State Idle
void RootMotion::Demos::Navigator::State::_set_Idle(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/State Seeking
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Seeking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_Seeking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Seeking"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/State Seeking
void RootMotion::Demos::Navigator::State::_set_Seeking(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_Seeking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Seeking", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/State OnPath
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_OnPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_OnPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "OnPath"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/State OnPath
void RootMotion::Demos::Navigator::State::_set_OnPath(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_OnPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "OnPath", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenUserManual
void RootMotion::FinalIK::BipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenScriptReference
void RootMotion::FinalIK::BipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SupportGroup
void RootMotion::FinalIK::BipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.ASThread
void RootMotion::FinalIK::BipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPositionWeight
float RootMotion::FinalIK::BipedIK::GetIKPositionWeight(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotationWeight
float RootMotion::FinalIK::BipedIK::GetIKRotationWeight(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKRotationWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPositionWeight
void RootMotion::FinalIK::BipedIK::SetIKPositionWeight(UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal, weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotationWeight
void RootMotion::FinalIK::BipedIK::SetIKRotationWeight(UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetIKRotationWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal, weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPosition
void RootMotion::FinalIK::BipedIK::SetIKPosition(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3 IKPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal, IKPosition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, IKPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotation
void RootMotion::FinalIK::BipedIK::SetIKRotation(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion IKRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetIKRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal, IKRotation)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, IKRotation);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::BipedIK::GetIKPosition(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotation
UnityEngine::Quaternion RootMotion::FinalIK::BipedIK::GetIKRotation(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtWeight
void RootMotion::FinalIK::BipedIK::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtPosition
void RootMotion::FinalIK::BipedIK::SetLookAtPosition(UnityEngine::Vector3 lookAtPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetLookAtPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLookAtPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lookAtPosition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lookAtPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpinePosition
void RootMotion::FinalIK::BipedIK::SetSpinePosition(UnityEngine::Vector3 spinePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetSpinePosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetSpinePosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(spinePosition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spinePosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpineWeight
void RootMotion::FinalIK::BipedIK::SetSpineWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetSpineWeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetSpineWeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetGoalIK
RootMotion::FinalIK::IKSolverLimb* RootMotion::FinalIK::BipedIK::GetGoalIK(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetGoalIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGoalIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(goal)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverLimb*, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateBipedIK
void RootMotion::FinalIK::BipedIK::InitiateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::InitiateBipedIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateBipedIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateBipedIK
void RootMotion::FinalIK::BipedIK::UpdateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::UpdateBipedIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateBipedIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetToDefaults
void RootMotion::FinalIK::BipedIK::SetToDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetToDefaults");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetToDefaults", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.LogWarning
void RootMotion::FinalIK::BipedIK::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::LogWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.FixTransforms
void RootMotion::FinalIK::BipedIK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateSolver
void RootMotion::FinalIK::BipedIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateSolver
void RootMotion::FinalIK::BipedIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_limbs
::Array<RootMotion::FinalIK::IKSolverLimb*>* RootMotion::FinalIK::BipedIKSolvers::get_limbs() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::get_limbs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_limbs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolverLimb*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_ikSolvers
::Array<RootMotion::FinalIK::IKSolver*>* RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_ikSolvers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.AssignReferences
void RootMotion::FinalIK::BipedIKSolvers::AssignReferences(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::AssignReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AssignReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraint
#include "RootMotion/FinalIK/Constraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Constraint.get_isValid
bool RootMotion::FinalIK::Constraint::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraint::get_isValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraint.UpdateConstraint
void RootMotion::FinalIK::Constraint::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraint::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPosition
#include "RootMotion/FinalIK/ConstraintPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintPosition.UpdateConstraint
void RootMotion::FinalIK::ConstraintPosition::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPosition::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPositionOffset
#include "RootMotion/FinalIK/ConstraintPositionOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.get_positionChanged
bool RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_positionChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotation
#include "RootMotion/FinalIK/ConstraintRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintRotation.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotation::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotation::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotationOffset
#include "RootMotion/FinalIK/ConstraintRotationOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.get_rotationChanged
bool RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rotationChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Constraints.IsValid
bool RootMotion::FinalIK::Constraints::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Initiate
void RootMotion::FinalIK::Constraints::Initiate(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Update
void RootMotion::FinalIK::Constraints::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Finger.get_initiated
bool RootMotion::FinalIK::Finger::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_initiated
void RootMotion::FinalIK::Finger::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Finger::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKPosition
void RootMotion::FinalIK::Finger::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKRotation
UnityEngine::Quaternion RootMotion::FinalIK::Finger::get_IKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IKRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKRotation
void RootMotion::FinalIK::Finger::set_IKRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IKRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.IsValid
bool RootMotion::FinalIK::Finger::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Initiate
void RootMotion::FinalIK::Finger::Initiate(UnityEngine::Transform* hand, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hand, index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hand, index);
}
// Autogenerated method: RootMotion.FinalIK.Finger.FixTransforms
void RootMotion::FinalIK::Finger::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.StoreDefaultLocalState
void RootMotion::FinalIK::Finger::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Update
void RootMotion::FinalIK::Finger::Update(float masterWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(masterWeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, masterWeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Finger/DOF
#include "RootMotion/FinalIK/Finger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/DOF One
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "One"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/DOF One
void RootMotion::FinalIK::Finger::DOF::_set_One(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "One", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/DOF Three
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_Three() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_Three");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "Three"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/DOF Three
void RootMotion::FinalIK::Finger::DOF::_set_Three(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_Three");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "Three", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FingerRig
#include "RootMotion/FinalIK/FingerRig.hpp"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FingerRig.get_initiated
bool RootMotion::FinalIK::FingerRig::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::get_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.set_initiated
void RootMotion::FinalIK::FingerRig::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::set_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.IsValid
bool RootMotion::FinalIK::FingerRig::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AutoDetect
void RootMotion::FinalIK::FingerRig::AutoDetect() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AutoDetect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AutoDetect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddFinger
void RootMotion::FinalIK::FingerRig::AddFinger(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* tip, UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddFinger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddFinger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone1, bone2, bone3, tip, target)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, tip, target);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.RemoveFinger
void RootMotion::FinalIK::FingerRig::RemoveFinger(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::RemoveFinger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveFinger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddChildrenRecursive
void RootMotion::FinalIK::FingerRig::AddChildrenRecursive(UnityEngine::Transform* parent, ::Array<UnityEngine::Transform*>*& array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddChildrenRecursive");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddChildrenRecursive", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(parent, array)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent, array);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateFingerSolvers
void RootMotion::FinalIK::FingerRig::UpdateFingerSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateFingerSolvers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateFingerSolvers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixFingerTransforms
void RootMotion::FinalIK::FingerRig::FixFingerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixFingerTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixFingerTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.StoreDefaultLocalState
void RootMotion::FinalIK::FingerRig::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.InitiateSolver
void RootMotion::FinalIK::FingerRig::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateSolver
void RootMotion::FinalIK::FingerRig::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixTransforms
void RootMotion::FinalIK::FingerRig::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixTransforms");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder
#include "RootMotion/FinalIK/Grounder.hpp"
// Including type: RootMotion.FinalIK.Grounder/GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder.ResetPosition
void RootMotion::FinalIK::Grounder::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.get_initiated
bool RootMotion::FinalIK::Grounder::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::get_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.set_initiated
void RootMotion::FinalIK::Grounder::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::set_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetSpineOffsetTarget
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetSpineOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetSpineOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSpineOffsetTarget", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.LogWarning
void RootMotion::FinalIK::Grounder::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::LogWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineBendVector
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineBendVector(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineBendVector");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLegSpineBendVector", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(leg)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineTangent
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineTangent(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineTangent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLegSpineTangent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(leg)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenUserManual
void RootMotion::FinalIK::Grounder::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenScriptReference
void RootMotion::FinalIK::Grounder::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder/GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.Invoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.EndInvoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderBipedIK
#include "RootMotion/FinalIK/GrounderBipedIK.hpp"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Update
void RootMotion::FinalIK::GrounderBipedIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Initiate
void RootMotion::FinalIK::GrounderBipedIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDisable
void RootMotion::FinalIK::GrounderBipedIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.SetLegIK
void RootMotion::FinalIK::GrounderBipedIK::SetLegIK(RootMotion::FinalIK::IKSolverLimb* limb, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(limb, index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, limb, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDestroy
void RootMotion::FinalIK::GrounderBipedIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenUserManual
void RootMotion::FinalIK::GrounderBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenScriptReference
void RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.ResetPosition
void RootMotion::FinalIK::GrounderBipedIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderFBBIK
#include "RootMotion/FinalIK/GrounderFBBIK.hpp"
// Including type: RootMotion.FinalIK.GrounderFBBIK/SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenTutorial
void RootMotion::FinalIK::GrounderFBBIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Update
void RootMotion::FinalIK::GrounderFBBIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.FixedUpdate
void RootMotion::FinalIK::GrounderFBBIK::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.LateUpdate
void RootMotion::FinalIK::GrounderFBBIK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Initiate
void RootMotion::FinalIK::GrounderFBBIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.SetLegIK
void RootMotion::FinalIK::GrounderFBBIK::SetLegIK(RootMotion::FinalIK::IKEffector* effector, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(effector, leg)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDestroy
void RootMotion::FinalIK::GrounderFBBIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenUserManual
void RootMotion::FinalIK::GrounderFBBIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenScriptReference
void RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.ResetPosition
void RootMotion::FinalIK::GrounderFBBIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderFBBIK/SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderIK
#include "RootMotion/FinalIK/GrounderIK.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDisable
void RootMotion::FinalIK::GrounderIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Update
void RootMotion::FinalIK::GrounderIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Initiate
void RootMotion::FinalIK::GrounderIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.SetLegIK
void RootMotion::FinalIK::GrounderIK::SetLegIK(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDestroy
void RootMotion::FinalIK::GrounderIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenUserManual
void RootMotion::FinalIK::GrounderIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenScriptReference
void RootMotion::FinalIK::GrounderIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.ResetPosition
void RootMotion::FinalIK::GrounderIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderQuadruped
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiateLegs
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiateLegs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ikComponents)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDisable
void RootMotion::FinalIK::GrounderQuadruped::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Update
void RootMotion::FinalIK::GrounderQuadruped::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Initiate
void RootMotion::FinalIK::GrounderQuadruped::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.InitiateFeet
::Array<UnityEngine::Transform*>* RootMotion::FinalIK::GrounderQuadruped::InitiateFeet(::Array<RootMotion::FinalIK::IK*>* ikComponents, ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*& f, int indexOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::InitiateFeet");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateFeet", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ikComponents, f, indexOffset)));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method, ikComponents, f, indexOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.LateUpdate
void RootMotion::FinalIK::GrounderQuadruped::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.RootRotation
void RootMotion::FinalIK::GrounderQuadruped::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::RootRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.UpdateForefeetRoot
void RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateForefeetRoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.SetFootIK
void RootMotion::FinalIK::GrounderQuadruped::SetFootIK(RootMotion::FinalIK::GrounderQuadruped::Foot foot, float maxOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::SetFootIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFootIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(foot, maxOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, foot, maxOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDestroy
void RootMotion::FinalIK::GrounderQuadruped::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.DestroyLegs
void RootMotion::FinalIK::GrounderQuadruped::DestroyLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::DestroyLegs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DestroyLegs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ikComponents)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenUserManual
void RootMotion::FinalIK::GrounderQuadruped::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenScriptReference
void RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.ResetPosition
void RootMotion::FinalIK::GrounderQuadruped::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderQuadruped/Foot
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderVRIK
#include "RootMotion/FinalIK/GrounderVRIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenTutorial
void RootMotion::FinalIK::GrounderVRIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Update
void RootMotion::FinalIK::GrounderVRIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Initiate
void RootMotion::FinalIK::GrounderVRIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.SetLegIK
void RootMotion::FinalIK::GrounderVRIK::SetLegIK(RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, UnityEngine::Transform* bone, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(positionOffset, bone, leg)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionOffset, bone, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDestroy
void RootMotion::FinalIK::GrounderVRIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenUserManual
void RootMotion::FinalIK::GrounderVRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenScriptReference
void RootMotion::FinalIK::GrounderVRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.ResetPosition
void RootMotion::FinalIK::GrounderVRIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: RootMotion.FinalIK.Grounding/Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding.get_legs
::Array<RootMotion::FinalIK::Grounding::Leg*>* RootMotion::FinalIK::Grounding::get_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_legs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_legs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::Grounding::Leg*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_legs
void RootMotion::FinalIK::Grounding::set_legs(::Array<RootMotion::FinalIK::Grounding::Leg*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_legs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_legs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_pelvis
RootMotion::FinalIK::Grounding::Pelvis* RootMotion::FinalIK::Grounding::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::Grounding::Pelvis*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_pelvis
void RootMotion::FinalIK::Grounding::set_pelvis(RootMotion::FinalIK::Grounding::Pelvis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_pelvis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_pelvis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_isGrounded
bool RootMotion::FinalIK::Grounding::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_isGrounded
void RootMotion::FinalIK::Grounding::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_root
UnityEngine::Transform* RootMotion::FinalIK::Grounding::get_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_root");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_root", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_root
void RootMotion::FinalIK::Grounding::set_root(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_root");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_root", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::get_rootHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rootHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_rootHit
void RootMotion::FinalIK::Grounding::set_rootHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_rootHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_rootHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootGrounded
bool RootMotion::FinalIK::Grounding::get_rootGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootGrounded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rootGrounded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetRootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::GetRootHit(float maxDistanceMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetRootHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRootHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(maxDistanceMlp)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, maxDistanceMlp);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.IsValid
bool RootMotion::FinalIK::Grounding::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Initiate
void RootMotion::FinalIK::Grounding::Initiate(UnityEngine::Transform* root, ::Array<UnityEngine::Transform*>* feet) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(root, feet)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, feet);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Update
void RootMotion::FinalIK::Grounding::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetLegsPlaneNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetLegsPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetLegsPlaneNormal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLegsPlaneNormal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Reset
void RootMotion::FinalIK::Grounding::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.LogWarning
void RootMotion::FinalIK::Grounding::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::LogWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_up
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_up");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_up", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetVerticalOffset
float RootMotion::FinalIK::Grounding::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(p1, p2)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Flatten
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Flatten(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Flatten");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Flatten", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, v);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_useRootRotation
bool RootMotion::FinalIK::Grounding::get_useRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_useRootRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_useRootRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetFootCenterOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetFootCenterOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetFootCenterOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFootCenterOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Quality
#include "RootMotion/FinalIK/Grounding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Fastest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Fastest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Fastest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
void RootMotion::FinalIK::Grounding::Quality::_set_Fastest(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Fastest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Fastest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Simple
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Simple
void RootMotion::FinalIK::Grounding::Quality::_set_Simple(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Best
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Best() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Best");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Best"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Best
void RootMotion::FinalIK::Grounding::Quality::_set_Best(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Best");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Best", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_isGrounded
bool RootMotion::FinalIK::Grounding::Leg::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_isGrounded
void RootMotion::FinalIK::Grounding::Leg::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_IKPosition
void RootMotion::FinalIK::Grounding::Leg::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_initiated
bool RootMotion::FinalIK::Grounding::Leg::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_initiated
void RootMotion::FinalIK::Grounding::Leg::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_initiated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_heightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_heightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_heightFromGround", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_heightFromGround
void RootMotion::FinalIK::Grounding::Leg::set_heightFromGround(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_heightFromGround", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_velocity
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_velocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_velocity
void RootMotion::FinalIK::Grounding::Leg::set_velocity(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_velocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_velocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_transform
UnityEngine::Transform* RootMotion::FinalIK::Grounding::Leg::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_transform
void RootMotion::FinalIK::Grounding::Leg::set_transform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_IKOffset
float RootMotion::FinalIK::Grounding::Leg::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_IKOffset
void RootMotion::FinalIK::Grounding::Leg::set_IKOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_heelHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_heelHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heelHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_heelHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_heelHit
void RootMotion::FinalIK::Grounding::Leg::set_heelHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heelHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_heelHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_capsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_capsuleHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_capsuleHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_capsuleHit
void RootMotion::FinalIK::Grounding::Leg::set_capsuleHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_capsuleHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_GetHitPoint
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_GetHitPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootPosition
void RootMotion::FinalIK::Grounding::Leg::SetFootPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFootPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(position)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Initiate
void RootMotion::FinalIK::Grounding::Leg::Initiate(RootMotion::FinalIK::Grounding* grounding, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(grounding, transform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding, transform);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.OnEnable
void RootMotion::FinalIK::Grounding::Leg::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Reset
void RootMotion::FinalIK::Grounding::Leg::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Process
void RootMotion::FinalIK::Grounding::Leg::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Process");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_stepHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_stepHeightFromGround", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetCapsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCapsuleHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(offsetFromHeel)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetRaycastHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetRaycastHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRaycastHit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRaycastHit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(offsetFromHeel)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.RotateNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::RotateNormal(UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateNormal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RotateNormal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(normal)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, normal);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootToPoint
void RootMotion::FinalIK::Grounding::Leg::SetFootToPoint(UnityEngine::Vector3 normal, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFootToPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(normal, point)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, normal, point);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootToPlane
void RootMotion::FinalIK::Grounding::Leg::SetFootToPlane(UnityEngine::Vector3 planeNormal, UnityEngine::Vector3 planePoint, UnityEngine::Vector3 heelHitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPlane");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFootToPlane", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(planeNormal, planePoint, heelHitPoint)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, planeNormal, planePoint, heelHitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround(UnityEngine::Vector3 hitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHeightFromGround", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hitPoint)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, hitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.RotateFoot
void RootMotion::FinalIK::Grounding::Leg::RotateFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateFoot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RotateFoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetRotationOffsetTarget
UnityEngine::Quaternion RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRotationOffsetTarget", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_rootYOffset
float RootMotion::FinalIK::Grounding::Leg::get_rootYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_rootYOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rootYOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.get_IKOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.set_IKOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.get_heightOffset
float RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_heightOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.set_heightOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_heightOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Initiate
void RootMotion::FinalIK::Grounding::Pelvis::Initiate(RootMotion::FinalIK::Grounding* grounding) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(grounding)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Reset
void RootMotion::FinalIK::Grounding::Pelvis::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.OnEnable
void RootMotion::FinalIK::Grounding::Pelvis::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Process
void RootMotion::FinalIK::Grounding::Pelvis::Process(float lowestOffset, float highestOffset, bool isGrounded) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Process");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lowestOffset, highestOffset, isGrounded)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowestOffset, highestOffset, isGrounded);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenSetupTutorial
void RootMotion::FinalIK::AimIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.SupportGroup
void RootMotion::FinalIK::AimIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.ASThread
void RootMotion::FinalIK::AimIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenUserManual
void RootMotion::FinalIK::AimIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenScriptReference
void RootMotion::FinalIK::AimIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::AimIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ArmIK
#include "RootMotion/FinalIK/ArmIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ArmIK.SupportGroup
void RootMotion::FinalIK::ArmIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.ASThread
void RootMotion::FinalIK::ArmIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenUserManual
void RootMotion::FinalIK::ArmIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenScriptReference
void RootMotion::FinalIK::ArmIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::ArmIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.CCDIK
#include "RootMotion/FinalIK/CCDIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.CCDIK.SupportGroup
void RootMotion::FinalIK::CCDIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.ASThread
void RootMotion::FinalIK::CCDIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenUserManual
void RootMotion::FinalIK::CCDIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenScriptReference
void RootMotion::FinalIK::CCDIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::CCDIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIK.SupportGroup
void RootMotion::FinalIK::FABRIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.ASThread
void RootMotion::FinalIK::FABRIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenUserManual
void RootMotion::FinalIK::FABRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenScriptReference
void RootMotion::FinalIK::FABRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIKRoot
#include "RootMotion/FinalIK/FABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.SupportGroup
void RootMotion::FinalIK::FABRIKRoot::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.ASThread
void RootMotion::FinalIK::FABRIKRoot::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenUserManual
void RootMotion::FinalIK::FABRIKRoot::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenScriptReference
void RootMotion::FinalIK::FABRIKRoot::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIKRoot::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenSetupTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenInspectorTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenInspectorTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SupportGroup
void RootMotion::FinalIK::FullBodyBipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ASThread
void RootMotion::FinalIK::FullBodyBipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SetReferences
void RootMotion::FinalIK::FullBodyBipedIK::SetReferences(RootMotion::BipedReferences* references, UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SetReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(references, rootNode)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesError
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesError(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReferencesError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(errorMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesWarning
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning(::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReferencesWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(warningMessage)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, warningMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.Reinitiate
void RootMotion::FinalIK::FullBodyBipedIK::Reinitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::Reinitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reinitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.AutoDetectReferences
void RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenUserManual
void RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenScriptReference
void RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::IK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenUserManual
void RootMotion::FinalIK::IK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenScriptReference
void RootMotion::FinalIK::IK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.UpdateSolver
void RootMotion::FinalIK::IK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.InitiateSolver
void RootMotion::FinalIK::IK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.FixTransforms
void RootMotion::FinalIK::IK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKExecutionOrder
#include "RootMotion/FinalIK/IKExecutionOrder.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.get_animatePhysics
bool RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Start
void RootMotion::FinalIK::IKExecutionOrder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Update
void RootMotion::FinalIK::IKExecutionOrder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixedUpdate
void RootMotion::FinalIK::IKExecutionOrder::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.LateUpdate
void RootMotion::FinalIK::IKExecutionOrder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixTransforms
void RootMotion::FinalIK::IKExecutionOrder::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LegIK
#include "RootMotion/FinalIK/LegIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LegIK.SupportGroup
void RootMotion::FinalIK::LegIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.ASThread
void RootMotion::FinalIK::LegIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenUserManual
void RootMotion::FinalIK::LegIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenScriptReference
void RootMotion::FinalIK::LegIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LegIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LimbIK
#include "RootMotion/FinalIK/LimbIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LimbIK.SupportGroup
void RootMotion::FinalIK::LimbIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.ASThread
void RootMotion::FinalIK::LimbIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenUserManual
void RootMotion::FinalIK::LimbIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenScriptReference
void RootMotion::FinalIK::LimbIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LimbIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LookAtIK.SupportGroup
void RootMotion::FinalIK::LookAtIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.ASThread
void RootMotion::FinalIK::LookAtIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenUserManual
void RootMotion::FinalIK::LookAtIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenScriptReference
void RootMotion::FinalIK::LookAtIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LookAtIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TrigonometricIK
#include "RootMotion/FinalIK/TrigonometricIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.SupportGroup
void RootMotion::FinalIK::TrigonometricIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.ASThread
void RootMotion::FinalIK::TrigonometricIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenUserManual
void RootMotion::FinalIK::TrigonometricIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenScriptReference
void RootMotion::FinalIK::TrigonometricIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::TrigonometricIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
// Including type: RootMotion.FinalIK.VRIK/References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenSetupTutorial
void RootMotion::FinalIK::VRIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.AutoDetectReferences
void RootMotion::FinalIK::VRIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GuessHandOrientations
void RootMotion::FinalIK::VRIK::GuessHandOrientations() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenUserManual
void RootMotion::FinalIK::VRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenScriptReference
void RootMotion::FinalIK::VRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::VRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.InitiateSolver
void RootMotion::FinalIK::VRIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.UpdateSolver
void RootMotion::FinalIK::VRIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
