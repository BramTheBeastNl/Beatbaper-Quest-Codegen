// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CompositorQuit
#include "Valve/VR/IVRCompositor__CompositorQuit.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorQuit.Invoke
void Valve::VR::IVRCompositor::_CompositorQuit::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorQuit::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorQuit.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_CompositorQuit::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorQuit::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorQuit.EndInvoke
void Valve::VR::IVRCompositor::_CompositorQuit::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorQuit::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_IsFullscreen
#include "Valve/VR/IVRCompositor__IsFullscreen.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_IsFullscreen.Invoke
bool Valve::VR::IVRCompositor::_IsFullscreen::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsFullscreen::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsFullscreen.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_IsFullscreen::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsFullscreen::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsFullscreen.EndInvoke
bool Valve::VR::IVRCompositor::_IsFullscreen::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsFullscreen::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetCurrentSceneFocusProcess
#include "Valve/VR/IVRCompositor__GetCurrentSceneFocusProcess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentSceneFocusProcess.Invoke
uint Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentSceneFocusProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentSceneFocusProcess.EndInvoke
uint Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentSceneFocusProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetLastFrameRenderer
#include "Valve/VR/IVRCompositor__GetLastFrameRenderer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastFrameRenderer.Invoke
uint Valve::VR::IVRCompositor::_GetLastFrameRenderer::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastFrameRenderer::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastFrameRenderer.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetLastFrameRenderer::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastFrameRenderer::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastFrameRenderer.EndInvoke
uint Valve::VR::IVRCompositor::_GetLastFrameRenderer::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastFrameRenderer::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CanRenderScene
#include "Valve/VR/IVRCompositor__CanRenderScene.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CanRenderScene.Invoke
bool Valve::VR::IVRCompositor::_CanRenderScene::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CanRenderScene::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CanRenderScene.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_CanRenderScene::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CanRenderScene::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CanRenderScene.EndInvoke
bool Valve::VR::IVRCompositor::_CanRenderScene::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CanRenderScene::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ShowMirrorWindow
#include "Valve/VR/IVRCompositor__ShowMirrorWindow.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ShowMirrorWindow.Invoke
void Valve::VR::IVRCompositor::_ShowMirrorWindow::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShowMirrorWindow::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShowMirrorWindow.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ShowMirrorWindow::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShowMirrorWindow::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShowMirrorWindow.EndInvoke
void Valve::VR::IVRCompositor::_ShowMirrorWindow::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShowMirrorWindow::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_HideMirrorWindow
#include "Valve/VR/IVRCompositor__HideMirrorWindow.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.Invoke
void Valve::VR::IVRCompositor::_HideMirrorWindow::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_HideMirrorWindow::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_HideMirrorWindow::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_HideMirrorWindow::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.EndInvoke
void Valve::VR::IVRCompositor::_HideMirrorWindow::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_HideMirrorWindow::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_IsMirrorWindowVisible
#include "Valve/VR/IVRCompositor__IsMirrorWindowVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.Invoke
bool Valve::VR::IVRCompositor::_IsMirrorWindowVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsMirrorWindowVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_IsMirrorWindowVisible::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsMirrorWindowVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.EndInvoke
bool Valve::VR::IVRCompositor::_IsMirrorWindowVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_IsMirrorWindowVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CompositorDumpImages
#include "Valve/VR/IVRCompositor__CompositorDumpImages.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.Invoke
void Valve::VR::IVRCompositor::_CompositorDumpImages::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorDumpImages::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_CompositorDumpImages::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorDumpImages::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.EndInvoke
void Valve::VR::IVRCompositor::_CompositorDumpImages::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorDumpImages::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources
#include "Valve/VR/IVRCompositor__ShouldAppRenderWithLowResources.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.Invoke
bool Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.EndInvoke
bool Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn
#include "Valve/VR/IVRCompositor__ForceInterleavedReprojectionOn.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.Invoke
void Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::Invoke(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bOverride)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::BeginInvoke(bool bOverride, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bOverride, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bOverride, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.EndInvoke
void Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ForceReconnectProcess
#include "Valve/VR/IVRCompositor__ForceReconnectProcess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.Invoke
void Valve::VR::IVRCompositor::_ForceReconnectProcess::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceReconnectProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ForceReconnectProcess::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceReconnectProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.EndInvoke
void Valve::VR::IVRCompositor::_ForceReconnectProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ForceReconnectProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SuspendRendering
#include "Valve/VR/IVRCompositor__SuspendRendering.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.Invoke
void Valve::VR::IVRCompositor::_SuspendRendering::Invoke(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SuspendRendering::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bSuspend)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_SuspendRendering::BeginInvoke(bool bSuspend, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SuspendRendering::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bSuspend, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bSuspend, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.EndInvoke
void Valve::VR::IVRCompositor::_SuspendRendering::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SuspendRendering::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11
#include "Valve/VR/IVRCompositor__GetMirrorTextureD3D11.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::Invoke(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::BeginInvoke(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::EndInvoke(System::IntPtr& ppD3D11ShaderResourceView, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppD3D11ShaderResourceView, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, ppD3D11ShaderResourceView, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11
#include "Valve/VR/IVRCompositor__ReleaseMirrorTextureD3D11.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.Invoke
void Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::Invoke(System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11ShaderResourceView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::BeginInvoke(System::IntPtr pD3D11ShaderResourceView, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11ShaderResourceView, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pD3D11ShaderResourceView, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.EndInvoke
void Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetMirrorTextureGL
#include "Valve/VR/IVRCompositor__GetMirrorTextureGL.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureGL::Invoke(Valve::VR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureGL::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pglTextureId, pglSharedTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pglTextureId, pglSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetMirrorTextureGL::BeginInvoke(Valve::VR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureGL::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pglTextureId, pglSharedTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pglTextureId, pglSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureGL::EndInvoke(uint& pglTextureId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetMirrorTextureGL::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pglTextureId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pglTextureId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture
#include "Valve/VR/IVRCompositor__ReleaseSharedGLTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.Invoke
bool Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::Invoke(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glTextureId, glSharedTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::BeginInvoke(uint glTextureId, System::IntPtr glSharedTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glTextureId, glSharedTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, glTextureId, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.EndInvoke
bool Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess
#include "Valve/VR/IVRCompositor__LockGLSharedTextureForAccess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.Invoke
void Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::Invoke(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::BeginInvoke(System::IntPtr glSharedTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.EndInvoke
void Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess
#include "Valve/VR/IVRCompositor__UnlockGLSharedTextureForAccess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.Invoke
void Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::Invoke(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::BeginInvoke(System::IntPtr glSharedTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.EndInvoke
void Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired
#include "Valve/VR/IVRCompositor__GetVulkanInstanceExtensionsRequired.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.Invoke
uint Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::Invoke(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::BeginInvoke(System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchValue, unBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.EndInvoke
uint Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired
#include "Valve/VR/IVRCompositor__GetVulkanDeviceExtensionsRequired.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.Invoke
uint Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::Invoke(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pPhysicalDevice, pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::BeginInvoke(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pPhysicalDevice, pchValue, unBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.EndInvoke
uint Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SetExplicitTimingMode
#include "Valve/VR/IVRCompositor__SetExplicitTimingMode.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.Invoke
void Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke(Valve::VR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTimingMode)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke(Valve::VR::EVRCompositorTimingMode eTimingMode, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTimingMode, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTimingMode, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.EndInvoke
void Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SubmitExplicitTimingData
#include "Valve/VR/IVRCompositor__SubmitExplicitTimingData.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SubmitExplicitTimingData::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SubmitExplicitTimingData::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_SubmitExplicitTimingData::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SubmitExplicitTimingData::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SubmitExplicitTimingData::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SubmitExplicitTimingData::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_FindOverlay
#include "Valve/VR/IVROverlay__FindOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_FindOverlay::Invoke(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_FindOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_FindOverlay::BeginInvoke(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_FindOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_FindOverlay::EndInvoke(uint64_t& pOverlayHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_FindOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOverlayHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pOverlayHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateOverlay
#include "Valve/VR/IVROverlay__CreateOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateOverlay::Invoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayName, pOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, pOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CreateOverlay::BeginInvoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayName, pOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, pOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateOverlay::EndInvoke(uint64_t& pOverlayHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOverlayHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pOverlayHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_DestroyOverlay
#include "Valve/VR/IVROverlay__DestroyOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_DestroyOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_DestroyOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_DestroyOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_DestroyOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_DestroyOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_DestroyOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetHighQualityOverlay
#include "Valve/VR/IVROverlay__SetHighQualityOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetHighQualityOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetHighQualityOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetHighQualityOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetHighQualityOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetHighQualityOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetHighQualityOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetHighQualityOverlay
#include "Valve/VR/IVROverlay__GetHighQualityOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetHighQualityOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetHighQualityOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetHighQualityOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetHighQualityOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetHighQualityOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetHighQualityOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayKey
#include "Valve/VR/IVROverlay__GetOverlayKey.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.Invoke
uint Valve::VR::IVROverlay::_GetOverlayKey::Invoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayKey::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayKey::BeginInvoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayKey::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayKey::EndInvoke(Valve::VR::EVROverlayError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayKey::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayName
#include "Valve/VR/IVROverlay__GetOverlayName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.Invoke
uint Valve::VR::IVROverlay::_GetOverlayName::Invoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayName::BeginInvoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayName::EndInvoke(Valve::VR::EVROverlayError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayName
#include "Valve/VR/IVROverlay__SetOverlayName.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayName::Invoke(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchName)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayName::BeginInvoke(uint64_t ulOverlayHandle, ::Il2CppString* pchName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchName, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayImageData
#include "Valve/VR/IVROverlay__GetOverlayImageData.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayImageData::Invoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayImageData::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayImageData::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayImageData::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayImageData::EndInvoke(uint& punWidth, uint& punHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayImageData::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punWidth, punHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punWidth, punHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum
#include "Valve/VR/IVROverlay__GetOverlayErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::Invoke(Valve::VR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::BeginInvoke(Valve::VR::EVROverlayError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRenderingPid
#include "Valve/VR/IVROverlay__SetOverlayRenderingPid.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderingPid::Invoke(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderingPid::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unPID)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRenderingPid::BeginInvoke(uint64_t ulOverlayHandle, uint unPID, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderingPid::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unPID, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unPID, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderingPid::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderingPid::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayRenderingPid
#include "Valve/VR/IVROverlay__GetOverlayRenderingPid.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.Invoke
uint Valve::VR::IVROverlay::_GetOverlayRenderingPid::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderingPid::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayRenderingPid::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderingPid::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayRenderingPid::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderingPid::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFlag
#include "Valve/VR/IVROverlay__SetOverlayFlag.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFlag::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFlag::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, bEnabled)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFlag::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFlag::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, bEnabled, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFlag::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFlag::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayFlag
#include "Valve/VR/IVROverlay__GetOverlayFlag.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlag::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool& pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlag::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, pbEnabled)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, pbEnabled);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayFlag::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool& pbEnabled, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlag::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, pbEnabled, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, pbEnabled, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlag::EndInvoke(bool& pbEnabled, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlag::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pbEnabled, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pbEnabled, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayColor
#include "Valve/VR/IVROverlay__SetOverlayColor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayColor::Invoke(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fRed, fGreen, fBlue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayColor::BeginInvoke(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fRed, fGreen, fBlue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayColor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayColor
#include "Valve/VR/IVROverlay__GetOverlayColor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayColor::Invoke(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfRed, pfGreen, pfBlue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfRed, pfGreen, pfBlue);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayColor::BeginInvoke(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfRed, pfGreen, pfBlue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pfRed, pfGreen, pfBlue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayColor::EndInvoke(float& pfRed, float& pfGreen, float& pfBlue, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfRed, pfGreen, pfBlue, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pfRed, pfGreen, pfBlue, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayAlpha
#include "Valve/VR/IVROverlay__SetOverlayAlpha.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAlpha::Invoke(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAlpha::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fAlpha)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayAlpha::BeginInvoke(uint64_t ulOverlayHandle, float fAlpha, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAlpha::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fAlpha, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fAlpha, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAlpha::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAlpha::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayAlpha
#include "Valve/VR/IVROverlay__GetOverlayAlpha.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAlpha::Invoke(uint64_t ulOverlayHandle, float& pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAlpha::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfAlpha)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfAlpha);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayAlpha::BeginInvoke(uint64_t ulOverlayHandle, float& pfAlpha, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAlpha::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfAlpha, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pfAlpha, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAlpha::EndInvoke(float& pfAlpha, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAlpha::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfAlpha, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pfAlpha, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexelAspect
#include "Valve/VR/IVROverlay__SetOverlayTexelAspect.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexelAspect::Invoke(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexelAspect::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fTexelAspect)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexelAspect::BeginInvoke(uint64_t ulOverlayHandle, float fTexelAspect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexelAspect::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fTexelAspect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexelAspect::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexelAspect::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexelAspect
#include "Valve/VR/IVROverlay__GetOverlayTexelAspect.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexelAspect::Invoke(uint64_t ulOverlayHandle, float& pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexelAspect::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfTexelAspect)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfTexelAspect);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexelAspect::BeginInvoke(uint64_t ulOverlayHandle, float& pfTexelAspect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexelAspect::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfTexelAspect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pfTexelAspect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexelAspect::EndInvoke(float& pfTexelAspect, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexelAspect::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfTexelAspect, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pfTexelAspect, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlaySortOrder
#include "Valve/VR/IVROverlay__SetOverlaySortOrder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlaySortOrder::Invoke(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlaySortOrder::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unSortOrder)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlaySortOrder::BeginInvoke(uint64_t ulOverlayHandle, uint unSortOrder, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlaySortOrder::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unSortOrder, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unSortOrder, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlaySortOrder::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlaySortOrder::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlaySortOrder
#include "Valve/VR/IVROverlay__GetOverlaySortOrder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlaySortOrder::Invoke(uint64_t ulOverlayHandle, uint& punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlaySortOrder::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punSortOrder)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punSortOrder);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlaySortOrder::BeginInvoke(uint64_t ulOverlayHandle, uint& punSortOrder, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlaySortOrder::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punSortOrder, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punSortOrder, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlaySortOrder::EndInvoke(uint& punSortOrder, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlaySortOrder::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punSortOrder, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punSortOrder, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayWidthInMeters
#include "Valve/VR/IVROverlay__SetOverlayWidthInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayWidthInMeters::Invoke(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayWidthInMeters::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fWidthInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayWidthInMeters::BeginInvoke(uint64_t ulOverlayHandle, float fWidthInMeters, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayWidthInMeters::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fWidthInMeters, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayWidthInMeters::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayWidthInMeters::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayWidthInMeters
#include "Valve/VR/IVROverlay__GetOverlayWidthInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayWidthInMeters::Invoke(uint64_t ulOverlayHandle, float& pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayWidthInMeters::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfWidthInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfWidthInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayWidthInMeters::BeginInvoke(uint64_t ulOverlayHandle, float& pfWidthInMeters, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayWidthInMeters::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfWidthInMeters, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pfWidthInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayWidthInMeters::EndInvoke(float& pfWidthInMeters, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayWidthInMeters::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfWidthInMeters, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pfWidthInMeters, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters
#include "Valve/VR/IVROverlay__SetOverlayAutoCurveDistanceRangeInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::Invoke(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters
#include "Valve/VR/IVROverlay__GetOverlayAutoCurveDistanceRangeInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::Invoke(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::EndInvoke(float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfMinDistanceInMeters, pfMaxDistanceInMeters, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pfMinDistanceInMeters, pfMaxDistanceInMeters, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace
#include "Valve/VR/IVROverlay__SetOverlayTextureColorSpace.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::Invoke(uint64_t ulOverlayHandle, Valve::VR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTextureColorSpace)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::EColorSpace eTextureColorSpace, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTextureColorSpace, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace
#include "Valve/VR/IVROverlay__GetOverlayTextureColorSpace.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::Invoke(uint64_t ulOverlayHandle, Valve::VR::EColorSpace& peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTextureColorSpace)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTextureColorSpace);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::EColorSpace& peTextureColorSpace, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTextureColorSpace, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, peTextureColorSpace, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::EndInvoke(Valve::VR::EColorSpace& peTextureColorSpace, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peTextureColorSpace, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, peTextureColorSpace, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTextureBounds
#include "Valve/VR/IVROverlay__SetOverlayTextureBounds.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureBounds::Invoke(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureBounds::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTextureBounds::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureBounds::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureBounds::EndInvoke(Valve::VR::VRTextureBounds_t& pOverlayTextureBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTextureBounds::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOverlayTextureBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pOverlayTextureBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureBounds
#include "Valve/VR/IVROverlay__GetOverlayTextureBounds.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureBounds::Invoke(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureBounds::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureBounds::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureBounds::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureBounds::EndInvoke(Valve::VR::VRTextureBounds_t& pOverlayTextureBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureBounds::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOverlayTextureBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pOverlayTextureBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayRenderModel
#include "Valve/VR/IVROverlay__GetOverlayRenderModel.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.Invoke
uint Valve::VR::IVROverlay::_GetOverlayRenderModel::Invoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::HmdColor_t& pColor, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderModel::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pColor, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pColor, pError);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayRenderModel::BeginInvoke(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::HmdColor_t& pColor, Valve::VR::EVROverlayError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderModel::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pColor, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pColor, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayRenderModel::EndInvoke(Valve::VR::HmdColor_t& pColor, Valve::VR::EVROverlayError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayRenderModel::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pColor, pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pColor, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRenderModel
#include "Valve/VR/IVROverlay__SetOverlayRenderModel.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderModel::Invoke(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, Valve::VR::HmdColor_t& pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderModel::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchRenderModel, pColor)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, pColor);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRenderModel::BeginInvoke(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, Valve::VR::HmdColor_t& pColor, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderModel::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchRenderModel, pColor, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, pColor, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderModel::EndInvoke(Valve::VR::HmdColor_t& pColor, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRenderModel::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pColor, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pColor, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformType
#include "Valve/VR/IVROverlay__GetOverlayTransformType.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformType::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayTransformType& peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTransformType)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTransformType);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformType::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayTransformType& peTransformType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTransformType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, peTransformType, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformType::EndInvoke(Valve::VR::VROverlayTransformType& peTransformType, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peTransformType, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, peTransformType, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute
#include "Valve/VR/IVROverlay__SetOverlayTransformAbsolute.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::Invoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTrackingOriginToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatTrackingOriginToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute
#include "Valve/VR/IVROverlay__GetOverlayTransformAbsolute.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::Invoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin& peTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin& peTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::EndInvoke(Valve::VR::ETrackingUniverseOrigin& peTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peTrackingOrigin, pmatTrackingOriginToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, peTrackingOrigin, pmatTrackingOriginToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative
#include "Valve/VR/IVROverlay__SetOverlayTransformTrackedDeviceRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::Invoke(uint64_t ulOverlayHandle, uint unTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::BeginInvoke(uint64_t ulOverlayHandle, uint unTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTrackedDeviceToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatTrackedDeviceToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke(uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punTrackedDevice, pmatTrackedDeviceToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__SetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unDeviceIndex, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unDeviceIndex, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke(uint& punDeviceIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punDeviceIndex, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punDeviceIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke(uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__SetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke(Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatParentOverlayToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatParentOverlayToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowOverlay
#include "Valve/VR/IVROverlay__ShowOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideOverlay
#include "Valve/VR/IVROverlay__HideOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_HideOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsOverlayVisible
#include "Valve/VR/IVROverlay__IsOverlayVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.Invoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates
#include "Valve/VR/IVROverlay__GetTransformForOverlayCoordinates.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_PollNextOverlayEvent
#include "Valve/VR/IVROverlay__PollNextOverlayEvent.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.Invoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.EndInvoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke(Valve::VR::VREvent_t& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayInputMethod
#include "Valve/VR/IVROverlay__GetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peInputMethod);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peInputMethod, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, peInputMethod, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke(Valve::VR::VROverlayInputMethod& peInputMethod, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peInputMethod, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, peInputMethod, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayInputMethod
#include "Valve/VR/IVROverlay__SetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMethod, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMethod, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayMouseScale
#include "Valve/VR/IVROverlay__GetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke(Valve::VR::HmdVector2_t& pvecMouseScale, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvecMouseScale, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvecMouseScale, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayMouseScale
#include "Valve/VR/IVROverlay__SetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke(Valve::VR::HmdVector2_t& pvecMouseScale, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvecMouseScale, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvecMouseScale, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ComputeOverlayIntersection
#include "Valve/VR/IVROverlay__ComputeOverlayIntersection.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.Invoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pParams, pResults)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults);
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pParams, pResults, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.EndInvoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke(Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pParams, pResults, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pParams, pResults, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsHoverTargetOverlay
#include "Valve/VR/IVROverlay__IsHoverTargetOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.Invoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__GetGamepadFocusOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__SetGamepadFocusOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke(uint64_t ulNewFocusOverlay, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulNewFocusOverlay, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayNeighbor
#include "Valve/VR/IVROverlay__SetOverlayNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, ulTo, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor
#include "Valve/VR/IVROverlay__MoveGamepadFocusToNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__SetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__GetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke(Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvCenter, pfRadius, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvCenter, pfRadius, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexture
#include "Valve/VR/IVROverlay__SetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::Invoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke(Valve::VR::Texture_t& pTexture, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pTexture, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ClearOverlayTexture
#include "Valve/VR/IVROverlay__ClearOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRaw
#include "Valve/VR/IVROverlay__SetOverlayRaw.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::Invoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFromFile
#include "Valve/VR/IVROverlay__SetOverlayFromFile.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchFilePath, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexture
#include "Valve/VR/IVROverlay__GetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::Invoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke(System::IntPtr& pNativeTextureHandle, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle
#include "Valve/VR/IVROverlay__ReleaseNativeOverlayHandle.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureSize
#include "Valve/VR/IVROverlay__GetOverlayTextureSize.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke(uint& pWidth, uint& pHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pWidth, pHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pWidth, pHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateDashboardOverlay
#include "Valve/VR/IVROverlay__CreateDashboardOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke(uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMainHandle, pThumbnailHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pMainHandle, pThumbnailHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsDashboardVisible
#include "Valve/VR/IVROverlay__IsDashboardVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.Invoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsActiveDashboardOverlay
#include "Valve/VR/IVROverlay__IsActiveDashboardOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.Invoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__SetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint unProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__GetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint& punProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke(uint& punProcessId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punProcessId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punProcessId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowDashboard
#include "Valve/VR/IVROverlay__ShowDashboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.Invoke
void Valve::VR::IVROverlay::_ShowDashboard::Invoke(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke(::Il2CppString* pchOverlayToShow, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayToShow, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.EndInvoke
void Valve::VR::IVROverlay::_ShowDashboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice
#include "Valve/VR/IVROverlay__GetPrimaryDashboardDevice.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.Invoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.EndInvoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboard
#include "Valve/VR/IVROverlay__ShowKeyboard.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::Invoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboardForOverlay
#include "Valve/VR/IVROverlay__ShowKeyboardForOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetKeyboardText
#include "Valve/VR/IVROverlay__GetKeyboardText.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.Invoke
uint Valve::VR::IVROverlay::_GetKeyboardText::Invoke(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke(System::Text::StringBuilder* pchText, uint cchText, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchText, cchText, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.EndInvoke
uint Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideKeyboard
#include "Valve/VR/IVROverlay__HideKeyboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.Invoke
void Valve::VR::IVROverlay::_HideKeyboard::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.EndInvoke
void Valve::VR::IVROverlay::_HideKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
