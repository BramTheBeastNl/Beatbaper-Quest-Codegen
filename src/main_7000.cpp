// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Polyglot.LocalizedTextMesh
#include "Polyglot/LocalizedTextMesh.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
// Including type: UnityEngine.TextAlignment
#include "UnityEngine/TextAlignment.hpp"
// Including type: Polyglot.LanguageDirection
#include "Polyglot/LanguageDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Polyglot.LocalizedTextMesh.get_Key
::Il2CppString* Polyglot::LocalizedTextMesh::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::get_Key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.Reset
void Polyglot::LocalizedTextMesh::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.Start
void Polyglot::LocalizedTextMesh::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.OnLocalize
void Polyglot::LocalizedTextMesh::OnLocalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::OnLocalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnLocalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.IsOppositeDirection
bool Polyglot::LocalizedTextMesh::IsOppositeDirection(UnityEngine::TextAlignment alignment, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::IsOppositeDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOppositeDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.IsAlignmentRight
bool Polyglot::LocalizedTextMesh::IsAlignmentRight(UnityEngine::TextAlignment alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::IsAlignmentRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Autogenerated method: Polyglot.LocalizedTextMesh.IsAlignmentLeft
bool Polyglot::LocalizedTextMesh::IsAlignmentLeft(UnityEngine::TextAlignment alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMesh::IsAlignmentLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Writing MetadataGetter for method: LocalizedTextMesh::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalizedTextMesh::*)()>(&LocalizedTextMesh::get_Key)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMesh::*)()>(&LocalizedTextMesh::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMesh::*)()>(&LocalizedTextMesh::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::OnLocalize
// Il2CppName: OnLocalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMesh::*)()>(&LocalizedTextMesh::OnLocalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "OnLocalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::IsOppositeDirection
// Il2CppName: IsOppositeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMesh::*)(UnityEngine::TextAlignment, Polyglot::LanguageDirection)>(&LocalizedTextMesh::IsOppositeDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "IsOppositeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAlignment>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::IsAlignmentRight
// Il2CppName: IsAlignmentRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMesh::*)(UnityEngine::TextAlignment)>(&LocalizedTextMesh::IsAlignmentRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "IsAlignmentRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAlignment>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::IsAlignmentLeft
// Il2CppName: IsAlignmentLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMesh::*)(UnityEngine::TextAlignment)>(&LocalizedTextMesh::IsAlignmentLeft)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), "IsAlignmentLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAlignment>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMesh::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMesh::*)()>(&LocalizedTextMesh::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMesh::*)()>(&LocalizedTextMesh::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Polyglot.LocalizedTextMeshPro
#include "Polyglot/LocalizedTextMeshPro.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Polyglot.LocalizedTextMeshPro.SetText
void Polyglot::LocalizedTextMeshPro::SetText(TMPro::TextMeshPro* text, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshPro::SetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, value);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.UpdateAlignment
void Polyglot::LocalizedTextMeshPro::UpdateAlignment(TMPro::TextMeshPro* text, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshPro::UpdateAlignment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAlignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsOppositeDirection
bool Polyglot::LocalizedTextMeshPro::IsOppositeDirection(TMPro::TextAlignmentOptions alignment, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshPro::IsOppositeDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOppositeDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsAlignmentRight
bool Polyglot::LocalizedTextMeshPro::IsAlignmentRight(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshPro::IsAlignmentRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Autogenerated method: Polyglot.LocalizedTextMeshPro.IsAlignmentLeft
bool Polyglot::LocalizedTextMeshPro::IsAlignmentLeft(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshPro::IsAlignmentLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Writing MetadataGetter for method: LocalizedTextMeshPro::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshPro::*)(TMPro::TextMeshPro*, ::Il2CppString*)>(&LocalizedTextMeshPro::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshPro*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshPro::UpdateAlignment
// Il2CppName: UpdateAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshPro::*)(TMPro::TextMeshPro*, Polyglot::LanguageDirection)>(&LocalizedTextMeshPro::UpdateAlignment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), "UpdateAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshPro*>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshPro::IsOppositeDirection
// Il2CppName: IsOppositeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshPro::*)(TMPro::TextAlignmentOptions, Polyglot::LanguageDirection)>(&LocalizedTextMeshPro::IsOppositeDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), "IsOppositeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshPro::IsAlignmentRight
// Il2CppName: IsAlignmentRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshPro::*)(TMPro::TextAlignmentOptions)>(&LocalizedTextMeshPro::IsAlignmentRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), "IsAlignmentRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshPro::IsAlignmentLeft
// Il2CppName: IsAlignmentLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshPro::*)(TMPro::TextAlignmentOptions)>(&LocalizedTextMeshPro::IsAlignmentLeft)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), "IsAlignmentLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshPro::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshPro::*)()>(&LocalizedTextMeshPro::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshPro::*)()>(&LocalizedTextMeshPro::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshPro*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Polyglot.LocalizedTextMeshProUGUI
#include "Polyglot/LocalizedTextMeshProUGUI.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: Polyglot.LanguageDirection
#include "Polyglot/LanguageDirection.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Polyglot.LocalizedTextMeshProUGUI.SetText
void Polyglot::LocalizedTextMeshProUGUI::SetText(TMPro::TextMeshProUGUI* text, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshProUGUI::SetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, value);
}
// Autogenerated method: Polyglot.LocalizedTextMeshProUGUI.UpdateAlignment
void Polyglot::LocalizedTextMeshProUGUI::UpdateAlignment(TMPro::TextMeshProUGUI* text, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshProUGUI::UpdateAlignment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAlignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshProUGUI.IsOppositeDirection
bool Polyglot::LocalizedTextMeshProUGUI::IsOppositeDirection(TMPro::TextAlignmentOptions alignment, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshProUGUI::IsOppositeDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOppositeDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment, direction);
}
// Autogenerated method: Polyglot.LocalizedTextMeshProUGUI.IsAlignmentRight
bool Polyglot::LocalizedTextMeshProUGUI::IsAlignmentRight(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshProUGUI::IsAlignmentRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Autogenerated method: Polyglot.LocalizedTextMeshProUGUI.IsAlignmentLeft
bool Polyglot::LocalizedTextMeshProUGUI::IsAlignmentLeft(TMPro::TextAlignmentOptions alignment) {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::LocalizedTextMeshProUGUI::IsAlignmentLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAlignmentLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alignment)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, alignment);
}
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshProUGUI::*)(TMPro::TextMeshProUGUI*, ::Il2CppString*)>(&LocalizedTextMeshProUGUI::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshProUGUI*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::UpdateAlignment
// Il2CppName: UpdateAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshProUGUI::*)(TMPro::TextMeshProUGUI*, Polyglot::LanguageDirection)>(&LocalizedTextMeshProUGUI::UpdateAlignment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), "UpdateAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshProUGUI*>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::IsOppositeDirection
// Il2CppName: IsOppositeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshProUGUI::*)(TMPro::TextAlignmentOptions, Polyglot::LanguageDirection)>(&LocalizedTextMeshProUGUI::IsOppositeDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), "IsOppositeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::IsAlignmentRight
// Il2CppName: IsAlignmentRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshProUGUI::*)(TMPro::TextAlignmentOptions)>(&LocalizedTextMeshProUGUI::IsAlignmentRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), "IsAlignmentRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::IsAlignmentLeft
// Il2CppName: IsAlignmentLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextMeshProUGUI::*)(TMPro::TextAlignmentOptions)>(&LocalizedTextMeshProUGUI::IsAlignmentLeft)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), "IsAlignmentLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextMeshProUGUI::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshProUGUI::*)()>(&LocalizedTextMeshProUGUI::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextMeshProUGUI::*)()>(&LocalizedTextMeshProUGUI::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextMeshProUGUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Polyglot.SaveLanguagePreference
#include "Polyglot/SaveLanguagePreference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Polyglot.SaveLanguagePreference.Start
void Polyglot::SaveLanguagePreference::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::SaveLanguagePreference::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Polyglot.SaveLanguagePreference.OnLocalize
void Polyglot::SaveLanguagePreference::OnLocalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Polyglot::SaveLanguagePreference::OnLocalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnLocalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaveLanguagePreference::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaveLanguagePreference::*)()>(&SaveLanguagePreference::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaveLanguagePreference*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaveLanguagePreference::OnLocalize
// Il2CppName: OnLocalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaveLanguagePreference::*)()>(&SaveLanguagePreference::OnLocalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaveLanguagePreference*), "OnLocalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaveLanguagePreference::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaveLanguagePreference::*)()>(&SaveLanguagePreference::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaveLanguagePreference*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaveLanguagePreference::*)()>(&SaveLanguagePreference::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaveLanguagePreference*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlwaysVisibleQuad
#include "GlobalNamespace/AlwaysVisibleQuad.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AlwaysVisibleQuad.OnEnable
void GlobalNamespace::AlwaysVisibleQuad::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysVisibleQuad::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysVisibleQuad.OnDisable
void GlobalNamespace::AlwaysVisibleQuad::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysVisibleQuad::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AlwaysVisibleQuad::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysVisibleQuad::*)()>(&AlwaysVisibleQuad::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysVisibleQuad*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysVisibleQuad::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysVisibleQuad::*)()>(&AlwaysVisibleQuad::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysVisibleQuad*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysVisibleQuad::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysVisibleQuad::*)()>(&AlwaysVisibleQuad::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysVisibleQuad*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysVisibleQuad::*)()>(&AlwaysVisibleQuad::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysVisibleQuad*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakedLightWithIdBase
#include "GlobalNamespace/BakedLightWithIdBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BakedLightWithIdBase.get_id
int GlobalNamespace::BakedLightWithIdBase::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightWithIdBase::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightWithIdBase.SetupLightSource
void GlobalNamespace::BakedLightWithIdBase::SetupLightSource(float intensityMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightWithIdBase::SetupLightSource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupLightSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(intensityMultiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, intensityMultiplier);
}
// Writing MetadataGetter for method: BakedLightWithIdBase::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BakedLightWithIdBase::*)()>(&BakedLightWithIdBase::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightWithIdBase*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightWithIdBase::SetupLightSource
// Il2CppName: SetupLightSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightWithIdBase::*)(float)>(&BakedLightWithIdBase::SetupLightSource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightWithIdBase*), "SetupLightSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BakedLightWithIdBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightWithIdBase::*)()>(&BakedLightWithIdBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightWithIdBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightWithIdBase::*)()>(&BakedLightWithIdBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightWithIdBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CommandBufferBlurryScreenGrab
#include "GlobalNamespace/CommandBufferBlurryScreenGrab.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: CommandBufferOwners
#include "GlobalNamespace/CommandBufferOwners.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CommandBufferOwners> _cameras
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* GlobalNamespace::CommandBufferBlurryScreenGrab::_get__cameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::_get__cameras");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>*>("", "CommandBufferBlurryScreenGrab", "_cameras")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CommandBufferOwners> _cameras
void GlobalNamespace::CommandBufferBlurryScreenGrab::_set__cameras(System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::_set__cameras");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CommandBufferBlurryScreenGrab", "_cameras", value));
}
// Autogenerated method: CommandBufferBlurryScreenGrab.CreateCommandBuffer
UnityEngine::Rendering::CommandBuffer* GlobalNamespace::CommandBufferBlurryScreenGrab::CreateCommandBuffer(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::CreateCommandBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCommandBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CommandBuffer*, false>(this, ___internal__method, camera);
}
// Autogenerated method: CommandBufferBlurryScreenGrab.CamerasDict
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* GlobalNamespace::CommandBufferBlurryScreenGrab::CamerasDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::CamerasDict");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CamerasDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>*, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferBlurryScreenGrab.CommandBufferCameraEvent
UnityEngine::Rendering::CameraEvent GlobalNamespace::CommandBufferBlurryScreenGrab::CommandBufferCameraEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::CommandBufferCameraEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommandBufferCameraEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CameraEvent, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferBlurryScreenGrab..cctor
void GlobalNamespace::CommandBufferBlurryScreenGrab::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferBlurryScreenGrab::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CommandBufferBlurryScreenGrab", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: CommandBufferBlurryScreenGrab::CreateCommandBuffer
// Il2CppName: CreateCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CommandBuffer* (CommandBufferBlurryScreenGrab::*)(UnityEngine::Camera*)>(&CommandBufferBlurryScreenGrab::CreateCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), "CreateCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferBlurryScreenGrab::CamerasDict
// Il2CppName: CamerasDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* (CommandBufferBlurryScreenGrab::*)()>(&CommandBufferBlurryScreenGrab::CamerasDict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), "CamerasDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferBlurryScreenGrab::CommandBufferCameraEvent
// Il2CppName: CommandBufferCameraEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CameraEvent (CommandBufferBlurryScreenGrab::*)()>(&CommandBufferBlurryScreenGrab::CommandBufferCameraEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), "CommandBufferCameraEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferBlurryScreenGrab::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferBlurryScreenGrab::*)()>(&CommandBufferBlurryScreenGrab::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferBlurryScreenGrab::*)()>(&CommandBufferBlurryScreenGrab::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferBlurryScreenGrab::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CommandBufferBlurryScreenGrab::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferBlurryScreenGrab*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CommandBufferGrabPass
#include "GlobalNamespace/CommandBufferGrabPass.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: CommandBufferOwners
#include "GlobalNamespace/CommandBufferOwners.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CommandBufferOwners> _cameras
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* GlobalNamespace::CommandBufferGrabPass::_get__cameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::_get__cameras");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>*>("", "CommandBufferGrabPass", "_cameras")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CommandBufferOwners> _cameras
void GlobalNamespace::CommandBufferGrabPass::_set__cameras(System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::_set__cameras");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CommandBufferGrabPass", "_cameras", value));
}
// Autogenerated method: CommandBufferGrabPass.CreateCommandBuffer
UnityEngine::Rendering::CommandBuffer* GlobalNamespace::CommandBufferGrabPass::CreateCommandBuffer(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::CreateCommandBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCommandBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CommandBuffer*, false>(this, ___internal__method, camera);
}
// Autogenerated method: CommandBufferGrabPass.CamerasDict
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* GlobalNamespace::CommandBufferGrabPass::CamerasDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::CamerasDict");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CamerasDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>*, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGrabPass.CommandBufferCameraEvent
UnityEngine::Rendering::CameraEvent GlobalNamespace::CommandBufferGrabPass::CommandBufferCameraEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::CommandBufferCameraEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommandBufferCameraEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CameraEvent, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGrabPass..cctor
void GlobalNamespace::CommandBufferGrabPass::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGrabPass::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CommandBufferGrabPass", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: CommandBufferGrabPass::CreateCommandBuffer
// Il2CppName: CreateCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CommandBuffer* (CommandBufferGrabPass::*)(UnityEngine::Camera*)>(&CommandBufferGrabPass::CreateCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), "CreateCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferGrabPass::CamerasDict
// Il2CppName: CamerasDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* (CommandBufferGrabPass::*)()>(&CommandBufferGrabPass::CamerasDict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), "CamerasDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGrabPass::CommandBufferCameraEvent
// Il2CppName: CommandBufferCameraEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CameraEvent (CommandBufferGrabPass::*)()>(&CommandBufferGrabPass::CommandBufferCameraEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), "CommandBufferCameraEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGrabPass::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGrabPass::*)()>(&CommandBufferGrabPass::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGrabPass::*)()>(&CommandBufferGrabPass::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGrabPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CommandBufferGrabPass::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGrabPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CommandBufferGOCore
#include "GlobalNamespace/CommandBufferGOCore.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: CommandBufferOwners
#include "GlobalNamespace/CommandBufferOwners.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Rendering.CameraEvent
#include "UnityEngine/Rendering/CameraEvent.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01A14
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _material
UnityEngine::Material* GlobalNamespace::CommandBufferGOCore::_get__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::_get__material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "CommandBufferGOCore", "_material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _material
void GlobalNamespace::CommandBufferGOCore::_set__material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::_set__material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CommandBufferGOCore", "_material", value));
}
// Autogenerated method: CommandBufferGOCore.OnEnable
void GlobalNamespace::CommandBufferGOCore::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGOCore.OnDisable
void GlobalNamespace::CommandBufferGOCore::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGOCore.OnWillRenderObject
void GlobalNamespace::CommandBufferGOCore::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::OnWillRenderObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGOCore.CommandBufferCameraEvent
UnityEngine::Rendering::CameraEvent GlobalNamespace::CommandBufferGOCore::CommandBufferCameraEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::CommandBufferCameraEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommandBufferCameraEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CameraEvent, false>(this, ___internal__method);
}
// Autogenerated method: CommandBufferGOCore.CreateCommandBuffer
UnityEngine::Rendering::CommandBuffer* GlobalNamespace::CommandBufferGOCore::CreateCommandBuffer(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::CreateCommandBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCommandBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CommandBuffer*, false>(this, ___internal__method, camera);
}
// Autogenerated method: CommandBufferGOCore.CamerasDict
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* GlobalNamespace::CommandBufferGOCore::CamerasDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferGOCore::CamerasDict");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CamerasDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CommandBufferGOCore::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGOCore::*)()>(&CommandBufferGOCore::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGOCore::*)()>(&CommandBufferGOCore::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::OnWillRenderObject
// Il2CppName: OnWillRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGOCore::*)()>(&CommandBufferGOCore::OnWillRenderObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "OnWillRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::CommandBufferCameraEvent
// Il2CppName: CommandBufferCameraEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CameraEvent (CommandBufferGOCore::*)()>(&CommandBufferGOCore::CommandBufferCameraEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "CommandBufferCameraEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::CreateCommandBuffer
// Il2CppName: CreateCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CommandBuffer* (CommandBufferGOCore::*)(UnityEngine::Camera*)>(&CommandBufferGOCore::CreateCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "CreateCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::CamerasDict
// Il2CppName: CamerasDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CommandBufferOwners*>* (CommandBufferGOCore::*)()>(&CommandBufferGOCore::CamerasDict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), "CamerasDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferGOCore::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGOCore::*)()>(&CommandBufferGOCore::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferGOCore::*)()>(&CommandBufferGOCore::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferGOCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CommandBufferOwners
#include "GlobalNamespace/CommandBufferOwners.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CommandBufferOwners.AddOwner
void GlobalNamespace::CommandBufferOwners::AddOwner(UnityEngine::Object* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferOwners::AddOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, owner);
}
// Autogenerated method: CommandBufferOwners.RemoveOwner
void GlobalNamespace::CommandBufferOwners::RemoveOwner(UnityEngine::Object* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferOwners::RemoveOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, owner);
}
// Autogenerated method: CommandBufferOwners.ContainsOwner
bool GlobalNamespace::CommandBufferOwners::ContainsOwner(UnityEngine::Object* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferOwners::ContainsOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, owner);
}
// Autogenerated method: CommandBufferOwners.get_NumberOfOwners
int GlobalNamespace::CommandBufferOwners::get_NumberOfOwners() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandBufferOwners::get_NumberOfOwners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumberOfOwners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CommandBufferOwners::AddOwner
// Il2CppName: AddOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferOwners::*)(UnityEngine::Object*)>(&CommandBufferOwners::AddOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), "AddOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferOwners::RemoveOwner
// Il2CppName: RemoveOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferOwners::*)(UnityEngine::Object*)>(&CommandBufferOwners::RemoveOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), "RemoveOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferOwners::ContainsOwner
// Il2CppName: ContainsOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CommandBufferOwners::*)(UnityEngine::Object*)>(&CommandBufferOwners::ContainsOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), "ContainsOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: CommandBufferOwners::get_NumberOfOwners
// Il2CppName: get_NumberOfOwners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CommandBufferOwners::*)()>(&CommandBufferOwners::get_NumberOfOwners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), "get_NumberOfOwners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBufferOwners::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferOwners::*)()>(&CommandBufferOwners::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBufferOwners::*)()>(&CommandBufferOwners::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBufferOwners*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ExternalCamerasManager
#include "GlobalNamespace/ExternalCamerasManager.hpp"
// Including type: ExternalCamerasManager/InitData
#include "GlobalNamespace/ExternalCamerasManager_InitData.hpp"
// Including type: OculusMRCManager
#include "GlobalNamespace/OculusMRCManager.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExternalCamerasManager.Init
void GlobalNamespace::ExternalCamerasManager::Init(GlobalNamespace::ExternalCamerasManager::InitData* initData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExternalCamerasManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initData);
}
// Autogenerated method: ExternalCamerasManager.InstantiateMixedRealityBackgroundCameraGameObject
UnityEngine::GameObject* GlobalNamespace::ExternalCamerasManager::InstantiateMixedRealityBackgroundCameraGameObject(UnityEngine::GameObject* mainCameraGameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExternalCamerasManager::InstantiateMixedRealityBackgroundCameraGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateMixedRealityBackgroundCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainCameraGameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, mainCameraGameObject);
}
// Autogenerated method: ExternalCamerasManager.InstantiateMixedRealityForegroundCameraGameObject
UnityEngine::GameObject* GlobalNamespace::ExternalCamerasManager::InstantiateMixedRealityForegroundCameraGameObject(UnityEngine::GameObject* mainCameraGameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExternalCamerasManager::InstantiateMixedRealityForegroundCameraGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateMixedRealityForegroundCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainCameraGameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, mainCameraGameObject);
}
// Writing MetadataGetter for method: ExternalCamerasManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExternalCamerasManager::*)(GlobalNamespace::ExternalCamerasManager::InitData*)>(&ExternalCamerasManager::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ExternalCamerasManager::InitData*>()});
  }
};
// Writing MetadataGetter for method: ExternalCamerasManager::InstantiateMixedRealityBackgroundCameraGameObject
// Il2CppName: InstantiateMixedRealityBackgroundCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (ExternalCamerasManager::*)(UnityEngine::GameObject*)>(&ExternalCamerasManager::InstantiateMixedRealityBackgroundCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager*), "InstantiateMixedRealityBackgroundCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ExternalCamerasManager::InstantiateMixedRealityForegroundCameraGameObject
// Il2CppName: InstantiateMixedRealityForegroundCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (ExternalCamerasManager::*)(UnityEngine::GameObject*)>(&ExternalCamerasManager::InstantiateMixedRealityForegroundCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager*), "InstantiateMixedRealityForegroundCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ExternalCamerasManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExternalCamerasManager::*)()>(&ExternalCamerasManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExternalCamerasManager::*)()>(&ExternalCamerasManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ExternalCamerasManager/InitData
#include "GlobalNamespace/ExternalCamerasManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExternalCamerasManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExternalCamerasManager::InitData::*)(bool)>(&ExternalCamerasManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExternalCamerasManager::InitData::*)(bool)>(&ExternalCamerasManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExternalCamerasManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeInOnSceneTransitionFinished
#include "GlobalNamespace/FadeInOnSceneTransitionFinished.hpp"
// Including type: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3
#include "GlobalNamespace/FadeInOnSceneTransitionFinished_-FadeInAfterSceneTransitionCoroutine-d__3.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeInOnSceneTransitionFinished.OnEnable
void GlobalNamespace::FadeInOnSceneTransitionFinished::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOnSceneTransitionFinished.FadeInAfterSceneTransitionCoroutine
System::Collections::IEnumerator* GlobalNamespace::FadeInOnSceneTransitionFinished::FadeInAfterSceneTransitionCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::FadeInAfterSceneTransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeInAfterSceneTransitionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::*)()>(&FadeInOnSceneTransitionFinished::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::FadeInAfterSceneTransitionCoroutine
// Il2CppName: FadeInAfterSceneTransitionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (FadeInOnSceneTransitionFinished::*)()>(&FadeInOnSceneTransitionFinished::FadeInAfterSceneTransitionCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished*), "FadeInAfterSceneTransitionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::*)()>(&FadeInOnSceneTransitionFinished::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::*)()>(&FadeInOnSceneTransitionFinished::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3
#include "GlobalNamespace/FadeInOnSceneTransitionFinished_-FadeInAfterSceneTransitionCoroutine-d__3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3.System.IDisposable.Dispose
void GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3.MoveNext
bool GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3.System.Collections.IEnumerator.Reset
void GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOnSceneTransitionFinished/<FadeInAfterSceneTransitionCoroutine>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)(int)>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)(int)>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)()>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)()>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)()>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)()>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::*)()>(&FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOnSceneTransitionFinished::$FadeInAfterSceneTransitionCoroutine$d__3*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeOutInstantly
#include "GlobalNamespace/FadeOutInstantly.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeOutInstantly.Start
void GlobalNamespace::FadeOutInstantly::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutInstantly::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FadeOutInstantly::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutInstantly::*)()>(&FadeOutInstantly::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutInstantly*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeOutInstantly::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutInstantly::*)()>(&FadeOutInstantly::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutInstantly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutInstantly::*)()>(&FadeOutInstantly::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutInstantly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeOutOnSceneTransitionStart
#include "GlobalNamespace/FadeOutOnSceneTransitionStart.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeOutOnSceneTransitionStart.Start
void GlobalNamespace::FadeOutOnSceneTransitionStart::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutOnSceneTransitionStart::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeOutOnSceneTransitionStart.OnDestroy
void GlobalNamespace::FadeOutOnSceneTransitionStart::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutOnSceneTransitionStart::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeOutOnSceneTransitionStart.HandleGameScenesManagerTransitionDidStart
void GlobalNamespace::FadeOutOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameScenesManagerTransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Writing MetadataGetter for method: FadeOutOnSceneTransitionStart::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutOnSceneTransitionStart::*)()>(&FadeOutOnSceneTransitionStart::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutOnSceneTransitionStart*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeOutOnSceneTransitionStart::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutOnSceneTransitionStart::*)()>(&FadeOutOnSceneTransitionStart::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutOnSceneTransitionStart*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeOutOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart
// Il2CppName: HandleGameScenesManagerTransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutOnSceneTransitionStart::*)(float)>(&FadeOutOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutOnSceneTransitionStart*), "HandleGameScenesManagerTransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FadeOutOnSceneTransitionStart::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutOnSceneTransitionStart::*)()>(&FadeOutOnSceneTransitionStart::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutOnSceneTransitionStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutOnSceneTransitionStart::*)()>(&FadeOutOnSceneTransitionStart::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutOnSceneTransitionStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FakeMirrorSettings
#include "GlobalNamespace/FakeMirrorSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01AB4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _fakeMirrorTransparencyId
int GlobalNamespace::FakeMirrorSettings::_get__fakeMirrorTransparencyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::_get__fakeMirrorTransparencyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "FakeMirrorSettings", "_fakeMirrorTransparencyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _fakeMirrorTransparencyId
void GlobalNamespace::FakeMirrorSettings::_set__fakeMirrorTransparencyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::_set__fakeMirrorTransparencyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FakeMirrorSettings", "_fakeMirrorTransparencyId", value));
}
// Autogenerated method: FakeMirrorSettings.get_fakeMirrorTransparency
float GlobalNamespace::FakeMirrorSettings::get_fakeMirrorTransparency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::get_fakeMirrorTransparency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fakeMirrorTransparency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: FakeMirrorSettings.set_fakeMirrorTransparency
void GlobalNamespace::FakeMirrorSettings::set_fakeMirrorTransparency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::set_fakeMirrorTransparency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fakeMirrorTransparency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FakeMirrorSettings.Start
void GlobalNamespace::FakeMirrorSettings::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FakeMirrorSettings.OnEnable
void GlobalNamespace::FakeMirrorSettings::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FakeMirrorSettings.OnValidate
void GlobalNamespace::FakeMirrorSettings::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FakeMirrorSettings..cctor
void GlobalNamespace::FakeMirrorSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FakeMirrorSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: FakeMirrorSettings::get_fakeMirrorTransparency
// Il2CppName: get_fakeMirrorTransparency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FakeMirrorSettings::*)()>(&FakeMirrorSettings::get_fakeMirrorTransparency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), "get_fakeMirrorTransparency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::set_fakeMirrorTransparency
// Il2CppName: set_fakeMirrorTransparency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)(float)>(&FakeMirrorSettings::set_fakeMirrorTransparency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), "set_fakeMirrorTransparency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)()>(&FakeMirrorSettings::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)()>(&FakeMirrorSettings::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)()>(&FakeMirrorSettings::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)()>(&FakeMirrorSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorSettings::*)()>(&FakeMirrorSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&FakeMirrorSettings::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainCameraCullingMask
#include "GlobalNamespace/MainCameraCullingMask.hpp"
// Including type: MainCameraCullingMask/InitData
#include "GlobalNamespace/MainCameraCullingMask_InitData.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainCameraCullingMask.Start
void GlobalNamespace::MainCameraCullingMask::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCameraCullingMask::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainCameraCullingMask::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCameraCullingMask::*)()>(&MainCameraCullingMask::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCameraCullingMask*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCameraCullingMask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCameraCullingMask::*)()>(&MainCameraCullingMask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCameraCullingMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCameraCullingMask::*)()>(&MainCameraCullingMask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCameraCullingMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainCameraCullingMask/InitData
#include "GlobalNamespace/MainCameraCullingMask_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MainCameraCullingMask::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCameraCullingMask::InitData::*)(bool)>(&MainCameraCullingMask::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCameraCullingMask::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCameraCullingMask::InitData::*)(bool)>(&MainCameraCullingMask::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCameraCullingMask::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBloomMainEffectSO
#include "GlobalNamespace/KawaseBloomMainEffectSO.hpp"
// Including type: KawaseBlurRendererSO
#include "GlobalNamespace/KawaseBlurRendererSO.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01C2C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomTexID
int GlobalNamespace::KawaseBloomMainEffectSO::_get__bloomTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::_get__bloomTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBloomMainEffectSO", "_bloomTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomTexID
void GlobalNamespace::KawaseBloomMainEffectSO::_set__bloomTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::_set__bloomTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBloomMainEffectSO", "_bloomTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01C3C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomIntensityID
int GlobalNamespace::KawaseBloomMainEffectSO::_get__bloomIntensityID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::_get__bloomIntensityID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBloomMainEffectSO", "_bloomIntensityID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomIntensityID
void GlobalNamespace::KawaseBloomMainEffectSO::_set__bloomIntensityID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::_set__bloomIntensityID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBloomMainEffectSO", "_bloomIntensityID", value));
}
// Autogenerated method: KawaseBloomMainEffectSO.OnDisable
void GlobalNamespace::KawaseBloomMainEffectSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBloomMainEffectSO.LazyInitializeMaterials
void GlobalNamespace::KawaseBloomMainEffectSO::LazyInitializeMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::LazyInitializeMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInitializeMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBloomMainEffectSO.get_hasPostProcessEffect
bool GlobalNamespace::KawaseBloomMainEffectSO::get_hasPostProcessEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::get_hasPostProcessEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostProcessEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBloomMainEffectSO.OnEnable
void GlobalNamespace::KawaseBloomMainEffectSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBloomMainEffectSO.PreRender
void GlobalNamespace::KawaseBloomMainEffectSO::PreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::PreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBloomMainEffectSO.Render
void GlobalNamespace::KawaseBloomMainEffectSO::Render(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, float fade) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(fade)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, fade);
}
// Autogenerated method: KawaseBloomMainEffectSO..cctor
void GlobalNamespace::KawaseBloomMainEffectSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBloomMainEffectSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "KawaseBloomMainEffectSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::LazyInitializeMaterials
// Il2CppName: LazyInitializeMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::LazyInitializeMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "LazyInitializeMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::get_hasPostProcessEffect
// Il2CppName: get_hasPostProcessEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::get_hasPostProcessEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "get_hasPostProcessEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::PreRender
// Il2CppName: PreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::PreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "PreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, float)>(&KawaseBloomMainEffectSO::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBloomMainEffectSO::*)()>(&KawaseBloomMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBloomMainEffectSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KawaseBloomMainEffectSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBloomMainEffectSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainEffectContainerSO
#include "GlobalNamespace/MainEffectContainerSO.hpp"
// Including type: MainEffectSO
#include "GlobalNamespace/MainEffectSO.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainEffectContainerSO.get_mainEffect
GlobalNamespace::MainEffectSO* GlobalNamespace::MainEffectContainerSO::get_mainEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectContainerSO::get_mainEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MainEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectContainerSO.Init
void GlobalNamespace::MainEffectContainerSO::Init(GlobalNamespace::MainEffectSO* mainEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectContainerSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainEffect);
}
// Autogenerated method: MainEffectContainerSO.OnEnable
void GlobalNamespace::MainEffectContainerSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectContainerSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainEffectContainerSO::get_mainEffect
// Il2CppName: get_mainEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MainEffectSO* (MainEffectContainerSO::*)()>(&MainEffectContainerSO::get_mainEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectContainerSO*), "get_mainEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectContainerSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectContainerSO::*)(GlobalNamespace::MainEffectSO*)>(&MainEffectContainerSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectContainerSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MainEffectSO*>()});
  }
};
// Writing MetadataGetter for method: MainEffectContainerSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectContainerSO::*)()>(&MainEffectContainerSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectContainerSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectContainerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectContainerSO::*)()>(&MainEffectContainerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectContainerSO::*)()>(&MainEffectContainerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainEffectController
#include "GlobalNamespace/MainEffectController.hpp"
// Including type: MainEffectContainerSO
#include "GlobalNamespace/MainEffectContainerSO.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: ImageEffectController
#include "GlobalNamespace/ImageEffectController.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kMainEffectEnabledKeyword
::Il2CppString* GlobalNamespace::MainEffectController::_get_kMainEffectEnabledKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::_get_kMainEffectEnabledKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainEffectController", "kMainEffectEnabledKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMainEffectEnabledKeyword
void GlobalNamespace::MainEffectController::_set_kMainEffectEnabledKeyword(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::_set_kMainEffectEnabledKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainEffectController", "kMainEffectEnabledKeyword", value));
}
// Autogenerated method: MainEffectController.add_afterImageEffectEvent
void GlobalNamespace::MainEffectController::add_afterImageEffectEvent(System::Action_1<UnityEngine::RenderTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::add_afterImageEffectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_afterImageEffectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MainEffectController.remove_afterImageEffectEvent
void GlobalNamespace::MainEffectController::remove_afterImageEffectEvent(System::Action_1<UnityEngine::RenderTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::remove_afterImageEffectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_afterImageEffectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MainEffectController.OnEnable
void GlobalNamespace::MainEffectController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectController.OnDisable
void GlobalNamespace::MainEffectController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectController.OnValidate
void GlobalNamespace::MainEffectController::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectController.LazySetupImageEffectController
void GlobalNamespace::MainEffectController::LazySetupImageEffectController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::LazySetupImageEffectController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazySetupImageEffectController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectController.ImageEffectControllerCallback
void GlobalNamespace::MainEffectController::ImageEffectControllerCallback(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::ImageEffectControllerCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImageEffectControllerCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated method: MainEffectController.OnPreRender
void GlobalNamespace::MainEffectController::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectController.OnPostRender
void GlobalNamespace::MainEffectController::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectController::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainEffectController::add_afterImageEffectEvent
// Il2CppName: add_afterImageEffectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)(System::Action_1<UnityEngine::RenderTexture*>*)>(&MainEffectController::add_afterImageEffectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "add_afterImageEffectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::RenderTexture*>*>()});
  }
};
// Writing MetadataGetter for method: MainEffectController::remove_afterImageEffectEvent
// Il2CppName: remove_afterImageEffectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)(System::Action_1<UnityEngine::RenderTexture*>*)>(&MainEffectController::remove_afterImageEffectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "remove_afterImageEffectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::RenderTexture*>*>()});
  }
};
// Writing MetadataGetter for method: MainEffectController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::LazySetupImageEffectController
// Il2CppName: LazySetupImageEffectController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::LazySetupImageEffectController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "LazySetupImageEffectController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::ImageEffectControllerCallback
// Il2CppName: ImageEffectControllerCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&MainEffectController::ImageEffectControllerCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "ImageEffectControllerCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: MainEffectController::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::OnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::OnPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectController::*)()>(&MainEffectController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainEffectCore
#include "GlobalNamespace/MainEffectCore.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01C9C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _baseColorBoostID
int GlobalNamespace::MainEffectCore::_get__baseColorBoostID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::_get__baseColorBoostID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainEffectCore", "_baseColorBoostID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _baseColorBoostID
void GlobalNamespace::MainEffectCore::_set__baseColorBoostID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::_set__baseColorBoostID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainEffectCore", "_baseColorBoostID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01CAC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _baseColorBoostThresholdID
int GlobalNamespace::MainEffectCore::_get__baseColorBoostThresholdID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::_get__baseColorBoostThresholdID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainEffectCore", "_baseColorBoostThresholdID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _baseColorBoostThresholdID
void GlobalNamespace::MainEffectCore::_set__baseColorBoostThresholdID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::_set__baseColorBoostThresholdID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainEffectCore", "_baseColorBoostThresholdID", value));
}
// Autogenerated method: MainEffectCore.SetGlobalShaderValues
void GlobalNamespace::MainEffectCore::SetGlobalShaderValues(float baseColorBoost, float baseColorBoostThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::SetGlobalShaderValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MainEffectCore", "SetGlobalShaderValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseColorBoost), ::il2cpp_utils::ExtractType(baseColorBoostThreshold)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseColorBoost, baseColorBoostThreshold);
}
// Autogenerated method: MainEffectCore..cctor
void GlobalNamespace::MainEffectCore::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectCore::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MainEffectCore", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: MainEffectCore::SetGlobalShaderValues
// Il2CppName: SetGlobalShaderValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float)>(&MainEffectCore::SetGlobalShaderValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectCore*), "SetGlobalShaderValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MainEffectCore::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MainEffectCore::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectCore*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectCore::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectCore::*)()>(&MainEffectCore::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectCore::*)()>(&MainEffectCore::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainEffectSO
#include "GlobalNamespace/MainEffectSO.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainEffectSO.PreRender
void GlobalNamespace::MainEffectSO::PreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectSO::PreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectSO.Render
void GlobalNamespace::MainEffectSO::Render(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, float fade) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(fade)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, fade);
}
// Autogenerated method: MainEffectSO.PostRender
void GlobalNamespace::MainEffectSO::PostRender(float fade) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectSO::PostRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fade)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fade);
}
// Autogenerated method: MainEffectSO.get_hasPostProcessEffect
bool GlobalNamespace::MainEffectSO::get_hasPostProcessEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectSO::get_hasPostProcessEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostProcessEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainEffectSO::PreRender
// Il2CppName: PreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectSO::*)()>(&MainEffectSO::PreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), "PreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectSO::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, float)>(&MainEffectSO::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MainEffectSO::PostRender
// Il2CppName: PostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectSO::*)(float)>(&MainEffectSO::PostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), "PostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MainEffectSO::get_hasPostProcessEffect
// Il2CppName: get_hasPostProcessEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MainEffectSO::*)()>(&MainEffectSO::get_hasPostProcessEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), "get_hasPostProcessEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectSO::*)()>(&MainEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectSO::*)()>(&MainEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoPostProcessMainEffectSO
#include "GlobalNamespace/NoPostProcessMainEffectSO.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoPostProcessMainEffectSO.OnDisable
void GlobalNamespace::NoPostProcessMainEffectSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoPostProcessMainEffectSO.DrawFadeQuad
void GlobalNamespace::NoPostProcessMainEffectSO::DrawFadeQuad(float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::DrawFadeQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawFadeQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alpha)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, alpha);
}
// Autogenerated method: NoPostProcessMainEffectSO.get_hasPostProcessEffect
bool GlobalNamespace::NoPostProcessMainEffectSO::get_hasPostProcessEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::get_hasPostProcessEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostProcessEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoPostProcessMainEffectSO.OnEnable
void GlobalNamespace::NoPostProcessMainEffectSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoPostProcessMainEffectSO.PreRender
void GlobalNamespace::NoPostProcessMainEffectSO::PreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::PreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoPostProcessMainEffectSO.PostRender
void GlobalNamespace::NoPostProcessMainEffectSO::PostRender(float fade) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoPostProcessMainEffectSO::PostRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fade)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fade);
}
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::DrawFadeQuad
// Il2CppName: DrawFadeQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)(float)>(&NoPostProcessMainEffectSO::DrawFadeQuad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "DrawFadeQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::get_hasPostProcessEffect
// Il2CppName: get_hasPostProcessEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::get_hasPostProcessEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "get_hasPostProcessEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::PreRender
// Il2CppName: PreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::PreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "PreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::PostRender
// Il2CppName: PostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)(float)>(&NoPostProcessMainEffectSO::PostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), "PostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoPostProcessMainEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoPostProcessMainEffectSO::*)()>(&NoPostProcessMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoPostProcessMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PyramidBloomMainEffectSO
#include "GlobalNamespace/PyramidBloomMainEffectSO.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01ED4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomTexID
int GlobalNamespace::PyramidBloomMainEffectSO::_get__bloomTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::_get__bloomTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomMainEffectSO", "_bloomTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomTexID
void GlobalNamespace::PyramidBloomMainEffectSO::_set__bloomTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::_set__bloomTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomMainEffectSO", "_bloomTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01EE4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomIntensityID
int GlobalNamespace::PyramidBloomMainEffectSO::_get__bloomIntensityID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::_get__bloomIntensityID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomMainEffectSO", "_bloomIntensityID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomIntensityID
void GlobalNamespace::PyramidBloomMainEffectSO::_set__bloomIntensityID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::_set__bloomIntensityID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomMainEffectSO", "_bloomIntensityID", value));
}
// Autogenerated method: PyramidBloomMainEffectSO.OnDisable
void GlobalNamespace::PyramidBloomMainEffectSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomMainEffectSO.LazyInitializeMaterials
void GlobalNamespace::PyramidBloomMainEffectSO::LazyInitializeMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::LazyInitializeMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInitializeMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomMainEffectSO.get_hasPostProcessEffect
bool GlobalNamespace::PyramidBloomMainEffectSO::get_hasPostProcessEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::get_hasPostProcessEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostProcessEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomMainEffectSO.OnEnable
void GlobalNamespace::PyramidBloomMainEffectSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomMainEffectSO.PreRender
void GlobalNamespace::PyramidBloomMainEffectSO::PreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::PreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomMainEffectSO.Render
void GlobalNamespace::PyramidBloomMainEffectSO::Render(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, float fade) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(fade)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, fade);
}
// Autogenerated method: PyramidBloomMainEffectSO..cctor
void GlobalNamespace::PyramidBloomMainEffectSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomMainEffectSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PyramidBloomMainEffectSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::LazyInitializeMaterials
// Il2CppName: LazyInitializeMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::LazyInitializeMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "LazyInitializeMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::get_hasPostProcessEffect
// Il2CppName: get_hasPostProcessEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::get_hasPostProcessEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "get_hasPostProcessEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::PreRender
// Il2CppName: PreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::PreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "PreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, float)>(&PyramidBloomMainEffectSO::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomMainEffectSO::*)()>(&PyramidBloomMainEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomMainEffectSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PyramidBloomMainEffectSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomMainEffectSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Mirror
#include "GlobalNamespace/Mirror.hpp"
// Including type: MirrorRendererSO
#include "GlobalNamespace/MirrorRendererSO.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE01F34
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _texturePropertyID
int GlobalNamespace::Mirror::_get__texturePropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::_get__texturePropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Mirror", "_texturePropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _texturePropertyID
void GlobalNamespace::Mirror::_set__texturePropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::_set__texturePropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Mirror", "_texturePropertyID", value));
}
// Autogenerated method: Mirror.get_noMirrorMaterial
UnityEngine::Material* GlobalNamespace::Mirror::get_noMirrorMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::get_noMirrorMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noMirrorMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: Mirror.get_isEnabled
bool GlobalNamespace::Mirror::get_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::get_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mirror.set_isEnabled
void GlobalNamespace::Mirror::set_isEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::set_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mirror.add_mirrorDidChangeEnabledStateEvent
void GlobalNamespace::Mirror::add_mirrorDidChangeEnabledStateEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::add_mirrorDidChangeEnabledStateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_mirrorDidChangeEnabledStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mirror.remove_mirrorDidChangeEnabledStateEvent
void GlobalNamespace::Mirror::remove_mirrorDidChangeEnabledStateEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::remove_mirrorDidChangeEnabledStateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_mirrorDidChangeEnabledStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Mirror.Update
void GlobalNamespace::Mirror::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mirror.OnWillRenderObject
void GlobalNamespace::Mirror::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mirror.ChangeMirrorEnabledState
void GlobalNamespace::Mirror::ChangeMirrorEnabledState(bool newIsEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::ChangeMirrorEnabledState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeMirrorEnabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newIsEnabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newIsEnabled);
}
// Autogenerated method: Mirror..cctor
void GlobalNamespace::Mirror::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Mirror", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Mirror::get_noMirrorMaterial
// Il2CppName: get_noMirrorMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (Mirror::*)()>(&Mirror::get_noMirrorMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "get_noMirrorMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mirror::get_isEnabled
// Il2CppName: get_isEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mirror::*)()>(&Mirror::get_isEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "get_isEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mirror::set_isEnabled
// Il2CppName: set_isEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)(bool)>(&Mirror::set_isEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "set_isEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Mirror::add_mirrorDidChangeEnabledStateEvent
// Il2CppName: add_mirrorDidChangeEnabledStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)(System::Action_1<bool>*)>(&Mirror::add_mirrorDidChangeEnabledStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "add_mirrorDidChangeEnabledStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: Mirror::remove_mirrorDidChangeEnabledStateEvent
// Il2CppName: remove_mirrorDidChangeEnabledStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)(System::Action_1<bool>*)>(&Mirror::remove_mirrorDidChangeEnabledStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "remove_mirrorDidChangeEnabledStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: Mirror::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)()>(&Mirror::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mirror::OnWillRenderObject
// Il2CppName: OnWillRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)()>(&Mirror::OnWillRenderObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "OnWillRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mirror::ChangeMirrorEnabledState
// Il2CppName: ChangeMirrorEnabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)(bool)>(&Mirror::ChangeMirrorEnabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), "ChangeMirrorEnabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Mirror::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)()>(&Mirror::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mirror::*)()>(&Mirror::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mirror::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mirror::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mirror*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirrorRendererSO
#include "GlobalNamespace/MirrorRendererSO.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kWaterLayer
int GlobalNamespace::MirrorRendererSO::_get_kWaterLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::_get_kWaterLayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MirrorRendererSO", "kWaterLayer"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kWaterLayer
void GlobalNamespace::MirrorRendererSO::_set_kWaterLayer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::_set_kWaterLayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirrorRendererSO", "kWaterLayer", value));
}
// Autogenerated method: MirrorRendererSO.OnValidate
void GlobalNamespace::MirrorRendererSO::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererSO.Awake
void GlobalNamespace::MirrorRendererSO::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererSO.ValidateParams
void GlobalNamespace::MirrorRendererSO::ValidateParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::ValidateParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererSO.Init
void GlobalNamespace::MirrorRendererSO::Init(UnityEngine::LayerMask reflectLayers, int stereoTextureWidth, int stereoTextureHeight, int monoTextureWidth, int monoTextureHeight, int maxAntiAliasing, bool enableBloomPrePass) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reflectLayers), ::il2cpp_utils::ExtractType(stereoTextureWidth), ::il2cpp_utils::ExtractType(stereoTextureHeight), ::il2cpp_utils::ExtractType(monoTextureWidth), ::il2cpp_utils::ExtractType(monoTextureHeight), ::il2cpp_utils::ExtractType(maxAntiAliasing), ::il2cpp_utils::ExtractType(enableBloomPrePass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reflectLayers, stereoTextureWidth, stereoTextureHeight, monoTextureWidth, monoTextureHeight, maxAntiAliasing, enableBloomPrePass);
}
// Autogenerated method: MirrorRendererSO.PrepareForNextFrame
void GlobalNamespace::MirrorRendererSO::PrepareForNextFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::PrepareForNextFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareForNextFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererSO.GetMirrorTexture
UnityEngine::Texture* GlobalNamespace::MirrorRendererSO::GetMirrorTexture(UnityEngine::Vector3 reflectionPlanePos, UnityEngine::Vector3 reflectionPlaneNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::GetMirrorTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reflectionPlanePos), ::il2cpp_utils::ExtractType(reflectionPlaneNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(this, ___internal__method, reflectionPlanePos, reflectionPlaneNormal);
}
// Autogenerated method: MirrorRendererSO.RenderMirror
void GlobalNamespace::MirrorRendererSO::RenderMirror(UnityEngine::Vector3 camPosition, UnityEngine::Quaternion camRotation, UnityEngine::Matrix4x4 camProjectionMatrix, UnityEngine::Rect screenRect, UnityEngine::Vector3 reclectionPlanePos, UnityEngine::Vector3 reflectionPlaneNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::RenderMirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderMirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camPosition), ::il2cpp_utils::ExtractType(camRotation), ::il2cpp_utils::ExtractType(camProjectionMatrix), ::il2cpp_utils::ExtractType(screenRect), ::il2cpp_utils::ExtractType(reclectionPlanePos), ::il2cpp_utils::ExtractType(reflectionPlaneNormal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camPosition, camRotation, camProjectionMatrix, screenRect, reclectionPlanePos, reflectionPlaneNormal);
}
// Autogenerated method: MirrorRendererSO.OnDisable
void GlobalNamespace::MirrorRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererSO.CreateOrUpdateMirrorCamera
void GlobalNamespace::MirrorRendererSO::CreateOrUpdateMirrorCamera(UnityEngine::Camera* currentCamera, UnityEngine::RenderTexture* renderTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::CreateOrUpdateMirrorCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOrUpdateMirrorCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentCamera), ::il2cpp_utils::ExtractType(renderTexture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentCamera, renderTexture);
}
// Autogenerated method: MirrorRendererSO.Plane
UnityEngine::Vector4 GlobalNamespace::MirrorRendererSO::Plane(UnityEngine::Vector3 pos, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::Plane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MirrorRendererSO", "Plane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pos, normal);
}
// Autogenerated method: MirrorRendererSO.CameraSpacePlane
UnityEngine::Vector4 GlobalNamespace::MirrorRendererSO::CameraSpacePlane(UnityEngine::Matrix4x4 worldToCameraMatrix, UnityEngine::Vector3 pos, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::CameraSpacePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MirrorRendererSO", "CameraSpacePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldToCameraMatrix), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, worldToCameraMatrix, pos, normal);
}
// Autogenerated method: MirrorRendererSO.CalculateReflectionMatrix
UnityEngine::Matrix4x4 GlobalNamespace::MirrorRendererSO::CalculateReflectionMatrix(UnityEngine::Vector4 plane) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::CalculateReflectionMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MirrorRendererSO", "CalculateReflectionMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plane)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, plane);
}
// Writing MetadataGetter for method: MirrorRendererSO::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::ValidateParams
// Il2CppName: ValidateParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::ValidateParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "ValidateParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)(UnityEngine::LayerMask, int, int, int, int, int, bool)>(&MirrorRendererSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::PrepareForNextFrame
// Il2CppName: PrepareForNextFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::PrepareForNextFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "PrepareForNextFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::GetMirrorTexture
// Il2CppName: GetMirrorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture* (MirrorRendererSO::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&MirrorRendererSO::GetMirrorTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "GetMirrorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::RenderMirror
// Il2CppName: RenderMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)(UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Matrix4x4, UnityEngine::Rect, UnityEngine::Vector3, UnityEngine::Vector3)>(&MirrorRendererSO::RenderMirror)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "RenderMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::CreateOrUpdateMirrorCamera
// Il2CppName: CreateOrUpdateMirrorCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)(UnityEngine::Camera*, UnityEngine::RenderTexture*)>(&MirrorRendererSO::CreateOrUpdateMirrorCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "CreateOrUpdateMirrorCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::Plane
// Il2CppName: Plane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&MirrorRendererSO::Plane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "Plane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::CameraSpacePlane
// Il2CppName: CameraSpacePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(UnityEngine::Matrix4x4, UnityEngine::Vector3, UnityEngine::Vector3)>(&MirrorRendererSO::CameraSpacePlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "CameraSpacePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::CalculateReflectionMatrix
// Il2CppName: CalculateReflectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(UnityEngine::Vector4)>(&MirrorRendererSO::CalculateReflectionMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), "CalculateReflectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::*)()>(&MirrorRendererSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MirrorRendererSO/CameraTransformData
#include "GlobalNamespace/MirrorRendererSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirrorRendererSO/CameraTransformData.Equals
bool GlobalNamespace::MirrorRendererSO::CameraTransformData::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::CameraTransformData::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: MirrorRendererSO/CameraTransformData.GetHashCode
int GlobalNamespace::MirrorRendererSO::CameraTransformData::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererSO::CameraTransformData::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: MirrorRendererSO::CameraTransformData::CameraTransformData
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::CameraTransformData::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float, bool)>(&MirrorRendererSO::CameraTransformData::CameraTransformData<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO::CameraTransformData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererSO::CameraTransformData::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float, bool)>(&MirrorRendererSO::CameraTransformData::CameraTransformData<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO::CameraTransformData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::CameraTransformData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MirrorRendererSO::CameraTransformData::*)(::Il2CppObject*)>(&MirrorRendererSO::CameraTransformData::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO::CameraTransformData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MirrorRendererSO::CameraTransformData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MirrorRendererSO::CameraTransformData::*)()>(&MirrorRendererSO::CameraTransformData::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererSO::CameraTransformData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RenderTextureFromPostEffect
#include "GlobalNamespace/RenderTextureFromPostEffect.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RenderTextureFromPostEffect.get_targetTexture
UnityEngine::RenderTexture* GlobalNamespace::RenderTextureFromPostEffect::get_targetTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RenderTextureFromPostEffect::get_targetTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(this, ___internal__method);
}
// Autogenerated method: RenderTextureFromPostEffect.Awake
void GlobalNamespace::RenderTextureFromPostEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RenderTextureFromPostEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RenderTextureFromPostEffect.OnRenderImage
void GlobalNamespace::RenderTextureFromPostEffect::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RenderTextureFromPostEffect::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dst);
}
// Writing MetadataGetter for method: RenderTextureFromPostEffect::get_targetTexture
// Il2CppName: get_targetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (RenderTextureFromPostEffect::*)()>(&RenderTextureFromPostEffect::get_targetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureFromPostEffect*), "get_targetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTextureFromPostEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTextureFromPostEffect::*)()>(&RenderTextureFromPostEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureFromPostEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTextureFromPostEffect::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTextureFromPostEffect::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&RenderTextureFromPostEffect::OnRenderImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureFromPostEffect*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: RenderTextureFromPostEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTextureFromPostEffect::*)()>(&RenderTextureFromPostEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureFromPostEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTextureFromPostEffect::*)()>(&RenderTextureFromPostEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureFromPostEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Noise3DTexturesGenerator
#include "GlobalNamespace/Noise3DTexturesGenerator.hpp"
// Including type: UnityEngine.Texture3D
#include "UnityEngine/Texture3D.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Texture3D _texture
UnityEngine::Texture3D* GlobalNamespace::Noise3DTexturesGenerator::_get__texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::_get__texture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Texture3D*>("", "Noise3DTexturesGenerator", "_texture"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Texture3D _texture
void GlobalNamespace::Noise3DTexturesGenerator::_set__texture(UnityEngine::Texture3D* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::_set__texture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Noise3DTexturesGenerator", "_texture", value));
}
// Autogenerated method: Noise3DTexturesGenerator.Awake
void GlobalNamespace::Noise3DTexturesGenerator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Noise3DTexturesGenerator.CreateNoisePixels
::Array<UnityEngine::Color32>* GlobalNamespace::Noise3DTexturesGenerator::CreateNoisePixels(int width, int height, int depth, float scale, int repeat, float contrast) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::CreateNoisePixels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Noise3DTexturesGenerator", "CreateNoisePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depth), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(repeat), ::il2cpp_utils::ExtractType(contrast)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Color32>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, width, height, depth, scale, repeat, contrast);
}
// Autogenerated method: Noise3DTexturesGenerator..cctor
void GlobalNamespace::Noise3DTexturesGenerator::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Noise3DTexturesGenerator", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Noise3DTexturesGenerator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Noise3DTexturesGenerator::*)()>(&Noise3DTexturesGenerator::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Noise3DTexturesGenerator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Noise3DTexturesGenerator::CreateNoisePixels
// Il2CppName: CreateNoisePixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Color32>* (*)(int, int, int, float, int, float)>(&Noise3DTexturesGenerator::CreateNoisePixels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Noise3DTexturesGenerator*), "CreateNoisePixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Noise3DTexturesGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Noise3DTexturesGenerator::*)()>(&Noise3DTexturesGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Noise3DTexturesGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Noise3DTexturesGenerator::*)()>(&Noise3DTexturesGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Noise3DTexturesGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Noise3DTexturesGenerator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Noise3DTexturesGenerator::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Noise3DTexturesGenerator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenCaptureAfterDelay
#include "GlobalNamespace/ScreenCaptureAfterDelay.hpp"
// Including type: ScreenCaptureAfterDelay/InitData
#include "GlobalNamespace/ScreenCaptureAfterDelay_InitData.hpp"
// Including type: ScreenCaptureAfterDelay/<Start>d__6
#include "GlobalNamespace/ScreenCaptureAfterDelay_-Start-d__6.hpp"
// Including type: MainEffectController
#include "GlobalNamespace/MainEffectController.hpp"
// Including type: ScreenCaptureCache
#include "GlobalNamespace/ScreenCaptureCache.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScreenCaptureAfterDelay.Start
System::Collections::IEnumerator* GlobalNamespace::ScreenCaptureAfterDelay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay.OnDestroy
void GlobalNamespace::ScreenCaptureAfterDelay::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay.HandleMainEffectControllerAfterImageEffectEvent
void GlobalNamespace::ScreenCaptureAfterDelay::HandleMainEffectControllerAfterImageEffectEvent(UnityEngine::RenderTexture* renderTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::HandleMainEffectControllerAfterImageEffectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMainEffectControllerAfterImageEffectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderTexture);
}
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ScreenCaptureAfterDelay::*)()>(&ScreenCaptureAfterDelay::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::*)()>(&ScreenCaptureAfterDelay::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::HandleMainEffectControllerAfterImageEffectEvent
// Il2CppName: HandleMainEffectControllerAfterImageEffectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::*)(UnityEngine::RenderTexture*)>(&ScreenCaptureAfterDelay::HandleMainEffectControllerAfterImageEffectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay*), "HandleMainEffectControllerAfterImageEffectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::*)()>(&ScreenCaptureAfterDelay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::*)()>(&ScreenCaptureAfterDelay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenCaptureAfterDelay/InitData
#include "GlobalNamespace/ScreenCaptureAfterDelay_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::InitData::*)(GlobalNamespace::ScreenCaptureCache::ScreenshotType, float, int, int)>(&ScreenCaptureAfterDelay::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScreenCaptureCache::ScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::InitData::*)(GlobalNamespace::ScreenCaptureCache::ScreenshotType, float, int, int)>(&ScreenCaptureAfterDelay::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScreenCaptureCache::ScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ScreenCaptureAfterDelay/<Start>d__6
#include "GlobalNamespace/ScreenCaptureAfterDelay_-Start-d__6.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScreenCaptureAfterDelay/<Start>d__6.System.IDisposable.Dispose
void GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay/<Start>d__6.MoveNext
bool GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay/<Start>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay/<Start>d__6.System.Collections.IEnumerator.Reset
void GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenCaptureAfterDelay/<Start>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureAfterDelay::$Start$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::$Start$d__6::*)(int)>(&ScreenCaptureAfterDelay::$Start$d__6::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::$Start$d__6::*)(int)>(&ScreenCaptureAfterDelay::$Start$d__6::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::$Start$d__6::*)()>(&ScreenCaptureAfterDelay::$Start$d__6::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScreenCaptureAfterDelay::$Start$d__6::*)()>(&ScreenCaptureAfterDelay::$Start$d__6::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ScreenCaptureAfterDelay::$Start$d__6::*)()>(&ScreenCaptureAfterDelay::$Start$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureAfterDelay::$Start$d__6::*)()>(&ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ScreenCaptureAfterDelay::$Start$d__6::*)()>(&ScreenCaptureAfterDelay::$Start$d__6::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureAfterDelay::$Start$d__6*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenCaptureCache
#include "GlobalNamespace/ScreenCaptureCache.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScreenCaptureCache.GetLastScreenshot
UnityEngine::Texture2D* GlobalNamespace::ScreenCaptureCache::GetLastScreenshot(GlobalNamespace::ScreenCaptureCache::ScreenshotType screenshotType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::GetLastScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method, screenshotType);
}
// Autogenerated method: ScreenCaptureCache.StoreScreenshot
void GlobalNamespace::ScreenCaptureCache::StoreScreenshot(GlobalNamespace::ScreenCaptureCache::ScreenshotType screenshotType, UnityEngine::Texture2D* texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::StoreScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotType), ::il2cpp_utils::ExtractType(texture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenshotType, texture);
}
// Writing MetadataGetter for method: ScreenCaptureCache::GetLastScreenshot
// Il2CppName: GetLastScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (ScreenCaptureCache::*)(GlobalNamespace::ScreenCaptureCache::ScreenshotType)>(&ScreenCaptureCache::GetLastScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureCache*), "GetLastScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScreenCaptureCache::ScreenshotType>()});
  }
};
// Writing MetadataGetter for method: ScreenCaptureCache::StoreScreenshot
// Il2CppName: StoreScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureCache::*)(GlobalNamespace::ScreenCaptureCache::ScreenshotType, UnityEngine::Texture2D*)>(&ScreenCaptureCache::StoreScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureCache*), "StoreScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScreenCaptureCache::ScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture2D*>()});
  }
};
// Writing MetadataGetter for method: ScreenCaptureCache::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureCache::*)()>(&ScreenCaptureCache::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenCaptureCache::*)()>(&ScreenCaptureCache::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenCaptureCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenCaptureCache/ScreenshotType
#include "GlobalNamespace/ScreenCaptureCache.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScreenCaptureCache/ScreenshotType Game
GlobalNamespace::ScreenCaptureCache::ScreenshotType GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Game() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Game");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenCaptureCache::ScreenshotType>("", "ScreenCaptureCache/ScreenshotType", "Game"));
}
// Autogenerated static field setter
// Set static field: static public ScreenCaptureCache/ScreenshotType Game
void GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Game(GlobalNamespace::ScreenCaptureCache::ScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Game");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenCaptureCache/ScreenshotType", "Game", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenCaptureCache/ScreenshotType Menu
GlobalNamespace::ScreenCaptureCache::ScreenshotType GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Menu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Menu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenCaptureCache::ScreenshotType>("", "ScreenCaptureCache/ScreenshotType", "Menu"));
}
// Autogenerated static field setter
// Set static field: static public ScreenCaptureCache/ScreenshotType Menu
void GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Menu(GlobalNamespace::ScreenCaptureCache::ScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Menu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenCaptureCache/ScreenshotType", "Menu", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenCaptureCache/ScreenshotType Other
GlobalNamespace::ScreenCaptureCache::ScreenshotType GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_get_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenCaptureCache::ScreenshotType>("", "ScreenCaptureCache/ScreenshotType", "Other"));
}
// Autogenerated static field setter
// Set static field: static public ScreenCaptureCache/ScreenshotType Other
void GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Other(GlobalNamespace::ScreenCaptureCache::ScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenCaptureCache::ScreenshotType::_set_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenCaptureCache/ScreenshotType", "Other", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShaderVariantsSO
#include "GlobalNamespace/ShaderVariantsSO.hpp"
// Including type: ShaderVariantsSO/ShaderVariant
#include "GlobalNamespace/ShaderVariantsSO_ShaderVariant.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShaderVariantsSO.get_shaderVariants
::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>* GlobalNamespace::ShaderVariantsSO::get_shaderVariants() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::get_shaderVariants");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shaderVariants", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>*, false>(this, ___internal__method);
}
// Autogenerated method: ShaderVariantsSO.Init
void GlobalNamespace::ShaderVariantsSO::Init(::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>* shaderVariants) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shaderVariants)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shaderVariants);
}
// Writing MetadataGetter for method: ShaderVariantsSO::get_shaderVariants
// Il2CppName: get_shaderVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>* (ShaderVariantsSO::*)()>(&ShaderVariantsSO::get_shaderVariants)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO*), "get_shaderVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::*)(::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>*)>(&ShaderVariantsSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant*>*>()});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::*)()>(&ShaderVariantsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::*)()>(&ShaderVariantsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShaderVariantsSO/ShaderVariant
#include "GlobalNamespace/ShaderVariantsSO_ShaderVariant.hpp"
// Including type: ShaderVariantsSO/ShaderVariant/Variant
#include "GlobalNamespace/ShaderVariantsSO_ShaderVariant_Variant.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShaderVariantsSO/ShaderVariant.get_variants
::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>* GlobalNamespace::ShaderVariantsSO::ShaderVariant::get_variants() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::ShaderVariant::get_variants");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_variants", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>*, false>(this, ___internal__method);
}
// Autogenerated method: ShaderVariantsSO/ShaderVariant.get_shader
UnityEngine::Shader* GlobalNamespace::ShaderVariantsSO::ShaderVariant::get_shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::ShaderVariant::get_shader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::get_variants
// Il2CppName: get_variants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>* (ShaderVariantsSO::ShaderVariant::*)()>(&ShaderVariantsSO::ShaderVariant::get_variants)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant*), "get_variants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::get_shader
// Il2CppName: get_shader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (ShaderVariantsSO::ShaderVariant::*)()>(&ShaderVariantsSO::ShaderVariant::get_shader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant*), "get_shader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::ShaderVariant::*)(UnityEngine::Shader*, ::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>*)>(&ShaderVariantsSO::ShaderVariant::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Shader*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::ShaderVariant::*)(UnityEngine::Shader*, ::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>*)>(&ShaderVariantsSO::ShaderVariant::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Shader*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShaderVariantsSO/ShaderVariant/Variant
#include "GlobalNamespace/ShaderVariantsSO_ShaderVariant_Variant.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShaderVariantsSO/ShaderVariant/Variant.get_passType
UnityEngine::Rendering::PassType GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant::get_passType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant::get_passType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_passType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::PassType, false>(this, ___internal__method);
}
// Autogenerated method: ShaderVariantsSO/ShaderVariant/Variant.get_keywords
::Il2CppString* GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant::get_keywords() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShaderVariantsSO::ShaderVariant::Variant::get_keywords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keywords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::Variant::get_passType
// Il2CppName: get_passType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::PassType (ShaderVariantsSO::ShaderVariant::Variant::*)()>(&ShaderVariantsSO::ShaderVariant::Variant::get_passType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant::Variant*), "get_passType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::Variant::get_keywords
// Il2CppName: get_keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ShaderVariantsSO::ShaderVariant::Variant::*)()>(&ShaderVariantsSO::ShaderVariant::Variant::get_keywords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant::Variant*), "get_keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderVariantsSO::ShaderVariant::Variant::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::ShaderVariant::Variant::*)(UnityEngine::Rendering::PassType, ::Il2CppString*)>(&ShaderVariantsSO::ShaderVariant::Variant::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant::Variant*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::PassType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderVariantsSO::ShaderVariant::Variant::*)(UnityEngine::Rendering::PassType, ::Il2CppString*)>(&ShaderVariantsSO::ShaderVariant::Variant::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderVariantsSO::ShaderVariant::Variant*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::PassType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleTemporalFiltering
#include "GlobalNamespace/SimpleTemporalFiltering.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleTemporalFiltering.FilterTexture
UnityEngine::RenderTexture* GlobalNamespace::SimpleTemporalFiltering::FilterTexture(UnityEngine::RenderTexture* src) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTemporalFiltering::FilterTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FilterTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(this, ___internal__method, src);
}
// Autogenerated method: SimpleTemporalFiltering.CreateRenderTexturesIfNeeded
void GlobalNamespace::SimpleTemporalFiltering::CreateRenderTexturesIfNeeded(int width, int height) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTemporalFiltering::CreateRenderTexturesIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateRenderTexturesIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, width, height);
}
// Writing MetadataGetter for method: SimpleTemporalFiltering::FilterTexture
// Il2CppName: FilterTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (SimpleTemporalFiltering::*)(UnityEngine::RenderTexture*)>(&SimpleTemporalFiltering::FilterTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTemporalFiltering*), "FilterTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: SimpleTemporalFiltering::CreateRenderTexturesIfNeeded
// Il2CppName: CreateRenderTexturesIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTemporalFiltering::*)(int, int)>(&SimpleTemporalFiltering::CreateRenderTexturesIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTemporalFiltering*), "CreateRenderTexturesIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SimpleTemporalFiltering::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTemporalFiltering::*)()>(&SimpleTemporalFiltering::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTemporalFiltering*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTemporalFiltering::*)()>(&SimpleTemporalFiltering::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTemporalFiltering*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBloomTextureEffectSO
#include "GlobalNamespace/BloomPrePassBloomTextureEffectSO.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBloomTextureEffectSO.get_toneMapping
GlobalNamespace::ToneMapping GlobalNamespace::BloomPrePassBloomTextureEffectSO::get_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBloomTextureEffectSO::get_toneMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toneMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ToneMapping, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBloomTextureEffectSO.Render
void GlobalNamespace::BloomPrePassBloomTextureEffectSO::Render(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBloomTextureEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Writing MetadataGetter for method: BloomPrePassBloomTextureEffectSO::get_toneMapping
// Il2CppName: get_toneMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ToneMapping (BloomPrePassBloomTextureEffectSO::*)()>(&BloomPrePassBloomTextureEffectSO::get_toneMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBloomTextureEffectSO*), "get_toneMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBloomTextureEffectSO::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBloomTextureEffectSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&BloomPrePassBloomTextureEffectSO::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBloomTextureEffectSO*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBloomTextureEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBloomTextureEffectSO::*)()>(&BloomPrePassBloomTextureEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBloomTextureEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBloomTextureEffectSO::*)()>(&BloomPrePassBloomTextureEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBloomTextureEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassDoubleKawaseBlurTextureEffectSO
#include "GlobalNamespace/BloomPrePassDoubleKawaseBlurTextureEffectSO.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassDoubleKawaseBlurTextureEffectSO.Render
void GlobalNamespace::BloomPrePassDoubleKawaseBlurTextureEffectSO::Render(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassDoubleKawaseBlurTextureEffectSO::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Writing MetadataGetter for method: BloomPrePassDoubleKawaseBlurTextureEffectSO::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassDoubleKawaseBlurTextureEffectSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&BloomPrePassDoubleKawaseBlurTextureEffectSO::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassDoubleKawaseBlurTextureEffectSO*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassDoubleKawaseBlurTextureEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassDoubleKawaseBlurTextureEffectSO::*)()>(&BloomPrePassDoubleKawaseBlurTextureEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassDoubleKawaseBlurTextureEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassDoubleKawaseBlurTextureEffectSO::*)()>(&BloomPrePassDoubleKawaseBlurTextureEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassDoubleKawaseBlurTextureEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRRenderingParamsSetup
#include "GlobalNamespace/VRRenderingParamsSetup.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRRenderingParamsSetup.OnEnable
void GlobalNamespace::VRRenderingParamsSetup::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRRenderingParamsSetup::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRRenderingParamsSetup::*)()>(&VRRenderingParamsSetup::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRRenderingParamsSetup*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRRenderingParamsSetup::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRRenderingParamsSetup::*)()>(&VRRenderingParamsSetup::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRRenderingParamsSetup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRRenderingParamsSetup::*)()>(&VRRenderingParamsSetup::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRRenderingParamsSetup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRRenderingParamsSetup/SceneType
#include "GlobalNamespace/VRRenderingParamsSetup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRRenderingParamsSetup/SceneType Undefined
GlobalNamespace::VRRenderingParamsSetup::SceneType GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRRenderingParamsSetup::SceneType>("", "VRRenderingParamsSetup/SceneType", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public VRRenderingParamsSetup/SceneType Undefined
void GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Undefined(GlobalNamespace::VRRenderingParamsSetup::SceneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRenderingParamsSetup/SceneType", "Undefined", value));
}
// Autogenerated static field getter
// Get static field: static public VRRenderingParamsSetup/SceneType Menu
GlobalNamespace::VRRenderingParamsSetup::SceneType GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Menu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Menu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRRenderingParamsSetup::SceneType>("", "VRRenderingParamsSetup/SceneType", "Menu"));
}
// Autogenerated static field setter
// Set static field: static public VRRenderingParamsSetup/SceneType Menu
void GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Menu(GlobalNamespace::VRRenderingParamsSetup::SceneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Menu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRenderingParamsSetup/SceneType", "Menu", value));
}
// Autogenerated static field getter
// Get static field: static public VRRenderingParamsSetup/SceneType Game
GlobalNamespace::VRRenderingParamsSetup::SceneType GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Game() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_get_Game");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRRenderingParamsSetup::SceneType>("", "VRRenderingParamsSetup/SceneType", "Game"));
}
// Autogenerated static field setter
// Set static field: static public VRRenderingParamsSetup/SceneType Game
void GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Game(GlobalNamespace::VRRenderingParamsSetup::SceneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRRenderingParamsSetup::SceneType::_set_Game");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRenderingParamsSetup/SceneType", "Game", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VisualEffectsController
#include "GlobalNamespace/VisualEffectsController.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kDepthTextureEnabledKeyword
::Il2CppString* GlobalNamespace::VisualEffectsController::_get_kDepthTextureEnabledKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualEffectsController::_get_kDepthTextureEnabledKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VisualEffectsController", "kDepthTextureEnabledKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDepthTextureEnabledKeyword
void GlobalNamespace::VisualEffectsController::_set_kDepthTextureEnabledKeyword(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualEffectsController::_set_kDepthTextureEnabledKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VisualEffectsController", "kDepthTextureEnabledKeyword", value));
}
// Autogenerated method: VisualEffectsController.Awake
void GlobalNamespace::VisualEffectsController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualEffectsController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualEffectsController.OnPreRender
void GlobalNamespace::VisualEffectsController::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualEffectsController::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualEffectsController.SetShaderKeyword
void GlobalNamespace::VisualEffectsController::SetShaderKeyword(::Il2CppString* keyword, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualEffectsController::SetShaderKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShaderKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyword, value);
}
// Writing MetadataGetter for method: VisualEffectsController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualEffectsController::*)()>(&VisualEffectsController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualEffectsController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualEffectsController::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualEffectsController::*)()>(&VisualEffectsController::OnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualEffectsController*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualEffectsController::SetShaderKeyword
// Il2CppName: SetShaderKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualEffectsController::*)(::Il2CppString*, bool)>(&VisualEffectsController::SetShaderKeyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualEffectsController*), "SetShaderKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VisualEffectsController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualEffectsController::*)()>(&VisualEffectsController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualEffectsController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualEffectsController::*)()>(&VisualEffectsController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualEffectsController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR
#include "GlobalNamespace/SteamVR.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _enabled
bool GlobalNamespace::SteamVR::_get__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get__enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "_enabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _enabled
void GlobalNamespace::SteamVR::_set__enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set__enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_enabled", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR _instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR*>("", "SteamVR", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR _instance
void GlobalNamespace::SteamVR::_set__instance(GlobalNamespace::SteamVR* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_instance", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDD4930
// Autogenerated static field getter
// Get static field: static private System.Boolean <initializing>k__BackingField
bool GlobalNamespace::SteamVR::_get_$initializing$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get_$initializing$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<initializing>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <initializing>k__BackingField
void GlobalNamespace::SteamVR::_set_$initializing$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set_$initializing$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<initializing>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDD4940
// Autogenerated static field getter
// Get static field: static private System.Boolean <calibrating>k__BackingField
bool GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<calibrating>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <calibrating>k__BackingField
void GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<calibrating>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDD4950
// Autogenerated static field getter
// Get static field: static private System.Boolean <outOfRange>k__BackingField
bool GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<outOfRange>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <outOfRange>k__BackingField
void GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<outOfRange>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean[] connected
::Array<bool>* GlobalNamespace::SteamVR::_get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_get_connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<bool>*>("", "SteamVR", "connected"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean[] connected
void GlobalNamespace::SteamVR::_set_connected(::Array<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::_set_connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "connected", value));
}
// Autogenerated method: SteamVR.get_active
bool GlobalNamespace::SteamVR::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_enabled
bool GlobalNamespace::SteamVR::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_enabled
void GlobalNamespace::SteamVR::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_usingNativeSupport
bool GlobalNamespace::SteamVR::get_usingNativeSupport() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_usingNativeSupport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_usingNativeSupport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.CreateInstance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::CreateInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::CreateInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "CreateInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.ReportError
void GlobalNamespace::SteamVR::ReportError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::ReportError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "ReportError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: SteamVR.get_hmd
Valve::VR::CVRSystem* GlobalNamespace::SteamVR::get_hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_hmd
void GlobalNamespace::SteamVR::set_hmd(Valve::VR::CVRSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_hmd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hmd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_compositor
Valve::VR::CVRCompositor* GlobalNamespace::SteamVR::get_compositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_compositor
void GlobalNamespace::SteamVR::set_compositor(Valve::VR::CVRCompositor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_overlay
Valve::VR::CVROverlay* GlobalNamespace::SteamVR::get_overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_overlay
void GlobalNamespace::SteamVR::set_overlay(Valve::VR::CVROverlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_initializing
bool GlobalNamespace::SteamVR::get_initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_initializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_initializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_initializing
void GlobalNamespace::SteamVR::set_initializing(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_initializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_initializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_calibrating
bool GlobalNamespace::SteamVR::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_calibrating
void GlobalNamespace::SteamVR::set_calibrating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_outOfRange
bool GlobalNamespace::SteamVR::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_outOfRange
void GlobalNamespace::SteamVR::set_outOfRange(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneWidth
float GlobalNamespace::SteamVR::get_sceneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneWidth
void GlobalNamespace::SteamVR::set_sceneWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneHeight
float GlobalNamespace::SteamVR::get_sceneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneHeight
void GlobalNamespace::SteamVR::set_sceneHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_aspect
float GlobalNamespace::SteamVR::get_aspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_aspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_aspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_aspect
void GlobalNamespace::SteamVR::set_aspect(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_aspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_aspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_fieldOfView
float GlobalNamespace::SteamVR::get_fieldOfView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fieldOfView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_fieldOfView
void GlobalNamespace::SteamVR::set_fieldOfView(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fieldOfView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_tanHalfFov
UnityEngine::Vector2 GlobalNamespace::SteamVR::get_tanHalfFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tanHalfFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_tanHalfFov
void GlobalNamespace::SteamVR::set_tanHalfFov(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tanHalfFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_textureBounds
::Array<Valve::VR::VRTextureBounds_t>* GlobalNamespace::SteamVR::get_textureBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_textureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Valve::VR::VRTextureBounds_t>*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_textureBounds
void GlobalNamespace::SteamVR::set_textureBounds(::Array<Valve::VR::VRTextureBounds_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_textureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_textureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_eyes
::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* GlobalNamespace::SteamVR::get_eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_eyes
void GlobalNamespace::SteamVR::set_eyes(::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::set_eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_hmd_TrackingSystemName
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_TrackingSystemName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd_TrackingSystemName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_TrackingSystemName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_ModelNumber
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_ModelNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd_ModelNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_ModelNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SerialNumber
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd_SerialNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_SerialNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SecondsFromVsyncToPhotons
float GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_SecondsFromVsyncToPhotons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_DisplayFrequency
float GlobalNamespace::SteamVR::get_hmd_DisplayFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::get_hmd_DisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_DisplayFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.GetTrackedDeviceString
::Il2CppString* GlobalNamespace::SteamVR::GetTrackedDeviceString(uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::GetTrackedDeviceString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, deviceId);
}
// Autogenerated method: SteamVR.GetStringProperty
::Il2CppString* GlobalNamespace::SteamVR::GetStringProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::GetStringProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.GetFloatProperty
float GlobalNamespace::SteamVR::GetFloatProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::GetFloatProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.OnInitializing
void GlobalNamespace::SteamVR::OnInitializing(bool initializing) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::OnInitializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initializing);
}
// Autogenerated method: SteamVR.OnCalibrating
void GlobalNamespace::SteamVR::OnCalibrating(bool calibrating) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::OnCalibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCalibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calibrating)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, calibrating);
}
// Autogenerated method: SteamVR.OnOutOfRange
void GlobalNamespace::SteamVR::OnOutOfRange(bool outOfRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::OnOutOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnOutOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outOfRange)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outOfRange);
}
// Autogenerated method: SteamVR.OnDeviceConnected
void GlobalNamespace::SteamVR::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR.OnNewPoses
void GlobalNamespace::SteamVR::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: SteamVR.SafeDispose
void GlobalNamespace::SteamVR::SafeDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::SafeDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "SafeDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR..cctor
void GlobalNamespace::SteamVR::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.Finalize
void GlobalNamespace::SteamVR::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&SteamVR::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR* (*)()>(&SteamVR::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_usingNativeSupport
// Il2CppName: get_usingNativeSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_usingNativeSupport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_usingNativeSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR* (*)()>(&SteamVR::CreateInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::ReportError
// Il2CppName: ReportError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Valve::VR::EVRInitError)>(&SteamVR::ReportError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "ReportError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRInitError>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd
// Il2CppName: get_hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRSystem* (SteamVR::*)()>(&SteamVR::get_hmd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_hmd
// Il2CppName: set_hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(Valve::VR::CVRSystem*)>(&SteamVR::set_hmd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::CVRSystem*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_compositor
// Il2CppName: get_compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRCompositor* (SteamVR::*)()>(&SteamVR::get_compositor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_compositor
// Il2CppName: set_compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(Valve::VR::CVRCompositor*)>(&SteamVR::set_compositor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::CVRCompositor*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_overlay
// Il2CppName: get_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVROverlay* (SteamVR::*)()>(&SteamVR::get_overlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_overlay
// Il2CppName: set_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(Valve::VR::CVROverlay*)>(&SteamVR::set_overlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::CVROverlay*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_initializing
// Il2CppName: get_initializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_initializing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_initializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_initializing
// Il2CppName: set_initializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&SteamVR::set_initializing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_initializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_calibrating
// Il2CppName: get_calibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_calibrating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_calibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_calibrating
// Il2CppName: set_calibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&SteamVR::set_calibrating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_calibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_outOfRange
// Il2CppName: get_outOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR::get_outOfRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_outOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_outOfRange
// Il2CppName: set_outOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&SteamVR::set_outOfRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_outOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_sceneWidth
// Il2CppName: get_sceneWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_sceneWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_sceneWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_sceneWidth
// Il2CppName: set_sceneWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(float)>(&SteamVR::set_sceneWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_sceneWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_sceneHeight
// Il2CppName: get_sceneHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_sceneHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_sceneHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_sceneHeight
// Il2CppName: set_sceneHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(float)>(&SteamVR::set_sceneHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_sceneHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_aspect
// Il2CppName: get_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_aspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_aspect
// Il2CppName: set_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(float)>(&SteamVR::set_aspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_fieldOfView
// Il2CppName: get_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_fieldOfView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_fieldOfView
// Il2CppName: set_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(float)>(&SteamVR::set_fieldOfView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_tanHalfFov
// Il2CppName: get_tanHalfFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (SteamVR::*)()>(&SteamVR::get_tanHalfFov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_tanHalfFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_tanHalfFov
// Il2CppName: set_tanHalfFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(UnityEngine::Vector2)>(&SteamVR::set_tanHalfFov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_tanHalfFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_textureBounds
// Il2CppName: get_textureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<Valve::VR::VRTextureBounds_t>* (SteamVR::*)()>(&SteamVR::get_textureBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_textureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_textureBounds
// Il2CppName: set_textureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(::Array<Valve::VR::VRTextureBounds_t>*)>(&SteamVR::set_textureBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_textureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::VRTextureBounds_t>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_eyes
// Il2CppName: get_eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* (SteamVR::*)()>(&SteamVR::get_eyes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::set_eyes
// Il2CppName: set_eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>*)>(&SteamVR::set_eyes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "set_eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd_TrackingSystemName
// Il2CppName: get_hmd_TrackingSystemName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR::*)()>(&SteamVR::get_hmd_TrackingSystemName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd_TrackingSystemName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd_ModelNumber
// Il2CppName: get_hmd_ModelNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR::*)()>(&SteamVR::get_hmd_ModelNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd_ModelNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd_SerialNumber
// Il2CppName: get_hmd_SerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR::*)()>(&SteamVR::get_hmd_SerialNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd_SerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd_SecondsFromVsyncToPhotons
// Il2CppName: get_hmd_SecondsFromVsyncToPhotons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_hmd_SecondsFromVsyncToPhotons)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd_SecondsFromVsyncToPhotons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::get_hmd_DisplayFrequency
// Il2CppName: get_hmd_DisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)()>(&SteamVR::get_hmd_DisplayFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "get_hmd_DisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::GetTrackedDeviceString
// Il2CppName: GetTrackedDeviceString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR::*)(uint)>(&SteamVR::GetTrackedDeviceString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "GetTrackedDeviceString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR::GetStringProperty
// Il2CppName: GetStringProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR::*)(Valve::VR::ETrackedDeviceProperty, uint)>(&SteamVR::GetStringProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "GetStringProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR::GetFloatProperty
// Il2CppName: GetFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR::*)(Valve::VR::ETrackedDeviceProperty, uint)>(&SteamVR::GetFloatProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "GetFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR::OnInitializing
// Il2CppName: OnInitializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(bool)>(&SteamVR::OnInitializing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "OnInitializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::OnCalibrating
// Il2CppName: OnCalibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(bool)>(&SteamVR::OnCalibrating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "OnCalibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::OnOutOfRange
// Il2CppName: OnOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(bool)>(&SteamVR::OnOutOfRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "OnOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(int, bool)>(&SteamVR::OnDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::OnNewPoses
// Il2CppName: OnNewPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(::Array<Valve::VR::TrackedDevicePose_t>*)>(&SteamVR::OnNewPoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "OnNewPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)()>(&SteamVR::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)(bool)>(&SteamVR::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR::SafeDispose
// Il2CppName: SafeDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR::SafeDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "SafeDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)()>(&SteamVR::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)()>(&SteamVR::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR::*)()>(&SteamVR::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Hashtable values
System::Collections::Hashtable* GlobalNamespace::SteamVR_Camera::_get_values() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_get_values");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_Camera", "values"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Hashtable values
void GlobalNamespace::SteamVR_Camera::_set_values(System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_set_values");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "values", value));
}
// Autogenerated static field getter
// Get static field: static private System.String eyeSuffix
::Il2CppString* GlobalNamespace::SteamVR_Camera::_get_eyeSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_get_eyeSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_Camera", "eyeSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String eyeSuffix
void GlobalNamespace::SteamVR_Camera::_set_eyeSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_set_eyeSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "eyeSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String earsSuffix
::Il2CppString* GlobalNamespace::SteamVR_Camera::_get_earsSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_get_earsSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_Camera", "earsSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String earsSuffix
void GlobalNamespace::SteamVR_Camera::_set_earsSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_set_earsSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "earsSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String headSuffix
::Il2CppString* GlobalNamespace::SteamVR_Camera::_get_headSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_get_headSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_Camera", "headSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String headSuffix
void GlobalNamespace::SteamVR_Camera::_set_headSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_set_headSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "headSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String originSuffix
::Il2CppString* GlobalNamespace::SteamVR_Camera::_get_originSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_get_originSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_Camera", "originSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String originSuffix
void GlobalNamespace::SteamVR_Camera::_set_originSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::_set_originSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "originSuffix", value));
}
// Autogenerated method: SteamVR_Camera.get_head
UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_offset
UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_offset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_origin
UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_origin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_origin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_origin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_camera
UnityEngine::Camera* GlobalNamespace::SteamVR_Camera::get_camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_camera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_camera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.set_camera
void GlobalNamespace::SteamVR_Camera::set_camera(UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::set_camera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_camera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Camera.get_ears
UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_ears() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_ears");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ears", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.GetRay
UnityEngine::Ray GlobalNamespace::SteamVR_Camera::GetRay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::GetRay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Ray, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_sceneResolutionScale
float GlobalNamespace::SteamVR_Camera::get_sceneResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_sceneResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Camera", "get_sceneResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Camera.set_sceneResolutionScale
void GlobalNamespace::SteamVR_Camera::set_sceneResolutionScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::set_sceneResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Camera", "set_sceneResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Camera.OnDisable
void GlobalNamespace::SteamVR_Camera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.OnEnable
void GlobalNamespace::SteamVR_Camera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Awake
void GlobalNamespace::SteamVR_Camera::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.ForceLast
void GlobalNamespace::SteamVR_Camera::ForceLast() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::ForceLast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_baseName
::Il2CppString* GlobalNamespace::SteamVR_Camera::get_baseName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::get_baseName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_baseName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Expand
void GlobalNamespace::SteamVR_Camera::Expand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::Expand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Expand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Collapse
void GlobalNamespace::SteamVR_Camera::Collapse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Camera::Collapse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Collapse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Camera::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_head)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_offset
// Il2CppName: get_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_offset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_origin
// Il2CppName: get_origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_origin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_camera
// Il2CppName: get_camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_camera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::set_camera
// Il2CppName: set_camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)(UnityEngine::Camera*)>(&SteamVR_Camera::set_camera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "set_camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_ears
// Il2CppName: get_ears
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_ears)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_ears", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::GetRay
// Il2CppName: GetRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Ray (SteamVR_Camera::*)()>(&SteamVR_Camera::GetRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "GetRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_sceneResolutionScale
// Il2CppName: get_sceneResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&SteamVR_Camera::get_sceneResolutionScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_sceneResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::set_sceneResolutionScale
// Il2CppName: set_sceneResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&SteamVR_Camera::set_sceneResolutionScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "set_sceneResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::ForceLast
// Il2CppName: ForceLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::ForceLast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "ForceLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::get_baseName
// Il2CppName: get_baseName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR_Camera::*)()>(&SteamVR_Camera::get_baseName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "get_baseName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::Expand
// Il2CppName: Expand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::Expand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "Expand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::Collapse
// Il2CppName: Collapse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::Collapse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), "Collapse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Camera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Camera::*)()>(&SteamVR_Camera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Camera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_CameraFlip
#include "GlobalNamespace/SteamVR_CameraFlip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_CameraFlip.Awake
void GlobalNamespace::SteamVR_CameraFlip::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_CameraFlip::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_CameraFlip::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraFlip::*)()>(&SteamVR_CameraFlip::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraFlip*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_CameraFlip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraFlip::*)()>(&SteamVR_CameraFlip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraFlip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraFlip::*)()>(&SteamVR_CameraFlip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraFlip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_CameraMask
#include "GlobalNamespace/SteamVR_CameraMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_CameraMask.Awake
void GlobalNamespace::SteamVR_CameraMask::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_CameraMask::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_CameraMask::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraMask::*)()>(&SteamVR_CameraMask::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraMask*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_CameraMask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraMask::*)()>(&SteamVR_CameraMask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_CameraMask::*)()>(&SteamVR_CameraMask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_CameraMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Controller
#include "GlobalNamespace/SteamVR_Controller.hpp"
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_Controller/Device[] devices
::Array<GlobalNamespace::SteamVR_Controller::Device*>* GlobalNamespace::SteamVR_Controller::_get_devices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::_get_devices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_Controller::Device*>*>("", "SteamVR_Controller", "devices"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Controller/Device[] devices
void GlobalNamespace::SteamVR_Controller::_set_devices(::Array<GlobalNamespace::SteamVR_Controller::Device*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::_set_devices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller", "devices", value));
}
// Autogenerated method: SteamVR_Controller.Input
GlobalNamespace::SteamVR_Controller::Device* GlobalNamespace::SteamVR_Controller::Input(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Input");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Input", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Controller::Device*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_Controller.Update
void GlobalNamespace::SteamVR_Controller::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Controller.GetDeviceIndex
int GlobalNamespace::SteamVR_Controller::GetDeviceIndex(GlobalNamespace::SteamVR_Controller::DeviceRelation relation, Valve::VR::ETrackedDeviceClass deviceClass, int relativeTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::GetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "GetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relation), ::il2cpp_utils::ExtractType(deviceClass), ::il2cpp_utils::ExtractType(relativeTo)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relation, deviceClass, relativeTo);
}
// Writing MetadataGetter for method: SteamVR_Controller::Input
// Il2CppName: Input
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Controller::Device* (*)(int)>(&SteamVR_Controller::Input)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller*), "Input", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_Controller::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::GetDeviceIndex
// Il2CppName: GetDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(GlobalNamespace::SteamVR_Controller::DeviceRelation, Valve::VR::ETrackedDeviceClass, int)>(&SteamVR_Controller::GetDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller*), "GetDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Controller::DeviceRelation>(), ::il2cpp_utils::ExtractIndependentType<Valve::VR::ETrackedDeviceClass>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::*)()>(&SteamVR_Controller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::*)()>(&SteamVR_Controller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt64 System
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "System"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 System
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "System", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 ApplicationMenu
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 ApplicationMenu
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Grip
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Grip"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Grip
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Grip", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis0
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis0"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis0
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis1
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis1"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis1
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis2
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis2"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis2
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis3
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis3"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis3
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis4
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis4"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis4
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Touchpad
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Touchpad
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Trigger
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Trigger"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Trigger
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Trigger", value));
}
// Writing MetadataGetter for method: SteamVR_Controller::ButtonMask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::ButtonMask::*)()>(&SteamVR_Controller::ButtonMask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::ButtonMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::ButtonMask::*)()>(&SteamVR_Controller::ButtonMask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::ButtonMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Controller/Device.get_index
uint GlobalNamespace::SteamVR_Controller::Device::get_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_index");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_index
void GlobalNamespace::SteamVR_Controller::Device::set_index(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::set_index");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_valid
bool GlobalNamespace::SteamVR_Controller::Device::get_valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_valid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_valid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_valid
void GlobalNamespace::SteamVR_Controller::Device::set_valid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::set_valid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_connected
bool GlobalNamespace::SteamVR_Controller::Device::get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_connected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_hasTracking
bool GlobalNamespace::SteamVR_Controller::Device::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_outOfRange
bool GlobalNamespace::SteamVR_Controller::Device::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_calibrating
bool GlobalNamespace::SteamVR_Controller::Device::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_uninitialized
bool GlobalNamespace::SteamVR_Controller::Device::get_uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_uninitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uninitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Controller::Device::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPrevState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetPrevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPrevState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrevState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_Controller::Device::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.Update
void GlobalNamespace::SteamVR_Controller::Device::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetAxis
UnityEngine::Vector2 GlobalNamespace::SteamVR_Controller::Device::GetAxis(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.TriggerHapticPulse
void GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse(uint16_t durationMicroSec, Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(durationMicroSec), ::il2cpp_utils::ExtractType(buttonId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, durationMicroSec, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.UpdateHairTrigger
void GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHairTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTrigger
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerDown
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTriggerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerUp
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTriggerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Controller::Device::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)(uint)>(&SteamVR_Controller::Device::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)(uint)>(&SteamVR_Controller::Device::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_index)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::set_index
// Il2CppName: set_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)(uint)>(&SteamVR_Controller::Device::set_index)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "set_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_valid
// Il2CppName: get_valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_valid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::set_valid
// Il2CppName: set_valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)(bool)>(&SteamVR_Controller::Device::set_valid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "set_valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_connected
// Il2CppName: get_connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_connected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_hasTracking
// Il2CppName: get_hasTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_hasTracking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_hasTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_outOfRange
// Il2CppName: get_outOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_outOfRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_outOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_calibrating
// Il2CppName: get_calibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_calibrating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_calibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_uninitialized
// Il2CppName: get_uninitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_uninitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_uninitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Utils::RigidTransform (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_velocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::get_angularVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::VRControllerState_t (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPrevState
// Il2CppName: GetPrevState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::VRControllerState_t (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetPrevState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPrevState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPose
// Il2CppName: GetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::TrackedDevicePose_t (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPress
// Il2CppName: GetPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetPress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPressDown
// Il2CppName: GetPressDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetPressDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPressDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPressUp
// Il2CppName: GetPressUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetPressUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPressUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPress
// Il2CppName: GetPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetPress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPressDown
// Il2CppName: GetPressDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetPressDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPressDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetPressUp
// Il2CppName: GetPressUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetPressUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetPressUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouch
// Il2CppName: GetTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetTouch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouchDown
// Il2CppName: GetTouchDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetTouchDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouchDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouchUp
// Il2CppName: GetTouchUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(uint64_t)>(&SteamVR_Controller::Device::GetTouchUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouchUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouch
// Il2CppName: GetTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetTouch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouchDown
// Il2CppName: GetTouchDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetTouchDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouchDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetTouchUp
// Il2CppName: GetTouchUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetTouchUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetTouchUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetAxis
// Il2CppName: GetAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (SteamVR_Controller::Device::*)(Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::GetAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)(uint16_t, Valve::VR::EVRButtonId)>(&SteamVR_Controller::Device::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint16_t>(), ::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::UpdateHairTrigger
// Il2CppName: UpdateHairTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::UpdateHairTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "UpdateHairTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetHairTrigger
// Il2CppName: GetHairTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetHairTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetHairTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetHairTriggerDown
// Il2CppName: GetHairTriggerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetHairTriggerDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetHairTriggerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Controller::Device::GetHairTriggerUp
// Il2CppName: GetHairTriggerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Controller::Device::*)()>(&SteamVR_Controller::Device::GetHairTriggerUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Controller::Device*), "GetHairTriggerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation First
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "First"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation First
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "First", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Leftmost
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Leftmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Leftmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Leftmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Rightmost
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Rightmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Rightmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Rightmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestLeft"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestLeft", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestRight
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestRight"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestRight
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestRight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ControllerManager
#include "GlobalNamespace/SteamVR_ControllerManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String hiddenPrefix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPrefix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String hiddenPostfix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPostfix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPostfix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String[] labels
::Array<::Il2CppString*>* GlobalNamespace::SteamVR_ControllerManager::_get_labels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_labels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("", "SteamVR_ControllerManager", "labels"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] labels
void GlobalNamespace::SteamVR_ControllerManager::_set_labels(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_labels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "labels", value));
}
// Autogenerated method: SteamVR_ControllerManager.SetUniqueObject
void GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject(UnityEngine::GameObject* o, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUniqueObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, o, index);
}
// Autogenerated method: SteamVR_ControllerManager.UpdateTargets
void GlobalNamespace::SteamVR_ControllerManager::UpdateTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::UpdateTargets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTargets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.Awake
void GlobalNamespace::SteamVR_ControllerManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnEnable
void GlobalNamespace::SteamVR_ControllerManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnDisable
void GlobalNamespace::SteamVR_ControllerManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnInputFocus
void GlobalNamespace::SteamVR_ControllerManager::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_ControllerManager.HideObject
void GlobalNamespace::SteamVR_ControllerManager::HideObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::HideObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.ShowObject
void GlobalNamespace::SteamVR_ControllerManager::ShowObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::ShowObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.SetTrackedDeviceIndex
void GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectIndex), ::il2cpp_utils::ExtractType(trackedDeviceIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, objectIndex, trackedDeviceIndex);
}
// Autogenerated method: SteamVR_ControllerManager.OnTrackedDeviceRoleChanged
void GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTrackedDeviceRoleChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_ControllerManager.OnDeviceConnected
void GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_ControllerManager.Refresh
void GlobalNamespace::SteamVR_ControllerManager::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager..cctor
void GlobalNamespace::SteamVR_ControllerManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_ControllerManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_ControllerManager::SetUniqueObject
// Il2CppName: SetUniqueObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(UnityEngine::GameObject*, int)>(&SteamVR_ControllerManager::SetUniqueObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "SetUniqueObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::UpdateTargets
// Il2CppName: UpdateTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::UpdateTargets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "UpdateTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::OnInputFocus
// Il2CppName: OnInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(bool)>(&SteamVR_ControllerManager::OnInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "OnInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::HideObject
// Il2CppName: HideObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(UnityEngine::Transform*, ::Il2CppString*)>(&SteamVR_ControllerManager::HideObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "HideObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::ShowObject
// Il2CppName: ShowObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(UnityEngine::Transform*, ::Il2CppString*)>(&SteamVR_ControllerManager::ShowObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "ShowObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::SetTrackedDeviceIndex
// Il2CppName: SetTrackedDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(int, uint)>(&SteamVR_ControllerManager::SetTrackedDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "SetTrackedDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::OnTrackedDeviceRoleChanged
// Il2CppName: OnTrackedDeviceRoleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(Valve::VR::VREvent_t)>(&SteamVR_ControllerManager::OnTrackedDeviceRoleChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "OnTrackedDeviceRoleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VREvent_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)(int, bool)>(&SteamVR_ControllerManager::OnDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ControllerManager::*)()>(&SteamVR_ControllerManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ControllerManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_ControllerManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ControllerManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Ears
#include "GlobalNamespace/SteamVR_Ears.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Ears.OnNewPosesApplied
void GlobalNamespace::SteamVR_Ears::OnNewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnNewPosesApplied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPosesApplied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnEnable
void GlobalNamespace::SteamVR_Ears::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnDisable
void GlobalNamespace::SteamVR_Ears::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Ears::OnNewPosesApplied
// Il2CppName: OnNewPosesApplied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Ears::*)()>(&SteamVR_Ears::OnNewPosesApplied)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Ears*), "OnNewPosesApplied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Ears::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Ears::*)()>(&SteamVR_Ears::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Ears*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Ears::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Ears::*)()>(&SteamVR_Ears::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Ears*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Ears::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Ears::*)()>(&SteamVR_Ears::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Ears*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Ears::*)()>(&SteamVR_Ears::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Ears*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: SteamVR_Events/Action`1
#include "GlobalNamespace/SteamVR_Events_Action_1.hpp"
// Including type: SteamVR_Events/Action`2
#include "GlobalNamespace/SteamVR_Events_Action_2.hpp"
// Including type: SteamVR_Events/Action`3
#include "GlobalNamespace/SteamVR_Events_Action_3.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: SteamVR_Events/Event`1
#include "GlobalNamespace/SteamVR_Events_Event_1.hpp"
// Including type: SteamVR_Events/Event`2
#include "GlobalNamespace/SteamVR_Events_Event_2.hpp"
// Including type: SteamVR_Events/Event`3
#include "GlobalNamespace/SteamVR_Events_Event_3.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: UnityEngine.Events.UnityAction`2
#include "UnityEngine/Events/UnityAction_2.hpp"
// Including type: UnityEngine.Events.UnityAction`3
#include "UnityEngine/Events/UnityAction_3.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Calibrating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Calibrating"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
void GlobalNamespace::SteamVR_Events::_set_Calibrating(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Calibrating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Calibrating", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
GlobalNamespace::SteamVR_Events::Event_2<int, bool>* GlobalNamespace::SteamVR_Events::_get_DeviceConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_DeviceConnected");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_2<int, bool>*>("", "SteamVR_Events", "DeviceConnected")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
void GlobalNamespace::SteamVR_Events::_set_DeviceConnected(GlobalNamespace::SteamVR_Events::Event_2<int, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_DeviceConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "DeviceConnected", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>* GlobalNamespace::SteamVR_Events::_get_Fade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Fade");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>*>("", "SteamVR_Events", "Fade")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
void GlobalNamespace::SteamVR_Events::_set_Fade(GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Fade");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Fade", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event FadeReady
GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_FadeReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_FadeReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "FadeReady"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event FadeReady
void GlobalNamespace::SteamVR_Events::_set_FadeReady(GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_FadeReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "FadeReady", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
void GlobalNamespace::SteamVR_Events::_set_HideRenderModels(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Initializing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Initializing"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
void GlobalNamespace::SteamVR_Events::_set_Initializing(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Initializing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Initializing", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_InputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_InputFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "InputFocus"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
void GlobalNamespace::SteamVR_Events::_set_InputFocus(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_InputFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "InputFocus", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
void GlobalNamespace::SteamVR_Events::_set_Loading(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeIn"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn(GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeIn", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeOut"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut(GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeOut", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>* GlobalNamespace::SteamVR_Events::_get_NewPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_NewPoses");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>*>("", "SteamVR_Events", "NewPoses"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
void GlobalNamespace::SteamVR_Events::_set_NewPoses(GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_NewPoses");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPoses", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event NewPosesApplied
GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_NewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_NewPosesApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "NewPosesApplied"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event NewPosesApplied
void GlobalNamespace::SteamVR_Events::_set_NewPosesApplied(GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_NewPosesApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPosesApplied", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
void GlobalNamespace::SteamVR_Events::_set_OutOfRange(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>* GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>*>("", "SteamVR_Events", "RenderModelLoaded")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
void GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded(GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "RenderModelLoaded", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>* GlobalNamespace::SteamVR_Events::_get_systemEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_systemEvents");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>*>("", "SteamVR_Events", "systemEvents")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
void GlobalNamespace::SteamVR_Events::_set_systemEvents(System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_systemEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "systemEvents", value));
}
// Autogenerated method: SteamVR_Events.CalibratingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::CalibratingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::CalibratingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "CalibratingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.DeviceConnectedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::DeviceConnectedAction(UnityEngine::Events::UnityAction_2<int, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::DeviceConnectedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "DeviceConnectedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeAction(UnityEngine::Events::UnityAction_3<UnityEngine::Color, float, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::FadeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeReadyAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeReadyAction(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::FadeReadyAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeReadyAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.HideRenderModelsAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::HideRenderModelsAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::HideRenderModelsAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "HideRenderModelsAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InitializingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InitializingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::InitializingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "InitializingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InputFocusAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InputFocusAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::InputFocusAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "InputFocusAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeInAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeInAction(UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingFadeInAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeInAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeOutAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeOutAction(UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingFadeOutAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeOutAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAction(UnityEngine::Events::UnityAction_1<::Array<Valve::VR::TrackedDevicePose_t>*>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::NewPosesAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAppliedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAppliedAction(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::NewPosesAppliedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAppliedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.OutOfRangeAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::OutOfRangeAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::OutOfRangeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "OutOfRangeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.RenderModelLoadedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::RenderModelLoadedAction(UnityEngine::Events::UnityAction_2<GlobalNamespace::SteamVR_RenderModel*, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::RenderModelLoadedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "RenderModelLoadedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.System
GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>* GlobalNamespace::SteamVR_Events::System(Valve::VR::EVREventType eventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::System");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "System", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType);
}
// Autogenerated method: SteamVR_Events.SystemAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::SystemAction(Valve::VR::EVREventType eventType, UnityEngine::Events::UnityAction_1<Valve::VR::VREvent_t>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::SystemAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "SystemAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType, action);
}
// Autogenerated method: SteamVR_Events..cctor
void GlobalNamespace::SteamVR_Events::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Events::CalibratingAction
// Il2CppName: CalibratingAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::CalibratingAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "CalibratingAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::DeviceConnectedAction
// Il2CppName: DeviceConnectedAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_2<int, bool>*)>(&SteamVR_Events::DeviceConnectedAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "DeviceConnectedAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_2<int, bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::FadeAction
// Il2CppName: FadeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_3<UnityEngine::Color, float, bool>*)>(&SteamVR_Events::FadeAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "FadeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_3<UnityEngine::Color, float, bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::FadeReadyAction
// Il2CppName: FadeReadyAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction*)>(&SteamVR_Events::FadeReadyAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "FadeReadyAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::HideRenderModelsAction
// Il2CppName: HideRenderModelsAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::HideRenderModelsAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "HideRenderModelsAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::InitializingAction
// Il2CppName: InitializingAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::InitializingAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "InitializingAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::InputFocusAction
// Il2CppName: InputFocusAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::InputFocusAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "InputFocusAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::LoadingAction
// Il2CppName: LoadingAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::LoadingAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "LoadingAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::LoadingFadeInAction
// Il2CppName: LoadingFadeInAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<float>*)>(&SteamVR_Events::LoadingFadeInAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "LoadingFadeInAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::LoadingFadeOutAction
// Il2CppName: LoadingFadeOutAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<float>*)>(&SteamVR_Events::LoadingFadeOutAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "LoadingFadeOutAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::NewPosesAction
// Il2CppName: NewPosesAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<::Array<Valve::VR::TrackedDevicePose_t>*>*)>(&SteamVR_Events::NewPosesAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "NewPosesAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<::Array<Valve::VR::TrackedDevicePose_t>*>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::NewPosesAppliedAction
// Il2CppName: NewPosesAppliedAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction*)>(&SteamVR_Events::NewPosesAppliedAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "NewPosesAppliedAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::OutOfRangeAction
// Il2CppName: OutOfRangeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_1<bool>*)>(&SteamVR_Events::OutOfRangeAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "OutOfRangeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::RenderModelLoadedAction
// Il2CppName: RenderModelLoadedAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(UnityEngine::Events::UnityAction_2<GlobalNamespace::SteamVR_RenderModel*, bool>*)>(&SteamVR_Events::RenderModelLoadedAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "RenderModelLoadedAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_2<GlobalNamespace::SteamVR_RenderModel*, bool>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::System
// Il2CppName: System
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>* (*)(Valve::VR::EVREventType)>(&SteamVR_Events::System)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "System", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVREventType>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::SystemAction
// Il2CppName: SystemAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Events::Action* (*)(Valve::VR::EVREventType, UnityEngine::Events::UnityAction_1<Valve::VR::VREvent_t>*)>(&SteamVR_Events::SystemAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), "SystemAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVREventType>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction_1<Valve::VR::VREvent_t>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_Events::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Action.Enable
void GlobalNamespace::SteamVR_Events::Action::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Action::Enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: SteamVR_Events/Action.set_enabled
void GlobalNamespace::SteamVR_Events::Action::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Action::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: SteamVR_Events::Action::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Action::*)(bool)>(&SteamVR_Events::Action::Enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Action*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::Action::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Action::*)(bool)>(&SteamVR_Events::Action::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Action*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::Action::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Action::*)()>(&SteamVR_Events::Action::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Action*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Action::*)()>(&SteamVR_Events::Action::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Action*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/ActionNoArgs.Enable
void GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Writing MetadataGetter for method: SteamVR_Events::ActionNoArgs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::ActionNoArgs::*)(GlobalNamespace::SteamVR_Events::Event*, UnityEngine::Events::UnityAction*)>(&SteamVR_Events::ActionNoArgs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::ActionNoArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Events::Event*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::ActionNoArgs::*)(GlobalNamespace::SteamVR_Events::Event*, UnityEngine::Events::UnityAction*)>(&SteamVR_Events::ActionNoArgs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::ActionNoArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Events::Event*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::ActionNoArgs::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::ActionNoArgs::*)(bool)>(&SteamVR_Events::ActionNoArgs::Enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::ActionNoArgs*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Event.Listen
void GlobalNamespace::SteamVR_Events::Event::Listen(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Listen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Listen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Remove
void GlobalNamespace::SteamVR_Events::Event::Remove(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Send
void GlobalNamespace::SteamVR_Events::Event::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Events::Event::Listen
// Il2CppName: Listen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Event::*)(UnityEngine::Events::UnityAction*)>(&SteamVR_Events::Event::Listen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Event*), "Listen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::Event::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Event::*)(UnityEngine::Events::UnityAction*)>(&SteamVR_Events::Event::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Event*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::Event::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Event::*)()>(&SteamVR_Events::Event::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Event*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Events::Event::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Event::*)()>(&SteamVR_Events::Event::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Event*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Events::Event::*)()>(&SteamVR_Events::Event::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Events::Event*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: System.IO.FileSystemWatcher
#include "System/IO/FileSystemWatcher.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.IO.FileSystemEventArgs
#include "System/IO/FileSystemEventArgs.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_ExternalCamera.ReadConfig
void GlobalNamespace::SteamVR_ExternalCamera::ReadConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::ReadConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnChanged
void GlobalNamespace::SteamVR_ExternalCamera::OnChanged(::Il2CppObject* source, System::IO::FileSystemEventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, e);
}
// Autogenerated method: SteamVR_ExternalCamera.AttachToCamera
void GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachToCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_ExternalCamera.GetTargetDistance
float GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderNear
void GlobalNamespace::SteamVR_ExternalCamera::RenderNear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::RenderNear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderNear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderFar
void GlobalNamespace::SteamVR_ExternalCamera::RenderFar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::RenderFar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderFar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnGUI
void GlobalNamespace::SteamVR_ExternalCamera::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnEnable
void GlobalNamespace::SteamVR_ExternalCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnDisable
void GlobalNamespace::SteamVR_ExternalCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_ExternalCamera::ReadConfig
// Il2CppName: ReadConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::ReadConfig)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "ReadConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::OnChanged
// Il2CppName: OnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)(::Il2CppObject*, System::IO::FileSystemEventArgs*)>(&SteamVR_ExternalCamera::OnChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "OnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileSystemEventArgs*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::AttachToCamera
// Il2CppName: AttachToCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)(GlobalNamespace::SteamVR_Camera*)>(&SteamVR_ExternalCamera::AttachToCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "AttachToCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::GetTargetDistance
// Il2CppName: GetTargetDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::GetTargetDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "GetTargetDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::RenderNear
// Il2CppName: RenderNear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::RenderNear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "RenderNear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::RenderFar
// Il2CppName: RenderFar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::RenderFar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "RenderFar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::OnGUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_ExternalCamera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_ExternalCamera::*)()>(&SteamVR_ExternalCamera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_ExternalCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Fade
#include "GlobalNamespace/SteamVR_Fade.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material fadeMaterial
UnityEngine::Material* GlobalNamespace::SteamVR_Fade::_get_fadeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_get_fadeMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "SteamVR_Fade", "fadeMaterial"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material fadeMaterial
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_set_fadeMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterial", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 fadeMaterialColorID
int GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SteamVR_Fade", "fadeMaterialColorID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 fadeMaterialColorID
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterialColorID", value));
}
// Autogenerated method: SteamVR_Fade.Start
void GlobalNamespace::SteamVR_Fade::Start(UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOverlay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.View
void GlobalNamespace::SteamVR_Fade::View(UnityEngine::Color newColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::View");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", "View", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, newColor, duration);
}
// Autogenerated method: SteamVR_Fade.OnStartFade
void GlobalNamespace::SteamVR_Fade::OnStartFade(UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnStartFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOverlay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.OnEnable
void GlobalNamespace::SteamVR_Fade::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnDisable
void GlobalNamespace::SteamVR_Fade::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnPostRender
void GlobalNamespace::SteamVR_Fade::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade..cctor
void GlobalNamespace::SteamVR_Fade::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Fade::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Color, float, bool)>(&SteamVR_Fade::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::View
// Il2CppName: View
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Color, float)>(&SteamVR_Fade::View)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "View", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::OnStartFade
// Il2CppName: OnStartFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)(UnityEngine::Color, float, bool)>(&SteamVR_Fade::OnStartFade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "OnStartFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)()>(&SteamVR_Fade::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)()>(&SteamVR_Fade::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)()>(&SteamVR_Fade::OnPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)()>(&SteamVR_Fade::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Fade::*)()>(&SteamVR_Fade::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Fade::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_Fade::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Fade*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Frustum
#include "GlobalNamespace/SteamVR_Frustum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Frustum.UpdateModel
void GlobalNamespace::SteamVR_Frustum::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDeviceConnected
void GlobalNamespace::SteamVR_Frustum::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_Frustum.OnEnable
void GlobalNamespace::SteamVR_Frustum::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDisable
void GlobalNamespace::SteamVR_Frustum::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Frustum::UpdateModel
// Il2CppName: UpdateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)()>(&SteamVR_Frustum::UpdateModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), "UpdateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Frustum::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)(int, bool)>(&SteamVR_Frustum::OnDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Frustum::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)()>(&SteamVR_Frustum::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Frustum::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)()>(&SteamVR_Frustum::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Frustum::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)()>(&SteamVR_Frustum::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Frustum::*)()>(&SteamVR_Frustum::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Frustum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_GameView
#include "GlobalNamespace/SteamVR_GameView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_GameView.Awake
void GlobalNamespace::SteamVR_GameView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_GameView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_GameView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_GameView::*)()>(&SteamVR_GameView::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_GameView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_GameView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_GameView::*)()>(&SteamVR_GameView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_GameView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_GameView::*)()>(&SteamVR_GameView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_GameView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_IK
#include "GlobalNamespace/SteamVR_IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_IK.LateUpdate
void GlobalNamespace::SteamVR_IK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_IK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_IK.Solve
bool GlobalNamespace::SteamVR_IK::Solve(UnityEngine::Vector3 start, UnityEngine::Vector3 end, UnityEngine::Vector3 poleVector, float jointDist, float targetDist, UnityEngine::Vector3& result, UnityEngine::Vector3& forward, UnityEngine::Vector3& up) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_IK::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_IK", "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(poleVector), ::il2cpp_utils::ExtractType(jointDist), ::il2cpp_utils::ExtractType(targetDist), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, start, end, poleVector, jointDist, targetDist, result, forward, up);
}
// Writing MetadataGetter for method: SteamVR_IK::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_IK::*)()>(&SteamVR_IK::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_IK*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_IK::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&)>(&SteamVR_IK::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_IK*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SteamVR_IK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_IK::*)()>(&SteamVR_IK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_IK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_IK::*)()>(&SteamVR_IK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_IK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel
#include "GlobalNamespace/SteamVR_LoadLevel.hpp"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__45
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__45.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_LoadLevel _active
GlobalNamespace::SteamVR_LoadLevel* GlobalNamespace::SteamVR_LoadLevel::_get__active() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::_get__active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_LoadLevel*>("", "SteamVR_LoadLevel", "_active"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_LoadLevel _active
void GlobalNamespace::SteamVR_LoadLevel::_set__active(GlobalNamespace::SteamVR_LoadLevel* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::_set__active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_LoadLevel", "_active", value));
}
// Autogenerated method: SteamVR_LoadLevel.get_loading
bool GlobalNamespace::SteamVR_LoadLevel::get_loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_loading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_loading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progress
float GlobalNamespace::SteamVR_LoadLevel::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progressTexture
UnityEngine::Texture* GlobalNamespace::SteamVR_LoadLevel::get_progressTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_progressTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progressTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.OnEnable
void GlobalNamespace::SteamVR_LoadLevel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Trigger
void GlobalNamespace::SteamVR_LoadLevel::Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Trigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Trigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Begin
void GlobalNamespace::SteamVR_LoadLevel::Begin(::Il2CppString* levelName, bool showGrid, float fadeOutTime, float r, float g, float b, float a) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Begin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelName), ::il2cpp_utils::ExtractType(showGrid), ::il2cpp_utils::ExtractType(fadeOutTime), ::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(g), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(a)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelName, showGrid, fadeOutTime, r, g, b, a);
}
// Autogenerated method: SteamVR_LoadLevel.OnGUI
void GlobalNamespace::SteamVR_LoadLevel::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Update
void GlobalNamespace::SteamVR_LoadLevel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.LoadLevel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_LoadLevel::LoadLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::LoadLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.GetOverlayHandle
uint64_t GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle(::Il2CppString* overlayName, UnityEngine::Transform* transform, float widthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overlayName), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(widthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, overlayName, transform, widthInMeters);
}
// Autogenerated method: SteamVR_LoadLevel..cctor
void GlobalNamespace::SteamVR_LoadLevel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_LoadLevel::get_loading
// Il2CppName: get_loading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR_LoadLevel::get_loading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "get_loading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::get_progress
// Il2CppName: get_progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&SteamVR_LoadLevel::get_progress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "get_progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::get_progressTexture
// Il2CppName: get_progressTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture* (*)()>(&SteamVR_LoadLevel::get_progressTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "get_progressTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::Trigger
// Il2CppName: Trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::Trigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "Trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::Begin
// Il2CppName: Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, bool, float, float, float, float, float)>(&SteamVR_LoadLevel::Begin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::OnGUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::LoadLevel
// Il2CppName: LoadLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::LoadLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "LoadLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::GetOverlayHandle
// Il2CppName: GetOverlayHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_LoadLevel::*)(::Il2CppString*, UnityEngine::Transform*, float)>(&SteamVR_LoadLevel::GetOverlayHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), "GetOverlayHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::*)()>(&SteamVR_LoadLevel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_LoadLevel::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__45
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__45.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.MoveNext
bool GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::$LoadLevel$d__45::*)(int)>(&SteamVR_LoadLevel::$LoadLevel$d__45::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::$LoadLevel$d__45::*)(int)>(&SteamVR_LoadLevel::$LoadLevel$d__45::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::$LoadLevel$d__45::*)()>(&SteamVR_LoadLevel::$LoadLevel$d__45::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_LoadLevel::$LoadLevel$d__45::*)()>(&SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_LoadLevel::$LoadLevel$d__45::*)()>(&SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_LoadLevel::$LoadLevel$d__45::*)()>(&SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_LoadLevel::$LoadLevel$d__45::*)()>(&SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_LoadLevel::$LoadLevel$d__45*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Menu
#include "GlobalNamespace/SteamVR_Menu.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Menu.get_texture
UnityEngine::RenderTexture* GlobalNamespace::SteamVR_Menu::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.get_scale
float GlobalNamespace::SteamVR_Menu::get_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::get_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.set_scale
void GlobalNamespace::SteamVR_Menu::set_scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::set_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Menu.Awake
void GlobalNamespace::SteamVR_Menu::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.OnGUI
void GlobalNamespace::SteamVR_Menu::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.ShowMenu
void GlobalNamespace::SteamVR_Menu::ShowMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::ShowMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.HideMenu
void GlobalNamespace::SteamVR_Menu::HideMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::HideMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.Update
void GlobalNamespace::SteamVR_Menu::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.SetScale
void GlobalNamespace::SteamVR_Menu::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: SteamVR_Menu.SaveCursorState
void GlobalNamespace::SteamVR_Menu::SaveCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::SaveCursorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveCursorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.RestoreCursorState
void GlobalNamespace::SteamVR_Menu::RestoreCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::RestoreCursorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestoreCursorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Menu::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (SteamVR_Menu::*)()>(&SteamVR_Menu::get_texture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::get_scale
// Il2CppName: get_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SteamVR_Menu::*)()>(&SteamVR_Menu::get_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "get_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)(float)>(&SteamVR_Menu::set_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::OnGUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::ShowMenu
// Il2CppName: ShowMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::ShowMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "ShowMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::HideMenu
// Il2CppName: HideMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::HideMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "HideMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)(float)>(&SteamVR_Menu::SetScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::SaveCursorState
// Il2CppName: SaveCursorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::SaveCursorState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "SaveCursorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::RestoreCursorState
// Il2CppName: RestoreCursorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::RestoreCursorState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), "RestoreCursorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Menu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Menu::*)()>(&SteamVR_Menu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Menu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: SteamVR_Overlay/IntersectionResults
#include "GlobalNamespace/SteamVR_Overlay_IntersectionResults.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDD4B74
// Autogenerated static field getter
// Get static field: static private SteamVR_Overlay <instance>k__BackingField
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Overlay*>("", "SteamVR_Overlay", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Overlay <instance>k__BackingField
void GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Overlay", "<instance>k__BackingField", value));
}
// Autogenerated method: SteamVR_Overlay.get_instance
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Overlay*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.set_instance
void GlobalNamespace::SteamVR_Overlay::set_instance(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::set_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "set_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Overlay.get_key
::Il2CppString* GlobalNamespace::SteamVR_Overlay::get_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::get_key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnEnable
void GlobalNamespace::SteamVR_Overlay::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnDisable
void GlobalNamespace::SteamVR_Overlay::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.UpdateOverlay
void GlobalNamespace::SteamVR_Overlay::UpdateOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::UpdateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.PollNextEvent
bool GlobalNamespace::SteamVR_Overlay::PollNextEvent(Valve::VR::VREvent_t& pEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent);
}
// Autogenerated method: SteamVR_Overlay.ComputeIntersection
bool GlobalNamespace::SteamVR_Overlay::ComputeIntersection(UnityEngine::Vector3 source, UnityEngine::Vector3 direction, GlobalNamespace::SteamVR_Overlay::IntersectionResults& results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::ComputeIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(results)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, source, direction, results);
}
// Writing MetadataGetter for method: SteamVR_Overlay::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Overlay* (*)()>(&SteamVR_Overlay::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::SteamVR_Overlay*)>(&SteamVR_Overlay::set_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Overlay*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::get_key
// Il2CppName: get_key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&SteamVR_Overlay::get_key)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "get_key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Overlay::*)()>(&SteamVR_Overlay::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Overlay::*)()>(&SteamVR_Overlay::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::UpdateOverlay
// Il2CppName: UpdateOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Overlay::*)()>(&SteamVR_Overlay::UpdateOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "UpdateOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::PollNextEvent
// Il2CppName: PollNextEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Overlay::*)(Valve::VR::VREvent_t&)>(&SteamVR_Overlay::PollNextEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "PollNextEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VREvent_t&>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::ComputeIntersection
// Il2CppName: ComputeIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Overlay::*)(UnityEngine::Vector3, UnityEngine::Vector3, GlobalNamespace::SteamVR_Overlay::IntersectionResults&)>(&SteamVR_Overlay::ComputeIntersection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), "ComputeIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Overlay::IntersectionResults&>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Overlay::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Overlay::*)()>(&SteamVR_Overlay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Overlay::*)()>(&SteamVR_Overlay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Overlay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_PlayArea
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_PlayArea.GetBounds
bool GlobalNamespace::SteamVR_PlayArea::GetBounds(GlobalNamespace::SteamVR_PlayArea::Size size, Valve::VR::HmdQuad_t& pRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::GetBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_PlayArea", "GetBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(pRect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, size, pRect);
}
// Autogenerated method: SteamVR_PlayArea.BuildMesh
void GlobalNamespace::SteamVR_PlayArea::BuildMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::BuildMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmos
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmosSelected
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.DrawWireframe
void GlobalNamespace::SteamVR_PlayArea::DrawWireframe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::DrawWireframe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawWireframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnEnable
void GlobalNamespace::SteamVR_PlayArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.UpdateBounds
System::Collections::IEnumerator* GlobalNamespace::SteamVR_PlayArea::UpdateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::UpdateBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_PlayArea::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::SteamVR_PlayArea::Size, Valve::VR::HmdQuad_t&)>(&SteamVR_PlayArea::GetBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_PlayArea::Size>(), ::il2cpp_utils::ExtractIndependentType<Valve::VR::HmdQuad_t&>()});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::BuildMesh
// Il2CppName: BuildMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::BuildMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "BuildMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::OnDrawGizmos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::DrawWireframe
// Il2CppName: DrawWireframe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::DrawWireframe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "DrawWireframe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::UpdateBounds
// Il2CppName: UpdateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::UpdateBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), "UpdateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::*)()>(&SteamVR_PlayArea::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_PlayArea/Size
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size Calibrated
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "Calibrated"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size Calibrated
void GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "Calibrated", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _400x300
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_400x300"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _400x300
void GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_400x300", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _300x225
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_300x225"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _300x225
void GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_300x225", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _200x150
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_200x150"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _200x150
void GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_200x150", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.MoveNext
bool GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::$UpdateBounds$d__14::*)(int)>(&SteamVR_PlayArea::$UpdateBounds$d__14::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::$UpdateBounds$d__14::*)(int)>(&SteamVR_PlayArea::$UpdateBounds$d__14::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::$UpdateBounds$d__14::*)()>(&SteamVR_PlayArea::$UpdateBounds$d__14::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_PlayArea::$UpdateBounds$d__14::*)()>(&SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_PlayArea::$UpdateBounds$d__14::*)()>(&SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_PlayArea::$UpdateBounds$d__14::*)()>(&SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_PlayArea::$UpdateBounds$d__14::*)()>(&SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_PlayArea::$UpdateBounds$d__14*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render
#include "GlobalNamespace/SteamVR_Render.hpp"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDD4B94
// Autogenerated static field getter
// Get static field: static private Valve.VR.EVREye <eye>k__BackingField
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("", "SteamVR_Render", "<eye>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.EVREye <eye>k__BackingField
void GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "<eye>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_Render _instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Render _instance
void GlobalNamespace::SteamVR_Render::_set__instance(GlobalNamespace::SteamVR_Render* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isQuitting
bool GlobalNamespace::SteamVR_Render::_get_isQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get_isQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "isQuitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isQuitting
void GlobalNamespace::SteamVR_Render::_set_isQuitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set_isQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "isQuitting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _pauseRendering
bool GlobalNamespace::SteamVR_Render::_get__pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get__pauseRendering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "_pauseRendering"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _pauseRendering
void GlobalNamespace::SteamVR_Render::_set__pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set__pauseRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_pauseRendering", value));
}
// Autogenerated method: SteamVR_Render.get_eye
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::get_eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_eye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_eye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVREye, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_eye
void GlobalNamespace::SteamVR_Render::set_eye(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::set_eye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_eye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.get_instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Render*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDestroy
void GlobalNamespace::SteamVR_Render::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnApplicationQuit
void GlobalNamespace::SteamVR_Render::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Add
void GlobalNamespace::SteamVR_Render::Add(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Remove
void GlobalNamespace::SteamVR_Render::Remove(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Top
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Top");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Top", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.AddInternal
void GlobalNamespace::SteamVR_Render::AddInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::AddInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.RemoveInternal
void GlobalNamespace::SteamVR_Render::RemoveInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RemoveInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.TopInternal
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::TopInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::TopInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.get_pauseRendering
bool GlobalNamespace::SteamVR_Render::get_pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_pauseRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_pauseRendering
void GlobalNamespace::SteamVR_Render::set_pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::set_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_pauseRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.RenderLoop
System::Collections::IEnumerator* GlobalNamespace::SteamVR_Render::RenderLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RenderLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.RenderExternalCamera
void GlobalNamespace::SteamVR_Render::RenderExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RenderExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnInputFocus
void GlobalNamespace::SteamVR_Render::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_Render.OnQuit
void GlobalNamespace::SteamVR_Render::OnQuit(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.GetScreenshotFilename
::Il2CppString* GlobalNamespace::SteamVR_Render::GetScreenshotFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::GetScreenshotFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(screenshotPropertyFilename)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, screenshotHandle, screenshotPropertyFilename);
}
// Autogenerated method: SteamVR_Render.OnRequestScreenshot
void GlobalNamespace::SteamVR_Render::OnRequestScreenshot(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnRequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.OnEnable
void GlobalNamespace::SteamVR_Render::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDisable
void GlobalNamespace::SteamVR_Render::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Awake
void GlobalNamespace::SteamVR_Render::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.UpdatePoses
void GlobalNamespace::SteamVR_Render::UpdatePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::UpdatePoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnBeforeRender
void GlobalNamespace::SteamVR_Render::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Update
void GlobalNamespace::SteamVR_Render::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Render::get_eye
// Il2CppName: get_eye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::EVREye (*)()>(&SteamVR_Render::get_eye)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "get_eye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::set_eye
// Il2CppName: set_eye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Valve::VR::EVREye)>(&SteamVR_Render::set_eye)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "set_eye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVREye>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Render* (*)()>(&SteamVR_Render::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::OnApplicationQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::SteamVR_Camera*)>(&SteamVR_Render::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::SteamVR_Camera*)>(&SteamVR_Render::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::Top
// Il2CppName: Top
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Camera* (*)()>(&SteamVR_Render::Top)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "Top", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::AddInternal
// Il2CppName: AddInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)(GlobalNamespace::SteamVR_Camera*)>(&SteamVR_Render::AddInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "AddInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::RemoveInternal
// Il2CppName: RemoveInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)(GlobalNamespace::SteamVR_Camera*)>(&SteamVR_Render::RemoveInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "RemoveInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Camera*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::TopInternal
// Il2CppName: TopInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Camera* (SteamVR_Render::*)()>(&SteamVR_Render::TopInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "TopInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::get_pauseRendering
// Il2CppName: get_pauseRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SteamVR_Render::get_pauseRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "get_pauseRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::set_pauseRendering
// Il2CppName: set_pauseRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&SteamVR_Render::set_pauseRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "set_pauseRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::RenderLoop
// Il2CppName: RenderLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SteamVR_Render::*)()>(&SteamVR_Render::RenderLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "RenderLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::RenderExternalCamera
// Il2CppName: RenderExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::RenderExternalCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "RenderExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnInputFocus
// Il2CppName: OnInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)(bool)>(&SteamVR_Render::OnInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnQuit
// Il2CppName: OnQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)(Valve::VR::VREvent_t)>(&SteamVR_Render::OnQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VREvent_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::GetScreenshotFilename
// Il2CppName: GetScreenshotFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR_Render::*)(uint, Valve::VR::EVRScreenshotPropertyFilenames)>(&SteamVR_Render::GetScreenshotFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "GetScreenshotFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRScreenshotPropertyFilenames>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnRequestScreenshot
// Il2CppName: OnRequestScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)(Valve::VR::VREvent_t)>(&SteamVR_Render::OnRequestScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnRequestScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VREvent_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::UpdatePoses
// Il2CppName: UpdatePoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::UpdatePoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "UpdatePoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::OnBeforeRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::*)()>(&SteamVR_Render::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.MoveNext
bool GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::$RenderLoop$d__29::*)(int)>(&SteamVR_Render::$RenderLoop$d__29::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::$RenderLoop$d__29::*)(int)>(&SteamVR_Render::$RenderLoop$d__29::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::$RenderLoop$d__29::*)()>(&SteamVR_Render::$RenderLoop$d__29::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_Render::$RenderLoop$d__29::*)()>(&SteamVR_Render::$RenderLoop$d__29::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_Render::$RenderLoop$d__29::*)()>(&SteamVR_Render::$RenderLoop$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Render::$RenderLoop$d__29::*)()>(&SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_Render::$RenderLoop$d__29::*)()>(&SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Render::$RenderLoop$d__29*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.RenderModel_t
#include "Valve/VR/RenderModel_t.hpp"
// Including type: Valve.VR.RenderModel_TextureMap_t
#include "Valve/VR/RenderModel_TextureMap_t.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String modelOverrideWarning
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "modelOverrideWarning"));
}
// Autogenerated static field setter
// Set static field: static public System.String modelOverrideWarning
void GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "modelOverrideWarning", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_localTransformName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "k_localTransformName"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_localTransformName
void GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "k_localTransformName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable models
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_models() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_models");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "models"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable models
void GlobalNamespace::SteamVR_RenderModel::_set_models(System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_models");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "models", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable materials
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_materials");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "materials"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable materials
void GlobalNamespace::SteamVR_RenderModel::_set_materials(System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_materials");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "materials", value));
}
// Autogenerated method: SteamVR_RenderModel.get_renderModelName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::get_renderModelName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::get_renderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.set_renderModelName
void GlobalNamespace::SteamVR_RenderModel::set_renderModelName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::set_renderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_renderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel.OnModelSkinSettingsHaveChanged
void GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModelSkinSettingsHaveChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_RenderModel.OnHideRenderModels
void GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels(bool hidden) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHideRenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hidden)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hidden);
}
// Autogenerated method: SteamVR_RenderModel.OnDeviceConnected
void GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_RenderModel.UpdateModel
void GlobalNamespace::SteamVR_RenderModel::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.SetModelAsync
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::SetModelAsync(::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetModelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetModelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.SetModel
bool GlobalNamespace::SteamVR_RenderModel::SetModel(::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.LoadRenderModel
GlobalNamespace::SteamVR_RenderModel::RenderModel* GlobalNamespace::SteamVR_RenderModel::LoadRenderModel(Valve::VR::CVRRenderModels* renderModels, ::Il2CppString* renderModelName, ::Il2CppString* baseName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::LoadRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModels), ::il2cpp_utils::ExtractType(renderModelName), ::il2cpp_utils::ExtractType(baseName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_RenderModel::RenderModel*, false>(this, ___internal__method, renderModels, renderModelName, baseName);
}
// Autogenerated method: SteamVR_RenderModel.FreeRenderModel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.FindComponent
UnityEngine::Transform* GlobalNamespace::SteamVR_RenderModel::FindComponent(::Il2CppString* componentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::FindComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentName)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, componentName);
}
// Autogenerated method: SteamVR_RenderModel.StripMesh
void GlobalNamespace::SteamVR_RenderModel::StripMesh(UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::StripMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StripMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, go);
}
// Autogenerated method: SteamVR_RenderModel.LoadComponents
bool GlobalNamespace::SteamVR_RenderModel::LoadComponents(GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder* holder, ::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::LoadComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(holder), ::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, holder, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.OnEnable
void GlobalNamespace::SteamVR_RenderModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.OnDisable
void GlobalNamespace::SteamVR_RenderModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.Update
void GlobalNamespace::SteamVR_RenderModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.UpdateComponents
void GlobalNamespace::SteamVR_RenderModel::UpdateComponents(Valve::VR::CVRRenderModels* renderModels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::UpdateComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderModels);
}
// Autogenerated method: SteamVR_RenderModel.SetDeviceIndex
void GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_RenderModel.Sleep
void GlobalNamespace::SteamVR_RenderModel::Sleep() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel
Valve::VR::RenderModel_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarshalRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::RenderModel_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel_TextureMap
Valve::VR::RenderModel_TextureMap_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarshalRenderModel_TextureMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::RenderModel_TextureMap_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel..cctor
void GlobalNamespace::SteamVR_RenderModel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_RenderModel::get_renderModelName
// Il2CppName: get_renderModelName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::get_renderModelName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "get_renderModelName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::set_renderModelName
// Il2CppName: set_renderModelName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(::Il2CppString*)>(&SteamVR_RenderModel::set_renderModelName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "set_renderModelName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::OnModelSkinSettingsHaveChanged
// Il2CppName: OnModelSkinSettingsHaveChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(Valve::VR::VREvent_t)>(&SteamVR_RenderModel::OnModelSkinSettingsHaveChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "OnModelSkinSettingsHaveChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VREvent_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::OnHideRenderModels
// Il2CppName: OnHideRenderModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(bool)>(&SteamVR_RenderModel::OnHideRenderModels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "OnHideRenderModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(int, bool)>(&SteamVR_RenderModel::OnDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::UpdateModel
// Il2CppName: UpdateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::UpdateModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "UpdateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::SetModelAsync
// Il2CppName: SetModelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SteamVR_RenderModel::*)(::Il2CppString*)>(&SteamVR_RenderModel::SetModelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "SetModelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::SetModel
// Il2CppName: SetModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_RenderModel::*)(::Il2CppString*)>(&SteamVR_RenderModel::SetModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "SetModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::LoadRenderModel
// Il2CppName: LoadRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_RenderModel::RenderModel* (SteamVR_RenderModel::*)(Valve::VR::CVRRenderModels*, ::Il2CppString*, ::Il2CppString*)>(&SteamVR_RenderModel::LoadRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "LoadRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::CVRRenderModels*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::FreeRenderModel
// Il2CppName: FreeRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SteamVR_RenderModel::*)(System::IntPtr)>(&SteamVR_RenderModel::FreeRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "FreeRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::FindComponent
// Il2CppName: FindComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (SteamVR_RenderModel::*)(::Il2CppString*)>(&SteamVR_RenderModel::FindComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "FindComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::StripMesh
// Il2CppName: StripMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(UnityEngine::GameObject*)>(&SteamVR_RenderModel::StripMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "StripMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::LoadComponents
// Il2CppName: LoadComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_RenderModel::*)(GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder*, ::Il2CppString*)>(&SteamVR_RenderModel::LoadComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "LoadComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::UpdateComponents
// Il2CppName: UpdateComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(Valve::VR::CVRRenderModels*)>(&SteamVR_RenderModel::UpdateComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "UpdateComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::CVRRenderModels*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::SetDeviceIndex
// Il2CppName: SetDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)(int)>(&SteamVR_RenderModel::SetDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "SetDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_RenderModel::Sleep)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::MarshalRenderModel
// Il2CppName: MarshalRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::RenderModel_t (SteamVR_RenderModel::*)(System::IntPtr)>(&SteamVR_RenderModel::MarshalRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "MarshalRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::MarshalRenderModel_TextureMap
// Il2CppName: MarshalRenderModel_TextureMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::RenderModel_TextureMap_t (SteamVR_RenderModel::*)(System::IntPtr)>(&SteamVR_RenderModel::MarshalRenderModel_TextureMap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), "MarshalRenderModel_TextureMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::*)()>(&SteamVR_RenderModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_RenderModel::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_mesh
UnityEngine::Mesh* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_mesh
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_material
UnityEngine::Material* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_material
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModel::*)(UnityEngine::Mesh*, UnityEngine::Material*)>(&SteamVR_RenderModel::RenderModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModel::*)(UnityEngine::Mesh*, UnityEngine::Material*)>(&SteamVR_RenderModel::RenderModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModel::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (SteamVR_RenderModel::RenderModel::*)()>(&SteamVR_RenderModel::RenderModel::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModel::set_mesh
// Il2CppName: set_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModel::*)(UnityEngine::Mesh*)>(&SteamVR_RenderModel::RenderModel::set_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), "set_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModel::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (SteamVR_RenderModel::RenderModel::*)()>(&SteamVR_RenderModel::RenderModel::get_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModel::set_material
// Il2CppName: set_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModel::*)(UnityEngine::Material*)>(&SteamVR_RenderModel::RenderModel::set_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModel*), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.get_instance
Valve::VR::CVRRenderModels* GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.Dispose
void GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRRenderModels* (SteamVR_RenderModel::RenderModelInterfaceHolder::*)()>(&SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModelInterfaceHolder*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModelInterfaceHolder::*)()>(&SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModelInterfaceHolder*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::RenderModelInterfaceHolder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModelInterfaceHolder::*)()>(&SteamVR_RenderModel::RenderModelInterfaceHolder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModelInterfaceHolder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::RenderModelInterfaceHolder::*)()>(&SteamVR_RenderModel::RenderModelInterfaceHolder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::RenderModelInterfaceHolder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.<>m__Finally1
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$SetModelAsync$d__21::*)(int)>(&SteamVR_RenderModel::$SetModelAsync$d__21::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$SetModelAsync$d__21::*)(int)>(&SteamVR_RenderModel::$SetModelAsync$d__21::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_RenderModel::$SetModelAsync$d__21::*)()>(&SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$SetModelAsync$d__21*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$FreeRenderModel$d__24::*)(int)>(&SteamVR_RenderModel::$FreeRenderModel$d__24::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$FreeRenderModel$d__24::*)(int)>(&SteamVR_RenderModel::$FreeRenderModel$d__24::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$FreeRenderModel$d__24::*)()>(&SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_RenderModel::$FreeRenderModel$d__24::*)()>(&SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_RenderModel::$FreeRenderModel$d__24::*)()>(&SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_RenderModel::$FreeRenderModel$d__24::*)()>(&SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SteamVR_RenderModel::$FreeRenderModel$d__24::*)()>(&SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_RenderModel::$FreeRenderModel$d__24*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox
#include "GlobalNamespace/SteamVR_Skybox.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Skybox.SetTextureByIndex
void GlobalNamespace::SteamVR_Skybox::SetTextureByIndex(int i, UnityEngine::Texture* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, t);
}
// Autogenerated method: SteamVR_Skybox.GetTextureByIndex
UnityEngine::Texture* GlobalNamespace::SteamVR_Skybox::GetTextureByIndex(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::GetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(this, ___internal__method, i);
}
// Autogenerated method: SteamVR_Skybox.SetOverride
void GlobalNamespace::SteamVR_Skybox::SetOverride(UnityEngine::Texture* front, UnityEngine::Texture* back, UnityEngine::Texture* left, UnityEngine::Texture* right, UnityEngine::Texture* top, UnityEngine::Texture* bottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "SetOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(front), ::il2cpp_utils::ExtractType(back), ::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(top), ::il2cpp_utils::ExtractType(bottom)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, front, back, left, right, top, bottom);
}
// Autogenerated method: SteamVR_Skybox.ClearOverride
void GlobalNamespace::SteamVR_Skybox::ClearOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::ClearOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "ClearOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnEnable
void GlobalNamespace::SteamVR_Skybox::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnDisable
void GlobalNamespace::SteamVR_Skybox::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Skybox::SetTextureByIndex
// Il2CppName: SetTextureByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Skybox::*)(int, UnityEngine::Texture*)>(&SteamVR_Skybox::SetTextureByIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "SetTextureByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::GetTextureByIndex
// Il2CppName: GetTextureByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture* (SteamVR_Skybox::*)(int)>(&SteamVR_Skybox::GetTextureByIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "GetTextureByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::SetOverride
// Il2CppName: SetOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Texture*, UnityEngine::Texture*, UnityEngine::Texture*, UnityEngine::Texture*, UnityEngine::Texture*, UnityEngine::Texture*)>(&SteamVR_Skybox::SetOverride)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "SetOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::ClearOverride
// Il2CppName: ClearOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SteamVR_Skybox::ClearOverride)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "ClearOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Skybox::*)()>(&SteamVR_Skybox::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Skybox::*)()>(&SteamVR_Skybox::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Skybox::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Skybox::*)()>(&SteamVR_Skybox::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Skybox::*)()>(&SteamVR_Skybox::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Skybox*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox/CellSize
#include "GlobalNamespace/SteamVR_Skybox.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x1024
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x1024"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x1024
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x1024", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x64
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x64"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x64
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x64", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x32
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x32"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x32
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x32", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x16
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x16"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x16
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x16", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x8
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x8
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x8", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_SphericalProjection
#include "GlobalNamespace/SteamVR_SphericalProjection.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material material
UnityEngine::Material* GlobalNamespace::SteamVR_SphericalProjection::_get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_get_material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "SteamVR_SphericalProjection", "material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material material
void GlobalNamespace::SteamVR_SphericalProjection::_set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_set_material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_SphericalProjection", "material", value));
}
// Autogenerated method: SteamVR_SphericalProjection.Set
void GlobalNamespace::SteamVR_SphericalProjection::Set(UnityEngine::Vector3 N, float phi0, float phi1, float theta0, float theta1, UnityEngine::Vector3 uAxis, UnityEngine::Vector3 uOrigin, float uScale, UnityEngine::Vector3 vAxis, UnityEngine::Vector3 vOrigin, float vScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(N), ::il2cpp_utils::ExtractType(phi0), ::il2cpp_utils::ExtractType(phi1), ::il2cpp_utils::ExtractType(theta0), ::il2cpp_utils::ExtractType(theta1), ::il2cpp_utils::ExtractType(uAxis), ::il2cpp_utils::ExtractType(uOrigin), ::il2cpp_utils::ExtractType(uScale), ::il2cpp_utils::ExtractType(vAxis), ::il2cpp_utils::ExtractType(vOrigin), ::il2cpp_utils::ExtractType(vScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, N, phi0, phi1, theta0, theta1, uAxis, uOrigin, uScale, vAxis, vOrigin, vScale);
}
// Autogenerated method: SteamVR_SphericalProjection.OnRenderImage
void GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Writing MetadataGetter for method: SteamVR_SphericalProjection::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_SphericalProjection::*)(UnityEngine::Vector3, float, float, float, float, UnityEngine::Vector3, UnityEngine::Vector3, float, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&SteamVR_SphericalProjection::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_SphericalProjection*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_SphericalProjection::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_SphericalProjection::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&SteamVR_SphericalProjection::OnRenderImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_SphericalProjection*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_SphericalProjection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_SphericalProjection::*)()>(&SteamVR_SphericalProjection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_SphericalProjection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_SphericalProjection::*)()>(&SteamVR_SphericalProjection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_SphericalProjection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Stats
#include "GlobalNamespace/SteamVR_Stats.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Stats.Awake
void GlobalNamespace::SteamVR_Stats::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Stats::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_Stats::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Stats::*)()>(&SteamVR_Stats::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Stats*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_Stats::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Stats::*)()>(&SteamVR_Stats::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Stats*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_Stats::*)()>(&SteamVR_Stats::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Stats*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TestController
#include "GlobalNamespace/SteamVR_TestController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TestController.OnDeviceConnected
void GlobalNamespace::SteamVR_TestController::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_TestController.OnEnable
void GlobalNamespace::SteamVR_TestController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.OnDisable
void GlobalNamespace::SteamVR_TestController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.PrintControllerStatus
void GlobalNamespace::SteamVR_TestController::PrintControllerStatus(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::PrintControllerStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrintControllerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_TestController.Update
void GlobalNamespace::SteamVR_TestController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_TestController::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)(int, bool)>(&SteamVR_TestController::OnDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TestController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)()>(&SteamVR_TestController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TestController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)()>(&SteamVR_TestController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TestController::PrintControllerStatus
// Il2CppName: PrintControllerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)(int)>(&SteamVR_TestController::PrintControllerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), "PrintControllerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TestController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)()>(&SteamVR_TestController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TestController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)()>(&SteamVR_TestController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TestController::*)()>(&SteamVR_TestController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TestController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedCamera
#include "GlobalNamespace/SteamVR_TrackedCamera.hpp"
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "distorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_distorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "distorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "undistorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "undistorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>*>("", "SteamVR_TrackedCamera", "videostreams"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
void GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "videostreams", value));
}
// Autogenerated method: SteamVR_TrackedCamera.Distorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Distorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Distorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Distorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Undistorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Undistorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Source
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Source(bool undistorted, int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(undistorted), ::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, undistorted, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Stream
GlobalNamespace::SteamVR_TrackedCamera::VideoStream* GlobalNamespace::SteamVR_TrackedCamera::Stream(uint deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Writing MetadataGetter for method: SteamVR_TrackedCamera::Distorted
// Il2CppName: Distorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* (*)(int)>(&SteamVR_TrackedCamera::Distorted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), "Distorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::Undistorted
// Il2CppName: Undistorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* (*)(int)>(&SteamVR_TrackedCamera::Undistorted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), "Undistorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::Source
// Il2CppName: Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* (*)(bool, int)>(&SteamVR_TrackedCamera::Source)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), "Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::Stream
// Il2CppName: Stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_TrackedCamera::VideoStream* (*)(uint)>(&SteamVR_TrackedCamera::Stream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), "Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::*)()>(&SteamVR_TrackedCamera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::*)()>(&SteamVR_TrackedCamera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_undistorted
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_undistorted
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasTracking
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameId
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameBounds
Valve::VR::VRTextureBounds_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRTextureBounds_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_frameBounds
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds(Valve::VR::VRTextureBounds_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameType
Valve::VR::EVRTrackedCameraFrameType GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraFrameType, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_texture
UnityEngine::Texture2D* GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Update
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStreamTexture::*)(uint, bool)>(&SteamVR_TrackedCamera::VideoStreamTexture::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStreamTexture::*)(uint, bool)>(&SteamVR_TrackedCamera::VideoStreamTexture::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted
// Il2CppName: get_undistorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_undistorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted
// Il2CppName: set_undistorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStreamTexture::*)(bool)>(&SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "set_undistorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex
// Il2CppName: get_deviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_deviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera
// Il2CppName: get_hasCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_hasCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking
// Il2CppName: get_hasTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_hasTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_frameId
// Il2CppName: get_frameId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_frameId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_frameId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds
// Il2CppName: get_frameBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::VRTextureBounds_t (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_frameBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds
// Il2CppName: set_frameBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStreamTexture::*)(Valve::VR::VRTextureBounds_t)>(&SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "set_frameBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::VRTextureBounds_t>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_frameType
// Il2CppName: get_frameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::EVRTrackedCameraFrameType (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_frameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_frameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_texture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SteamVR_Utils::RigidTransform (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_velocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::GetPose
// Il2CppName: GetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::TrackedDevicePose_t (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::GetPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "GetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::Acquire)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStreamTexture::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStreamTexture::*)()>(&SteamVR_TrackedCamera::VideoStreamTexture::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStreamTexture*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.set_deviceIndex
void GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_handle
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStream::*)(uint)>(&SteamVR_TrackedCamera::VideoStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStream::*)(uint)>(&SteamVR_TrackedCamera::VideoStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::get_deviceIndex
// Il2CppName: get_deviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamVR_TrackedCamera::VideoStream::*)()>(&SteamVR_TrackedCamera::VideoStream::get_deviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "get_deviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::set_deviceIndex
// Il2CppName: set_deviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedCamera::VideoStream::*)(uint)>(&SteamVR_TrackedCamera::VideoStream::set_deviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "set_deviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::get_handle
// Il2CppName: get_handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_TrackedCamera::VideoStream::*)()>(&SteamVR_TrackedCamera::VideoStream::get_handle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "get_handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::get_hasCamera
// Il2CppName: get_hasCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_TrackedCamera::VideoStream::*)()>(&SteamVR_TrackedCamera::VideoStream::get_hasCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "get_hasCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_TrackedCamera::VideoStream::*)()>(&SteamVR_TrackedCamera::VideoStream::Acquire)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedCamera::VideoStream::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (SteamVR_TrackedCamera::VideoStream::*)()>(&SteamVR_TrackedCamera::VideoStream::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedCamera::VideoStream*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedObject.get_isValid
bool GlobalNamespace::SteamVR_TrackedObject::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.set_isValid
void GlobalNamespace::SteamVR_TrackedObject::set_isValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::set_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedObject.OnNewPoses
void GlobalNamespace::SteamVR_TrackedObject::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR_TrackedObject.OnEnable
void GlobalNamespace::SteamVR_TrackedObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.OnDisable
void GlobalNamespace::SteamVR_TrackedObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.SetDeviceIndex
void GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Writing MetadataGetter for method: SteamVR_TrackedObject::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamVR_TrackedObject::*)()>(&SteamVR_TrackedObject::get_isValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::set_isValid
// Il2CppName: set_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)(bool)>(&SteamVR_TrackedObject::set_isValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "set_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::OnNewPoses
// Il2CppName: OnNewPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)(::Array<Valve::VR::TrackedDevicePose_t>*)>(&SteamVR_TrackedObject::OnNewPoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "OnNewPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)()>(&SteamVR_TrackedObject::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)()>(&SteamVR_TrackedObject::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::SetDeviceIndex
// Il2CppName: SetDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)(int)>(&SteamVR_TrackedObject::SetDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), "SetDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SteamVR_TrackedObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)()>(&SteamVR_TrackedObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_TrackedObject::*)()>(&SteamVR_TrackedObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_TrackedObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedObject/EIndex
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex None
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "None"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex None
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "None", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Hmd
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Hmd"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Hmd
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device1
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device1"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device1
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device1", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device2
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device2"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device2
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device2", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device3
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device3"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device3
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device3", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device4
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device4"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device4
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device4", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device5
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device5"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device5
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device5", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device6
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device6"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device6
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device6", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device7
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device7"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device7
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device7", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device8
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device8
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device8", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device9
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device9"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device9
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device9", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device10
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device10"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device10
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device10", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device11
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device11"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device11
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device11", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device12
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device12"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device12
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device12", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device13
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device13"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device13
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device13", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device14
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device14"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device14
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device14", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device15
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device15"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device15
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device15", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_UpdatePoses
#include "GlobalNamespace/SteamVR_UpdatePoses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_UpdatePoses.Awake
void GlobalNamespace::SteamVR_UpdatePoses::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_UpdatePoses::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamVR_UpdatePoses::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_UpdatePoses::*)()>(&SteamVR_UpdatePoses::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_UpdatePoses*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamVR_UpdatePoses::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_UpdatePoses::*)()>(&SteamVR_UpdatePoses::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_UpdatePoses*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamVR_UpdatePoses::*)()>(&SteamVR_UpdatePoses::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_UpdatePoses*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(UnityEngine::Quaternion A, UnityEngine::Quaternion B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, UnityEngine::Vector3 result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Saturate
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::_copysign");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "_copysign", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeval), ::il2cpp_utils::ExtractType(signval)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sizeval, signval);
}
// Autogenerated method: SteamVR_Utils.GetRotation
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetPosition
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetScale
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::CallSystemFn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "CallSystemFn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fn), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fn, args);
}
// Creating initializer_list -> params proxy for: System.Object CallSystemFn(SteamVR_Utils/SystemFn fn, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::CallSystemFn(fn, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, UnityEngine::GameObject* target, int cellSize, float ipd, ::Il2CppString*& previewFilename, ::Il2CppString*& VRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(cellSize), ::il2cpp_utils::ExtractType(ipd), ::il2cpp_utils::ExtractType(previewFilename), ::il2cpp_utils::ExtractType(VRFilename)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename);
}
// Writing MetadataGetter for method: SteamVR_Utils::Slerp
// Il2CppName: Slerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, float)>(&SteamVR_Utils::Slerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Slerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&SteamVR_Utils::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&SteamVR_Utils::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&SteamVR_Utils::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::InverseLerp
// Il2CppName: InverseLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&SteamVR_Utils::InverseLerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "InverseLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::InverseLerp
// Il2CppName: InverseLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&SteamVR_Utils::InverseLerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "InverseLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::InverseLerp
// Il2CppName: InverseLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&SteamVR_Utils::InverseLerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "InverseLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Saturate
// Il2CppName: Saturate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&SteamVR_Utils::Saturate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Saturate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Saturate
// Il2CppName: Saturate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2)>(&SteamVR_Utils::Saturate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Saturate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&SteamVR_Utils::Abs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2)>(&SteamVR_Utils::Abs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::_copysign
// Il2CppName: _copysign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&SteamVR_Utils::_copysign)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "_copysign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Matrix4x4)>(&SteamVR_Utils::GetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Matrix4x4)>(&SteamVR_Utils::GetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::GetScale
// Il2CppName: GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Matrix4x4)>(&SteamVR_Utils::GetScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::CallSystemFn
// Il2CppName: CallSystemFn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(GlobalNamespace::SteamVR_Utils::SystemFn*, ::Array<::Il2CppObject*>*)>(&SteamVR_Utils::CallSystemFn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "CallSystemFn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SteamVR_Utils::SystemFn*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: SteamVR_Utils::TakeStereoScreenshot
// Il2CppName: TakeStereoScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, UnityEngine::GameObject*, int, float, ::Il2CppString*&, ::Il2CppString*&)>(&SteamVR_Utils::TakeStereoScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamVR_Utils*), "TakeStereoScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
