// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MonoInstallerUtil
#include "Zenject/MonoInstallerUtil.hpp"
// Including type: Zenject.MonoInstallerBase
#include "Zenject/MonoInstallerBase.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MonoInstallerUtil::GetDefaultResourcePath
// Il2CppName: GetDefaultResourcePath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MonoInstallerUtil::CreateInstaller
// Il2CppName: CreateInstaller
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MonoInstallerBase
#include "Zenject/MonoInstallerBase.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.MonoInstallerBase.get_Container
Zenject::DiContainer* Zenject::MonoInstallerBase::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoInstallerBase::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoInstallerBase.set_Container
void Zenject::MonoInstallerBase::set_Container(Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoInstallerBase::set_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MonoInstallerBase.get_IsEnabled
bool Zenject::MonoInstallerBase::get_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoInstallerBase::get_IsEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoInstallerBase.Start
void Zenject::MonoInstallerBase::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoInstallerBase::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoInstallerBase.InstallBindings
void Zenject::MonoInstallerBase::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoInstallerBase::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoInstallerBase::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (MonoInstallerBase::*)()>(&MonoInstallerBase::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoInstallerBase::set_Container
// Il2CppName: set_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstallerBase::*)(Zenject::DiContainer*)>(&MonoInstallerBase::set_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), "set_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: MonoInstallerBase::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoInstallerBase::*)()>(&MonoInstallerBase::get_IsEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoInstallerBase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstallerBase::*)()>(&MonoInstallerBase::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoInstallerBase::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstallerBase::*)()>(&MonoInstallerBase::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoInstallerBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstallerBase::*)()>(&MonoInstallerBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstallerBase::*)()>(&MonoInstallerBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScriptableObjectInstaller
#include "Zenject/ScriptableObjectInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ScriptableObjectInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstaller::*)()>(&ScriptableObjectInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstaller::*)()>(&ScriptableObjectInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScriptableObjectInstallerUtil
#include "Zenject/ScriptableObjectInstallerUtil.hpp"
// Including type: Zenject.ScriptableObjectInstallerBase
#include "Zenject/ScriptableObjectInstallerBase.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ScriptableObjectInstallerUtil::GetDefaultResourcePath
// Il2CppName: GetDefaultResourcePath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ScriptableObjectInstallerUtil::CreateInstaller
// Il2CppName: CreateInstaller
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScriptableObjectInstallerBase
#include "Zenject/ScriptableObjectInstallerBase.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScriptableObjectInstallerBase.get_Container
Zenject::DiContainer* Zenject::ScriptableObjectInstallerBase::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstallerBase::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectInstallerBase.Zenject.IInstaller.get_IsEnabled
bool Zenject::ScriptableObjectInstallerBase::Zenject_IInstaller_get_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstallerBase::Zenject.IInstaller.get_IsEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Zenject.IInstaller.get_IsEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectInstallerBase.InstallBindings
void Zenject::ScriptableObjectInstallerBase::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstallerBase::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScriptableObjectInstallerBase::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (ScriptableObjectInstallerBase::*)()>(&ScriptableObjectInstallerBase::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstallerBase*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstallerBase::Zenject_IInstaller_get_IsEnabled
// Il2CppName: Zenject.IInstaller.get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableObjectInstallerBase::*)()>(&ScriptableObjectInstallerBase::Zenject_IInstaller_get_IsEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstallerBase*), "Zenject.IInstaller.get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstallerBase::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstallerBase::*)()>(&ScriptableObjectInstallerBase::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstallerBase*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstallerBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstallerBase::*)()>(&ScriptableObjectInstallerBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstallerBase::*)()>(&ScriptableObjectInstallerBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenjectBinding
#include "Zenject/ZenjectBinding.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.Context
#include "Zenject/Context.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenjectBinding.get_UseSceneContext
bool Zenject::ZenjectBinding::get_UseSceneContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_UseSceneContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseSceneContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.get_IfNotBound
bool Zenject::ZenjectBinding::get_IfNotBound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_IfNotBound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IfNotBound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.get_Context
Zenject::Context* Zenject::ZenjectBinding::get_Context() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::Context*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.set_Context
void Zenject::ZenjectBinding::set_Context(Zenject::Context* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::set_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ZenjectBinding.get_Components
::Array<UnityEngine::Component*>* Zenject::ZenjectBinding::get_Components() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_Components");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Components", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.get_Identifier
::Il2CppString* Zenject::ZenjectBinding::get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.get_BindType
Zenject::ZenjectBinding::BindTypes Zenject::ZenjectBinding::get_BindType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::get_BindType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectBinding::BindTypes, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectBinding.Start
void Zenject::ZenjectBinding::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ZenjectBinding::get_UseSceneContext
// Il2CppName: get_UseSceneContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ZenjectBinding::*)()>(&ZenjectBinding::get_UseSceneContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_UseSceneContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::get_IfNotBound
// Il2CppName: get_IfNotBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ZenjectBinding::*)()>(&ZenjectBinding::get_IfNotBound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_IfNotBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::Context* (ZenjectBinding::*)()>(&ZenjectBinding::get_Context)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectBinding::*)(Zenject::Context*)>(&ZenjectBinding::set_Context)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::Context*>()});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::get_Components
// Il2CppName: get_Components
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (ZenjectBinding::*)()>(&ZenjectBinding::get_Components)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_Components", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ZenjectBinding::*)()>(&ZenjectBinding::get_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::get_BindType
// Il2CppName: get_BindType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectBinding::BindTypes (ZenjectBinding::*)()>(&ZenjectBinding::get_BindType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "get_BindType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectBinding::*)()>(&ZenjectBinding::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectBinding::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectBinding::*)()>(&ZenjectBinding::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectBinding::*)()>(&ZenjectBinding::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectBinding/BindTypes
#include "Zenject/ZenjectBinding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectBinding/BindTypes Self
Zenject::ZenjectBinding::BindTypes Zenject::ZenjectBinding::BindTypes::_get_Self() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_get_Self");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectBinding::BindTypes>("Zenject", "ZenjectBinding/BindTypes", "Self"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectBinding/BindTypes Self
void Zenject::ZenjectBinding::BindTypes::_set_Self(Zenject::ZenjectBinding::BindTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_set_Self");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectBinding/BindTypes", "Self", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectBinding/BindTypes AllInterfaces
Zenject::ZenjectBinding::BindTypes Zenject::ZenjectBinding::BindTypes::_get_AllInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_get_AllInterfaces");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectBinding::BindTypes>("Zenject", "ZenjectBinding/BindTypes", "AllInterfaces"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectBinding/BindTypes AllInterfaces
void Zenject::ZenjectBinding::BindTypes::_set_AllInterfaces(Zenject::ZenjectBinding::BindTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_set_AllInterfaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectBinding/BindTypes", "AllInterfaces", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectBinding/BindTypes AllInterfacesAndSelf
Zenject::ZenjectBinding::BindTypes Zenject::ZenjectBinding::BindTypes::_get_AllInterfacesAndSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_get_AllInterfacesAndSelf");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectBinding::BindTypes>("Zenject", "ZenjectBinding/BindTypes", "AllInterfacesAndSelf"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectBinding/BindTypes AllInterfacesAndSelf
void Zenject::ZenjectBinding::BindTypes::_set_AllInterfacesAndSelf(Zenject::ZenjectBinding::BindTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_set_AllInterfacesAndSelf");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectBinding/BindTypes", "AllInterfacesAndSelf", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectBinding/BindTypes BaseType
Zenject::ZenjectBinding::BindTypes Zenject::ZenjectBinding::BindTypes::_get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_get_BaseType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectBinding::BindTypes>("Zenject", "ZenjectBinding/BindTypes", "BaseType"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectBinding/BindTypes BaseType
void Zenject::ZenjectBinding::BindTypes::_set_BaseType(Zenject::ZenjectBinding::BindTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectBinding::BindTypes::_set_BaseType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectBinding/BindTypes", "BaseType", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectManagersInstaller
#include "Zenject/ZenjectManagersInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenjectManagersInstaller.InstallBindings
void Zenject::ZenjectManagersInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectManagersInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ZenjectManagersInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectManagersInstaller::*)()>(&ZenjectManagersInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectManagersInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectManagersInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectManagersInstaller::*)()>(&ZenjectManagersInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectManagersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectManagersInstaller::*)()>(&ZenjectManagersInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectManagersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindingId
#include "Zenject/BindingId.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindingId.get_Type
System::Type* Zenject::BindingId::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(*this, ___internal__method);
}
// Autogenerated method: Zenject.BindingId.set_Type
void Zenject::BindingId::set_Type(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::set_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: Zenject.BindingId.get_Identifier
::Il2CppObject* Zenject::BindingId::get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::get_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
}
// Autogenerated method: Zenject.BindingId.set_Identifier
void Zenject::BindingId::set_Identifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::set_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: Zenject.BindingId.Equals
bool Zenject::BindingId::Equals(Zenject::BindingId that) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, that);
}
// Autogenerated method: Zenject.BindingId.ToString
::Il2CppString* Zenject::BindingId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: Zenject.BindingId.GetHashCode
int Zenject::BindingId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Zenject.BindingId.Equals
bool Zenject::BindingId::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Zenject.BindingId.op_Equality
bool Zenject::operator ==(const Zenject::BindingId& left, const Zenject::BindingId& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingId", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: Zenject.BindingId.op_Inequality
bool Zenject::operator !=(const Zenject::BindingId& left, const Zenject::BindingId& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingId::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingId", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Writing MetadataGetter for method: BindingId::BindingId
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingId::*)(System::Type*, ::Il2CppObject*)>(&BindingId::BindingId<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingId::*)(System::Type*, ::Il2CppObject*)>(&BindingId::BindingId<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BindingId::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (BindingId::*)()>(&BindingId::get_Type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindingId::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingId::*)(System::Type*)>(&BindingId::set_Type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingId::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (BindingId::*)()>(&BindingId::get_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindingId::set_Identifier
// Il2CppName: set_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingId::*)(::Il2CppObject*)>(&BindingId::set_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "set_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BindingId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BindingId::*)(Zenject::BindingId)>(&BindingId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>()});
  }
};
// Writing MetadataGetter for method: BindingId::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BindingId::*)()>(&BindingId::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindingId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BindingId::*)()>(&BindingId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindingId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BindingId::*)(::Il2CppObject*)>(&BindingId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BindingId::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const Zenject::BindingId&, const Zenject::BindingId&)>(&BindingId::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const Zenject::BindingId&>(), ::il2cpp_utils::ExtractIndependentType<const Zenject::BindingId&>()});
  }
};
// Writing MetadataGetter for method: BindingId::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const Zenject::BindingId&, const Zenject::BindingId&)>(&BindingId::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingId), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const Zenject::BindingId&>(), ::il2cpp_utils::ExtractIndependentType<const Zenject::BindingId&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindingCondition.Invoke
bool Zenject::BindingCondition::Invoke(Zenject::InjectContext* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingCondition::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, c);
}
// Autogenerated method: Zenject.BindingCondition.BeginInvoke
System::IAsyncResult* Zenject::BindingCondition::BeginInvoke(Zenject::InjectContext* c, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingCondition::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, c, callback, object);
}
// Autogenerated method: Zenject.BindingCondition.EndInvoke
bool Zenject::BindingCondition::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingCondition::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BindingCondition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingCondition::*)(::Il2CppObject*, System::IntPtr)>(&BindingCondition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingCondition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindingCondition::*)(::Il2CppObject*, System::IntPtr)>(&BindingCondition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingCondition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BindingCondition::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BindingCondition::*)(Zenject::InjectContext*)>(&BindingCondition::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingCondition*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: BindingCondition::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BindingCondition::*)(Zenject::InjectContext*, System::AsyncCallback*, ::Il2CppObject*)>(&BindingCondition::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingCondition*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BindingCondition::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BindingCondition::*)(System::IAsyncResult*)>(&BindingCondition::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingCondition*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.DiContainer/ProviderInfo
#include "Zenject/DiContainer_ProviderInfo.hpp"
// Including type: Zenject.DiContainer/<>c
#include "Zenject/DiContainer_--c.hpp"
// Including type: Zenject.DiContainer/<>c__DisplayClass86_0
#include "Zenject/DiContainer_--c__DisplayClass86_0.hpp"
// Including type: Zenject.DiContainer/<GetDependencyContracts>d__96
#include "Zenject/DiContainer_-GetDependencyContracts-d__96.hpp"
// Including type: Zenject.DiContainer/<>c__DisplayClass178_0
#include "Zenject/DiContainer_--c__DisplayClass178_0.hpp"
// Including type: Zenject.DiContainer/<>c__DisplayClass203_0`1
#include "Zenject/DiContainer_--c__DisplayClass203_0_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.Internal.IDecoratorProvider
#include "Zenject/Internal/IDecoratorProvider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: Zenject.Internal.LookupId
#include "Zenject/Internal/LookupId.hpp"
// Including type: Zenject.LazyInstanceInjector
#include "Zenject/LazyInstanceInjector.hpp"
// Including type: Zenject.Internal.SingletonMarkRegistry
#include "Zenject/Internal/SingletonMarkRegistry.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
// Including type: Zenject.IValidatable
#include "Zenject/IValidatable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
// Including type: Zenject.Installer
#include "Zenject/Installer.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: Zenject.DecoratorToChoiceFromBinder`1
#include "Zenject/DecoratorToChoiceFromBinder_1.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Zenject.ConcreteBinderNonGeneric
#include "Zenject/ConcreteBinderNonGeneric.hpp"
// Including type: Zenject.ConcreteIdBinderGeneric`1
#include "Zenject/ConcreteIdBinderGeneric_1.hpp"
// Including type: Zenject.ConcreteIdBinderNonGeneric
#include "Zenject/ConcreteIdBinderNonGeneric.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConventionSelectTypesBinder
#include "Zenject/ConventionSelectTypesBinder.hpp"
// Including type: Zenject.FromBinderNonGeneric
#include "Zenject/FromBinderNonGeneric.hpp"
// Including type: Zenject.IdScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/IdScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.IFactory
#include "Zenject/IFactory.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`1
#include "Zenject/FactoryToChoiceIdBinder_1.hpp"
// Including type: Zenject.PlaceholderFactory`1
#include "Zenject/PlaceholderFactory_1.hpp"
// Including type: Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolIdInitialSizeMaxSizeBinder_1.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`2
#include "Zenject/FactoryToChoiceIdBinder_2.hpp"
// Including type: Zenject.PlaceholderFactory`2
#include "Zenject/PlaceholderFactory_2.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`3
#include "Zenject/FactoryToChoiceIdBinder_3.hpp"
// Including type: Zenject.PlaceholderFactory`3
#include "Zenject/PlaceholderFactory_3.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`4
#include "Zenject/FactoryToChoiceIdBinder_4.hpp"
// Including type: Zenject.PlaceholderFactory`4
#include "Zenject/PlaceholderFactory_4.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`5
#include "Zenject/FactoryToChoiceIdBinder_5.hpp"
// Including type: Zenject.PlaceholderFactory`5
#include "Zenject/PlaceholderFactory_5.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`6
#include "Zenject/FactoryToChoiceIdBinder_6.hpp"
// Including type: Zenject.PlaceholderFactory`6
#include "Zenject/PlaceholderFactory_6.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`7
#include "Zenject/FactoryToChoiceIdBinder_7.hpp"
// Including type: Zenject.PlaceholderFactory`7
#include "Zenject/PlaceholderFactory_7.hpp"
// Including type: Zenject.FactoryToChoiceIdBinder`11
#include "Zenject/FactoryToChoiceIdBinder_11.hpp"
// Including type: Zenject.PlaceholderFactory`11
#include "Zenject/PlaceholderFactory_11.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: Zenject.CopyNonLazyBinder
#include "Zenject/CopyNonLazyBinder.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DiContainer.get_Settings
Zenject::ZenjectSettings* Zenject::DiContainer::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.set_Settings
void Zenject::DiContainer::set_Settings(Zenject::ZenjectSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::set_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DiContainer.get_SingletonMarkRegistry
Zenject::Internal::SingletonMarkRegistry* Zenject::DiContainer::get_SingletonMarkRegistry() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_SingletonMarkRegistry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SingletonMarkRegistry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::Internal::SingletonMarkRegistry*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_AllProviders
System::Collections::Generic::IEnumerable_1<Zenject::IProvider*>* Zenject::DiContainer::get_AllProviders() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_AllProviders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllProviders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::IProvider*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.InstallDefaultBindings
void Zenject::DiContainer::InstallDefaultBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstallDefaultBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallDefaultBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.CreateLazyBinding
::Il2CppObject* Zenject::DiContainer::CreateLazyBinding(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateLazyBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLazyBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.QueueForValidate
void Zenject::DiContainer::QueueForValidate(Zenject::IValidatable* validatable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::QueueForValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueForValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(validatable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, validatable);
}
// Autogenerated method: Zenject.DiContainer.ShouldInheritBinding
bool Zenject::DiContainer::ShouldInheritBinding(Zenject::BindStatement* binding, Zenject::DiContainer* ancestorContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ShouldInheritBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInheritBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(binding), ::il2cpp_utils::ExtractType(ancestorContainer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, binding, ancestorContainer);
}
// Autogenerated method: Zenject.DiContainer.get_ContextTransform
UnityEngine::Transform* Zenject::DiContainer::get_ContextTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_ContextTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContextTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_AssertOnNewGameObjects
bool Zenject::DiContainer::get_AssertOnNewGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_AssertOnNewGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AssertOnNewGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.set_AssertOnNewGameObjects
void Zenject::DiContainer::set_AssertOnNewGameObjects(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::set_AssertOnNewGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AssertOnNewGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DiContainer.get_InheritedDefaultParent
UnityEngine::Transform* Zenject::DiContainer::get_InheritedDefaultParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_InheritedDefaultParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InheritedDefaultParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_DefaultParent
UnityEngine::Transform* Zenject::DiContainer::get_DefaultParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_DefaultParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.set_DefaultParent
void Zenject::DiContainer::set_DefaultParent(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::set_DefaultParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DefaultParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DiContainer.get_ParentContainers
::Array<Zenject::DiContainer*>* Zenject::DiContainer::get_ParentContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_ParentContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_AncestorContainers
::Array<Zenject::DiContainer*>* Zenject::DiContainer::get_AncestorContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_AncestorContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AncestorContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_ChecksForCircularDependencies
bool Zenject::DiContainer::get_ChecksForCircularDependencies() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_ChecksForCircularDependencies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChecksForCircularDependencies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_IsValidating
bool Zenject::DiContainer::get_IsValidating() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_IsValidating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValidating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.get_IsInstalling
bool Zenject::DiContainer::get_IsInstalling() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_IsInstalling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInstalling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.set_IsInstalling
void Zenject::DiContainer::set_IsInstalling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::set_IsInstalling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInstalling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DiContainer.get_AllContracts
System::Collections::Generic::IEnumerable_1<Zenject::BindingId>* Zenject::DiContainer::get_AllContracts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::get_AllContracts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllContracts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::BindingId>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.ResolveRoots
void Zenject::DiContainer::ResolveRoots() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveRoots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveRoots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.ResolveDependencyRoots
void Zenject::DiContainer::ResolveDependencyRoots() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveDependencyRoots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveDependencyRoots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.ValidateFullResolve
void Zenject::DiContainer::ValidateFullResolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ValidateFullResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateFullResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.FlushValidationQueue
void Zenject::DiContainer::FlushValidationQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::FlushValidationQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushValidationQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.CreateSubContainer
Zenject::DiContainer* Zenject::DiContainer::CreateSubContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateSubContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.QueueForInject
void Zenject::DiContainer::QueueForInject(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::QueueForInject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueForInject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.DiContainer.CreateSubContainer
Zenject::DiContainer* Zenject::DiContainer::CreateSubContainer(bool isValidating) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateSubContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isValidating)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method, isValidating);
}
// Autogenerated method: Zenject.DiContainer.RegisterProvider
void Zenject::DiContainer::RegisterProvider(Zenject::BindingId bindingId, Zenject::BindingCondition* condition, Zenject::IProvider* provider, bool nonLazy) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::RegisterProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingId), ::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(nonLazy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bindingId, condition, provider, nonLazy);
}
// Autogenerated method: Zenject.DiContainer.GetProviderMatches
void Zenject::DiContainer::GetProviderMatches(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetProviderMatches");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProviderMatches", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, buffer);
}
// Autogenerated method: Zenject.DiContainer.TryGetUniqueProvider
Zenject::DiContainer::ProviderInfo* Zenject::DiContainer::TryGetUniqueProvider(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::TryGetUniqueProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetUniqueProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer::ProviderInfo*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.FlattenInheritanceChain
System::Collections::Generic::List_1<Zenject::DiContainer*>* Zenject::DiContainer::FlattenInheritanceChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::FlattenInheritanceChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlattenInheritanceChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.GetLocalProviders
void Zenject::DiContainer::GetLocalProviders(Zenject::BindingId bindingId, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetLocalProviders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocalProviders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingId), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bindingId, buffer);
}
// Autogenerated method: Zenject.DiContainer.GetProvidersForContract
void Zenject::DiContainer::GetProvidersForContract(Zenject::BindingId bindingId, Zenject::InjectSources sourceType, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetProvidersForContract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProvidersForContract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingId), ::il2cpp_utils::ExtractType(sourceType), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bindingId, sourceType, buffer);
}
// Autogenerated method: Zenject.DiContainer.ResolveAll
System::Collections::IList* Zenject::DiContainer::ResolveAll(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IList*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.ResolveAll
void Zenject::DiContainer::ResolveAll(Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, buffer);
}
// Autogenerated method: Zenject.DiContainer.CheckForInstallWarning
void Zenject::DiContainer::CheckForInstallWarning(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CheckForInstallWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForInstallWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.ResolveType
System::Type* Zenject::DiContainer::ResolveType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.DiContainer.ResolveType
System::Type* Zenject::DiContainer::ResolveType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.ResolveTypeAll
System::Collections::Generic::List_1<System::Type*>* Zenject::DiContainer::ResolveTypeAll(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveTypeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveTypeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Type*>*, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.DiContainer.ResolveTypeAll
System::Collections::Generic::List_1<System::Type*>* Zenject::DiContainer::ResolveTypeAll(System::Type* type, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveTypeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveTypeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Type*>*, false>(this, ___internal__method, type, identifier);
}
// Autogenerated method: Zenject.DiContainer.ResolveTypeAll
System::Collections::Generic::List_1<System::Type*>* Zenject::DiContainer::ResolveTypeAll(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveTypeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveTypeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Type*>*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.Resolve
::Il2CppObject* Zenject::DiContainer::Resolve(Zenject::BindingId id) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Resolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, id);
}
// Autogenerated method: Zenject.DiContainer.Resolve
::Il2CppObject* Zenject::DiContainer::Resolve(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Resolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.SafeGetInstances
void Zenject::DiContainer::SafeGetInstances(Zenject::DiContainer::ProviderInfo* providerInfo, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::SafeGetInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SafeGetInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(providerInfo), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(instances)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, providerInfo, context, instances);
}
// Autogenerated method: Zenject.DiContainer.GetDecoratedInstances
void Zenject::DiContainer::GetDecoratedInstances(Zenject::IProvider* provider, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetDecoratedInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDecoratedInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, provider, context, buffer);
}
// Autogenerated method: Zenject.DiContainer.TryGetDecoratorProvider
Zenject::Internal::IDecoratorProvider* Zenject::DiContainer::TryGetDecoratorProvider(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::TryGetDecoratorProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetDecoratorProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::Internal::IDecoratorProvider*, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.GetContainerHeirarchyDistance
int Zenject::DiContainer::GetContainerHeirarchyDistance(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetContainerHeirarchyDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContainerHeirarchyDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.DiContainer.GetContainerHeirarchyDistance
System::Nullable_1<int> Zenject::DiContainer::GetContainerHeirarchyDistance(Zenject::DiContainer* container, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetContainerHeirarchyDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContainerHeirarchyDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(depth)})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int>, false>(this, ___internal__method, container, depth);
}
// Autogenerated method: Zenject.DiContainer.GetDependencyContracts
System::Collections::Generic::IEnumerable_1<System::Type*>* Zenject::DiContainer::GetDependencyContracts(System::Type* contract) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetDependencyContracts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDependencyContracts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contract)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(this, ___internal__method, contract);
}
// Autogenerated method: Zenject.DiContainer.InstantiateInternal
::Il2CppObject* Zenject::DiContainer::InstantiateInternal(System::Type* concreteType, bool autoInject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(autoInject), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, autoInject, extraArgs, context, concreteIdentifier);
}
// Autogenerated method: Zenject.DiContainer.InjectExplicit
void Zenject::DiContainer::InjectExplicit(::Il2CppObject* injectable, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(extraArgs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InjectExplicit
void Zenject::DiContainer::InjectExplicit(::Il2CppObject* injectable, System::Type* injectableType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(injectableType), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, injectableType, extraArgs, context, concreteIdentifier);
}
// Autogenerated method: Zenject.DiContainer.CallInjectMethodsTopDown
void Zenject::DiContainer::CallInjectMethodsTopDown(::Il2CppObject* injectable, System::Type* injectableType, Zenject::InjectTypeInfo* typeInfo, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, bool isDryRun) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CallInjectMethodsTopDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CallInjectMethodsTopDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(injectableType), ::il2cpp_utils::ExtractType(typeInfo), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier), ::il2cpp_utils::ExtractType(isDryRun)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, injectableType, typeInfo, extraArgs, context, concreteIdentifier, isDryRun);
}
// Autogenerated method: Zenject.DiContainer.InjectMembersTopDown
void Zenject::DiContainer::InjectMembersTopDown(::Il2CppObject* injectable, System::Type* injectableType, Zenject::InjectTypeInfo* typeInfo, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, bool isDryRun) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectMembersTopDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectMembersTopDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(injectableType), ::il2cpp_utils::ExtractType(typeInfo), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier), ::il2cpp_utils::ExtractType(isDryRun)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, injectableType, typeInfo, extraArgs, context, concreteIdentifier, isDryRun);
}
// Autogenerated method: Zenject.DiContainer.InjectExplicitInternal
void Zenject::DiContainer::InjectExplicitInternal(::Il2CppObject* injectable, System::Type* injectableType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectExplicitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectExplicitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(injectableType), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, injectableType, extraArgs, context, concreteIdentifier);
}
// Autogenerated method: Zenject.DiContainer.CreateAndParentPrefabResource
UnityEngine::GameObject* Zenject::DiContainer::CreateAndParentPrefabResource(::Il2CppString* resourcePath, Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context, bool& shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateAndParentPrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndParentPrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(gameObjectBindInfo), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, gameObjectBindInfo, context, shouldMakeActive);
}
// Autogenerated method: Zenject.DiContainer.GetPrefabAsGameObject
UnityEngine::GameObject* Zenject::DiContainer::GetPrefabAsGameObject(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetPrefabAsGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefabAsGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.DiContainer.CreateAndParentPrefab
UnityEngine::GameObject* Zenject::DiContainer::CreateAndParentPrefab(UnityEngine::Object* prefab, Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context, bool& shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateAndParentPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndParentPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(gameObjectBindInfo), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, gameObjectBindInfo, context, shouldMakeActive);
}
// Autogenerated method: Zenject.DiContainer.CreateEmptyGameObject
UnityEngine::GameObject* Zenject::DiContainer::CreateEmptyGameObject(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateEmptyGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEmptyGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, name);
}
// Autogenerated method: Zenject.DiContainer.CreateEmptyGameObject
UnityEngine::GameObject* Zenject::DiContainer::CreateEmptyGameObject(Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateEmptyGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEmptyGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectBindInfo), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, gameObjectBindInfo, context);
}
// Autogenerated method: Zenject.DiContainer.GetTransformGroup
UnityEngine::Transform* Zenject::DiContainer::GetTransformGroup(Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::GetTransformGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectBindInfo), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, gameObjectBindInfo, context);
}
// Autogenerated method: Zenject.DiContainer.CreateTransformGroup
UnityEngine::GameObject* Zenject::DiContainer::CreateTransformGroup(::Il2CppString* groupName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::CreateTransformGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTransformGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupName)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, groupName);
}
// Autogenerated method: Zenject.DiContainer.Instantiate
::Il2CppObject* Zenject::DiContainer::Instantiate(System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType);
}
// Autogenerated method: Zenject.DiContainer.Instantiate
::Il2CppObject* Zenject::DiContainer::Instantiate(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiateComponent
UnityEngine::Component* Zenject::DiContainer::InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType, gameObject);
}
// Autogenerated method: Zenject.DiContainer.InstantiateComponent
UnityEngine::Component* Zenject::DiContainer::InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType, gameObject, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefab
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefab
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, parentTransform);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefab
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, position, rotation, parentTransform);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefab
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefab(UnityEngine::Object* prefab, Zenject::GameObjectCreationParameters* gameObjectBindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(gameObjectBindInfo)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, gameObjectBindInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefabResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, parentTransform);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, position, rotation, parentTransform);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::DiContainer::InstantiatePrefabResource(::Il2CppString* resourcePath, Zenject::GameObjectCreationParameters* creationInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(creationInfo)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, creationInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabForComponent
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabForComponent(System::Type* concreteType, UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabForComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, prefab, parentTransform, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabForComponent
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabForComponent(System::Type* concreteType, UnityEngine::Object* prefab, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs, Zenject::GameObjectCreationParameters* creationInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabForComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(creationInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, prefab, extraArgs, creationInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResourceForComponent
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabResourceForComponent(System::Type* concreteType, ::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResourceForComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResourceForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, resourcePath, parentTransform, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiateScriptableObjectResource
::Il2CppObject* Zenject::DiContainer::InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateScriptableObjectResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptableObjectType), ::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, scriptableObjectType, resourcePath);
}
// Autogenerated method: Zenject.DiContainer.InstantiateScriptableObjectResource
::Il2CppObject* Zenject::DiContainer::InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateScriptableObjectResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptableObjectType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, scriptableObjectType, resourcePath, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InjectGameObject
void Zenject::DiContainer::InjectGameObject(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Zenject.DiContainer.InjectGameObjectForComponent
::Il2CppObject* Zenject::DiContainer::InjectGameObjectForComponent(UnityEngine::GameObject* gameObject, System::Type* componentType, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectGameObjectForComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectGameObjectForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, gameObject, componentType, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InjectGameObjectForComponentExplicit
UnityEngine::Component* Zenject::DiContainer::InjectGameObjectForComponentExplicit(UnityEngine::GameObject* gameObject, System::Type* componentType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InjectGameObjectForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectGameObjectForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, gameObject, componentType, extraArgs, context, concreteIdentifier);
}
// Autogenerated method: Zenject.DiContainer.Inject
void Zenject::DiContainer::Inject(::Il2CppObject* injectable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Inject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Inject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable);
}
// Autogenerated method: Zenject.DiContainer.Inject
void Zenject::DiContainer::Inject(::Il2CppObject* injectable, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Inject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Inject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectable), ::il2cpp_utils::ExtractType(extraArgs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.Resolve
::Il2CppObject* Zenject::DiContainer::Resolve(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Resolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.ResolveId
::Il2CppObject* Zenject::DiContainer::ResolveId(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.TryResolve
::Il2CppObject* Zenject::DiContainer::TryResolve(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::TryResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.TryResolveId
::Il2CppObject* Zenject::DiContainer::TryResolveId(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::TryResolveId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResolveId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.ResolveAll
System::Collections::IList* Zenject::DiContainer::ResolveAll(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IList*, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.ResolveIdAll
System::Collections::IList* Zenject::DiContainer::ResolveIdAll(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::ResolveIdAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveIdAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IList*, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.UnbindAll
void Zenject::DiContainer::UnbindAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::UnbindAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnbindAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.Unbind
bool Zenject::DiContainer::Unbind(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Unbind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unbind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.UnbindId
bool Zenject::DiContainer::UnbindId(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::UnbindId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnbindId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.UnbindInterfacesTo
void Zenject::DiContainer::UnbindInterfacesTo(System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::UnbindInterfacesTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnbindInterfacesTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, concreteType);
}
// Autogenerated method: Zenject.DiContainer.Unbind
bool Zenject::DiContainer::Unbind(System::Type* contractType, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Unbind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unbind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType, concreteType);
}
// Autogenerated method: Zenject.DiContainer.UnbindId
bool Zenject::DiContainer::UnbindId(System::Type* contractType, System::Type* concreteType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::UnbindId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnbindId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType, concreteType, identifier);
}
// Autogenerated method: Zenject.DiContainer.HasBinding
bool Zenject::DiContainer::HasBinding(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::HasBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.HasBindingId
bool Zenject::DiContainer::HasBindingId(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::HasBindingId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasBindingId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.HasBindingId
bool Zenject::DiContainer::HasBindingId(System::Type* contractType, ::Il2CppObject* identifier, Zenject::InjectSources sourceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::HasBindingId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasBindingId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(sourceType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType, identifier, sourceType);
}
// Autogenerated method: Zenject.DiContainer.HasBinding
bool Zenject::DiContainer::HasBinding(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::HasBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.DiContainer.FlushBindings
void Zenject::DiContainer::FlushBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::FlushBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer.FinalizeBinding
void Zenject::DiContainer::FinalizeBinding(Zenject::BindStatement* binding) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::FinalizeBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(binding)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, binding);
}
// Autogenerated method: Zenject.DiContainer.StartBinding
Zenject::BindStatement* Zenject::DiContainer::StartBinding(bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::StartBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindStatement*, false>(this, ___internal__method, flush);
}
// Autogenerated method: Zenject.DiContainer.Rebind
Zenject::ConcreteBinderNonGeneric* Zenject::DiContainer::Rebind(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Rebind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteBinderNonGeneric*, false>(this, ___internal__method, contractType);
}
// Autogenerated method: Zenject.DiContainer.RebindId
Zenject::ConcreteBinderNonGeneric* Zenject::DiContainer::RebindId(System::Type* contractType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::RebindId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RebindId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteBinderNonGeneric*, false>(this, ___internal__method, contractType, identifier);
}
// Autogenerated method: Zenject.DiContainer.Bind
Zenject::ConcreteIdBinderNonGeneric* Zenject::DiContainer::Bind(::Array<System::Type*>* contractTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractTypes)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteIdBinderNonGeneric*, false>(this, ___internal__method, contractTypes);
}
// Creating initializer_list -> params proxy for: Zenject.ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes)
Zenject::ConcreteIdBinderNonGeneric* Zenject::DiContainer::Bind(std::initializer_list<System::Type*> contractTypes) {
  return Zenject::DiContainer::Bind(::Array<System::Type*>::New(contractTypes));
}
// Autogenerated method: Zenject.DiContainer.Bind
Zenject::ConcreteIdBinderNonGeneric* Zenject::DiContainer::Bind(System::Collections::Generic::IEnumerable_1<System::Type*>* contractTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractTypes)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteIdBinderNonGeneric*, false>(this, ___internal__method, contractTypes);
}
// Autogenerated method: Zenject.DiContainer.BindInternal
Zenject::ConcreteIdBinderNonGeneric* Zenject::DiContainer::BindInternal(Zenject::BindInfo* bindInfo, Zenject::BindStatement* bindingFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindInfo), ::il2cpp_utils::ExtractType(bindingFinalizer)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteIdBinderNonGeneric*, false>(this, ___internal__method, bindInfo, bindingFinalizer);
}
// Autogenerated method: Zenject.DiContainer.Bind
Zenject::ConcreteIdBinderNonGeneric* Zenject::DiContainer::Bind(System::Action_1<Zenject::ConventionSelectTypesBinder*>* generator) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(generator)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteIdBinderNonGeneric*, false>(this, ___internal__method, generator);
}
// Autogenerated method: Zenject.DiContainer.BindInterfacesTo
Zenject::FromBinderNonGeneric* Zenject::DiContainer::BindInterfacesTo(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindInterfacesTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindInterfacesTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.DiContainer.BindInterfacesAndSelfTo
Zenject::FromBinderNonGeneric* Zenject::DiContainer::BindInterfacesAndSelfTo(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindInterfacesAndSelfTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindInterfacesAndSelfTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.DiContainer.BindInstances
void Zenject::DiContainer::BindInstances(::Array<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instances)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instances);
}
// Creating initializer_list -> params proxy for: System.Void BindInstances(params System.Object[] instances)
void Zenject::DiContainer::BindInstances(std::initializer_list<::Il2CppObject*> instances) {
  Zenject::DiContainer::BindInstances(::Array<::Il2CppObject*>::New(instances));
}
// Autogenerated method: Zenject.DiContainer.InstantiateExplicit
::Il2CppObject* Zenject::DiContainer::InstantiateExplicit(System::Type* concreteType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiateExplicit
::Il2CppObject* Zenject::DiContainer::InstantiateExplicit(System::Type* concreteType, bool autoInject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(autoInject), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, autoInject, extraArgs, context, concreteIdentifier);
}
// Autogenerated method: Zenject.DiContainer.InstantiateComponentExplicit
UnityEngine::Component* Zenject::DiContainer::InstantiateComponentExplicit(System::Type* componentType, UnityEngine::GameObject* gameObject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType, gameObject, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiateScriptableObjectResourceExplicit
::Il2CppObject* Zenject::DiContainer::InstantiateScriptableObjectResourceExplicit(System::Type* scriptableObjectType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiateScriptableObjectResourceExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateScriptableObjectResourceExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptableObjectType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, scriptableObjectType, resourcePath, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResourceForComponentExplicit
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabResourceForComponentExplicit(System::Type* componentType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::GameObjectCreationParameters* creationInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResourceForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResourceForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(creationInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, componentType, resourcePath, extraArgs, creationInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabResourceForComponentExplicit
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabResourceForComponentExplicit(System::Type* componentType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, Zenject::GameObjectCreationParameters* creationInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabResourceForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResourceForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier), ::il2cpp_utils::ExtractType(creationInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, componentType, resourcePath, extraArgs, context, concreteIdentifier, creationInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabForComponentExplicit
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, componentType, prefab, extraArgs);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabForComponentExplicit
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::GameObjectCreationParameters* gameObjectBindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(gameObjectBindInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, componentType, prefab, extraArgs, gameObjectBindInfo);
}
// Autogenerated method: Zenject.DiContainer.InstantiatePrefabForComponentExplicit
::Il2CppObject* Zenject::DiContainer::InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, Zenject::GameObjectCreationParameters* gameObjectBindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::InstantiatePrefabForComponentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(extraArgs), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(concreteIdentifier), ::il2cpp_utils::ExtractType(gameObjectBindInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, componentType, prefab, extraArgs, context, concreteIdentifier, gameObjectBindInfo);
}
// Autogenerated method: Zenject.DiContainer.BindExecutionOrder
void Zenject::DiContainer::BindExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindTickableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindTickableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindTickableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindTickableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindInitializableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindInitializableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindInitializableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindInitializableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindDisposableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindDisposableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindDisposableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindDisposableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindLateDisposableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindLateDisposableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindLateDisposableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindLateDisposableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindFixedTickableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindFixedTickableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindFixedTickableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindFixedTickableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindLateTickableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindLateTickableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindLateTickableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindLateTickableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Autogenerated method: Zenject.DiContainer.BindPoolableExecutionOrder
Zenject::CopyNonLazyBinder* Zenject::DiContainer::BindPoolableExecutionOrder(System::Type* type, int order) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::BindPoolableExecutionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindPoolableExecutionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(order)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, type, order);
}
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*, bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*, bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::DiContainer*, bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::DiContainer*, bool)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::DiContainer*)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::DiContainer*)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*)>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectSettings* (DiContainer::*)()>(&DiContainer::get_Settings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::set_Settings
// Il2CppName: set_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::ZenjectSettings*)>(&DiContainer::set_Settings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "set_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenjectSettings*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_SingletonMarkRegistry
// Il2CppName: get_SingletonMarkRegistry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::Internal::SingletonMarkRegistry* (DiContainer::*)()>(&DiContainer::get_SingletonMarkRegistry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_SingletonMarkRegistry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_AllProviders
// Il2CppName: get_AllProviders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::IProvider*>* (DiContainer::*)()>(&DiContainer::get_AllProviders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_AllProviders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::InstallDefaultBindings
// Il2CppName: InstallDefaultBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::InstallDefaultBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstallDefaultBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateLazyBinding
// Il2CppName: CreateLazyBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::CreateLazyBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateLazyBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::QueueForValidate
// Il2CppName: QueueForValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::IValidatable*)>(&DiContainer::QueueForValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "QueueForValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IValidatable*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ShouldInheritBinding
// Il2CppName: ShouldInheritBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(Zenject::BindStatement*, Zenject::DiContainer*)>(&DiContainer::ShouldInheritBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ShouldInheritBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_ContextTransform
// Il2CppName: get_ContextTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (DiContainer::*)()>(&DiContainer::get_ContextTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_ContextTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_AssertOnNewGameObjects
// Il2CppName: get_AssertOnNewGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)()>(&DiContainer::get_AssertOnNewGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_AssertOnNewGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::set_AssertOnNewGameObjects
// Il2CppName: set_AssertOnNewGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(bool)>(&DiContainer::set_AssertOnNewGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "set_AssertOnNewGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_InheritedDefaultParent
// Il2CppName: get_InheritedDefaultParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (DiContainer::*)()>(&DiContainer::get_InheritedDefaultParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_InheritedDefaultParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_DefaultParent
// Il2CppName: get_DefaultParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (DiContainer::*)()>(&DiContainer::get_DefaultParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_DefaultParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::set_DefaultParent
// Il2CppName: set_DefaultParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(UnityEngine::Transform*)>(&DiContainer::set_DefaultParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "set_DefaultParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_ParentContainers
// Il2CppName: get_ParentContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<Zenject::DiContainer*>* (DiContainer::*)()>(&DiContainer::get_ParentContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_ParentContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_AncestorContainers
// Il2CppName: get_AncestorContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<Zenject::DiContainer*>* (DiContainer::*)()>(&DiContainer::get_AncestorContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_AncestorContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_ChecksForCircularDependencies
// Il2CppName: get_ChecksForCircularDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)()>(&DiContainer::get_ChecksForCircularDependencies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_ChecksForCircularDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_IsValidating
// Il2CppName: get_IsValidating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)()>(&DiContainer::get_IsValidating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_IsValidating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::get_IsInstalling
// Il2CppName: get_IsInstalling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)()>(&DiContainer::get_IsInstalling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_IsInstalling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::set_IsInstalling
// Il2CppName: set_IsInstalling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(bool)>(&DiContainer::set_IsInstalling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "set_IsInstalling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::get_AllContracts
// Il2CppName: get_AllContracts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::BindingId>* (DiContainer::*)()>(&DiContainer::get_AllContracts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "get_AllContracts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveRoots
// Il2CppName: ResolveRoots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::ResolveRoots)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveRoots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveDependencyRoots
// Il2CppName: ResolveDependencyRoots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::ResolveDependencyRoots)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveDependencyRoots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::ValidateFullResolve
// Il2CppName: ValidateFullResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::ValidateFullResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ValidateFullResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::FlushValidationQueue
// Il2CppName: FlushValidationQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::FlushValidationQueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "FlushValidationQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateSubContainer
// Il2CppName: CreateSubContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (DiContainer::*)()>(&DiContainer::CreateSubContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateSubContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::QueueForInject
// Il2CppName: QueueForInject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*)>(&DiContainer::QueueForInject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "QueueForInject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::LazyInject
// Il2CppName: LazyInject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::CreateSubContainer
// Il2CppName: CreateSubContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (DiContainer::*)(bool)>(&DiContainer::CreateSubContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateSubContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::RegisterProvider
// Il2CppName: RegisterProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::BindingId, Zenject::BindingCondition*, Zenject::IProvider*, bool)>(&DiContainer::RegisterProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "RegisterProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindingCondition*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetProviderMatches
// Il2CppName: GetProviderMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*)>(&DiContainer::GetProviderMatches)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetProviderMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::TryGetUniqueProvider
// Il2CppName: TryGetUniqueProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer::ProviderInfo* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::TryGetUniqueProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "TryGetUniqueProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::FlattenInheritanceChain
// Il2CppName: FlattenInheritanceChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::DiContainer*>* (DiContainer::*)()>(&DiContainer::FlattenInheritanceChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "FlattenInheritanceChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::GetLocalProviders
// Il2CppName: GetLocalProviders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::BindingId, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*)>(&DiContainer::GetLocalProviders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetLocalProviders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetProvidersForContract
// Il2CppName: GetProvidersForContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::BindingId, Zenject::InjectSources, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*)>(&DiContainer::GetProvidersForContract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetProvidersForContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Install
// Il2CppName: Install
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Install
// Il2CppName: Install
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::ResolveAll
// Il2CppName: ResolveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IList* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::ResolveAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveAll
// Il2CppName: ResolveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&DiContainer::ResolveAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CheckForInstallWarning
// Il2CppName: CheckForInstallWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::CheckForInstallWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CheckForInstallWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveType
// Il2CppName: ResolveType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::ResolveType
// Il2CppName: ResolveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (DiContainer::*)(System::Type*)>(&DiContainer::ResolveType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveType
// Il2CppName: ResolveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::ResolveType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveTypeAll
// Il2CppName: ResolveTypeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Type*>* (DiContainer::*)(System::Type*)>(&DiContainer::ResolveTypeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveTypeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveTypeAll
// Il2CppName: ResolveTypeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Type*>* (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::ResolveTypeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveTypeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveTypeAll
// Il2CppName: ResolveTypeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Type*>* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::ResolveTypeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveTypeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(Zenject::BindingId)>(&DiContainer::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::SafeGetInstances
// Il2CppName: SafeGetInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::DiContainer::ProviderInfo*, Zenject::InjectContext*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&DiContainer::SafeGetInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "SafeGetInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer::ProviderInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Decorate
// Il2CppName: Decorate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::GetDecoratedInstances
// Il2CppName: GetDecoratedInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::IProvider*, Zenject::InjectContext*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&DiContainer::GetDecoratedInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetDecoratedInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::TryGetDecoratorProvider
// Il2CppName: TryGetDecoratorProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::Internal::IDecoratorProvider* (DiContainer::*)(System::Type*)>(&DiContainer::TryGetDecoratorProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "TryGetDecoratorProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetContainerHeirarchyDistance
// Il2CppName: GetContainerHeirarchyDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DiContainer::*)(Zenject::DiContainer*)>(&DiContainer::GetContainerHeirarchyDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetContainerHeirarchyDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetContainerHeirarchyDistance
// Il2CppName: GetContainerHeirarchyDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<int> (DiContainer::*)(Zenject::DiContainer*, int)>(&DiContainer::GetContainerHeirarchyDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetContainerHeirarchyDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetDependencyContracts
// Il2CppName: GetDependencyContracts
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::GetDependencyContracts
// Il2CppName: GetDependencyContracts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (DiContainer::*)(System::Type*)>(&DiContainer::GetDependencyContracts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetDependencyContracts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateInternal
// Il2CppName: InstantiateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, bool, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*)>(&DiContainer::InstantiateInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectExplicit
// Il2CppName: InjectExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&DiContainer::InjectExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectExplicit
// Il2CppName: InjectExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*)>(&DiContainer::InjectExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CallInjectMethodsTopDown
// Il2CppName: CallInjectMethodsTopDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Type*, Zenject::InjectTypeInfo*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*, bool)>(&DiContainer::CallInjectMethodsTopDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CallInjectMethodsTopDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectMembersTopDown
// Il2CppName: InjectMembersTopDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Type*, Zenject::InjectTypeInfo*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*, bool)>(&DiContainer::InjectMembersTopDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectMembersTopDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectExplicitInternal
// Il2CppName: InjectExplicitInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*)>(&DiContainer::InjectExplicitInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectExplicitInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateAndParentPrefabResource
// Il2CppName: CreateAndParentPrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*, Zenject::GameObjectCreationParameters*, Zenject::InjectContext*, bool&)>(&DiContainer::CreateAndParentPrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateAndParentPrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetPrefabAsGameObject
// Il2CppName: GetPrefabAsGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*)>(&DiContainer::GetPrefabAsGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetPrefabAsGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateAndParentPrefab
// Il2CppName: CreateAndParentPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*, Zenject::GameObjectCreationParameters*, Zenject::InjectContext*, bool&)>(&DiContainer::CreateAndParentPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateAndParentPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateEmptyGameObject
// Il2CppName: CreateEmptyGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*)>(&DiContainer::CreateEmptyGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateEmptyGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateEmptyGameObject
// Il2CppName: CreateEmptyGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(Zenject::GameObjectCreationParameters*, Zenject::InjectContext*)>(&DiContainer::CreateEmptyGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateEmptyGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::GetTransformGroup
// Il2CppName: GetTransformGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (DiContainer::*)(Zenject::GameObjectCreationParameters*, Zenject::InjectContext*)>(&DiContainer::GetTransformGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "GetTransformGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::CreateTransformGroup
// Il2CppName: CreateTransformGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*)>(&DiContainer::CreateTransformGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "CreateTransformGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*)>(&DiContainer::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateComponent
// Il2CppName: InstantiateComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateComponent
// Il2CppName: InstantiateComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateComponent
// Il2CppName: InstantiateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (DiContainer::*)(System::Type*, UnityEngine::GameObject*)>(&DiContainer::InstantiateComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateComponent
// Il2CppName: InstantiateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (DiContainer::*)(System::Type*, UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::InstantiateComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*)>(&DiContainer::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*, UnityEngine::Transform*)>(&DiContainer::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Transform*)>(&DiContainer::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(UnityEngine::Object*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*)>(&DiContainer::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*, UnityEngine::Transform*)>(&DiContainer::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Transform*)>(&DiContainer::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (DiContainer::*)(::Il2CppString*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, UnityEngine::Object*, UnityEngine::Transform*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::InstantiatePrefabForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, UnityEngine::Object*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*, UnityEngine::Transform*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::InstantiatePrefabResourceForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResourceForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*)>(&DiContainer::InstantiateScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::InstantiateScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectGameObject
// Il2CppName: InjectGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(UnityEngine::GameObject*)>(&DiContainer::InjectGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectGameObjectForComponent
// Il2CppName: InjectGameObjectForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InjectGameObjectForComponent
// Il2CppName: InjectGameObjectForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InjectGameObjectForComponent
// Il2CppName: InjectGameObjectForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(UnityEngine::GameObject*, System::Type*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::InjectGameObjectForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectGameObjectForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InjectGameObjectForComponentExplicit
// Il2CppName: InjectGameObjectForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (DiContainer::*)(UnityEngine::GameObject*, System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*)>(&DiContainer::InjectGameObjectForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InjectGameObjectForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*)>(&DiContainer::Inject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Il2CppObject*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&DiContainer::Inject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Resolve
// Il2CppName: Resolve
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*)>(&DiContainer::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveId
// Il2CppName: ResolveId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::ResolveId
// Il2CppName: ResolveId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::ResolveId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::TryResolve
// Il2CppName: TryResolve
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::TryResolve
// Il2CppName: TryResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*)>(&DiContainer::TryResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "TryResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::TryResolveId
// Il2CppName: TryResolveId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::TryResolveId
// Il2CppName: TryResolveId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::TryResolveId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "TryResolveId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveAll
// Il2CppName: ResolveAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::ResolveAll
// Il2CppName: ResolveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IList* (DiContainer::*)(System::Type*)>(&DiContainer::ResolveAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::ResolveIdAll
// Il2CppName: ResolveIdAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::ResolveIdAll
// Il2CppName: ResolveIdAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IList* (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::ResolveIdAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "ResolveIdAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::UnbindAll
// Il2CppName: UnbindAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::UnbindAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "UnbindAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::Unbind
// Il2CppName: Unbind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Unbind
// Il2CppName: Unbind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*)>(&DiContainer::Unbind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Unbind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::UnbindId
// Il2CppName: UnbindId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::UnbindId
// Il2CppName: UnbindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::UnbindId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "UnbindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::UnbindInterfacesTo
// Il2CppName: UnbindInterfacesTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::UnbindInterfacesTo
// Il2CppName: UnbindInterfacesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Type*)>(&DiContainer::UnbindInterfacesTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "UnbindInterfacesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Unbind
// Il2CppName: Unbind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Unbind
// Il2CppName: Unbind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*, System::Type*)>(&DiContainer::Unbind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Unbind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::UnbindId
// Il2CppName: UnbindId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::UnbindId
// Il2CppName: UnbindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*, System::Type*, ::Il2CppObject*)>(&DiContainer::UnbindId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "UnbindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::HasBinding
// Il2CppName: HasBinding
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::HasBinding
// Il2CppName: HasBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*)>(&DiContainer::HasBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "HasBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::HasBindingId
// Il2CppName: HasBindingId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::HasBindingId
// Il2CppName: HasBindingId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::HasBindingId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "HasBindingId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::HasBindingId
// Il2CppName: HasBindingId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(System::Type*, ::Il2CppObject*, Zenject::InjectSources)>(&DiContainer::HasBindingId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "HasBindingId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>()});
  }
};
// Writing MetadataGetter for method: DiContainer::HasBinding
// Il2CppName: HasBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::*)(Zenject::InjectContext*)>(&DiContainer::HasBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "HasBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::FlushBindings
// Il2CppName: FlushBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::FlushBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "FlushBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::FinalizeBinding
// Il2CppName: FinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(Zenject::BindStatement*)>(&DiContainer::FinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "FinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::StartBinding
// Il2CppName: StartBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindStatement* (DiContainer::*)(bool)>(&DiContainer::StartBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "StartBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Rebind
// Il2CppName: Rebind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::RebindId
// Il2CppName: RebindId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Rebind
// Il2CppName: Rebind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteBinderNonGeneric* (DiContainer::*)(System::Type*)>(&DiContainer::Rebind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Rebind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::RebindId
// Il2CppName: RebindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteBinderNonGeneric* (DiContainer::*)(System::Type*, ::Il2CppObject*)>(&DiContainer::RebindId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "RebindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Bind
// Il2CppName: Bind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindNoFlush
// Il2CppName: BindNoFlush
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Bind
// Il2CppName: Bind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteIdBinderNonGeneric* (DiContainer::*)(::Array<System::Type*>*)>(&DiContainer::Bind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteIdBinderNonGeneric* (DiContainer::*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&DiContainer::Bind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindInternal
// Il2CppName: BindInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteIdBinderNonGeneric* (DiContainer::*)(Zenject::BindInfo*, Zenject::BindStatement*)>(&DiContainer::BindInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteIdBinderNonGeneric* (DiContainer::*)(System::Action_1<Zenject::ConventionSelectTypesBinder*>*)>(&DiContainer::Bind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::ConventionSelectTypesBinder*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindInterfacesTo
// Il2CppName: BindInterfacesTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindInterfacesTo
// Il2CppName: BindInterfacesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (DiContainer::*)(System::Type*)>(&DiContainer::BindInterfacesTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindInterfacesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindInterfacesAndSelfTo
// Il2CppName: BindInterfacesAndSelfTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindInterfacesAndSelfTo
// Il2CppName: BindInterfacesAndSelfTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (DiContainer::*)(System::Type*)>(&DiContainer::BindInterfacesAndSelfTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindInterfacesAndSelfTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindInstance
// Il2CppName: BindInstance
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindInstances
// Il2CppName: BindInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(::Array<::Il2CppObject*>*)>(&DiContainer::BindInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindMemoryPool
// Il2CppName: BindMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindMemoryPool
// Il2CppName: BindMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindMemoryPoolCustomInterface
// Il2CppName: BindMemoryPoolCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindMemoryPoolCustomInterfaceNoFlush
// Il2CppName: BindMemoryPoolCustomInterfaceNoFlush
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindMemoryPoolCustomInterfaceInternal
// Il2CppName: BindMemoryPoolCustomInterfaceInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryInternal
// Il2CppName: BindFactoryInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindIFactory
// Il2CppName: BindIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactory
// Il2CppName: BindFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFactoryCustomInterface
// Il2CppName: BindFactoryCustomInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateExplicit
// Il2CppName: InstantiateExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::InstantiateExplicit
// Il2CppName: InstantiateExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&DiContainer::InstantiateExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateExplicit
// Il2CppName: InstantiateExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, bool, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*)>(&DiContainer::InstantiateExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateComponentExplicit
// Il2CppName: InstantiateComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (DiContainer::*)(System::Type*, UnityEngine::GameObject*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&DiContainer::InstantiateComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiateScriptableObjectResourceExplicit
// Il2CppName: InstantiateScriptableObjectResourceExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&DiContainer::InstantiateScriptableObjectResourceExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiateScriptableObjectResourceExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponentExplicit
// Il2CppName: InstantiatePrefabResourceForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabResourceForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResourceForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabResourceForComponentExplicit
// Il2CppName: InstantiatePrefabResourceForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, ::Il2CppString*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabResourceForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabResourceForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponentExplicit
// Il2CppName: InstantiatePrefabForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, UnityEngine::Object*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&DiContainer::InstantiatePrefabForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponentExplicit
// Il2CppName: InstantiatePrefabForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, UnityEngine::Object*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::InstantiatePrefabForComponentExplicit
// Il2CppName: InstantiatePrefabForComponentExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::*)(System::Type*, UnityEngine::Object*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*, ::Il2CppObject*, Zenject::GameObjectCreationParameters*)>(&DiContainer::InstantiatePrefabForComponentExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "InstantiatePrefabForComponentExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindExecutionOrder
// Il2CppName: BindExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindExecutionOrder
// Il2CppName: BindExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)(System::Type*, int)>(&DiContainer::BindExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindTickableExecutionOrder
// Il2CppName: BindTickableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindTickableExecutionOrder
// Il2CppName: BindTickableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindTickableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindTickableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindInitializableExecutionOrder
// Il2CppName: BindInitializableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindInitializableExecutionOrder
// Il2CppName: BindInitializableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindInitializableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindInitializableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindDisposableExecutionOrder
// Il2CppName: BindDisposableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindLateDisposableExecutionOrder
// Il2CppName: BindLateDisposableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindDisposableExecutionOrder
// Il2CppName: BindDisposableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindDisposableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindDisposableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindLateDisposableExecutionOrder
// Il2CppName: BindLateDisposableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindLateDisposableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindLateDisposableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindFixedTickableExecutionOrder
// Il2CppName: BindFixedTickableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindFixedTickableExecutionOrder
// Il2CppName: BindFixedTickableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindFixedTickableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindFixedTickableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindLateTickableExecutionOrder
// Il2CppName: BindLateTickableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindLateTickableExecutionOrder
// Il2CppName: BindLateTickableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindLateTickableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindLateTickableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::BindPoolableExecutionOrder
// Il2CppName: BindPoolableExecutionOrder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DiContainer::BindPoolableExecutionOrder
// Il2CppName: BindPoolableExecutionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (DiContainer::*)(System::Type*, int)>(&DiContainer::BindPoolableExecutionOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), "BindPoolableExecutionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::*)()>(&DiContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DiContainer/ProviderInfo
#include "Zenject/DiContainer_ProviderInfo.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DiContainer::ProviderInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::ProviderInfo::*)(Zenject::IProvider*, Zenject::BindingCondition*, bool, Zenject::DiContainer*)>(&DiContainer::ProviderInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::ProviderInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindingCondition*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::ProviderInfo::*)(Zenject::IProvider*, Zenject::BindingCondition*, bool, Zenject::DiContainer*)>(&DiContainer::ProviderInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::ProviderInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindingCondition*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DiContainer/<>c
#include "Zenject/DiContainer_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer/ProviderInfo
#include "Zenject/DiContainer_ProviderInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.DiContainer/<>c <>9
Zenject::DiContainer::$$c* Zenject::DiContainer::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::DiContainer::$$c*>("Zenject", "DiContainer/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.DiContainer/<>c <>9
void Zenject::DiContainer::$$c::_set_$$9(Zenject::DiContainer::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo>,System.Collections.Generic.IEnumerable`1<Zenject.DiContainer/ProviderInfo>> <>9__33_0
System::Func_2<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*, System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>*>* Zenject::DiContainer::$$c::_get_$$9__33_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__33_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*, System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>*>*>("Zenject", "DiContainer/<>c", "<>9__33_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo>,System.Collections.Generic.IEnumerable`1<Zenject.DiContainer/ProviderInfo>> <>9__33_0
void Zenject::DiContainer::$$c::_set_$$9__33_0(System::Func_2<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*, System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__33_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__33_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.DiContainer/ProviderInfo,Zenject.IProvider> <>9__33_1
System::Func_2<Zenject::DiContainer::ProviderInfo*, Zenject::IProvider*>* Zenject::DiContainer::$$c::_get_$$9__33_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__33_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::DiContainer::ProviderInfo*, Zenject::IProvider*>*>("Zenject", "DiContainer/<>c", "<>9__33_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.DiContainer/ProviderInfo,Zenject.IProvider> <>9__33_1
void Zenject::DiContainer::$$c::_set_$$9__33_1(System::Func_2<Zenject::DiContainer::ProviderInfo*, Zenject::IProvider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__33_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__33_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__86_1
System::Func_2<System::Type*, bool>* Zenject::DiContainer::$$c::_get_$$9__86_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__86_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "DiContainer/<>c", "<>9__86_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__86_1
void Zenject::DiContainer::$$c::_set_$$9__86_1(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__86_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__86_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.TypeValuePair,System.String> <>9__97_0
System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>* Zenject::DiContainer::$$c::_get_$$9__97_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__97_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>*>("Zenject", "DiContainer/<>c", "<>9__97_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.TypeValuePair,System.String> <>9__97_0
void Zenject::DiContainer::$$c::_set_$$9__97_0(System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__97_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__97_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.TypeValuePair,System.String> <>9__102_0
System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>* Zenject::DiContainer::$$c::_get_$$9__102_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__102_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>*>("Zenject", "DiContainer/<>c", "<>9__102_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.TypeValuePair,System.String> <>9__102_0
void Zenject::DiContainer::$$c::_set_$$9__102_0(System::Func_2<Zenject::TypeValuePair, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__102_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__102_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__197_0
System::Func_2<System::Type*, bool>* Zenject::DiContainer::$$c::_get_$$9__197_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__197_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "DiContainer/<>c", "<>9__197_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__197_0
void Zenject::DiContainer::$$c::_set_$$9__197_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__197_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__197_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__198_0
System::Func_2<System::Type*, bool>* Zenject::DiContainer::$$c::_get_$$9__198_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_get_$$9__198_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "DiContainer/<>c", "<>9__198_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__198_0
void Zenject::DiContainer::$$c::_set_$$9__198_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::_set_$$9__198_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DiContainer/<>c", "<>9__198_0", value)));
}
// Autogenerated method: Zenject.DiContainer/<>c..cctor
void Zenject::DiContainer::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DiContainer/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<>c.<get_AllProviders>b__33_0
System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>* Zenject::DiContainer::$$c::$get_AllProviders$b__33_0(System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<get_AllProviders>b__33_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AllProviders>b__33_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<get_AllProviders>b__33_1
Zenject::IProvider* Zenject::DiContainer::$$c::$get_AllProviders$b__33_1(Zenject::DiContainer::ProviderInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<get_AllProviders>b__33_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AllProviders>b__33_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<ResolveTypeAll>b__86_1
bool Zenject::DiContainer::$$c::$ResolveTypeAll$b__86_1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<ResolveTypeAll>b__86_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveTypeAll>b__86_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<InstantiateInternal>b__97_0
::Il2CppString* Zenject::DiContainer::$$c::$InstantiateInternal$b__97_0(Zenject::TypeValuePair x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<InstantiateInternal>b__97_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InstantiateInternal>b__97_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<InjectExplicitInternal>b__102_0
::Il2CppString* Zenject::DiContainer::$$c::$InjectExplicitInternal$b__102_0(Zenject::TypeValuePair x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<InjectExplicitInternal>b__102_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InjectExplicitInternal>b__102_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<BindInternal>b__197_0
bool Zenject::DiContainer::$$c::$BindInternal$b__197_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<BindInternal>b__197_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BindInternal>b__197_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DiContainer/<>c.<Bind>b__198_0
bool Zenject::DiContainer::$$c::$Bind$b__198_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c::<Bind>b__198_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Bind>b__198_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: DiContainer::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DiContainer::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$get_AllProviders$b__33_0
// Il2CppName: <get_AllProviders>b__33_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer::ProviderInfo*>* (DiContainer::$$c::*)(System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*)>(&DiContainer::$$c::$get_AllProviders$b__33_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<get_AllProviders>b__33_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$get_AllProviders$b__33_1
// Il2CppName: <get_AllProviders>b__33_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (DiContainer::$$c::*)(Zenject::DiContainer::ProviderInfo*)>(&DiContainer::$$c::$get_AllProviders$b__33_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<get_AllProviders>b__33_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer::ProviderInfo*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$ResolveTypeAll$b__86_1
// Il2CppName: <ResolveTypeAll>b__86_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::$$c::*)(System::Type*)>(&DiContainer::$$c::$ResolveTypeAll$b__86_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<ResolveTypeAll>b__86_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$InstantiateInternal$b__97_0
// Il2CppName: <InstantiateInternal>b__97_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DiContainer::$$c::*)(Zenject::TypeValuePair)>(&DiContainer::$$c::$InstantiateInternal$b__97_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<InstantiateInternal>b__97_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::TypeValuePair>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$InjectExplicitInternal$b__102_0
// Il2CppName: <InjectExplicitInternal>b__102_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DiContainer::$$c::*)(Zenject::TypeValuePair)>(&DiContainer::$$c::$InjectExplicitInternal$b__102_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<InjectExplicitInternal>b__102_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::TypeValuePair>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$BindInternal$b__197_0
// Il2CppName: <BindInternal>b__197_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::$$c::*)(System::Type*)>(&DiContainer::$$c::$BindInternal$b__197_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<BindInternal>b__197_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::$Bind$b__198_0
// Il2CppName: <Bind>b__198_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::$$c::*)(System::Type*)>(&DiContainer::$$c::$Bind$b__198_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), "<Bind>b__198_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c::*)()>(&DiContainer::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c::*)()>(&DiContainer::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DiContainer/<>c__DisplayClass86_0
#include "Zenject/DiContainer_--c__DisplayClass86_0.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer/ProviderInfo
#include "Zenject/DiContainer_ProviderInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DiContainer/<>c__DisplayClass86_0.<ResolveTypeAll>b__0
System::Type* Zenject::DiContainer::$$c__DisplayClass86_0::$ResolveTypeAll$b__0(Zenject::DiContainer::ProviderInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c__DisplayClass86_0::<ResolveTypeAll>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveTypeAll>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: DiContainer::$$c__DisplayClass86_0::$ResolveTypeAll$b__0
// Il2CppName: <ResolveTypeAll>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (DiContainer::$$c__DisplayClass86_0::*)(Zenject::DiContainer::ProviderInfo*)>(&DiContainer::$$c__DisplayClass86_0::$ResolveTypeAll$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass86_0*), "<ResolveTypeAll>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer::ProviderInfo*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c__DisplayClass86_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c__DisplayClass86_0::*)()>(&DiContainer::$$c__DisplayClass86_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass86_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c__DisplayClass86_0::*)()>(&DiContainer::$$c__DisplayClass86_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass86_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DiContainer/<GetDependencyContracts>d__96
#include "Zenject/DiContainer_-GetDependencyContracts-d__96.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.IDisposable.Dispose
void Zenject::DiContainer::$GetDependencyContracts$d__96::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.MoveNext
bool Zenject::DiContainer::$GetDependencyContracts$d__96::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.<>m__Finally1
void Zenject::DiContainer::$GetDependencyContracts$d__96::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.Collections.Generic.IEnumerator<System.Type>.get_Current
System::Type* Zenject::DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.Collections.IEnumerator.Reset
void Zenject::DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
System::Collections::Generic::IEnumerator_1<System::Type*>* Zenject::DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DiContainer/<GetDependencyContracts>d__96.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* Zenject::DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$GetDependencyContracts$d__96::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$GetDependencyContracts$d__96::*)(int)>(&DiContainer::$GetDependencyContracts$d__96::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$GetDependencyContracts$d__96::*)(int)>(&DiContainer::$GetDependencyContracts$d__96::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerator$System_Type$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Type>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerator$System_Type$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<System::Type*>* (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (DiContainer::$GetDependencyContracts$d__96::*)()>(&DiContainer::$GetDependencyContracts$d__96::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$GetDependencyContracts$d__96*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DiContainer/<>c__DisplayClass178_0
#include "Zenject/DiContainer_--c__DisplayClass178_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer/ProviderInfo
#include "Zenject/DiContainer_ProviderInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DiContainer/<>c__DisplayClass178_0.<UnbindId>b__0
bool Zenject::DiContainer::$$c__DisplayClass178_0::$UnbindId$b__0(Zenject::DiContainer::ProviderInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DiContainer::$$c__DisplayClass178_0::<UnbindId>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UnbindId>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: DiContainer::$$c__DisplayClass178_0::$UnbindId$b__0
// Il2CppName: <UnbindId>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiContainer::$$c__DisplayClass178_0::*)(Zenject::DiContainer::ProviderInfo*)>(&DiContainer::$$c__DisplayClass178_0::$UnbindId$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass178_0*), "<UnbindId>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer::ProviderInfo*>()});
  }
};
// Writing MetadataGetter for method: DiContainer::$$c__DisplayClass178_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c__DisplayClass178_0::*)()>(&DiContainer::$$c__DisplayClass178_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass178_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiContainer::$$c__DisplayClass178_0::*)()>(&DiContainer::$$c__DisplayClass178_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiContainer::$$c__DisplayClass178_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IInstantiator
#include "Zenject/IInstantiator.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IInstantiator.Instantiate
::Il2CppObject* Zenject::IInstantiator::Instantiate(System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType);
}
// Autogenerated method: Zenject.IInstantiator.Instantiate
::Il2CppObject* Zenject::IInstantiator::Instantiate(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, extraArgs);
}
// Autogenerated method: Zenject.IInstantiator.InstantiateComponent
UnityEngine::Component* Zenject::IInstantiator::InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiateComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType, gameObject);
}
// Autogenerated method: Zenject.IInstantiator.InstantiateComponent
UnityEngine::Component* Zenject::IInstantiator::InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiateComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType, gameObject, extraArgs);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefab
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefab
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, parentTransform);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefab
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, prefab, position, rotation, parentTransform);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefabResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, parentTransform);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefabResource
UnityEngine::GameObject* Zenject::IInstantiator::InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefabResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, resourcePath, position, rotation, parentTransform);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefabForComponent
::Il2CppObject* Zenject::IInstantiator::InstantiatePrefabForComponent(System::Type* concreteType, UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefabForComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, prefab, parentTransform, extraArgs);
}
// Autogenerated method: Zenject.IInstantiator.InstantiatePrefabResourceForComponent
::Il2CppObject* Zenject::IInstantiator::InstantiatePrefabResourceForComponent(System::Type* concreteType, ::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiatePrefabResourceForComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiatePrefabResourceForComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, concreteType, resourcePath, parentTransform, extraArgs);
}
// Autogenerated method: Zenject.IInstantiator.InstantiateScriptableObjectResource
::Il2CppObject* Zenject::IInstantiator::InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiateScriptableObjectResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptableObjectType), ::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, scriptableObjectType, resourcePath);
}
// Autogenerated method: Zenject.IInstantiator.InstantiateScriptableObjectResource
::Il2CppObject* Zenject::IInstantiator::InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::InstantiateScriptableObjectResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptableObjectType), ::il2cpp_utils::ExtractType(resourcePath), ::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, scriptableObjectType, resourcePath, extraArgs);
}
// Autogenerated method: Zenject.IInstantiator.CreateEmptyGameObject
UnityEngine::GameObject* Zenject::IInstantiator::CreateEmptyGameObject(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstantiator::CreateEmptyGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEmptyGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, name);
}
// Writing MetadataGetter for method: IInstantiator::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*)>(&IInstantiator::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&IInstantiator::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiateComponent
// Il2CppName: InstantiateComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateComponent
// Il2CppName: InstantiateComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateComponent
// Il2CppName: InstantiateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (IInstantiator::*)(System::Type*, UnityEngine::GameObject*)>(&IInstantiator::InstantiateComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiateComponent
// Il2CppName: InstantiateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (IInstantiator::*)(System::Type*, UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&IInstantiator::InstantiateComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateComponentOnNewGameObject
// Il2CppName: InstantiateComponentOnNewGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(UnityEngine::Object*)>(&IInstantiator::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(UnityEngine::Object*, UnityEngine::Transform*)>(&IInstantiator::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefab
// Il2CppName: InstantiatePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(UnityEngine::Object*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Transform*)>(&IInstantiator::InstantiatePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(::Il2CppString*)>(&IInstantiator::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(::Il2CppString*, UnityEngine::Transform*)>(&IInstantiator::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResource
// Il2CppName: InstantiatePrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(::Il2CppString*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Transform*)>(&IInstantiator::InstantiatePrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabForComponent
// Il2CppName: InstantiatePrefabForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*, UnityEngine::Object*, UnityEngine::Transform*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&IInstantiator::InstantiatePrefabForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefabForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiatePrefabResourceForComponent
// Il2CppName: InstantiatePrefabResourceForComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*, ::Il2CppString*, UnityEngine::Transform*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&IInstantiator::InstantiatePrefabResourceForComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiatePrefabResourceForComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IInstantiator::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*, ::Il2CppString*)>(&IInstantiator::InstantiateScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::InstantiateScriptableObjectResource
// Il2CppName: InstantiateScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IInstantiator::*)(System::Type*, ::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&IInstantiator::InstantiateScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "InstantiateScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IInstantiator::CreateEmptyGameObject
// Il2CppName: CreateEmptyGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IInstantiator::*)(::Il2CppString*)>(&IInstantiator::CreateEmptyGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstantiator*), "CreateEmptyGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.LazyInstanceInjector
#include "Zenject/LazyInstanceInjector.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.LazyInstanceInjector.get_Instances
System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* Zenject::LazyInstanceInjector::get_Instances() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LazyInstanceInjector::get_Instances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Instances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.LazyInstanceInjector.AddInstance
void Zenject::LazyInstanceInjector::AddInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LazyInstanceInjector::AddInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.LazyInstanceInjector.AddInstances
void Zenject::LazyInstanceInjector::AddInstances(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LazyInstanceInjector::AddInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instances)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instances);
}
// Autogenerated method: Zenject.LazyInstanceInjector.LazyInject
void Zenject::LazyInstanceInjector::LazyInject(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LazyInstanceInjector::LazyInject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.LazyInstanceInjector.LazyInjectAll
void Zenject::LazyInstanceInjector::LazyInjectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LazyInstanceInjector::LazyInjectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInjectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LazyInstanceInjector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)(Zenject::DiContainer*)>(&LazyInstanceInjector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)(Zenject::DiContainer*)>(&LazyInstanceInjector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: LazyInstanceInjector::get_Instances
// Il2CppName: get_Instances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* (LazyInstanceInjector::*)()>(&LazyInstanceInjector::get_Instances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), "get_Instances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LazyInstanceInjector::AddInstance
// Il2CppName: AddInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)(::Il2CppObject*)>(&LazyInstanceInjector::AddInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), "AddInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LazyInstanceInjector::AddInstances
// Il2CppName: AddInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&LazyInstanceInjector::AddInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), "AddInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: LazyInstanceInjector::LazyInject
// Il2CppName: LazyInject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)(::Il2CppObject*)>(&LazyInstanceInjector::LazyInject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), "LazyInject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LazyInstanceInjector::LazyInjectAll
// Il2CppName: LazyInjectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyInstanceInjector::*)()>(&LazyInstanceInjector::LazyInjectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LazyInstanceInjector*), "LazyInjectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ValidationErrorResponses
#include "Zenject/ValidationErrorResponses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ValidationErrorResponses Log
Zenject::ValidationErrorResponses Zenject::ValidationErrorResponses::_get_Log() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationErrorResponses::_get_Log");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ValidationErrorResponses>("Zenject", "ValidationErrorResponses", "Log"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ValidationErrorResponses Log
void Zenject::ValidationErrorResponses::_set_Log(Zenject::ValidationErrorResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationErrorResponses::_set_Log");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ValidationErrorResponses", "Log", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ValidationErrorResponses Throw
Zenject::ValidationErrorResponses Zenject::ValidationErrorResponses::_get_Throw() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationErrorResponses::_get_Throw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ValidationErrorResponses>("Zenject", "ValidationErrorResponses", "Throw"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ValidationErrorResponses Throw
void Zenject::ValidationErrorResponses::_set_Throw(Zenject::ValidationErrorResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationErrorResponses::_set_Throw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ValidationErrorResponses", "Throw", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.RootResolveMethods
#include "Zenject/RootResolveMethods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.RootResolveMethods NonLazyOnly
Zenject::RootResolveMethods Zenject::RootResolveMethods::_get_NonLazyOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RootResolveMethods::_get_NonLazyOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::RootResolveMethods>("Zenject", "RootResolveMethods", "NonLazyOnly"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.RootResolveMethods NonLazyOnly
void Zenject::RootResolveMethods::_set_NonLazyOnly(Zenject::RootResolveMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RootResolveMethods::_set_NonLazyOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "RootResolveMethods", "NonLazyOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.RootResolveMethods All
Zenject::RootResolveMethods Zenject::RootResolveMethods::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RootResolveMethods::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::RootResolveMethods>("Zenject", "RootResolveMethods", "All"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.RootResolveMethods All
void Zenject::RootResolveMethods::_set_All(Zenject::RootResolveMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RootResolveMethods::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "RootResolveMethods", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SignalDefaultSyncModes
#include "Zenject/SignalDefaultSyncModes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.SignalDefaultSyncModes Synchronous
Zenject::SignalDefaultSyncModes Zenject::SignalDefaultSyncModes::_get_Synchronous() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalDefaultSyncModes::_get_Synchronous");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::SignalDefaultSyncModes>("Zenject", "SignalDefaultSyncModes", "Synchronous"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.SignalDefaultSyncModes Synchronous
void Zenject::SignalDefaultSyncModes::_set_Synchronous(Zenject::SignalDefaultSyncModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalDefaultSyncModes::_set_Synchronous");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SignalDefaultSyncModes", "Synchronous", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.SignalDefaultSyncModes Asynchronous
Zenject::SignalDefaultSyncModes Zenject::SignalDefaultSyncModes::_get_Asynchronous() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalDefaultSyncModes::_get_Asynchronous");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::SignalDefaultSyncModes>("Zenject", "SignalDefaultSyncModes", "Asynchronous"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.SignalDefaultSyncModes Asynchronous
void Zenject::SignalDefaultSyncModes::_set_Asynchronous(Zenject::SignalDefaultSyncModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalDefaultSyncModes::_set_Asynchronous");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SignalDefaultSyncModes", "Asynchronous", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SignalMissingHandlerResponses
#include "Zenject/SignalMissingHandlerResponses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.SignalMissingHandlerResponses Ignore
Zenject::SignalMissingHandlerResponses Zenject::SignalMissingHandlerResponses::_get_Ignore() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_get_Ignore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::SignalMissingHandlerResponses>("Zenject", "SignalMissingHandlerResponses", "Ignore"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.SignalMissingHandlerResponses Ignore
void Zenject::SignalMissingHandlerResponses::_set_Ignore(Zenject::SignalMissingHandlerResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_set_Ignore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SignalMissingHandlerResponses", "Ignore", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.SignalMissingHandlerResponses Throw
Zenject::SignalMissingHandlerResponses Zenject::SignalMissingHandlerResponses::_get_Throw() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_get_Throw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::SignalMissingHandlerResponses>("Zenject", "SignalMissingHandlerResponses", "Throw"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.SignalMissingHandlerResponses Throw
void Zenject::SignalMissingHandlerResponses::_set_Throw(Zenject::SignalMissingHandlerResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_set_Throw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SignalMissingHandlerResponses", "Throw", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.SignalMissingHandlerResponses Warn
Zenject::SignalMissingHandlerResponses Zenject::SignalMissingHandlerResponses::_get_Warn() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_get_Warn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::SignalMissingHandlerResponses>("Zenject", "SignalMissingHandlerResponses", "Warn"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.SignalMissingHandlerResponses Warn
void Zenject::SignalMissingHandlerResponses::_set_Warn(Zenject::SignalMissingHandlerResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SignalMissingHandlerResponses::_set_Warn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SignalMissingHandlerResponses", "Warn", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: Zenject.ZenjectSettings/SignalSettings
#include "Zenject/ZenjectSettings_SignalSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectSettings Default
Zenject::ZenjectSettings* Zenject::ZenjectSettings::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectSettings*>("Zenject", "ZenjectSettings", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectSettings Default
void Zenject::ZenjectSettings::_set_Default(Zenject::ZenjectSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectSettings", "Default", value));
}
// Autogenerated method: Zenject.ZenjectSettings.get_Signals
Zenject::ZenjectSettings::SignalSettings* Zenject::ZenjectSettings::get_Signals() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::get_Signals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Signals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectSettings::SignalSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings.get_ValidationErrorResponse
Zenject::ValidationErrorResponses Zenject::ZenjectSettings::get_ValidationErrorResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::get_ValidationErrorResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ValidationErrorResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ValidationErrorResponses, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings.get_ValidationRootResolveMethod
Zenject::RootResolveMethods Zenject::ZenjectSettings::get_ValidationRootResolveMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::get_ValidationRootResolveMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ValidationRootResolveMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::RootResolveMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings.get_DisplayWarningWhenResolvingDuringInstall
bool Zenject::ZenjectSettings::get_DisplayWarningWhenResolvingDuringInstall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::get_DisplayWarningWhenResolvingDuringInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayWarningWhenResolvingDuringInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings.get_EnsureDeterministicDestructionOrderOnApplicationQuit
bool Zenject::ZenjectSettings::get_EnsureDeterministicDestructionOrderOnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::get_EnsureDeterministicDestructionOrderOnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnsureDeterministicDestructionOrderOnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings..cctor
void Zenject::ZenjectSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ZenjectSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ZenjectSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::*)(Zenject::ValidationErrorResponses, Zenject::RootResolveMethods, bool, bool, Zenject::ZenjectSettings::SignalSettings*)>(&ZenjectSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ValidationErrorResponses>(), ::il2cpp_utils::ExtractIndependentType<Zenject::RootResolveMethods>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::ZenjectSettings::SignalSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::*)(Zenject::ValidationErrorResponses, Zenject::RootResolveMethods, bool, bool, Zenject::ZenjectSettings::SignalSettings*)>(&ZenjectSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ValidationErrorResponses>(), ::il2cpp_utils::ExtractIndependentType<Zenject::RootResolveMethods>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::ZenjectSettings::SignalSettings*>()});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::get_Signals
// Il2CppName: get_Signals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectSettings::SignalSettings* (ZenjectSettings::*)()>(&ZenjectSettings::get_Signals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), "get_Signals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::get_ValidationErrorResponse
// Il2CppName: get_ValidationErrorResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ValidationErrorResponses (ZenjectSettings::*)()>(&ZenjectSettings::get_ValidationErrorResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), "get_ValidationErrorResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::get_ValidationRootResolveMethod
// Il2CppName: get_ValidationRootResolveMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::RootResolveMethods (ZenjectSettings::*)()>(&ZenjectSettings::get_ValidationRootResolveMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), "get_ValidationRootResolveMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::get_DisplayWarningWhenResolvingDuringInstall
// Il2CppName: get_DisplayWarningWhenResolvingDuringInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ZenjectSettings::*)()>(&ZenjectSettings::get_DisplayWarningWhenResolvingDuringInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), "get_DisplayWarningWhenResolvingDuringInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::get_EnsureDeterministicDestructionOrderOnApplicationQuit
// Il2CppName: get_EnsureDeterministicDestructionOrderOnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ZenjectSettings::*)()>(&ZenjectSettings::get_EnsureDeterministicDestructionOrderOnApplicationQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), "get_EnsureDeterministicDestructionOrderOnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ZenjectSettings::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::*)()>(&ZenjectSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::*)()>(&ZenjectSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectSettings/SignalSettings
#include "Zenject/ZenjectSettings_SignalSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ZenjectSettings/SignalSettings Default
Zenject::ZenjectSettings::SignalSettings* Zenject::ZenjectSettings::SignalSettings::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenjectSettings::SignalSettings*>("Zenject", "ZenjectSettings/SignalSettings", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenjectSettings/SignalSettings Default
void Zenject::ZenjectSettings::SignalSettings::_set_Default(Zenject::ZenjectSettings::SignalSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenjectSettings/SignalSettings", "Default", value));
}
// Autogenerated method: Zenject.ZenjectSettings/SignalSettings.get_DefaultAsyncTickPriority
int Zenject::ZenjectSettings::SignalSettings::get_DefaultAsyncTickPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::get_DefaultAsyncTickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultAsyncTickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings/SignalSettings.get_DefaultSyncMode
Zenject::SignalDefaultSyncModes Zenject::ZenjectSettings::SignalSettings::get_DefaultSyncMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::get_DefaultSyncMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultSyncMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::SignalDefaultSyncModes, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings/SignalSettings.get_MissingHandlerDefaultResponse
Zenject::SignalMissingHandlerResponses Zenject::ZenjectSettings::SignalSettings::get_MissingHandlerDefaultResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::get_MissingHandlerDefaultResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MissingHandlerDefaultResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::SignalMissingHandlerResponses, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings/SignalSettings.get_RequireStrictUnsubscribe
bool Zenject::ZenjectSettings::SignalSettings::get_RequireStrictUnsubscribe() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::get_RequireStrictUnsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequireStrictUnsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ZenjectSettings/SignalSettings..cctor
void Zenject::ZenjectSettings::SignalSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSettings::SignalSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ZenjectSettings/SignalSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::SignalSettings::*)(Zenject::SignalDefaultSyncModes, Zenject::SignalMissingHandlerResponses, bool, int)>(&ZenjectSettings::SignalSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SignalDefaultSyncModes>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SignalMissingHandlerResponses>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::SignalSettings::*)(Zenject::SignalDefaultSyncModes, Zenject::SignalMissingHandlerResponses, bool, int)>(&ZenjectSettings::SignalSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SignalDefaultSyncModes>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SignalMissingHandlerResponses>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::get_DefaultAsyncTickPriority
// Il2CppName: get_DefaultAsyncTickPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::get_DefaultAsyncTickPriority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), "get_DefaultAsyncTickPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::get_DefaultSyncMode
// Il2CppName: get_DefaultSyncMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::SignalDefaultSyncModes (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::get_DefaultSyncMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), "get_DefaultSyncMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::get_MissingHandlerDefaultResponse
// Il2CppName: get_MissingHandlerDefaultResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::SignalMissingHandlerResponses (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::get_MissingHandlerDefaultResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), "get_MissingHandlerDefaultResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::get_RequireStrictUnsubscribe
// Il2CppName: get_RequireStrictUnsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::get_RequireStrictUnsubscribe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), "get_RequireStrictUnsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ZenjectSettings::SignalSettings::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ZenjectSettings::SignalSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectSettings::SignalSettings::*)()>(&ZenjectSettings::SignalSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectSettings::SignalSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NoTransitionContext
#include "Zenject/NoTransitionContext.hpp"
// Including type: Zenject.NoTransitionInstaller
#include "Zenject/NoTransitionInstaller.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.NoTransitionContext.get_installMethod
System::Action_1<Zenject::DiContainer*>* Zenject::NoTransitionContext::get_installMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NoTransitionContext::get_installMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_installMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Action_1<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.NoTransitionContext.get_postInstallMethod
System::Action_1<Zenject::DiContainer*>* Zenject::NoTransitionContext::get_postInstallMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NoTransitionContext::get_postInstallMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postInstallMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Action_1<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.NoTransitionContext.Awake
void Zenject::NoTransitionContext::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NoTransitionContext::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NoTransitionContext::get_installMethod
// Il2CppName: get_installMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Action_1<Zenject::DiContainer*>* (NoTransitionContext::*)()>(&NoTransitionContext::get_installMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionContext*), "get_installMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoTransitionContext::get_postInstallMethod
// Il2CppName: get_postInstallMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Action_1<Zenject::DiContainer*>* (NoTransitionContext::*)()>(&NoTransitionContext::get_postInstallMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionContext*), "get_postInstallMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoTransitionContext::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionContext::*)()>(&NoTransitionContext::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionContext*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoTransitionContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionContext::*)()>(&NoTransitionContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionContext::*)()>(&NoTransitionContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NoTransitionInstaller
#include "Zenject/NoTransitionInstaller.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.NoTransitionInstaller.InstallBindings
void Zenject::NoTransitionInstaller::InstallBindings(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NoTransitionInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.NoTransitionInstaller.PostInstall
void Zenject::NoTransitionInstaller::PostInstall(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NoTransitionInstaller::PostInstall");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: NoTransitionInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionInstaller::*)(Zenject::DiContainer*)>(&NoTransitionInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: NoTransitionInstaller::PostInstall
// Il2CppName: PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionInstaller::*)(Zenject::DiContainer*)>(&NoTransitionInstaller::PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionInstaller*), "PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: NoTransitionInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionInstaller::*)()>(&NoTransitionInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionInstaller::*)()>(&NoTransitionInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.CachedOpenTypeProvider
#include "Zenject/CachedOpenTypeProvider.hpp"
// Including type: Zenject.CachedOpenTypeProvider/<>c
#include "Zenject/CachedOpenTypeProvider_--c.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.CachedProvider
#include "Zenject/CachedProvider.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.CachedOpenTypeProvider.get_IsCached
bool Zenject::CachedOpenTypeProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider.get_TypeVariesBasedOnMemberType
bool Zenject::CachedOpenTypeProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider.get_NumInstances
int Zenject::CachedOpenTypeProvider::get_NumInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::get_NumInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider.ClearCache
void Zenject::CachedOpenTypeProvider::ClearCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::ClearCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider.GetInstanceType
System::Type* Zenject::CachedOpenTypeProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider.GetAllInstancesWithInjectSplit
void Zenject::CachedOpenTypeProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: CachedOpenTypeProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::*)(Zenject::IProvider*)>(&CachedOpenTypeProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::*)(Zenject::IProvider*)>(&CachedOpenTypeProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CachedOpenTypeProvider::*)()>(&CachedOpenTypeProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CachedOpenTypeProvider::*)()>(&CachedOpenTypeProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::get_NumInstances
// Il2CppName: get_NumInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CachedOpenTypeProvider::*)()>(&CachedOpenTypeProvider::get_NumInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "get_NumInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::ClearCache
// Il2CppName: ClearCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::*)()>(&CachedOpenTypeProvider::ClearCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "ClearCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (CachedOpenTypeProvider::*)(Zenject::InjectContext*)>(&CachedOpenTypeProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&CachedOpenTypeProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.CachedOpenTypeProvider/<>c
#include "Zenject/CachedOpenTypeProvider_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.CachedProvider
#include "Zenject/CachedProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.CachedOpenTypeProvider/<>c <>9
Zenject::CachedOpenTypeProvider::$$c* Zenject::CachedOpenTypeProvider::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::CachedOpenTypeProvider::$$c*>("Zenject", "CachedOpenTypeProvider/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.CachedOpenTypeProvider/<>c <>9
void Zenject::CachedOpenTypeProvider::$$c::_set_$$9(Zenject::CachedOpenTypeProvider::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "CachedOpenTypeProvider/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.CachedProvider,System.Int32> <>9__8_0
System::Func_2<Zenject::CachedProvider*, int>* Zenject::CachedOpenTypeProvider::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::CachedProvider*, int>*>("Zenject", "CachedOpenTypeProvider/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.CachedProvider,System.Int32> <>9__8_0
void Zenject::CachedOpenTypeProvider::$$c::_set_$$9__8_0(System::Func_2<Zenject::CachedProvider*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "CachedOpenTypeProvider/<>c", "<>9__8_0", value)));
}
// Autogenerated method: Zenject.CachedOpenTypeProvider/<>c..cctor
void Zenject::CachedOpenTypeProvider::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "CachedOpenTypeProvider/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.CachedOpenTypeProvider/<>c.<get_NumInstances>b__8_0
int Zenject::CachedOpenTypeProvider::$$c::$get_NumInstances$b__8_0(Zenject::CachedProvider* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedOpenTypeProvider::$$c::<get_NumInstances>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_NumInstances>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: CachedOpenTypeProvider::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CachedOpenTypeProvider::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::$$c::$get_NumInstances$b__8_0
// Il2CppName: <get_NumInstances>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CachedOpenTypeProvider::$$c::*)(Zenject::CachedProvider*)>(&CachedOpenTypeProvider::$$c::$get_NumInstances$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider::$$c*), "<get_NumInstances>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::CachedProvider*>()});
  }
};
// Writing MetadataGetter for method: CachedOpenTypeProvider::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::$$c::*)()>(&CachedOpenTypeProvider::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedOpenTypeProvider::$$c::*)()>(&CachedOpenTypeProvider::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedOpenTypeProvider::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.CachedProvider
#include "Zenject/CachedProvider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.CachedProvider.get_IsCached
bool Zenject::CachedProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedProvider.get_TypeVariesBasedOnMemberType
bool Zenject::CachedProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedProvider.get_NumInstances
int Zenject::CachedProvider::get_NumInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::get_NumInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedProvider.ClearCache
void Zenject::CachedProvider::ClearCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::ClearCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CachedProvider.GetInstanceType
System::Type* Zenject::CachedProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.CachedProvider.GetAllInstancesWithInjectSplit
void Zenject::CachedProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CachedProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: CachedProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedProvider::*)(Zenject::IProvider*)>(&CachedProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedProvider::*)(Zenject::IProvider*)>(&CachedProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
// Writing MetadataGetter for method: CachedProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CachedProvider::*)()>(&CachedProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CachedProvider::*)()>(&CachedProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedProvider::get_NumInstances
// Il2CppName: get_NumInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CachedProvider::*)()>(&CachedProvider::get_NumInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "get_NumInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedProvider::ClearCache
// Il2CppName: ClearCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedProvider::*)()>(&CachedProvider::ClearCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "ClearCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CachedProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (CachedProvider::*)(Zenject::InjectContext*)>(&CachedProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: CachedProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CachedProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&CachedProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CachedProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToCurrentGameObjectComponentProvider
#include "Zenject/AddToCurrentGameObjectComponentProvider.hpp"
// Including type: Zenject.AddToCurrentGameObjectComponentProvider/<>c__DisplayClass15_0
#include "Zenject/AddToCurrentGameObjectComponentProvider_--c__DisplayClass15_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.get_IsCached
bool Zenject::AddToCurrentGameObjectComponentProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.get_TypeVariesBasedOnMemberType
bool Zenject::AddToCurrentGameObjectComponentProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.get_Container
Zenject::DiContainer* Zenject::AddToCurrentGameObjectComponentProvider::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.get_ComponentType
System::Type* Zenject::AddToCurrentGameObjectComponentProvider::get_ComponentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::get_ComponentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ComponentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.GetInstanceType
System::Type* Zenject::AddToCurrentGameObjectComponentProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider.GetAllInstancesWithInjectSplit
void Zenject::AddToCurrentGameObjectComponentProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToCurrentGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToCurrentGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToCurrentGameObjectComponentProvider::*)()>(&AddToCurrentGameObjectComponentProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToCurrentGameObjectComponentProvider::*)()>(&AddToCurrentGameObjectComponentProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (AddToCurrentGameObjectComponentProvider::*)()>(&AddToCurrentGameObjectComponentProvider::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::get_ComponentType
// Il2CppName: get_ComponentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (AddToCurrentGameObjectComponentProvider::*)()>(&AddToCurrentGameObjectComponentProvider::get_ComponentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "get_ComponentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (AddToCurrentGameObjectComponentProvider::*)(Zenject::InjectContext*)>(&AddToCurrentGameObjectComponentProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&AddToCurrentGameObjectComponentProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToCurrentGameObjectComponentProvider/<>c__DisplayClass15_0
#include "Zenject/AddToCurrentGameObjectComponentProvider_--c__DisplayClass15_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToCurrentGameObjectComponentProvider/<>c__DisplayClass15_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::$GetAllInstancesWithInjectSplit$b__0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::*)()>(&AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::$GetAllInstancesWithInjectSplit$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0*), "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::*)()>(&AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::*)()>(&AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToCurrentGameObjectComponentProvider::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToExistingGameObjectComponentProvider
#include "Zenject/AddToExistingGameObjectComponentProvider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToExistingGameObjectComponentProvider.get_ShouldToggleActive
bool Zenject::AddToExistingGameObjectComponentProvider::get_ShouldToggleActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToExistingGameObjectComponentProvider::get_ShouldToggleActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldToggleActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToExistingGameObjectComponentProvider.GetGameObject
UnityEngine::GameObject* Zenject::AddToExistingGameObjectComponentProvider::GetGameObject(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToExistingGameObjectComponentProvider::GetGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToExistingGameObjectComponentProvider::*)(UnityEngine::GameObject*, Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToExistingGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToExistingGameObjectComponentProvider::*)(UnityEngine::GameObject*, Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToExistingGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProvider::get_ShouldToggleActive
// Il2CppName: get_ShouldToggleActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToExistingGameObjectComponentProvider::*)()>(&AddToExistingGameObjectComponentProvider::get_ShouldToggleActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProvider*), "get_ShouldToggleActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProvider::GetGameObject
// Il2CppName: GetGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (AddToExistingGameObjectComponentProvider::*)(Zenject::InjectContext*)>(&AddToExistingGameObjectComponentProvider::GetGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProvider*), "GetGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToExistingGameObjectComponentProviderGetter
#include "Zenject/AddToExistingGameObjectComponentProviderGetter.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToExistingGameObjectComponentProviderGetter.get_ShouldToggleActive
bool Zenject::AddToExistingGameObjectComponentProviderGetter::get_ShouldToggleActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToExistingGameObjectComponentProviderGetter::get_ShouldToggleActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldToggleActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToExistingGameObjectComponentProviderGetter.GetGameObject
UnityEngine::GameObject* Zenject::AddToExistingGameObjectComponentProviderGetter::GetGameObject(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToExistingGameObjectComponentProviderGetter::GetGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProviderGetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToExistingGameObjectComponentProviderGetter::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*, Zenject::DiContainer*, System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToExistingGameObjectComponentProviderGetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProviderGetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToExistingGameObjectComponentProviderGetter::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*, Zenject::DiContainer*, System::Type*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToExistingGameObjectComponentProviderGetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProviderGetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProviderGetter::get_ShouldToggleActive
// Il2CppName: get_ShouldToggleActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToExistingGameObjectComponentProviderGetter::*)()>(&AddToExistingGameObjectComponentProviderGetter::get_ShouldToggleActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProviderGetter*), "get_ShouldToggleActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToExistingGameObjectComponentProviderGetter::GetGameObject
// Il2CppName: GetGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (AddToExistingGameObjectComponentProviderGetter::*)(Zenject::InjectContext*)>(&AddToExistingGameObjectComponentProviderGetter::GetGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToExistingGameObjectComponentProviderGetter*), "GetGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToGameObjectComponentProviderBase
#include "Zenject/AddToGameObjectComponentProviderBase.hpp"
// Including type: Zenject.AddToGameObjectComponentProviderBase/<>c__DisplayClass17_0
#include "Zenject/AddToGameObjectComponentProviderBase_--c__DisplayClass17_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.get_IsCached
bool Zenject::AddToGameObjectComponentProviderBase::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.get_TypeVariesBasedOnMemberType
bool Zenject::AddToGameObjectComponentProviderBase::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.get_Container
Zenject::DiContainer* Zenject::AddToGameObjectComponentProviderBase::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.get_ComponentType
System::Type* Zenject::AddToGameObjectComponentProviderBase::get_ComponentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::get_ComponentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ComponentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.get_ShouldToggleActive
bool Zenject::AddToGameObjectComponentProviderBase::get_ShouldToggleActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::get_ShouldToggleActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldToggleActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.GetInstanceType
System::Type* Zenject::AddToGameObjectComponentProviderBase::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.GetAllInstancesWithInjectSplit
void Zenject::AddToGameObjectComponentProviderBase::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase.GetGameObject
UnityEngine::GameObject* Zenject::AddToGameObjectComponentProviderBase::GetGameObject(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::GetGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToGameObjectComponentProviderBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToGameObjectComponentProviderBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToGameObjectComponentProviderBase::*)()>(&AddToGameObjectComponentProviderBase::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToGameObjectComponentProviderBase::*)()>(&AddToGameObjectComponentProviderBase::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (AddToGameObjectComponentProviderBase::*)()>(&AddToGameObjectComponentProviderBase::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::get_ComponentType
// Il2CppName: get_ComponentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (AddToGameObjectComponentProviderBase::*)()>(&AddToGameObjectComponentProviderBase::get_ComponentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "get_ComponentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::get_ShouldToggleActive
// Il2CppName: get_ShouldToggleActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToGameObjectComponentProviderBase::*)()>(&AddToGameObjectComponentProviderBase::get_ShouldToggleActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "get_ShouldToggleActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (AddToGameObjectComponentProviderBase::*)(Zenject::InjectContext*)>(&AddToGameObjectComponentProviderBase::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&AddToGameObjectComponentProviderBase::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::GetGameObject
// Il2CppName: GetGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (AddToGameObjectComponentProviderBase::*)(Zenject::InjectContext*)>(&AddToGameObjectComponentProviderBase::GetGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase*), "GetGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToGameObjectComponentProviderBase/<>c__DisplayClass17_0
#include "Zenject/AddToGameObjectComponentProviderBase_--c__DisplayClass17_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToGameObjectComponentProviderBase/<>c__DisplayClass17_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::$GetAllInstancesWithInjectSplit$b__0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::*)()>(&AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::$GetAllInstancesWithInjectSplit$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0*), "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::*)()>(&AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::*)()>(&AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToGameObjectComponentProviderBase::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AddToNewGameObjectComponentProvider
#include "Zenject/AddToNewGameObjectComponentProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.AddToNewGameObjectComponentProvider.get_ShouldToggleActive
bool Zenject::AddToNewGameObjectComponentProvider::get_ShouldToggleActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToNewGameObjectComponentProvider::get_ShouldToggleActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldToggleActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AddToNewGameObjectComponentProvider.GetGameObject
UnityEngine::GameObject* Zenject::AddToNewGameObjectComponentProvider::GetGameObject(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AddToNewGameObjectComponentProvider::GetGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: AddToNewGameObjectComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToNewGameObjectComponentProvider::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, Zenject::GameObjectCreationParameters*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToNewGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToNewGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddToNewGameObjectComponentProvider::*)(Zenject::DiContainer*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, Zenject::GameObjectCreationParameters*, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&AddToNewGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToNewGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: AddToNewGameObjectComponentProvider::get_ShouldToggleActive
// Il2CppName: get_ShouldToggleActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AddToNewGameObjectComponentProvider::*)()>(&AddToNewGameObjectComponentProvider::get_ShouldToggleActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToNewGameObjectComponentProvider*), "get_ShouldToggleActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AddToNewGameObjectComponentProvider::GetGameObject
// Il2CppName: GetGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (AddToNewGameObjectComponentProvider::*)(Zenject::InjectContext*)>(&AddToNewGameObjectComponentProvider::GetGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddToNewGameObjectComponentProvider*), "GetGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GetFromGameObjectComponentProvider
#include "Zenject/GetFromGameObjectComponentProvider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.GetFromGameObjectComponentProvider.get_IsCached
bool Zenject::GetFromGameObjectComponentProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectComponentProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromGameObjectComponentProvider.get_TypeVariesBasedOnMemberType
bool Zenject::GetFromGameObjectComponentProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectComponentProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromGameObjectComponentProvider.GetInstanceType
System::Type* Zenject::GetFromGameObjectComponentProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectComponentProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.GetFromGameObjectComponentProvider.GetAllInstancesWithInjectSplit
void Zenject::GetFromGameObjectComponentProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectComponentProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: GetFromGameObjectComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectComponentProvider::*)(System::Type*, UnityEngine::GameObject*, bool)>(&GetFromGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectComponentProvider::*)(System::Type*, UnityEngine::GameObject*, bool)>(&GetFromGameObjectComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectComponentProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromGameObjectComponentProvider::*)()>(&GetFromGameObjectComponentProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectComponentProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromGameObjectComponentProvider::*)()>(&GetFromGameObjectComponentProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectComponentProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GetFromGameObjectComponentProvider::*)(Zenject::InjectContext*)>(&GetFromGameObjectComponentProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectComponentProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectComponentProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&GetFromGameObjectComponentProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectComponentProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GetFromGameObjectGetterComponentProvider
#include "Zenject/GetFromGameObjectGetterComponentProvider.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.GetFromGameObjectGetterComponentProvider.get_IsCached
bool Zenject::GetFromGameObjectGetterComponentProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectGetterComponentProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromGameObjectGetterComponentProvider.get_TypeVariesBasedOnMemberType
bool Zenject::GetFromGameObjectGetterComponentProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectGetterComponentProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromGameObjectGetterComponentProvider.GetInstanceType
System::Type* Zenject::GetFromGameObjectGetterComponentProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectGetterComponentProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.GetFromGameObjectGetterComponentProvider.GetAllInstancesWithInjectSplit
void Zenject::GetFromGameObjectGetterComponentProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromGameObjectGetterComponentProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: GetFromGameObjectGetterComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectGetterComponentProvider::*)(System::Type*, System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*, bool)>(&GetFromGameObjectGetterComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectGetterComponentProvider::*)(System::Type*, System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*, bool)>(&GetFromGameObjectGetterComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectGetterComponentProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromGameObjectGetterComponentProvider::*)()>(&GetFromGameObjectGetterComponentProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectGetterComponentProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromGameObjectGetterComponentProvider::*)()>(&GetFromGameObjectGetterComponentProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectGetterComponentProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GetFromGameObjectGetterComponentProvider::*)(Zenject::InjectContext*)>(&GetFromGameObjectGetterComponentProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: GetFromGameObjectGetterComponentProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromGameObjectGetterComponentProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&GetFromGameObjectGetterComponentProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromGameObjectGetterComponentProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GetFromPrefabComponentProvider
#include "Zenject/GetFromPrefabComponentProvider.hpp"
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.GetFromPrefabComponentProvider.get_IsCached
bool Zenject::GetFromPrefabComponentProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromPrefabComponentProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromPrefabComponentProvider.get_TypeVariesBasedOnMemberType
bool Zenject::GetFromPrefabComponentProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromPrefabComponentProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GetFromPrefabComponentProvider.GetInstanceType
System::Type* Zenject::GetFromPrefabComponentProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromPrefabComponentProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.GetFromPrefabComponentProvider.GetAllInstancesWithInjectSplit
void Zenject::GetFromPrefabComponentProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GetFromPrefabComponentProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: GetFromPrefabComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromPrefabComponentProvider::*)(System::Type*, Zenject::IPrefabInstantiator*, bool)>(&GetFromPrefabComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromPrefabComponentProvider::*)(System::Type*, Zenject::IPrefabInstantiator*, bool)>(&GetFromPrefabComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GetFromPrefabComponentProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromPrefabComponentProvider::*)()>(&GetFromPrefabComponentProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromPrefabComponentProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GetFromPrefabComponentProvider::*)()>(&GetFromPrefabComponentProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GetFromPrefabComponentProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GetFromPrefabComponentProvider::*)(Zenject::InjectContext*)>(&GetFromPrefabComponentProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: GetFromPrefabComponentProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetFromPrefabComponentProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&GetFromPrefabComponentProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetFromPrefabComponentProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InstantiateOnPrefabComponentProvider
#include "Zenject/InstantiateOnPrefabComponentProvider.hpp"
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InstantiateOnPrefabComponentProvider.get_IsCached
bool Zenject::InstantiateOnPrefabComponentProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstantiateOnPrefabComponentProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstantiateOnPrefabComponentProvider.get_TypeVariesBasedOnMemberType
bool Zenject::InstantiateOnPrefabComponentProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstantiateOnPrefabComponentProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstantiateOnPrefabComponentProvider.GetInstanceType
System::Type* Zenject::InstantiateOnPrefabComponentProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstantiateOnPrefabComponentProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.InstantiateOnPrefabComponentProvider.GetAllInstancesWithInjectSplit
void Zenject::InstantiateOnPrefabComponentProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstantiateOnPrefabComponentProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: InstantiateOnPrefabComponentProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiateOnPrefabComponentProvider::*)(System::Type*, Zenject::IPrefabInstantiator*)>(&InstantiateOnPrefabComponentProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiateOnPrefabComponentProvider::*)(System::Type*, Zenject::IPrefabInstantiator*)>(&InstantiateOnPrefabComponentProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
// Writing MetadataGetter for method: InstantiateOnPrefabComponentProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InstantiateOnPrefabComponentProvider::*)()>(&InstantiateOnPrefabComponentProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstantiateOnPrefabComponentProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InstantiateOnPrefabComponentProvider::*)()>(&InstantiateOnPrefabComponentProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstantiateOnPrefabComponentProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (InstantiateOnPrefabComponentProvider::*)(Zenject::InjectContext*)>(&InstantiateOnPrefabComponentProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: InstantiateOnPrefabComponentProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiateOnPrefabComponentProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&InstantiateOnPrefabComponentProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiateOnPrefabComponentProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.EmptyGameObjectProvider
#include "Zenject/EmptyGameObjectProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.EmptyGameObjectProvider.get_IsCached
bool Zenject::EmptyGameObjectProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::EmptyGameObjectProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.EmptyGameObjectProvider.get_TypeVariesBasedOnMemberType
bool Zenject::EmptyGameObjectProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::EmptyGameObjectProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.EmptyGameObjectProvider.GetInstanceType
System::Type* Zenject::EmptyGameObjectProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::EmptyGameObjectProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.EmptyGameObjectProvider.GetAllInstancesWithInjectSplit
void Zenject::EmptyGameObjectProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::EmptyGameObjectProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: EmptyGameObjectProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyGameObjectProvider::*)(Zenject::DiContainer*, Zenject::GameObjectCreationParameters*)>(&EmptyGameObjectProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyGameObjectProvider::*)(Zenject::DiContainer*, Zenject::GameObjectCreationParameters*)>(&EmptyGameObjectProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: EmptyGameObjectProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EmptyGameObjectProvider::*)()>(&EmptyGameObjectProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyGameObjectProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EmptyGameObjectProvider::*)()>(&EmptyGameObjectProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyGameObjectProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (EmptyGameObjectProvider::*)(Zenject::InjectContext*)>(&EmptyGameObjectProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: EmptyGameObjectProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyGameObjectProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&EmptyGameObjectProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyGameObjectProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PrefabGameObjectProvider
#include "Zenject/PrefabGameObjectProvider.hpp"
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabGameObjectProvider.get_IsCached
bool Zenject::PrefabGameObjectProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabGameObjectProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabGameObjectProvider.get_TypeVariesBasedOnMemberType
bool Zenject::PrefabGameObjectProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabGameObjectProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabGameObjectProvider.GetInstanceType
System::Type* Zenject::PrefabGameObjectProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabGameObjectProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.PrefabGameObjectProvider.GetAllInstancesWithInjectSplit
void Zenject::PrefabGameObjectProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabGameObjectProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: PrefabGameObjectProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabGameObjectProvider::*)(Zenject::IPrefabInstantiator*)>(&PrefabGameObjectProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabGameObjectProvider::*)(Zenject::IPrefabInstantiator*)>(&PrefabGameObjectProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
// Writing MetadataGetter for method: PrefabGameObjectProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PrefabGameObjectProvider::*)()>(&PrefabGameObjectProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabGameObjectProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PrefabGameObjectProvider::*)()>(&PrefabGameObjectProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabGameObjectProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PrefabGameObjectProvider::*)(Zenject::InjectContext*)>(&PrefabGameObjectProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: PrefabGameObjectProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabGameObjectProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&PrefabGameObjectProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabGameObjectProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IProvider.get_TypeVariesBasedOnMemberType
bool Zenject::IProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IProvider.get_IsCached
bool Zenject::IProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IProvider.GetInstanceType
System::Type* Zenject::IProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.IProvider.GetAllInstancesWithInjectSplit
void Zenject::IProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(instances)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, instances);
}
// Writing MetadataGetter for method: IProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IProvider::*)()>(&IProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IProvider::*)()>(&IProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (IProvider::*)(Zenject::InjectContext*)>(&IProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: IProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&IProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IProviderExtensions
#include "Zenject/IProviderExtensions.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> EmptyArgList
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::IProviderExtensions::_get_EmptyArgList() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::_get_EmptyArgList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>("Zenject", "IProviderExtensions", "EmptyArgList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> EmptyArgList
void Zenject::IProviderExtensions::_set_EmptyArgList(System::Collections::Generic::List_1<Zenject::TypeValuePair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::_set_EmptyArgList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "IProviderExtensions", "EmptyArgList", value));
}
// Autogenerated method: Zenject.IProviderExtensions.GetAllInstancesWithInjectSplit
void Zenject::IProviderExtensions::GetAllInstancesWithInjectSplit(Zenject::IProvider* creator, Zenject::InjectContext* context, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::GetAllInstancesWithInjectSplit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context, injectAction, buffer);
}
// Autogenerated method: Zenject.IProviderExtensions.GetAllInstances
void Zenject::IProviderExtensions::GetAllInstances(Zenject::IProvider* creator, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::GetAllInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "GetAllInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context, buffer);
}
// Autogenerated method: Zenject.IProviderExtensions.GetAllInstances
void Zenject::IProviderExtensions::GetAllInstances(Zenject::IProvider* creator, Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::GetAllInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "GetAllInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context, args, buffer);
}
// Autogenerated method: Zenject.IProviderExtensions.TryGetInstance
::Il2CppObject* Zenject::IProviderExtensions::TryGetInstance(Zenject::IProvider* creator, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::TryGetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "TryGetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context);
}
// Autogenerated method: Zenject.IProviderExtensions.TryGetInstance
::Il2CppObject* Zenject::IProviderExtensions::TryGetInstance(Zenject::IProvider* creator, Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::TryGetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "TryGetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context, args);
}
// Autogenerated method: Zenject.IProviderExtensions.GetInstance
::Il2CppObject* Zenject::IProviderExtensions::GetInstance(Zenject::IProvider* creator, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::GetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "GetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context);
}
// Autogenerated method: Zenject.IProviderExtensions.GetInstance
::Il2CppObject* Zenject::IProviderExtensions::GetInstance(Zenject::IProvider* creator, Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::GetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", "GetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator, context, args);
}
// Autogenerated method: Zenject.IProviderExtensions..cctor
void Zenject::IProviderExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IProviderExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "IProviderExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: IProviderExtensions::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Zenject::IProvider*, Zenject::InjectContext*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&IProviderExtensions::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::GetAllInstances
// Il2CppName: GetAllInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Zenject::IProvider*, Zenject::InjectContext*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&IProviderExtensions::GetAllInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "GetAllInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::GetAllInstances
// Il2CppName: GetAllInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Zenject::IProvider*, Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&IProviderExtensions::GetAllInstances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "GetAllInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::TryGetInstance
// Il2CppName: TryGetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(Zenject::IProvider*, Zenject::InjectContext*)>(&IProviderExtensions::TryGetInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "TryGetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::TryGetInstance
// Il2CppName: TryGetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(Zenject::IProvider*, Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&IProviderExtensions::TryGetInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "TryGetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(Zenject::IProvider*, Zenject::InjectContext*)>(&IProviderExtensions::GetInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(Zenject::IProvider*, Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&IProviderExtensions::GetInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: IProviderExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&IProviderExtensions::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IProviderExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InstanceProvider
#include "Zenject/InstanceProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InstanceProvider.get_IsCached
bool Zenject::InstanceProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstanceProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstanceProvider.get_TypeVariesBasedOnMemberType
bool Zenject::InstanceProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstanceProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstanceProvider.GetInstanceType
System::Type* Zenject::InstanceProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstanceProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.InstanceProvider.GetAllInstancesWithInjectSplit
void Zenject::InstanceProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstanceProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Autogenerated method: Zenject.InstanceProvider.<GetAllInstancesWithInjectSplit>b__9_0
void Zenject::InstanceProvider::$GetAllInstancesWithInjectSplit$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstanceProvider::<GetAllInstancesWithInjectSplit>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InstanceProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstanceProvider::*)(System::Type*, ::Il2CppObject*, Zenject::DiContainer*)>(&InstanceProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstanceProvider::*)(System::Type*, ::Il2CppObject*, Zenject::DiContainer*)>(&InstanceProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: InstanceProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InstanceProvider::*)()>(&InstanceProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstanceProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InstanceProvider::*)()>(&InstanceProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstanceProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (InstanceProvider::*)(Zenject::InjectContext*)>(&InstanceProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: InstanceProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstanceProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&InstanceProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: InstanceProvider::$GetAllInstancesWithInjectSplit$b__9_0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstanceProvider::*)()>(&InstanceProvider::$GetAllInstancesWithInjectSplit$b__9_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstanceProvider*), "<GetAllInstancesWithInjectSplit>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MethodMultipleProviderUntyped
#include "Zenject/MethodMultipleProviderUntyped.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.MethodMultipleProviderUntyped.get_IsCached
bool Zenject::MethodMultipleProviderUntyped::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodMultipleProviderUntyped::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MethodMultipleProviderUntyped.get_TypeVariesBasedOnMemberType
bool Zenject::MethodMultipleProviderUntyped::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodMultipleProviderUntyped::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MethodMultipleProviderUntyped.GetInstanceType
System::Type* Zenject::MethodMultipleProviderUntyped::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodMultipleProviderUntyped::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.MethodMultipleProviderUntyped.GetAllInstancesWithInjectSplit
void Zenject::MethodMultipleProviderUntyped::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodMultipleProviderUntyped::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: MethodMultipleProviderUntyped::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodMultipleProviderUntyped::*)(System::Func_2<Zenject::InjectContext*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>*, Zenject::DiContainer*)>(&MethodMultipleProviderUntyped::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodMultipleProviderUntyped::*)(System::Func_2<Zenject::InjectContext*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>*, Zenject::DiContainer*)>(&MethodMultipleProviderUntyped::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: MethodMultipleProviderUntyped::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MethodMultipleProviderUntyped::*)()>(&MethodMultipleProviderUntyped::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodMultipleProviderUntyped::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MethodMultipleProviderUntyped::*)()>(&MethodMultipleProviderUntyped::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodMultipleProviderUntyped::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MethodMultipleProviderUntyped::*)(Zenject::InjectContext*)>(&MethodMultipleProviderUntyped::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: MethodMultipleProviderUntyped::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodMultipleProviderUntyped::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&MethodMultipleProviderUntyped::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodMultipleProviderUntyped*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MethodProviderUntyped
#include "Zenject/MethodProviderUntyped.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.MethodProviderUntyped.get_IsCached
bool Zenject::MethodProviderUntyped::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodProviderUntyped::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MethodProviderUntyped.get_TypeVariesBasedOnMemberType
bool Zenject::MethodProviderUntyped::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodProviderUntyped::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MethodProviderUntyped.GetInstanceType
System::Type* Zenject::MethodProviderUntyped::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodProviderUntyped::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.MethodProviderUntyped.GetAllInstancesWithInjectSplit
void Zenject::MethodProviderUntyped::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MethodProviderUntyped::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: MethodProviderUntyped::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodProviderUntyped::*)(System::Func_2<Zenject::InjectContext*, ::Il2CppObject*>*, Zenject::DiContainer*)>(&MethodProviderUntyped::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, ::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodProviderUntyped::*)(System::Func_2<Zenject::InjectContext*, ::Il2CppObject*>*, Zenject::DiContainer*)>(&MethodProviderUntyped::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, ::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: MethodProviderUntyped::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MethodProviderUntyped::*)()>(&MethodProviderUntyped::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodProviderUntyped::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MethodProviderUntyped::*)()>(&MethodProviderUntyped::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodProviderUntyped::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MethodProviderUntyped::*)(Zenject::InjectContext*)>(&MethodProviderUntyped::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: MethodProviderUntyped::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodProviderUntyped::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&MethodProviderUntyped::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodProviderUntyped*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IPrefabInstantiator.get_ArgumentTarget
System::Type* Zenject::IPrefabInstantiator::get_ArgumentTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabInstantiator::get_ArgumentTarget");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArgumentTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IPrefabInstantiator.get_ExtraArguments
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::IPrefabInstantiator::get_ExtraArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabInstantiator::get_ExtraArguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtraArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IPrefabInstantiator.get_GameObjectCreationParameters
Zenject::GameObjectCreationParameters* Zenject::IPrefabInstantiator::get_GameObjectCreationParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabInstantiator::get_GameObjectCreationParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GameObjectCreationParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::GameObjectCreationParameters*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IPrefabInstantiator.Instantiate
UnityEngine::GameObject* Zenject::IPrefabInstantiator::Instantiate(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabInstantiator::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context, args, injectAction);
}
// Autogenerated method: Zenject.IPrefabInstantiator.GetPrefab
UnityEngine::Object* Zenject::IPrefabInstantiator::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabInstantiator::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPrefabInstantiator::get_ArgumentTarget
// Il2CppName: get_ArgumentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (IPrefabInstantiator::*)()>(&IPrefabInstantiator::get_ArgumentTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabInstantiator*), "get_ArgumentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPrefabInstantiator::get_ExtraArguments
// Il2CppName: get_ExtraArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>* (IPrefabInstantiator::*)()>(&IPrefabInstantiator::get_ExtraArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabInstantiator*), "get_ExtraArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPrefabInstantiator::get_GameObjectCreationParameters
// Il2CppName: get_GameObjectCreationParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::GameObjectCreationParameters* (IPrefabInstantiator::*)()>(&IPrefabInstantiator::get_GameObjectCreationParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabInstantiator*), "get_GameObjectCreationParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPrefabInstantiator::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (IPrefabInstantiator::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&)>(&IPrefabInstantiator::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabInstantiator*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()});
  }
};
// Writing MetadataGetter for method: IPrefabInstantiator::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (IPrefabInstantiator::*)()>(&IPrefabInstantiator::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabInstantiator*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PrefabInstantiator
#include "Zenject/PrefabInstantiator.hpp"
// Including type: Zenject.PrefabInstantiator/<>c__DisplayClass15_0
#include "Zenject/PrefabInstantiator_--c__DisplayClass15_0.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabInstantiator.get_GameObjectCreationParameters
Zenject::GameObjectCreationParameters* Zenject::PrefabInstantiator::get_GameObjectCreationParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::get_GameObjectCreationParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GameObjectCreationParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::GameObjectCreationParameters*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiator.get_ArgumentTarget
System::Type* Zenject::PrefabInstantiator::get_ArgumentTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::get_ArgumentTarget");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArgumentTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiator.get_ExtraArguments
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::PrefabInstantiator::get_ExtraArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::get_ExtraArguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtraArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiator.GetPrefab
UnityEngine::Object* Zenject::PrefabInstantiator::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiator.Instantiate
UnityEngine::GameObject* Zenject::PrefabInstantiator::Instantiate(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context, args, injectAction);
}
// Writing MetadataGetter for method: PrefabInstantiator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiator::*)(Zenject::DiContainer*, Zenject::GameObjectCreationParameters*, System::Type*, System::Collections::Generic::IEnumerable_1<System::Type*>*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, Zenject::IPrefabProvider*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&PrefabInstantiator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabProvider*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiator::*)(Zenject::DiContainer*, Zenject::GameObjectCreationParameters*, System::Type*, System::Collections::Generic::IEnumerable_1<System::Type*>*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, Zenject::IPrefabProvider*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&PrefabInstantiator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabProvider*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::get_GameObjectCreationParameters
// Il2CppName: get_GameObjectCreationParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::GameObjectCreationParameters* (PrefabInstantiator::*)()>(&PrefabInstantiator::get_GameObjectCreationParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), "get_GameObjectCreationParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::get_ArgumentTarget
// Il2CppName: get_ArgumentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PrefabInstantiator::*)()>(&PrefabInstantiator::get_ArgumentTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), "get_ArgumentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::get_ExtraArguments
// Il2CppName: get_ExtraArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>* (PrefabInstantiator::*)()>(&PrefabInstantiator::get_ExtraArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), "get_ExtraArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (PrefabInstantiator::*)()>(&PrefabInstantiator::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (PrefabInstantiator::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&)>(&PrefabInstantiator::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabInstantiator/<>c__DisplayClass15_0
#include "Zenject/PrefabInstantiator_--c__DisplayClass15_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabInstantiator/<>c__DisplayClass15_0.<Instantiate>b__0
void Zenject::PrefabInstantiator::$$c__DisplayClass15_0::$Instantiate$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiator::$$c__DisplayClass15_0::<Instantiate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Instantiate>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PrefabInstantiator::$$c__DisplayClass15_0::$Instantiate$b__0
// Il2CppName: <Instantiate>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiator::$$c__DisplayClass15_0::*)()>(&PrefabInstantiator::$$c__DisplayClass15_0::$Instantiate$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator::$$c__DisplayClass15_0*), "<Instantiate>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiator::$$c__DisplayClass15_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiator::$$c__DisplayClass15_0::*)()>(&PrefabInstantiator::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiator::$$c__DisplayClass15_0::*)()>(&PrefabInstantiator::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiator::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabInstantiatorCached
#include "Zenject/PrefabInstantiatorCached.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabInstantiatorCached.get_ExtraArguments
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::PrefabInstantiatorCached::get_ExtraArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiatorCached::get_ExtraArguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtraArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiatorCached.get_ArgumentTarget
System::Type* Zenject::PrefabInstantiatorCached::get_ArgumentTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiatorCached::get_ArgumentTarget");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArgumentTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiatorCached.get_GameObjectCreationParameters
Zenject::GameObjectCreationParameters* Zenject::PrefabInstantiatorCached::get_GameObjectCreationParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiatorCached::get_GameObjectCreationParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GameObjectCreationParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::GameObjectCreationParameters*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiatorCached.GetPrefab
UnityEngine::Object* Zenject::PrefabInstantiatorCached::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiatorCached::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PrefabInstantiatorCached.Instantiate
UnityEngine::GameObject* Zenject::PrefabInstantiatorCached::Instantiate(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabInstantiatorCached::Instantiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, context, args, injectAction);
}
// Writing MetadataGetter for method: PrefabInstantiatorCached::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiatorCached::*)(Zenject::IPrefabInstantiator*)>(&PrefabInstantiatorCached::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabInstantiatorCached::*)(Zenject::IPrefabInstantiator*)>(&PrefabInstantiatorCached::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IPrefabInstantiator*>()});
  }
};
// Writing MetadataGetter for method: PrefabInstantiatorCached::get_ExtraArguments
// Il2CppName: get_ExtraArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>* (PrefabInstantiatorCached::*)()>(&PrefabInstantiatorCached::get_ExtraArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), "get_ExtraArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiatorCached::get_ArgumentTarget
// Il2CppName: get_ArgumentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PrefabInstantiatorCached::*)()>(&PrefabInstantiatorCached::get_ArgumentTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), "get_ArgumentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiatorCached::get_GameObjectCreationParameters
// Il2CppName: get_GameObjectCreationParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::GameObjectCreationParameters* (PrefabInstantiatorCached::*)()>(&PrefabInstantiatorCached::get_GameObjectCreationParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), "get_GameObjectCreationParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiatorCached::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (PrefabInstantiatorCached::*)()>(&PrefabInstantiatorCached::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrefabInstantiatorCached::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (PrefabInstantiatorCached::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&)>(&PrefabInstantiatorCached::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabInstantiatorCached*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IPrefabProvider.GetPrefab
UnityEngine::Object* Zenject::IPrefabProvider::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPrefabProvider::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPrefabProvider::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (IPrefabProvider::*)()>(&IPrefabProvider::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPrefabProvider*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabProvider
#include "Zenject/PrefabProvider.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabProvider.GetPrefab
UnityEngine::Object* Zenject::PrefabProvider::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabProvider::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PrefabProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabProvider::*)(UnityEngine::Object*)>(&PrefabProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabProvider::*)(UnityEngine::Object*)>(&PrefabProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: PrefabProvider::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (PrefabProvider::*)()>(&PrefabProvider::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProvider*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PrefabProviderResource
#include "Zenject/PrefabProviderResource.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabProviderResource.GetPrefab
UnityEngine::Object* Zenject::PrefabProviderResource::GetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabProviderResource::GetPrefab");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PrefabProviderResource::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabProviderResource::*)(::Il2CppString*)>(&PrefabProviderResource::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProviderResource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabProviderResource::*)(::Il2CppString*)>(&PrefabProviderResource::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProviderResource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PrefabProviderResource::GetPrefab
// Il2CppName: GetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (PrefabProviderResource::*)()>(&PrefabProviderResource::GetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabProviderResource*), "GetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ProviderUtil
#include "Zenject/ProviderUtil.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ProviderUtil.GetTypeToInstantiate
System::Type* Zenject::ProviderUtil::GetTypeToInstantiate(System::Type* contractType, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderUtil::GetTypeToInstantiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProviderUtil", "GetTypeToInstantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, contractType, concreteType);
}
// Writing MetadataGetter for method: ProviderUtil::GetTypeToInstantiate
// Il2CppName: GetTypeToInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::Type*, System::Type*)>(&ProviderUtil::GetTypeToInstantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderUtil*), "GetTypeToInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ResolveProvider
#include "Zenject/ResolveProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ResolveProvider.get_IsCached
bool Zenject::ResolveProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ResolveProvider.get_TypeVariesBasedOnMemberType
bool Zenject::ResolveProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ResolveProvider.GetInstanceType
System::Type* Zenject::ResolveProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.ResolveProvider.GetAllInstancesWithInjectSplit
void Zenject::ResolveProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Autogenerated method: Zenject.ResolveProvider.GetSubContext
Zenject::InjectContext* Zenject::ResolveProvider::GetSubContext(Zenject::InjectContext* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::GetSubContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSubContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method, parent);
}
// Writing MetadataGetter for method: ResolveProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResolveProvider::*)(System::Type*, Zenject::DiContainer*, ::Il2CppObject*, bool, Zenject::InjectSources, bool)>(&ResolveProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResolveProvider::*)(System::Type*, Zenject::DiContainer*, ::Il2CppObject*, bool, Zenject::InjectSources, bool)>(&ResolveProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResolveProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResolveProvider::*)()>(&ResolveProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResolveProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResolveProvider::*)()>(&ResolveProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResolveProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ResolveProvider::*)(Zenject::InjectContext*)>(&ResolveProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ResolveProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResolveProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ResolveProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ResolveProvider::GetSubContext
// Il2CppName: GetSubContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (ResolveProvider::*)(Zenject::InjectContext*)>(&ResolveProvider::GetSubContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResolveProvider*), "GetSubContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ResourceProvider
#include "Zenject/ResourceProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ResourceProvider.get_IsCached
bool Zenject::ResourceProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResourceProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ResourceProvider.get_TypeVariesBasedOnMemberType
bool Zenject::ResourceProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResourceProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ResourceProvider.GetInstanceType
System::Type* Zenject::ResourceProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResourceProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.ResourceProvider.GetAllInstancesWithInjectSplit
void Zenject::ResourceProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResourceProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: ResourceProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceProvider::*)(::Il2CppString*, System::Type*, bool)>(&ResourceProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceProvider::*)(::Il2CppString*, System::Type*, bool)>(&ResourceProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResourceProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResourceProvider::*)()>(&ResourceProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResourceProvider::*)()>(&ResourceProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ResourceProvider::*)(Zenject::InjectContext*)>(&ResourceProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ResourceProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ResourceProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScriptableObjectInstanceProvider
#include "Zenject/ScriptableObjectInstanceProvider.hpp"
// Including type: Zenject.ScriptableObjectInstanceProvider/<>c__DisplayClass13_0
#include "Zenject/ScriptableObjectInstanceProvider_--c__DisplayClass13_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScriptableObjectInstanceProvider.get_IsCached
bool Zenject::ScriptableObjectInstanceProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstanceProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectInstanceProvider.get_TypeVariesBasedOnMemberType
bool Zenject::ScriptableObjectInstanceProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstanceProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectInstanceProvider.GetInstanceType
System::Type* Zenject::ScriptableObjectInstanceProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstanceProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.ScriptableObjectInstanceProvider.GetAllInstancesWithInjectSplit
void Zenject::ScriptableObjectInstanceProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstanceProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::*)(UnityEngine::Object*, System::Type*, Zenject::DiContainer*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, bool, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&ScriptableObjectInstanceProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::*)(UnityEngine::Object*, System::Type*, Zenject::DiContainer*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, bool, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&ScriptableObjectInstanceProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableObjectInstanceProvider::*)()>(&ScriptableObjectInstanceProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableObjectInstanceProvider::*)()>(&ScriptableObjectInstanceProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ScriptableObjectInstanceProvider::*)(Zenject::InjectContext*)>(&ScriptableObjectInstanceProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ScriptableObjectInstanceProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScriptableObjectInstanceProvider/<>c__DisplayClass13_0
#include "Zenject/ScriptableObjectInstanceProvider_--c__DisplayClass13_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScriptableObjectInstanceProvider/<>c__DisplayClass13_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider::$$c__DisplayClass13_0*), "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectInstanceProvider::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectInstanceProvider::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScriptableObjectResourceProvider
#include "Zenject/ScriptableObjectResourceProvider.hpp"
// Including type: Zenject.ScriptableObjectResourceProvider/<>c__DisplayClass13_0
#include "Zenject/ScriptableObjectResourceProvider_--c__DisplayClass13_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScriptableObjectResourceProvider.get_IsCached
bool Zenject::ScriptableObjectResourceProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectResourceProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectResourceProvider.get_TypeVariesBasedOnMemberType
bool Zenject::ScriptableObjectResourceProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectResourceProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ScriptableObjectResourceProvider.GetInstanceType
System::Type* Zenject::ScriptableObjectResourceProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectResourceProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.ScriptableObjectResourceProvider.GetAllInstancesWithInjectSplit
void Zenject::ScriptableObjectResourceProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectResourceProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, args, injectAction, buffer);
}
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::*)(::Il2CppString*, System::Type*, Zenject::DiContainer*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, bool, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&ScriptableObjectResourceProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::*)(::Il2CppString*, System::Type*, Zenject::DiContainer*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*, bool, ::Il2CppObject*, System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*)>(&ScriptableObjectResourceProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::get_IsCached
// Il2CppName: get_IsCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableObjectResourceProvider::*)()>(&ScriptableObjectResourceProvider::get_IsCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), "get_IsCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::get_TypeVariesBasedOnMemberType
// Il2CppName: get_TypeVariesBasedOnMemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableObjectResourceProvider::*)()>(&ScriptableObjectResourceProvider::get_TypeVariesBasedOnMemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::GetInstanceType
// Il2CppName: GetInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ScriptableObjectResourceProvider::*)(Zenject::InjectContext*)>(&ScriptableObjectResourceProvider::GetInstanceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), "GetInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::GetAllInstancesWithInjectSplit
// Il2CppName: GetAllInstancesWithInjectSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::*)(Zenject::InjectContext*, System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Action*&, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ScriptableObjectResourceProvider::GetAllInstancesWithInjectSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider*), "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScriptableObjectResourceProvider/<>c__DisplayClass13_0
#include "Zenject/ScriptableObjectResourceProvider_--c__DisplayClass13_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScriptableObjectResourceProvider/<>c__DisplayClass13_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::ScriptableObjectResourceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScriptableObjectResourceProvider::$$c__DisplayClass13_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectResourceProvider::$$c__DisplayClass13_0::$GetAllInstancesWithInjectSplit$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider::$$c__DisplayClass13_0*), "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableObjectResourceProvider::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectResourceProvider::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObjectResourceProvider::$$c__DisplayClass13_0::*)()>(&ScriptableObjectResourceProvider::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObjectResourceProvider::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ISubContainerCreator.CreateSubContainer
Zenject::DiContainer* Zenject::ISubContainerCreator::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ISubContainerCreator::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method, args, context);
}
// Writing MetadataGetter for method: ISubContainerCreator::CreateSubContainer
// Il2CppName: CreateSubContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (ISubContainerCreator::*)(System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*)>(&ISubContainerCreator::CreateSubContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISubContainerCreator*), "CreateSubContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.get_DefaultParentName
::Il2CppString* Zenject::SubContainerCreatorBindInfo::get_DefaultParentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::get_DefaultParentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultParentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.set_DefaultParentName
void Zenject::SubContainerCreatorBindInfo::set_DefaultParentName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::set_DefaultParentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DefaultParentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.get_CreateKernel
bool Zenject::SubContainerCreatorBindInfo::get_CreateKernel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::get_CreateKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreateKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.set_CreateKernel
void Zenject::SubContainerCreatorBindInfo::set_CreateKernel(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::set_CreateKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CreateKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.get_KernelType
System::Type* Zenject::SubContainerCreatorBindInfo::get_KernelType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::get_KernelType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_KernelType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorBindInfo.set_KernelType
void Zenject::SubContainerCreatorBindInfo::set_KernelType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorBindInfo::set_KernelType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_KernelType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::get_DefaultParentName
// Il2CppName: get_DefaultParentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SubContainerCreatorBindInfo::*)()>(&SubContainerCreatorBindInfo::get_DefaultParentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "get_DefaultParentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::set_DefaultParentName
// Il2CppName: set_DefaultParentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorBindInfo::*)(::Il2CppString*)>(&SubContainerCreatorBindInfo::set_DefaultParentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "set_DefaultParentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::get_CreateKernel
// Il2CppName: get_CreateKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SubContainerCreatorBindInfo::*)()>(&SubContainerCreatorBindInfo::get_CreateKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "get_CreateKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::set_CreateKernel
// Il2CppName: set_CreateKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorBindInfo::*)(bool)>(&SubContainerCreatorBindInfo::set_CreateKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "set_CreateKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::get_KernelType
// Il2CppName: get_KernelType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (SubContainerCreatorBindInfo::*)()>(&SubContainerCreatorBindInfo::get_KernelType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "get_KernelType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::set_KernelType
// Il2CppName: set_KernelType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorBindInfo::*)(System::Type*)>(&SubContainerCreatorBindInfo::set_KernelType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), "set_KernelType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorBindInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorBindInfo::*)()>(&SubContainerCreatorBindInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorBindInfo::*)()>(&SubContainerCreatorBindInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByInstaller
#include "Zenject/SubContainerCreatorByInstaller.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerCreatorByInstaller.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorByInstaller::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByInstaller::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method, args, context);
}
// Writing MetadataGetter for method: SubContainerCreatorByInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstaller::*)(Zenject::DiContainer*, Zenject::SubContainerCreatorBindInfo*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*)>(&SubContainerCreatorByInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstaller::*)(Zenject::DiContainer*, Zenject::SubContainerCreatorBindInfo*, System::Type*, System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*)>(&SubContainerCreatorByInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorByInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstaller::*)(Zenject::DiContainer*, Zenject::SubContainerCreatorBindInfo*, System::Type*)>(&SubContainerCreatorByInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstaller::*)(Zenject::DiContainer*, Zenject::SubContainerCreatorBindInfo*, System::Type*)>(&SubContainerCreatorByInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorByInstaller::CreateSubContainer
// Il2CppName: CreateSubContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (SubContainerCreatorByInstaller::*)(System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*)>(&SubContainerCreatorByInstaller::CreateSubContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstaller*), "CreateSubContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByInstance
#include "Zenject/SubContainerCreatorByInstance.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerCreatorByInstance.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorByInstance::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByInstance::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method, args, context);
}
// Writing MetadataGetter for method: SubContainerCreatorByInstance::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstance::*)(Zenject::DiContainer*)>(&SubContainerCreatorByInstance::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstance*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerCreatorByInstance::*)(Zenject::DiContainer*)>(&SubContainerCreatorByInstance::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstance*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerCreatorByInstance::CreateSubContainer
// Il2CppName: CreateSubContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (SubContainerCreatorByInstance::*)(System::Collections::Generic::List_1<Zenject::TypeValuePair>*, Zenject::InjectContext*)>(&SubContainerCreatorByInstance::CreateSubContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerCreatorByInstance*), "CreateSubContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
