// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StringListSO
#include "GlobalNamespace/StringListSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StringListSO.get_strings
::Array<::Il2CppString*>* GlobalNamespace::StringListSO::get_strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringListSO::get_strings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_strings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StringListSO::get_strings
// Il2CppName: get_strings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (StringListSO::*)()>(&StringListSO::get_strings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringListSO*), "get_strings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringListSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringListSO::*)()>(&StringListSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringListSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringListSO::*)()>(&StringListSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringListSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StringSO
#include "GlobalNamespace/StringSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: StringSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringSO::*)()>(&StringSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringSO::*)()>(&StringSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector2IntSO
#include "GlobalNamespace/Vector2IntSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Vector2IntSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2IntSO::*)()>(&Vector2IntSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2IntSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2IntSO::*)()>(&Vector2IntSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2IntSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Vector3SO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3SO::*)()>(&Vector3SO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3SO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3SO::*)()>(&Vector3SO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3SO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Libraries.HM.HMLib.VR.HapticPresetSO.CopyFrom
void Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom(Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hapticPreset);
}
// Writing MetadataGetter for method: HapticPresetSO::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticPresetSO::*)(Libraries::HM::HMLib::VR::HapticPresetSO*)>(&HapticPresetSO::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticPresetSO*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Libraries::HM::HMLib::VR::HapticPresetSO*>()});
  }
};
// Writing MetadataGetter for method: HapticPresetSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticPresetSO::*)()>(&HapticPresetSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticPresetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticPresetSO::*)()>(&HapticPresetSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticPresetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NullAllowed
#include "GlobalNamespace/NullAllowed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NullAllowed::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)(GlobalNamespace::NullAllowed::Context)>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NullAllowed::Context>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)(GlobalNamespace::NullAllowed::Context)>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NullAllowed::Context>()});
  }
};
// Writing MetadataGetter for method: NullAllowed::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)(::Il2CppString*, ::Il2CppObject*)>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)(::Il2CppString*, ::Il2CppObject*)>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: NullAllowed::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)()>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullAllowed::*)()>(&NullAllowed::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullAllowed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NullAllowed/Context
#include "GlobalNamespace/NullAllowed.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Everywhere
GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Everywhere() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NullAllowed::Context::_get_Everywhere");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Everywhere"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Everywhere
void GlobalNamespace::NullAllowed::Context::_set_Everywhere(GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NullAllowed::Context::_set_Everywhere");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Everywhere", value));
}
// Autogenerated static field getter
// Get static field: static public NullAllowed/Context Prefab
GlobalNamespace::NullAllowed::Context GlobalNamespace::NullAllowed::Context::_get_Prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NullAllowed::Context::_get_Prefab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NullAllowed::Context>("", "NullAllowed/Context", "Prefab"));
}
// Autogenerated static field setter
// Set static field: static public NullAllowed/Context Prefab
void GlobalNamespace::NullAllowed::Context::_set_Prefab(GlobalNamespace::NullAllowed::Context value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NullAllowed::Context::_set_Prefab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NullAllowed/Context", "Prefab", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PyramidBloomRendererSO
#include "GlobalNamespace/PyramidBloomRendererSO.hpp"
// Including type: PyramidBloomRendererSO/Pass
#include "GlobalNamespace/PyramidBloomRendererSO_Pass.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPyramidSize
int GlobalNamespace::PyramidBloomRendererSO::_get_kMaxPyramidSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get_kMaxPyramidSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "kMaxPyramidSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPyramidSize
void GlobalNamespace::PyramidBloomRendererSO::_set_kMaxPyramidSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set_kMaxPyramidSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "kMaxPyramidSize", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5AE0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomTexID
int GlobalNamespace::PyramidBloomRendererSO::_get__bloomTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get__bloomTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_bloomTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomTexID
void GlobalNamespace::PyramidBloomRendererSO::_set__bloomTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set__bloomTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_bloomTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5AF0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sampleScaleID
int GlobalNamespace::PyramidBloomRendererSO::_get__sampleScaleID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get__sampleScaleID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_sampleScaleID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sampleScaleID
void GlobalNamespace::PyramidBloomRendererSO::_set__sampleScaleID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set__sampleScaleID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_sampleScaleID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5B00
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _combineSrcID
int GlobalNamespace::PyramidBloomRendererSO::_get__combineSrcID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get__combineSrcID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_combineSrcID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _combineSrcID
void GlobalNamespace::PyramidBloomRendererSO::_set__combineSrcID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set__combineSrcID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_combineSrcID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5B10
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _combineDstID
int GlobalNamespace::PyramidBloomRendererSO::_get__combineDstID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get__combineDstID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_combineDstID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _combineDstID
void GlobalNamespace::PyramidBloomRendererSO::_set__combineDstID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set__combineDstID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_combineDstID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5B20
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaWeightsID
int GlobalNamespace::PyramidBloomRendererSO::_get__alphaWeightsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_get__alphaWeightsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PyramidBloomRendererSO", "_alphaWeightsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaWeightsID
void GlobalNamespace::PyramidBloomRendererSO::_set__alphaWeightsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::_set__alphaWeightsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO", "_alphaWeightsID", value));
}
// Autogenerated method: PyramidBloomRendererSO.OnDisable
void GlobalNamespace::PyramidBloomRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomRendererSO.RenderBloom
void GlobalNamespace::PyramidBloomRendererSO::RenderBloom(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, float radius, bool alphaWeights, bool betterQuality, bool gammaCorrection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::RenderBloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderBloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(betterQuality), ::il2cpp_utils::ExtractType(gammaCorrection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, radius, alphaWeights, betterQuality, gammaCorrection);
}
// Autogenerated method: PyramidBloomRendererSO.RenderBloom
void GlobalNamespace::PyramidBloomRendererSO::RenderBloom(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, float radius, float intensity, float downIntensityOffset, bool uniformPyramidWeights, bool downsampleOnFirstPass, float pyramidWeightsParam, float alphaWeights, float firstUpsampleBrightness, float finalUpsampleBrightness, GlobalNamespace::PyramidBloomRendererSO::Pass preFilterPass, GlobalNamespace::PyramidBloomRendererSO::Pass downsamplePass, GlobalNamespace::PyramidBloomRendererSO::Pass upsamplePass, GlobalNamespace::PyramidBloomRendererSO::Pass finalUpsamplePass) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::RenderBloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderBloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(intensity), ::il2cpp_utils::ExtractType(downIntensityOffset), ::il2cpp_utils::ExtractType(uniformPyramidWeights), ::il2cpp_utils::ExtractType(downsampleOnFirstPass), ::il2cpp_utils::ExtractType(pyramidWeightsParam), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(firstUpsampleBrightness), ::il2cpp_utils::ExtractType(finalUpsampleBrightness), ::il2cpp_utils::ExtractType(preFilterPass), ::il2cpp_utils::ExtractType(downsamplePass), ::il2cpp_utils::ExtractType(upsamplePass), ::il2cpp_utils::ExtractType(finalUpsamplePass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, radius, intensity, downIntensityOffset, uniformPyramidWeights, downsampleOnFirstPass, pyramidWeightsParam, alphaWeights, firstUpsampleBrightness, finalUpsampleBrightness, preFilterPass, downsamplePass, upsamplePass, finalUpsamplePass);
}
// Autogenerated method: PyramidBloomRendererSO.OnEnable
void GlobalNamespace::PyramidBloomRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PyramidBloomRendererSO..cctor
void GlobalNamespace::PyramidBloomRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PyramidBloomRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PyramidBloomRendererSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)()>(&PyramidBloomRendererSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomRendererSO::RenderBloom
// Il2CppName: RenderBloom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, float, bool, bool, bool)>(&PyramidBloomRendererSO::RenderBloom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), "RenderBloom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PyramidBloomRendererSO::RenderBloom
// Il2CppName: RenderBloom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, float, float, float, bool, bool, float, float, float, float, GlobalNamespace::PyramidBloomRendererSO::Pass, GlobalNamespace::PyramidBloomRendererSO::Pass, GlobalNamespace::PyramidBloomRendererSO::Pass, GlobalNamespace::PyramidBloomRendererSO::Pass)>(&PyramidBloomRendererSO::RenderBloom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), "RenderBloom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PyramidBloomRendererSO::Pass>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PyramidBloomRendererSO::Pass>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PyramidBloomRendererSO::Pass>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PyramidBloomRendererSO::Pass>()});
  }
};
// Writing MetadataGetter for method: PyramidBloomRendererSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)()>(&PyramidBloomRendererSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomRendererSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)()>(&PyramidBloomRendererSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PyramidBloomRendererSO::*)()>(&PyramidBloomRendererSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PyramidBloomRendererSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PyramidBloomRendererSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PyramidBloomRendererSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PyramidBloomRendererSO/Pass
#include "GlobalNamespace/PyramidBloomRendererSO_Pass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Prefilter13
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Prefilter13"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Prefilter13
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter13(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Prefilter13", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Prefilter4
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Prefilter4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Prefilter4"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Prefilter4
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter4(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Prefilter4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Prefilter4", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Downsample13
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Downsample13"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Downsample13
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample13(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Downsample13", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Downsample4
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Downsample4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Downsample4"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Downsample4
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample4(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Downsample4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Downsample4", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass DownsampleBilinearGamma
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_DownsampleBilinearGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_DownsampleBilinearGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "DownsampleBilinearGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass DownsampleBilinearGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_DownsampleBilinearGamma(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_DownsampleBilinearGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "DownsampleBilinearGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTent
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTent"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTent
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTent(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTent", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleBox
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleBox"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleBox
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBox(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleBox", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentGamma
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentGamma(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleBoxGamma
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBoxGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleBoxGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleBoxGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleBoxGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBoxGamma(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleBoxGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleBoxGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass Bilinear
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Bilinear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_Bilinear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "Bilinear"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass Bilinear
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Bilinear(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_Bilinear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "Bilinear", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass BilinearGamma
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_BilinearGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_BilinearGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "BilinearGamma"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass BilinearGamma
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_BilinearGamma(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_BilinearGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "BilinearGamma", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndReinhardToneMapping
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndReinhardToneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndReinhardToneMapping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndReinhardToneMapping"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndReinhardToneMapping
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndReinhardToneMapping(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndReinhardToneMapping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndReinhardToneMapping", value));
}
// Autogenerated static field getter
// Get static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMapping
GlobalNamespace::PyramidBloomRendererSO::Pass GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_get_UpsampleTentAndACESToneMapping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PyramidBloomRendererSO::Pass>("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMapping"));
}
// Autogenerated static field setter
// Set static field: static public PyramidBloomRendererSO/Pass UpsampleTentAndACESToneMapping
void GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMapping(GlobalNamespace::PyramidBloomRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PyramidBloomRendererSO::Pass::_set_UpsampleTentAndACESToneMapping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PyramidBloomRendererSO/Pass", "UpsampleTentAndACESToneMapping", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogEnvironment
#include "GlobalNamespace/BloomFogEnvironment.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFogEnvironment.OnEnable
void GlobalNamespace::BloomFogEnvironment::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogEnvironment::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogEnvironment.OnValidate
void GlobalNamespace::BloomFogEnvironment::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogEnvironment::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomFogEnvironment::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironment::*)()>(&BloomFogEnvironment::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironment*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogEnvironment::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironment::*)()>(&BloomFogEnvironment::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironment*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogEnvironment::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironment::*)()>(&BloomFogEnvironment::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironment*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironment::*)()>(&BloomFogEnvironment::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironment*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomFogEnvironmentParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironmentParams::*)()>(&BloomFogEnvironmentParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironmentParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogEnvironmentParams::*)()>(&BloomFogEnvironmentParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogEnvironmentParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogParamsAnimator
#include "GlobalNamespace/BloomFogParamsAnimator.hpp"
// Including type: BloomFogParamsAnimator/<AnimationCoroutine>d__2
#include "GlobalNamespace/BloomFogParamsAnimator_-AnimationCoroutine-d__2.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFogParamsAnimator.AnimateBloomFogParamsChange
void GlobalNamespace::BloomFogParamsAnimator::AnimateBloomFogParamsChange(GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::AnimateBloomFogParamsChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateBloomFogParamsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, envFogParams, duration);
}
// Autogenerated method: BloomFogParamsAnimator.AnimationCoroutine
System::Collections::IEnumerator* GlobalNamespace::BloomFogParamsAnimator::AnimationCoroutine(GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, envFogParams, duration);
}
// Autogenerated method: BloomFogParamsAnimator.SetBloomFogParamsChange
void GlobalNamespace::BloomFogParamsAnimator::SetBloomFogParamsChange(GlobalNamespace::BloomFogEnvironmentParams* envFogParams, float transition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::SetBloomFogParamsChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBloomFogParamsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envFogParams), ::il2cpp_utils::ExtractType(transition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, envFogParams, transition);
}
// Autogenerated method: BloomFogParamsAnimator.GetDefaultBloomFogParams
GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogParamsAnimator::GetDefaultBloomFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::GetDefaultBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator.SetDefaultBloomFogParams
void GlobalNamespace::BloomFogParamsAnimator::SetDefaultBloomFogParams(GlobalNamespace::BloomFogEnvironmentParams* newDefaultBloomFogParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::SetDefaultBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newDefaultBloomFogParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newDefaultBloomFogParams);
}
// Writing MetadataGetter for method: BloomFogParamsAnimator::AnimateBloomFogParamsChange
// Il2CppName: AnimateBloomFogParamsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::*)(GlobalNamespace::BloomFogEnvironmentParams*, float)>(&BloomFogParamsAnimator::AnimateBloomFogParamsChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), "AnimateBloomFogParamsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::AnimationCoroutine
// Il2CppName: AnimationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (BloomFogParamsAnimator::*)(GlobalNamespace::BloomFogEnvironmentParams*, float)>(&BloomFogParamsAnimator::AnimationCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), "AnimationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::SetBloomFogParamsChange
// Il2CppName: SetBloomFogParamsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::*)(GlobalNamespace::BloomFogEnvironmentParams*, float)>(&BloomFogParamsAnimator::SetBloomFogParamsChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), "SetBloomFogParamsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::GetDefaultBloomFogParams
// Il2CppName: GetDefaultBloomFogParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BloomFogEnvironmentParams* (BloomFogParamsAnimator::*)()>(&BloomFogParamsAnimator::GetDefaultBloomFogParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), "GetDefaultBloomFogParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::SetDefaultBloomFogParams
// Il2CppName: SetDefaultBloomFogParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::*)(GlobalNamespace::BloomFogEnvironmentParams*)>(&BloomFogParamsAnimator::SetDefaultBloomFogParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), "SetDefaultBloomFogParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::*)()>(&BloomFogParamsAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::*)()>(&BloomFogParamsAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomFogParamsAnimator/<AnimationCoroutine>d__2
#include "GlobalNamespace/BloomFogParamsAnimator_-AnimationCoroutine-d__2.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.IDisposable.Dispose
void GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.MoveNext
bool GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAnimator/<AnimationCoroutine>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAnimator::$AnimationCoroutine$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)(int)>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)(int)>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)()>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)()>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)()>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)()>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (BloomFogParamsAnimator::$AnimationCoroutine$d__2::*)()>(&BloomFogParamsAnimator::$AnimationCoroutine$d__2::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAnimator::$AnimationCoroutine$d__2*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kBloomFogEnabledKeyword
::Il2CppString* GlobalNamespace::BloomFogSO::_get_kBloomFogEnabledKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_get_kBloomFogEnabledKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BloomFogSO", "kBloomFogEnabledKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBloomFogEnabledKeyword
void GlobalNamespace::BloomFogSO::_set_kBloomFogEnabledKeyword(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_set_kBloomFogEnabledKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "kBloomFogEnabledKeyword", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5BAC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogAttenuationID
int GlobalNamespace::BloomFogSO::_get__customFogAttenuationID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_get__customFogAttenuationID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogAttenuationID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogAttenuationID
void GlobalNamespace::BloomFogSO::_set__customFogAttenuationID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_set__customFogAttenuationID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogAttenuationID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5BBC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogOffsetID
int GlobalNamespace::BloomFogSO::_get__customFogOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_get__customFogOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogOffsetID
void GlobalNamespace::BloomFogSO::_set__customFogOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_set__customFogOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5BCC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogHeightFogStartYID
int GlobalNamespace::BloomFogSO::_get__customFogHeightFogStartYID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_get__customFogHeightFogStartYID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogHeightFogStartYID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogHeightFogStartYID
void GlobalNamespace::BloomFogSO::_set__customFogHeightFogStartYID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_set__customFogHeightFogStartYID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogHeightFogStartYID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5BDC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogHeightFogHeightID
int GlobalNamespace::BloomFogSO::_get__customFogHeightFogHeightID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_get__customFogHeightFogHeightID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomFogSO", "_customFogHeightFogHeightID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogHeightFogHeightID
void GlobalNamespace::BloomFogSO::_set__customFogHeightFogHeightID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::_set__customFogHeightFogHeightID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomFogSO", "_customFogHeightFogHeightID", value));
}
// Autogenerated method: BloomFogSO.set_transition
void GlobalNamespace::BloomFogSO::set_transition(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::set_transition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_transition
float GlobalNamespace::BloomFogSO::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::get_transition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.get_defaultForParams
GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogSO::get_defaultForParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::get_defaultForParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultForParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_defaultForParams
void GlobalNamespace::BloomFogSO::set_defaultForParams(GlobalNamespace::BloomFogEnvironmentParams* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::set_defaultForParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_defaultForParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_transitionFogParams
GlobalNamespace::BloomFogEnvironmentParams* GlobalNamespace::BloomFogSO::get_transitionFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::get_transitionFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transitionFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BloomFogEnvironmentParams*, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.set_transitionFogParams
void GlobalNamespace::BloomFogSO::set_transitionFogParams(GlobalNamespace::BloomFogEnvironmentParams* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::set_transitionFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transitionFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.set_bloomFogEnabled
void GlobalNamespace::BloomFogSO::set_bloomFogEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::set_bloomFogEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bloomFogEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomFogSO.get_bloomFogEnabled
bool GlobalNamespace::BloomFogSO::get_bloomFogEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::get_bloomFogEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomFogEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.Setup
void GlobalNamespace::BloomFogSO::Setup(GlobalNamespace::BloomFogEnvironmentParams* defaultFogParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultFogParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, defaultFogParams);
}
// Autogenerated method: BloomFogSO.UpdateShaderParams
void GlobalNamespace::BloomFogSO::UpdateShaderParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::UpdateShaderParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateShaderParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO.SetParams
void GlobalNamespace::BloomFogSO::SetParams(float attenuation, float offset, float heightFogStartY, float heightFogHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::SetParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomFogSO", "SetParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attenuation), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(heightFogStartY), ::il2cpp_utils::ExtractType(heightFogHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, attenuation, offset, heightFogStartY, heightFogHeight);
}
// Autogenerated method: BloomFogSO.OnEnable
void GlobalNamespace::BloomFogSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogSO..cctor
void GlobalNamespace::BloomFogSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomFogSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomFogSO::set_transition
// Il2CppName: set_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)(float)>(&BloomFogSO::set_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "set_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BloomFogSO::*)()>(&BloomFogSO::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::get_defaultForParams
// Il2CppName: get_defaultForParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BloomFogEnvironmentParams* (BloomFogSO::*)()>(&BloomFogSO::get_defaultForParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "get_defaultForParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::set_defaultForParams
// Il2CppName: set_defaultForParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)(GlobalNamespace::BloomFogEnvironmentParams*)>(&BloomFogSO::set_defaultForParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "set_defaultForParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::get_transitionFogParams
// Il2CppName: get_transitionFogParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BloomFogEnvironmentParams* (BloomFogSO::*)()>(&BloomFogSO::get_transitionFogParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "get_transitionFogParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::set_transitionFogParams
// Il2CppName: set_transitionFogParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)(GlobalNamespace::BloomFogEnvironmentParams*)>(&BloomFogSO::set_transitionFogParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "set_transitionFogParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::set_bloomFogEnabled
// Il2CppName: set_bloomFogEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)(bool)>(&BloomFogSO::set_bloomFogEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "set_bloomFogEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::get_bloomFogEnabled
// Il2CppName: get_bloomFogEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BloomFogSO::*)()>(&BloomFogSO::get_bloomFogEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "get_bloomFogEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)(GlobalNamespace::BloomFogEnvironmentParams*)>(&BloomFogSO::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomFogEnvironmentParams*>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::UpdateShaderParams
// Il2CppName: UpdateShaderParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)()>(&BloomFogSO::UpdateShaderParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "UpdateShaderParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::SetParams
// Il2CppName: SetParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&BloomFogSO::SetParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "SetParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomFogSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)()>(&BloomFogSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)()>(&BloomFogSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogSO::*)()>(&BloomFogSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomFogSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePass
#include "GlobalNamespace/BloomPrePass.hpp"
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePass.Awake
void GlobalNamespace::BloomPrePass::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.LazyInit
void GlobalNamespace::BloomPrePass::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnDestroy
void GlobalNamespace::BloomPrePass::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnPreRender
void GlobalNamespace::BloomPrePass::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.OnPostRender
void GlobalNamespace::BloomPrePass::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePass.SetMode
void GlobalNamespace::BloomPrePass::SetMode(GlobalNamespace::BloomPrePass::Mode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mode);
}
// Writing MetadataGetter for method: BloomPrePass::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePass::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::LazyInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePass::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePass::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::OnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePass::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::OnPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePass::SetMode
// Il2CppName: SetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)(GlobalNamespace::BloomPrePass::Mode)>(&BloomPrePass::SetMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), "SetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomPrePass::Mode>()});
  }
};
// Writing MetadataGetter for method: BloomPrePass::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePass::*)()>(&BloomPrePass::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePass/Mode
#include "GlobalNamespace/BloomPrePass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BloomPrePass/Mode RenderAndSetData
GlobalNamespace::BloomPrePass::Mode GlobalNamespace::BloomPrePass::Mode::_get_RenderAndSetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::Mode::_get_RenderAndSetData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BloomPrePass::Mode>("", "BloomPrePass/Mode", "RenderAndSetData"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePass/Mode RenderAndSetData
void GlobalNamespace::BloomPrePass::Mode::_set_RenderAndSetData(GlobalNamespace::BloomPrePass::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::Mode::_set_RenderAndSetData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePass/Mode", "RenderAndSetData", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePass/Mode SetDataOnly
GlobalNamespace::BloomPrePass::Mode GlobalNamespace::BloomPrePass::Mode::_get_SetDataOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::Mode::_get_SetDataOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BloomPrePass::Mode>("", "BloomPrePass/Mode", "SetDataOnly"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePass/Mode SetDataOnly
void GlobalNamespace::BloomPrePass::Mode::_set_SetDataOnly(GlobalNamespace::BloomPrePass::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePass::Mode::_set_SetDataOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePass/Mode", "SetDataOnly", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColor
#include "GlobalNamespace/BloomPrePassBackgroundColor.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5CE0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::BloomPrePassBackgroundColor::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundColor", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::BloomPrePassBackgroundColor::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5CF0
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _material
UnityEngine::Material* GlobalNamespace::BloomPrePassBackgroundColor::_get__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_get__material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "BloomPrePassBackgroundColor", "_material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _material
void GlobalNamespace::BloomPrePassBackgroundColor::_set__material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_set__material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_material", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5D00
// Autogenerated static field getter
// Get static field: static private System.Boolean _initialized
bool GlobalNamespace::BloomPrePassBackgroundColor::_get__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_get__initialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "BloomPrePassBackgroundColor", "_initialized"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _initialized
void GlobalNamespace::BloomPrePassBackgroundColor::_set__initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::_set__initialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundColor", "_initialized", value));
}
// Autogenerated method: BloomPrePassBackgroundColor.get_color
UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColor::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.set_color
void GlobalNamespace::BloomPrePassBackgroundColor::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BloomPrePassBackgroundColor.get_bgColor
UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColor::get_bgColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::get_bgColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bgColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundColor::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColor.Render
void GlobalNamespace::BloomPrePassBackgroundColor::Render(UnityEngine::RenderTexture* dest, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated method: BloomPrePassBackgroundColor..cctor
void GlobalNamespace::BloomPrePassBackgroundColor::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColor::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundColor", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (BloomPrePassBackgroundColor::*)()>(&BloomPrePassBackgroundColor::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColor::*)(UnityEngine::Color)>(&BloomPrePassBackgroundColor::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::get_bgColor
// Il2CppName: get_bgColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (BloomPrePassBackgroundColor::*)()>(&BloomPrePassBackgroundColor::get_bgColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), "get_bgColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColor::*)()>(&BloomPrePassBackgroundColor::InitIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColor::*)(UnityEngine::RenderTexture*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4)>(&BloomPrePassBackgroundColor::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColor::*)()>(&BloomPrePassBackgroundColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColor::*)()>(&BloomPrePassBackgroundColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassBackgroundColor::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: BloomPrePassBackgroundColorsGradient/Element
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient_Element.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundColorsGradient.get_elements
::Array<GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>* GlobalNamespace::BloomPrePassBackgroundColorsGradient::get_elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColorsGradient::get_elements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradient.EvaluateColor
UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundColorsGradient::EvaluateColor(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColorsGradient::EvaluateColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, t);
}
// Autogenerated method: BloomPrePassBackgroundColorsGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundColorsGradient::UpdatePixels(Unity::Collections::NativeArray_1<UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColorsGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradient::get_elements
// Il2CppName: get_elements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BloomPrePassBackgroundColorsGradient::Element*>* (BloomPrePassBackgroundColorsGradient::*)()>(&BloomPrePassBackgroundColorsGradient::get_elements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient*), "get_elements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradient::EvaluateColor
// Il2CppName: EvaluateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (BloomPrePassBackgroundColorsGradient::*)(float)>(&BloomPrePassBackgroundColorsGradient::EvaluateColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient*), "EvaluateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradient::UpdatePixels
// Il2CppName: UpdatePixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradient::*)(Unity::Collections::NativeArray_1<UnityEngine::Color32>, int)>(&BloomPrePassBackgroundColorsGradient::UpdatePixels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient*), "UpdatePixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Color32>>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradient::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradient::*)()>(&BloomPrePassBackgroundColorsGradient::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradient::*)()>(&BloomPrePassBackgroundColorsGradient::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradient/Element
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient_Element.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradient::Element::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradient::Element::*)()>(&BloomPrePassBackgroundColorsGradient::Element::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient::Element*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradient::Element::*)()>(&BloomPrePassBackgroundColorsGradient::Element::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradient::Element*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundGradient
#include "GlobalNamespace/BloomPrePassBackgroundGradient.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundGradient::UpdatePixels(Unity::Collections::NativeArray_1<UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundGradient::UpdatePixels
// Il2CppName: UpdatePixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundGradient::*)(Unity::Collections::NativeArray_1<UnityEngine::Color32>, int)>(&BloomPrePassBackgroundGradient::UpdatePixels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundGradient*), "UpdatePixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Color32>>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundGradient::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundGradient::*)()>(&BloomPrePassBackgroundGradient::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundGradient::*)()>(&BloomPrePassBackgroundGradient::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightRenderer
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRenderer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundNonLightRenderer.get_renderer
UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRenderer::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRenderer::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (BloomPrePassBackgroundNonLightRenderer::*)()>(&BloomPrePassBackgroundNonLightRenderer::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRenderer*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRenderer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRenderer::*)()>(&BloomPrePassBackgroundNonLightRenderer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRenderer::*)()>(&BloomPrePassBackgroundNonLightRenderer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundNonLightRendererCore
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRendererCore.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5D50
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _worldSpaceCameraPosID
int GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_get__worldSpaceCameraPosID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_get__worldSpaceCameraPosID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundNonLightRendererCore", "_worldSpaceCameraPosID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _worldSpaceCameraPosID
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_set__worldSpaceCameraPosID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_set__worldSpaceCameraPosID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundNonLightRendererCore", "_worldSpaceCameraPosID", value));
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.get_renderer
UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.Awake
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore.Render
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Render(UnityEngine::RenderTexture* dest, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated method: BloomPrePassBackgroundNonLightRendererCore..cctor
void GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundNonLightRendererCore", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (BloomPrePassBackgroundNonLightRendererCore::*)()>(&BloomPrePassBackgroundNonLightRendererCore::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRendererCore::*)()>(&BloomPrePassBackgroundNonLightRendererCore::InitIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRendererCore::*)()>(&BloomPrePassBackgroundNonLightRendererCore::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRendererCore::*)(UnityEngine::RenderTexture*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4)>(&BloomPrePassBackgroundNonLightRendererCore::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRendererCore::*)()>(&BloomPrePassBackgroundNonLightRendererCore::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundNonLightRendererCore::*)()>(&BloomPrePassBackgroundNonLightRendererCore::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundNonLightRendererCore::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassBackgroundNonLightRendererCore::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundNonLightRendererCore*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundParticleSystemRenderer
#include "GlobalNamespace/BloomPrePassBackgroundParticleSystemRenderer.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundParticleSystemRenderer.get_renderer
UnityEngine::Renderer* GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::get_renderer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundParticleSystemRenderer.Awake
void GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundParticleSystemRenderer::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (BloomPrePassBackgroundParticleSystemRenderer::*)()>(&BloomPrePassBackgroundParticleSystemRenderer::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundParticleSystemRenderer*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundParticleSystemRenderer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundParticleSystemRenderer::*)()>(&BloomPrePassBackgroundParticleSystemRenderer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundParticleSystemRenderer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundParticleSystemRenderer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundParticleSystemRenderer::*)()>(&BloomPrePassBackgroundParticleSystemRenderer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundParticleSystemRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundParticleSystemRenderer::*)()>(&BloomPrePassBackgroundParticleSystemRenderer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundParticleSystemRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassBackgroundTextureGradient
#include "GlobalNamespace/BloomPrePassBackgroundTextureGradient.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5D70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _gradientTexID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__gradientTexID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__gradientTexID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_gradientTexID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _gradientTexID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__gradientTexID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__gradientTexID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_gradientTexID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5D80
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _inverseProjectionMatrixID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__inverseProjectionMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__inverseProjectionMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_inverseProjectionMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _inverseProjectionMatrixID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__inverseProjectionMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__inverseProjectionMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_inverseProjectionMatrixID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5D90
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cameraToWorldMatrixID
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__cameraToWorldMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__cameraToWorldMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "_cameraToWorldMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cameraToWorldMatrixID
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__cameraToWorldMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__cameraToWorldMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_cameraToWorldMatrixID", value));
}
// Autogenerated static field getter
// Get static field: static private System.String _useToneMappingKeyword
::Il2CppString* GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__useToneMappingKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get__useToneMappingKeyword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BloomPrePassBackgroundTextureGradient", "_useToneMappingKeyword"));
}
// Autogenerated static field setter
// Set static field: static private System.String _useToneMappingKeyword
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__useToneMappingKeyword(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set__useToneMappingKeyword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "_useToneMappingKeyword", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kTextureWidth
int GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kTextureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_get_kTextureWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassBackgroundTextureGradient", "kTextureWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTextureWidth
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kTextureWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::_set_kTextureWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassBackgroundTextureGradient", "kTextureWidth", value));
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.InitIfNeeded
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.Start
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.OnDestroy
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.UpdatePixels
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdatePixels(Unity::Collections::NativeArray_1<UnityEngine::Color32> pixels, int numberOfPixels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdatePixels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pixels), ::il2cpp_utils::ExtractType(numberOfPixels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pixels, numberOfPixels);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.UpdateGradientTexture
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdateGradientTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::UpdateGradientTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGradientTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.OnValidate
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient.Render
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::Render(UnityEngine::RenderTexture* dest, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated method: BloomPrePassBackgroundTextureGradient..cctor
void GlobalNamespace::BloomPrePassBackgroundTextureGradient::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundTextureGradient::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassBackgroundTextureGradient", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::InitIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::UpdatePixels
// Il2CppName: UpdatePixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)(Unity::Collections::NativeArray_1<UnityEngine::Color32>, int)>(&BloomPrePassBackgroundTextureGradient::UpdatePixels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "UpdatePixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Color32>>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::UpdateGradientTexture
// Il2CppName: UpdateGradientTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::UpdateGradientTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "UpdateGradientTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)(UnityEngine::RenderTexture*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4)>(&BloomPrePassBackgroundTextureGradient::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundTextureGradient::*)()>(&BloomPrePassBackgroundTextureGradient::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundTextureGradient::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassBackgroundTextureGradient::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundTextureGradient*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassEffectContainerSO.get_bloomPrePassEffect
GlobalNamespace::BloomPrePassEffectSO* GlobalNamespace::BloomPrePassEffectContainerSO::get_bloomPrePassEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectContainerSO::get_bloomPrePassEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomPrePassEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BloomPrePassEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectContainerSO.Init
void GlobalNamespace::BloomPrePassEffectContainerSO::Init(GlobalNamespace::BloomPrePassEffectSO* bloomPrePassEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectContainerSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bloomPrePassEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bloomPrePassEffect);
}
// Writing MetadataGetter for method: BloomPrePassEffectContainerSO::get_bloomPrePassEffect
// Il2CppName: get_bloomPrePassEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BloomPrePassEffectSO* (BloomPrePassEffectContainerSO::*)()>(&BloomPrePassEffectContainerSO::get_bloomPrePassEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectContainerSO*), "get_bloomPrePassEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectContainerSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassEffectContainerSO::*)(GlobalNamespace::BloomPrePassEffectSO*)>(&BloomPrePassEffectContainerSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectContainerSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomPrePassEffectSO*>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectContainerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassEffectContainerSO::*)()>(&BloomPrePassEffectContainerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassEffectContainerSO::*)()>(&BloomPrePassEffectContainerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassEffectSO.get_textureEffect
GlobalNamespace::TextureEffectSO* GlobalNamespace::BloomPrePassEffectSO::get_textureEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_textureEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TextureEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_textureWidth
int GlobalNamespace::BloomPrePassEffectSO::get_textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_textureWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_textureHeight
int GlobalNamespace::BloomPrePassEffectSO::get_textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_textureHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_fov
UnityEngine::Vector2 GlobalNamespace::BloomPrePassEffectSO::get_fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_fov");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_linesWidth
float GlobalNamespace::BloomPrePassEffectSO::get_linesWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_linesWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linesWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassEffectSO.get_toneMapping
GlobalNamespace::ToneMapping GlobalNamespace::BloomPrePassEffectSO::get_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassEffectSO::get_toneMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toneMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ToneMapping, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_textureEffect
// Il2CppName: get_textureEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TextureEffectSO* (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_textureEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_textureEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_textureWidth
// Il2CppName: get_textureWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_textureWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_textureWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_textureHeight
// Il2CppName: get_textureHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_textureHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_textureHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_fov
// Il2CppName: get_fov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_fov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_fov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_linesWidth
// Il2CppName: get_linesWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_linesWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_linesWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::get_toneMapping
// Il2CppName: get_toneMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ToneMapping (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::get_toneMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), "get_toneMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassEffectSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassEffectSO::*)()>(&BloomPrePassEffectSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassEffectSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassLight
#include "GlobalNamespace/BloomPrePassLight.hpp"
// Including type: BloomPrePassLight/LightsDataItem
#include "GlobalNamespace/BloomPrePassLight_LightsDataItem.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>* GlobalNamespace::BloomPrePassLight::_get__bloomLightsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::_get__bloomLightsDict");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>*>("", "BloomPrePassLight", "_bloomLightsDict")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
void GlobalNamespace::BloomPrePassLight::_set__bloomLightsDict(System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::_set__bloomLightsDict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "_bloomLightsDict", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>* GlobalNamespace::BloomPrePassLight::_get__lightsDataItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::_get__lightsDataItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>*>("", "BloomPrePassLight", "_lightsDataItems"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
void GlobalNamespace::BloomPrePassLight::_set__lightsDataItems(System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::_set__lightsDataItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassLight", "_lightsDataItems", value));
}
// Autogenerated method: BloomPrePassLight.get_bloomLightsDict
System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>* GlobalNamespace::BloomPrePassLight::get_bloomLightsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::get_bloomLightsDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", "get_bloomLightsDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassLight.get_lightsDataItems
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>* GlobalNamespace::BloomPrePassLight::get_lightsDataItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::get_lightsDataItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", "get_lightsDataItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassLight.get_isDirty
bool GlobalNamespace::BloomPrePassLight::get_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::get_isDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnEnable
void GlobalNamespace::BloomPrePassLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnDisable
void GlobalNamespace::BloomPrePassLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.OnDestroy
void GlobalNamespace::BloomPrePassLight::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.RegisterLight
void GlobalNamespace::BloomPrePassLight::RegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.UnregisterLight
void GlobalNamespace::BloomPrePassLight::UnregisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::UnregisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.DidRegisterLight
void GlobalNamespace::BloomPrePassLight::DidRegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::DidRegisterLight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidRegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight.FillMeshData
void GlobalNamespace::BloomPrePassLight::FillMeshData(int lightNum, ::Array<UnityEngine::Vector3>* vertices, ::Array<UnityEngine::Color>* colors, ::Array<UnityEngine::Vector4>* viewPos, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix, float lineWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::FillMeshData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillMeshData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightNum), ::il2cpp_utils::ExtractType(vertices), ::il2cpp_utils::ExtractType(colors), ::il2cpp_utils::ExtractType(viewPos), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(lineWidth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightNum, vertices, colors, viewPos, viewMatrix, projectionMatrix, lineWidth);
}
// Autogenerated method: BloomPrePassLight.Refresh
void GlobalNamespace::BloomPrePassLight::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLight..cctor
void GlobalNamespace::BloomPrePassLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassLight::get_bloomLightsDict
// Il2CppName: get_bloomLightsDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>* (*)()>(&BloomPrePassLight::get_bloomLightsDict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "get_bloomLightsDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::get_lightsDataItems
// Il2CppName: get_lightsDataItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassLight::LightsDataItem*>* (*)()>(&BloomPrePassLight::get_lightsDataItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "get_lightsDataItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::get_isDirty
// Il2CppName: get_isDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BloomPrePassLight::*)()>(&BloomPrePassLight::get_isDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "get_isDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::RegisterLight
// Il2CppName: RegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::RegisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "RegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::UnregisterLight
// Il2CppName: UnregisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::UnregisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "UnregisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::DidRegisterLight
// Il2CppName: DidRegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::DidRegisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "DidRegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::FillMeshData
// Il2CppName: FillMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)(int, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Color>*, ::Array<UnityEngine::Vector4>*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4, float)>(&BloomPrePassLight::FillMeshData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "FillMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Color>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::*)()>(&BloomPrePassLight::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassLight::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLight/LightsDataItem
#include "GlobalNamespace/BloomPrePassLight_LightsDataItem.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassLight::LightsDataItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::LightsDataItem::*)(GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*)>(&BloomPrePassLight::LightsDataItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight::LightsDataItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomPrePassLightTypeSO*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLight::LightsDataItem::*)(GlobalNamespace::BloomPrePassLightTypeSO*, System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*)>(&BloomPrePassLight::LightsDataItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLight::LightsDataItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomPrePassLightTypeSO*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<GlobalNamespace::BloomPrePassLight*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassLightTypeSO.get_renderingPriority
int GlobalNamespace::BloomPrePassLightTypeSO::get_renderingPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLightTypeSO::get_renderingPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderingPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassLightTypeSO.get_material
UnityEngine::Material* GlobalNamespace::BloomPrePassLightTypeSO::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLightTypeSO::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassLightTypeSO::get_renderingPriority
// Il2CppName: get_renderingPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BloomPrePassLightTypeSO::*)()>(&BloomPrePassLightTypeSO::get_renderingPriority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightTypeSO*), "get_renderingPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLightTypeSO::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (BloomPrePassLightTypeSO::*)()>(&BloomPrePassLightTypeSO::get_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightTypeSO*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLightTypeSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLightTypeSO::*)()>(&BloomPrePassLightTypeSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightTypeSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLightTypeSO::*)()>(&BloomPrePassLightTypeSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightTypeSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassLightsUpdateSystem
#include "GlobalNamespace/BloomPrePassLightsUpdateSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassLightsUpdateSystem.LateUpdate
void GlobalNamespace::BloomPrePassLightsUpdateSystem::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassLightsUpdateSystem::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassLightsUpdateSystem::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLightsUpdateSystem::*)()>(&BloomPrePassLightsUpdateSystem::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightsUpdateSystem*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassLightsUpdateSystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLightsUpdateSystem::*)()>(&BloomPrePassLightsUpdateSystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightsUpdateSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassLightsUpdateSystem::*)()>(&BloomPrePassLightsUpdateSystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassLightsUpdateSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassNonLightPass
#include "GlobalNamespace/BloomPrePassNonLightPass.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassAfterBlurList
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassAfterBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassAfterBlurList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>*>("", "BloomPrePassNonLightPass", "_bloomPrePassAfterBlurList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassAfterBlurList
void GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassAfterBlurList(System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassAfterBlurList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass", "_bloomPrePassAfterBlurList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassBeforeBlurList
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassBeforeBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::_get__bloomPrePassBeforeBlurList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>*>("", "BloomPrePassNonLightPass", "_bloomPrePassBeforeBlurList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<BloomPrePassNonLightPass> _bloomPrePassBeforeBlurList
void GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassBeforeBlurList(System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::_set__bloomPrePassBeforeBlurList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass", "_bloomPrePassBeforeBlurList", value));
}
// Autogenerated method: BloomPrePassNonLightPass.get_executionTimeType
GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::get_executionTimeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::get_executionTimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_executionTimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.get_bloomPrePassAfterBlurList
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", "get_bloomPrePassAfterBlurList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.get_bloomPrePassBeforeBlurList
System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", "get_bloomPrePassBeforeBlurList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnEnable
void GlobalNamespace::BloomPrePassNonLightPass::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnDisable
void GlobalNamespace::BloomPrePassNonLightPass::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Register
void GlobalNamespace::BloomPrePassNonLightPass::Register() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Unregister
void GlobalNamespace::BloomPrePassNonLightPass::Unregister() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.OnValidate
void GlobalNamespace::BloomPrePassNonLightPass::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassNonLightPass.Render
void GlobalNamespace::BloomPrePassNonLightPass::Render(UnityEngine::RenderTexture* dest, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dest, viewMatrix, projectionMatrix);
}
// Autogenerated method: BloomPrePassNonLightPass..cctor
void GlobalNamespace::BloomPrePassNonLightPass::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassNonLightPass", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassNonLightPass::get_executionTimeType
// Il2CppName: get_executionTimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::get_executionTimeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "get_executionTimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList
// Il2CppName: get_bloomPrePassAfterBlurList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* (*)()>(&BloomPrePassNonLightPass::get_bloomPrePassAfterBlurList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "get_bloomPrePassAfterBlurList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList
// Il2CppName: get_bloomPrePassBeforeBlurList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::BloomPrePassNonLightPass*>* (*)()>(&BloomPrePassNonLightPass::get_bloomPrePassBeforeBlurList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "get_bloomPrePassBeforeBlurList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::Register)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::Unregister)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)(UnityEngine::RenderTexture*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4)>(&BloomPrePassNonLightPass::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassNonLightPass::*)()>(&BloomPrePassNonLightPass::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassNonLightPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassNonLightPass::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassNonLightPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassNonLightPass/ExecutionTimeType
#include "GlobalNamespace/BloomPrePassNonLightPass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType None
GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "None"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType None
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_None(GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType BeforeBlur
GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_BeforeBlur() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_BeforeBlur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "BeforeBlur"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType BeforeBlur
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_BeforeBlur(GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_BeforeBlur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "BeforeBlur", value));
}
// Autogenerated static field getter
// Get static field: static public BloomPrePassNonLightPass/ExecutionTimeType AfterBlur
GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_AfterBlur() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_get_AfterBlur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType>("", "BloomPrePassNonLightPass/ExecutionTimeType", "AfterBlur"));
}
// Autogenerated static field setter
// Set static field: static public BloomPrePassNonLightPass/ExecutionTimeType AfterBlur
void GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_AfterBlur(GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassNonLightPass::ExecutionTimeType::_set_AfterBlur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassNonLightPass/ExecutionTimeType", "AfterBlur", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRenderDataSO
#include "GlobalNamespace/BloomPrePassRenderDataSO.hpp"
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassRenderDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRenderDataSO::*)()>(&BloomPrePassRenderDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRenderDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRenderDataSO::*)()>(&BloomPrePassRenderDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRenderDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRenderDataSO/Data
#include "GlobalNamespace/BloomPrePassRenderDataSO_Data.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassRenderDataSO::Data::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRenderDataSO::Data::*)()>(&BloomPrePassRenderDataSO::Data::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRenderDataSO::Data*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRenderDataSO::Data::*)()>(&BloomPrePassRenderDataSO::Data::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRenderDataSO::Data*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassRendererSO/PreallocationData
#include "GlobalNamespace/BloomPrePassRendererSO_PreallocationData.hpp"
// Including type: BloomPrePassRendererSO/LightsRenderingData
#include "GlobalNamespace/BloomPrePassRendererSO_LightsRenderingData.hpp"
// Including type: BloomFogSO
#include "GlobalNamespace/BloomFogSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: IBloomPrePassParams
#include "GlobalNamespace/IBloomPrePassParams.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5E78
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _vertexTransformMatrixID
int GlobalNamespace::BloomPrePassRendererSO::_get__vertexTransformMatrixID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_get__vertexTransformMatrixID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_vertexTransformMatrixID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _vertexTransformMatrixID
void GlobalNamespace::BloomPrePassRendererSO::_set__vertexTransformMatrixID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_set__vertexTransformMatrixID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_vertexTransformMatrixID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5E88
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _bloomPrePassTextureID
int GlobalNamespace::BloomPrePassRendererSO::_get__bloomPrePassTextureID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_get__bloomPrePassTextureID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_bloomPrePassTextureID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _bloomPrePassTextureID
void GlobalNamespace::BloomPrePassRendererSO::_set__bloomPrePassTextureID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_set__bloomPrePassTextureID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_bloomPrePassTextureID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5E98
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _stereoCameraEyeOffsetID
int GlobalNamespace::BloomPrePassRendererSO::_get__stereoCameraEyeOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_get__stereoCameraEyeOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_stereoCameraEyeOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _stereoCameraEyeOffsetID
void GlobalNamespace::BloomPrePassRendererSO::_set__stereoCameraEyeOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_set__stereoCameraEyeOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_stereoCameraEyeOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5EA8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _customFogTextureToScreenRatioID
int GlobalNamespace::BloomPrePassRendererSO::_get__customFogTextureToScreenRatioID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_get__customFogTextureToScreenRatioID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BloomPrePassRendererSO", "_customFogTextureToScreenRatioID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _customFogTextureToScreenRatioID
void GlobalNamespace::BloomPrePassRendererSO::_set__customFogTextureToScreenRatioID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::_set__customFogTextureToScreenRatioID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BloomPrePassRendererSO", "_customFogTextureToScreenRatioID", value));
}
// Autogenerated method: BloomPrePassRendererSO.OnDisable
void GlobalNamespace::BloomPrePassRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.Init
void GlobalNamespace::BloomPrePassRendererSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.Cleanup
void GlobalNamespace::BloomPrePassRendererSO::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.RenderAndSetData
void GlobalNamespace::BloomPrePassRendererSO::RenderAndSetData(UnityEngine::Vector3 cameraPos, UnityEngine::Matrix4x4 projectionMatrix, UnityEngine::Matrix4x4 viewMatrix, float stereoCameraEyeOffset, GlobalNamespace::IBloomPrePassParams* bloomPrePassParams, UnityEngine::RenderTexture* dest, UnityEngine::Vector2& textureToScreenRatio, GlobalNamespace::ToneMapping& toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::RenderAndSetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderAndSetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(stereoCameraEyeOffset), ::il2cpp_utils::ExtractType(bloomPrePassParams), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ToneMapping&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cameraPos, projectionMatrix, viewMatrix, stereoCameraEyeOffset, bloomPrePassParams, dest, textureToScreenRatio, toneMapping);
}
// Autogenerated method: BloomPrePassRendererSO.SetDataToShaders
void GlobalNamespace::BloomPrePassRendererSO::SetDataToShaders(float stereoCameraEyeOffset, UnityEngine::Vector2 textureToScreenRatio, UnityEngine::Texture* bloomFogTexture, GlobalNamespace::ToneMapping toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::SetDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassRendererSO", "SetDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stereoCameraEyeOffset), ::il2cpp_utils::ExtractType(textureToScreenRatio), ::il2cpp_utils::ExtractType(bloomFogTexture), ::il2cpp_utils::ExtractType(toneMapping)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stereoCameraEyeOffset, textureToScreenRatio, bloomFogTexture, toneMapping);
}
// Autogenerated method: BloomPrePassRendererSO.SetCustomStereoCameraEyeOffset
void GlobalNamespace::BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset(float stereoCameraEyeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCustomStereoCameraEyeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stereoCameraEyeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stereoCameraEyeOffset);
}
// Autogenerated method: BloomPrePassRendererSO.CreateBloomPrePassRenderTextureIfNeeded
UnityEngine::RenderTexture* GlobalNamespace::BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded(UnityEngine::RenderTexture* renderTexture, GlobalNamespace::IBloomPrePassParams* bloomPrePassParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBloomPrePassRenderTextureIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture), ::il2cpp_utils::ExtractType(bloomPrePassParams)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(this, ___internal__method, renderTexture, bloomPrePassParams);
}
// Autogenerated method: BloomPrePassRendererSO.EnableBloomFog
void GlobalNamespace::BloomPrePassRendererSO::EnableBloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::EnableBloomFog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableBloomFog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.DisableBloomFog
void GlobalNamespace::BloomPrePassRendererSO::DisableBloomFog() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::DisableBloomFog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableBloomFog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.UpdateBloomFogParams
void GlobalNamespace::BloomPrePassRendererSO::UpdateBloomFogParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::UpdateBloomFogParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBloomFogParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO.GetCameraParams
void GlobalNamespace::BloomPrePassRendererSO::GetCameraParams(UnityEngine::Camera* camera, UnityEngine::Matrix4x4& projectionMatrix, UnityEngine::Matrix4x4& viewMatrix, float& stereoCameraEyeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::GetCameraParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera, projectionMatrix, viewMatrix, stereoCameraEyeOffset);
}
// Autogenerated method: BloomPrePassRendererSO.RenderAllLights
void GlobalNamespace::BloomPrePassRendererSO::RenderAllLights(UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix, float linesWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::RenderAllLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderAllLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(linesWidth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewMatrix, projectionMatrix, linesWidth);
}
// Autogenerated method: BloomPrePassRendererSO.PrepareLightsMeshRendering
void GlobalNamespace::BloomPrePassRendererSO::PrepareLightsMeshRendering(GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData* data, int numberOfLights) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::PrepareLightsMeshRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareLightsMeshRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(numberOfLights)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, numberOfLights);
}
// Autogenerated method: BloomPrePassRendererSO.MatrixLerp
UnityEngine::Matrix4x4 GlobalNamespace::BloomPrePassRendererSO::MatrixLerp(UnityEngine::Matrix4x4 from, UnityEngine::Matrix4x4 to, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::MatrixLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatrixLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(this, ___internal__method, from, to, t);
}
// Autogenerated method: BloomPrePassRendererSO.OnEnable
void GlobalNamespace::BloomPrePassRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassRendererSO..cctor
void GlobalNamespace::BloomPrePassRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomPrePassRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassRendererSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::Cleanup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::RenderAndSetData
// Il2CppName: RenderAndSetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)(UnityEngine::Vector3, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4, float, GlobalNamespace::IBloomPrePassParams*, UnityEngine::RenderTexture*, UnityEngine::Vector2&, GlobalNamespace::ToneMapping&)>(&BloomPrePassRendererSO::RenderAndSetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "RenderAndSetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBloomPrePassParams*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ToneMapping&>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::SetDataToShaders
// Il2CppName: SetDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, UnityEngine::Vector2, UnityEngine::Texture*, GlobalNamespace::ToneMapping)>(&BloomPrePassRendererSO::SetDataToShaders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "SetDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ToneMapping>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset
// Il2CppName: SetCustomStereoCameraEyeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)(float)>(&BloomPrePassRendererSO::SetCustomStereoCameraEyeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "SetCustomStereoCameraEyeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded
// Il2CppName: CreateBloomPrePassRenderTextureIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (BloomPrePassRendererSO::*)(UnityEngine::RenderTexture*, GlobalNamespace::IBloomPrePassParams*)>(&BloomPrePassRendererSO::CreateBloomPrePassRenderTextureIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "CreateBloomPrePassRenderTextureIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBloomPrePassParams*>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::EnableBloomFog
// Il2CppName: EnableBloomFog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::EnableBloomFog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "EnableBloomFog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::DisableBloomFog
// Il2CppName: DisableBloomFog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::DisableBloomFog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "DisableBloomFog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::UpdateBloomFogParams
// Il2CppName: UpdateBloomFogParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::UpdateBloomFogParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "UpdateBloomFogParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::GetCameraParams
// Il2CppName: GetCameraParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)(UnityEngine::Camera*, UnityEngine::Matrix4x4&, UnityEngine::Matrix4x4&, float&)>(&BloomPrePassRendererSO::GetCameraParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "GetCameraParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::RenderAllLights
// Il2CppName: RenderAllLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)(UnityEngine::Matrix4x4, UnityEngine::Matrix4x4, float)>(&BloomPrePassRendererSO::RenderAllLights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "RenderAllLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::PrepareLightsMeshRendering
// Il2CppName: PrepareLightsMeshRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)(GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData*, int)>(&BloomPrePassRendererSO::PrepareLightsMeshRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "PrepareLightsMeshRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BloomPrePassRendererSO::LightsRenderingData*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::MatrixLerp
// Il2CppName: MatrixLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (BloomPrePassRendererSO::*)(UnityEngine::Matrix4x4, UnityEngine::Matrix4x4, float)>(&BloomPrePassRendererSO::MatrixLerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "MatrixLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::*)()>(&BloomPrePassRendererSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassRendererSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BloomPrePassRendererSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassRendererSO/PreallocationData
#include "GlobalNamespace/BloomPrePassRendererSO_PreallocationData.hpp"
// Including type: BloomPrePassLightTypeSO
#include "GlobalNamespace/BloomPrePassLightTypeSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassRendererSO::PreallocationData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::PreallocationData::*)()>(&BloomPrePassRendererSO::PreallocationData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO::PreallocationData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::PreallocationData::*)()>(&BloomPrePassRendererSO::PreallocationData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO::PreallocationData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassRendererSO/LightsRenderingData
#include "GlobalNamespace/BloomPrePassRendererSO_LightsRenderingData.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassRendererSO::LightsRenderingData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::LightsRenderingData::*)()>(&BloomPrePassRendererSO::LightsRenderingData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO::LightsRenderingData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassRendererSO::LightsRenderingData::*)()>(&BloomPrePassRendererSO::LightsRenderingData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassRendererSO::LightsRenderingData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBloomPrePassParams
#include "GlobalNamespace/IBloomPrePassParams.hpp"
// Including type: TextureEffectSO
#include "GlobalNamespace/TextureEffectSO.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBloomPrePassParams.get_textureEffect
GlobalNamespace::TextureEffectSO* GlobalNamespace::IBloomPrePassParams::get_textureEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_textureEffect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TextureEffectSO*, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_textureWidth
int GlobalNamespace::IBloomPrePassParams::get_textureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_textureWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_textureHeight
int GlobalNamespace::IBloomPrePassParams::get_textureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_textureHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_fov
UnityEngine::Vector2 GlobalNamespace::IBloomPrePassParams::get_fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_fov");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_linesWidth
float GlobalNamespace::IBloomPrePassParams::get_linesWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_linesWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linesWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBloomPrePassParams.get_toneMapping
GlobalNamespace::ToneMapping GlobalNamespace::IBloomPrePassParams::get_toneMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBloomPrePassParams::get_toneMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toneMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ToneMapping, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IBloomPrePassParams::get_textureEffect
// Il2CppName: get_textureEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TextureEffectSO* (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_textureEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_textureEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBloomPrePassParams::get_textureWidth
// Il2CppName: get_textureWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_textureWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_textureWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBloomPrePassParams::get_textureHeight
// Il2CppName: get_textureHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_textureHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_textureHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBloomPrePassParams::get_fov
// Il2CppName: get_fov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_fov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_fov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBloomPrePassParams::get_linesWidth
// Il2CppName: get_linesWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_linesWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_linesWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBloomPrePassParams::get_toneMapping
// Il2CppName: get_toneMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ToneMapping (IBloomPrePassParams::*)()>(&IBloomPrePassParams::get_toneMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBloomPrePassParams*), "get_toneMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMaxWidth
float GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "Parametric3SliceSpriteController", "kMaxWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxWidth
void GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "kMaxWidth", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxLength
float GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get_kMaxLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "Parametric3SliceSpriteController", "kMaxLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxLength
void GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set_kMaxLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "kMaxLength", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5F20
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::Parametric3SliceSpriteController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::Parametric3SliceSpriteController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5F30
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::Parametric3SliceSpriteController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::Parametric3SliceSpriteController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_sizeParamsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5F40
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaStartID
int GlobalNamespace::Parametric3SliceSpriteController::_get__alphaStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__alphaStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_alphaStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaStartID
void GlobalNamespace::Parametric3SliceSpriteController::_set__alphaStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__alphaStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_alphaStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF5F50
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaEndID
int GlobalNamespace::Parametric3SliceSpriteController::_get__alphaEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__alphaEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_alphaEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaEndID
void GlobalNamespace::Parametric3SliceSpriteController::_set__alphaEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__alphaEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_alphaEndID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::Parametric3SliceSpriteController::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "Parametric3SliceSpriteController", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::Parametric3SliceSpriteController::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_materialPropertyBlock", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Mesh _mesh
UnityEngine::Mesh* GlobalNamespace::Parametric3SliceSpriteController::_get__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__mesh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Mesh*>("", "Parametric3SliceSpriteController", "_mesh"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Mesh _mesh
void GlobalNamespace::Parametric3SliceSpriteController::_set__mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__mesh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_mesh", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _instanceCount
int GlobalNamespace::Parametric3SliceSpriteController::_get__instanceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_get__instanceCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Parametric3SliceSpriteController", "_instanceCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _instanceCount
void GlobalNamespace::Parametric3SliceSpriteController::_set__instanceCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::_set__instanceCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Parametric3SliceSpriteController", "_instanceCount", value));
}
// Autogenerated method: Parametric3SliceSpriteController.Awake
void GlobalNamespace::Parametric3SliceSpriteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Start
void GlobalNamespace::Parametric3SliceSpriteController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnEnable
void GlobalNamespace::Parametric3SliceSpriteController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnDisable
void GlobalNamespace::Parametric3SliceSpriteController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.OnDestroy
void GlobalNamespace::Parametric3SliceSpriteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Init
void GlobalNamespace::Parametric3SliceSpriteController::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.CreateMesh
UnityEngine::Mesh* GlobalNamespace::Parametric3SliceSpriteController::CreateMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::CreateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController.Refresh
void GlobalNamespace::Parametric3SliceSpriteController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Parametric3SliceSpriteController..cctor
void GlobalNamespace::Parametric3SliceSpriteController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Parametric3SliceSpriteController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Parametric3SliceSpriteController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Parametric3SliceSpriteController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::CreateMesh
// Il2CppName: CreateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::CreateMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "CreateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parametric3SliceSpriteController::*)()>(&Parametric3SliceSpriteController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parametric3SliceSpriteController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Parametric3SliceSpriteController::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parametric3SliceSpriteController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxController
#include "GlobalNamespace/ParametricBoxController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::ParametricBoxController::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "ParametricBoxController", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::ParametricBoxController::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_materialPropertyBlock", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6008
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6018
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaStartID
int GlobalNamespace::ParametricBoxController::_get__alphaStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__alphaStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_alphaStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaStartID
void GlobalNamespace::ParametricBoxController::_set__alphaStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__alphaStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_alphaStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6028
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaEndID
int GlobalNamespace::ParametricBoxController::_get__alphaEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__alphaEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_alphaEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaEndID
void GlobalNamespace::ParametricBoxController::_set__alphaEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__alphaEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_alphaEndID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6038
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthStartID
int GlobalNamespace::ParametricBoxController::_get__widthStartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__widthStartID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_widthStartID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthStartID
void GlobalNamespace::ParametricBoxController::_set__widthStartID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__widthStartID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_widthStartID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6048
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _widthEndID
int GlobalNamespace::ParametricBoxController::_get__widthEndID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_get__widthEndID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxController", "_widthEndID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _widthEndID
void GlobalNamespace::ParametricBoxController::_set__widthEndID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::_set__widthEndID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxController", "_widthEndID", value));
}
// Autogenerated method: ParametricBoxController.Awake
void GlobalNamespace::ParametricBoxController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.OnEnable
void GlobalNamespace::ParametricBoxController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.OnDisable
void GlobalNamespace::ParametricBoxController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController.Refresh
void GlobalNamespace::ParametricBoxController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxController..cctor
void GlobalNamespace::ParametricBoxController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ParametricBoxController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxController::*)()>(&ParametricBoxController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ParametricBoxController::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxFakeGlowController
#include "GlobalNamespace/ParametricBoxFakeGlowController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6078
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxFakeGlowController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFakeGlowController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxFakeGlowController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFakeGlowController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6088
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::ParametricBoxFakeGlowController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFakeGlowController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::ParametricBoxFakeGlowController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFakeGlowController", "_sizeParamsID", value));
}
// Autogenerated method: ParametricBoxFakeGlowController.set_localPosition
void GlobalNamespace::ParametricBoxFakeGlowController::set_localPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::set_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ParametricBoxFakeGlowController.Awake
void GlobalNamespace::ParametricBoxFakeGlowController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.OnEnable
void GlobalNamespace::ParametricBoxFakeGlowController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.OnDisable
void GlobalNamespace::ParametricBoxFakeGlowController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController.Refresh
void GlobalNamespace::ParametricBoxFakeGlowController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFakeGlowController..cctor
void GlobalNamespace::ParametricBoxFakeGlowController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFakeGlowController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxFakeGlowController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::set_localPosition
// Il2CppName: set_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)(UnityEngine::Vector3)>(&ParametricBoxFakeGlowController::set_localPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), "set_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFakeGlowController::*)()>(&ParametricBoxFakeGlowController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFakeGlowController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ParametricBoxFakeGlowController::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFakeGlowController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ParametricBoxFrameController
#include "GlobalNamespace/ParametricBoxFrameController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF60B8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::ParametricBoxFrameController::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFrameController", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::ParametricBoxFrameController::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFrameController", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF60C8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::ParametricBoxFrameController::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ParametricBoxFrameController", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::ParametricBoxFrameController::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ParametricBoxFrameController", "_sizeParamsID", value));
}
// Autogenerated method: ParametricBoxFrameController.set_localPosition
void GlobalNamespace::ParametricBoxFrameController::set_localPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::set_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ParametricBoxFrameController.Awake
void GlobalNamespace::ParametricBoxFrameController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.OnEnable
void GlobalNamespace::ParametricBoxFrameController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.OnDisable
void GlobalNamespace::ParametricBoxFrameController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController.Refresh
void GlobalNamespace::ParametricBoxFrameController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParametricBoxFrameController..cctor
void GlobalNamespace::ParametricBoxFrameController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParametricBoxFrameController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ParametricBoxFrameController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ParametricBoxFrameController::set_localPosition
// Il2CppName: set_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)(UnityEngine::Vector3)>(&ParametricBoxFrameController::set_localPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), "set_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParametricBoxFrameController::*)()>(&ParametricBoxFrameController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParametricBoxFrameController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ParametricBoxFrameController::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParametricBoxFrameController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneCameraBloomPrePass
#include "GlobalNamespace/SceneCameraBloomPrePass.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneCameraBloomPrePass.OnCameraPreRender
void GlobalNamespace::SceneCameraBloomPrePass::OnCameraPreRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneCameraBloomPrePass::OnCameraPreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: SceneCameraBloomPrePass.OnCameraPostRender
void GlobalNamespace::SceneCameraBloomPrePass::OnCameraPostRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneCameraBloomPrePass::OnCameraPostRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Writing MetadataGetter for method: SceneCameraBloomPrePass::OnCameraPreRender
// Il2CppName: OnCameraPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneCameraBloomPrePass::*)(UnityEngine::Camera*)>(&SceneCameraBloomPrePass::OnCameraPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneCameraBloomPrePass*), "OnCameraPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: SceneCameraBloomPrePass::OnCameraPostRender
// Il2CppName: OnCameraPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneCameraBloomPrePass::*)(UnityEngine::Camera*)>(&SceneCameraBloomPrePass::OnCameraPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneCameraBloomPrePass*), "OnCameraPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: SceneCameraBloomPrePass::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneCameraBloomPrePass::*)()>(&SceneCameraBloomPrePass::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneCameraBloomPrePass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneCameraBloomPrePass::*)()>(&SceneCameraBloomPrePass::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneCameraBloomPrePass*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ToneMapping None
GlobalNamespace::ToneMapping GlobalNamespace::ToneMapping::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMapping::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ToneMapping>("", "ToneMapping", "None"));
}
// Autogenerated static field setter
// Set static field: static public ToneMapping None
void GlobalNamespace::ToneMapping::_set_None(GlobalNamespace::ToneMapping value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMapping::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMapping", "None", value));
}
// Autogenerated static field getter
// Get static field: static public ToneMapping Aces
GlobalNamespace::ToneMapping GlobalNamespace::ToneMapping::_get_Aces() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMapping::_get_Aces");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ToneMapping>("", "ToneMapping", "Aces"));
}
// Autogenerated static field setter
// Set static field: static public ToneMapping Aces
void GlobalNamespace::ToneMapping::_set_Aces(GlobalNamespace::ToneMapping value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMapping::_set_Aces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMapping", "Aces", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ToneMappingExtensions
#include "GlobalNamespace/ToneMappingExtensions.hpp"
// Including type: ToneMapping
#include "GlobalNamespace/ToneMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF60F8
// Autogenerated static field getter
// Get static field: static private readonly System.String[] _shaderKeywordMap
::Array<::Il2CppString*>* GlobalNamespace::ToneMappingExtensions::_get__shaderKeywordMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMappingExtensions::_get__shaderKeywordMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("", "ToneMappingExtensions", "_shaderKeywordMap"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] _shaderKeywordMap
void GlobalNamespace::ToneMappingExtensions::_set__shaderKeywordMap(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMappingExtensions::_set__shaderKeywordMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToneMappingExtensions", "_shaderKeywordMap", value));
}
// Autogenerated method: ToneMappingExtensions.SetShaderKeyword
void GlobalNamespace::ToneMappingExtensions::SetShaderKeyword(GlobalNamespace::ToneMapping toneMapping) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMappingExtensions::SetShaderKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ToneMappingExtensions", "SetShaderKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toneMapping)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toneMapping);
}
// Autogenerated method: ToneMappingExtensions..cctor
void GlobalNamespace::ToneMappingExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ToneMappingExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ToneMappingExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ToneMappingExtensions::SetShaderKeyword
// Il2CppName: SetShaderKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::ToneMapping)>(&ToneMappingExtensions::SetShaderKeyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ToneMappingExtensions*), "SetShaderKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ToneMapping>()});
  }
};
// Writing MetadataGetter for method: ToneMappingExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ToneMappingExtensions::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ToneMappingExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: ParametricBoxController
#include "GlobalNamespace/ParametricBoxController.hpp"
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TubeBloomPrePassLight.add_didRefreshEvent
void GlobalNamespace::TubeBloomPrePassLight::add_didRefreshEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::add_didRefreshEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didRefreshEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.remove_didRefreshEvent
void GlobalNamespace::TubeBloomPrePassLight::remove_didRefreshEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::remove_didRefreshEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didRefreshEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_colorAlphaMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_colorAlphaMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_colorAlphaMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorAlphaMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_center
float GlobalNamespace::TubeBloomPrePassLight::get_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_center");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_center", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.MarkDirty
void GlobalNamespace::TubeBloomPrePassLight::MarkDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::MarkDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_length
float GlobalNamespace::TubeBloomPrePassLight::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_length
void GlobalNamespace::TubeBloomPrePassLight::set_length(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::set_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_width
float GlobalNamespace::TubeBloomPrePassLight::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_width
void GlobalNamespace::TubeBloomPrePassLight::set_width(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::set_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_lightWidthMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_lightWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_lightWidthMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_lightWidthMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::set_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_bloomFogIntensityMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_bloomFogIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_bloomFogIntensityMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_bloomFogIntensityMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::set_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.set_color
void GlobalNamespace::TubeBloomPrePassLight::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_color
UnityEngine::Color GlobalNamespace::TubeBloomPrePassLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.ClipPoints
void GlobalNamespace::TubeBloomPrePassLight::ClipPoints(UnityEngine::Vector4& fromPointClipPos, UnityEngine::Vector4& toPointClipPos, UnityEngine::Vector3& fromPointViewPos, UnityEngine::Vector3& toPointViewPos, bool fromPointInside, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::ClipPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClipPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPointClipPos), ::il2cpp_utils::ExtractType(toPointClipPos), ::il2cpp_utils::ExtractType(fromPointViewPos), ::il2cpp_utils::ExtractType(toPointViewPos), ::il2cpp_utils::ExtractType(fromPointInside), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fromPointClipPos, toPointClipPos, fromPointViewPos, toPointViewPos, fromPointInside, t);
}
// Autogenerated method: TubeBloomPrePassLight.OnDrawGizmos
void GlobalNamespace::TubeBloomPrePassLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.get_isDirty
bool GlobalNamespace::TubeBloomPrePassLight::get_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::get_isDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.OnEnable
void GlobalNamespace::TubeBloomPrePassLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.DidRegisterLight
void GlobalNamespace::TubeBloomPrePassLight::DidRegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::DidRegisterLight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidRegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.Refresh
void GlobalNamespace::TubeBloomPrePassLight::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.FillMeshData
void GlobalNamespace::TubeBloomPrePassLight::FillMeshData(int lightNum, ::Array<UnityEngine::Vector3>* vertices, ::Array<UnityEngine::Color>* colors, ::Array<UnityEngine::Vector4>* viewPos, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix, float lineWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLight::FillMeshData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillMeshData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightNum), ::il2cpp_utils::ExtractType(vertices), ::il2cpp_utils::ExtractType(colors), ::il2cpp_utils::ExtractType(viewPos), ::il2cpp_utils::ExtractType(viewMatrix), ::il2cpp_utils::ExtractType(projectionMatrix), ::il2cpp_utils::ExtractType(lineWidth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightNum, vertices, colors, viewPos, viewMatrix, projectionMatrix, lineWidth);
}
// Writing MetadataGetter for method: TubeBloomPrePassLight::add_didRefreshEvent
// Il2CppName: add_didRefreshEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(System::Action*)>(&TubeBloomPrePassLight::add_didRefreshEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "add_didRefreshEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::remove_didRefreshEvent
// Il2CppName: remove_didRefreshEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(System::Action*)>(&TubeBloomPrePassLight::remove_didRefreshEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "remove_didRefreshEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_colorAlphaMultiplier
// Il2CppName: get_colorAlphaMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_colorAlphaMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_colorAlphaMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_center
// Il2CppName: get_center
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_center)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::MarkDirty
// Il2CppName: MarkDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::MarkDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "MarkDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::set_length
// Il2CppName: set_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(float)>(&TubeBloomPrePassLight::set_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "set_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(float)>(&TubeBloomPrePassLight::set_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_lightWidthMultiplier
// Il2CppName: get_lightWidthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_lightWidthMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_lightWidthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::set_lightWidthMultiplier
// Il2CppName: set_lightWidthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(float)>(&TubeBloomPrePassLight::set_lightWidthMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "set_lightWidthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_bloomFogIntensityMultiplier
// Il2CppName: get_bloomFogIntensityMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_bloomFogIntensityMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::set_bloomFogIntensityMultiplier
// Il2CppName: set_bloomFogIntensityMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(float)>(&TubeBloomPrePassLight::set_bloomFogIntensityMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "set_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(UnityEngine::Color)>(&TubeBloomPrePassLight::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::ClipPoints
// Il2CppName: ClipPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(UnityEngine::Vector4&, UnityEngine::Vector4&, UnityEngine::Vector3&, UnityEngine::Vector3&, bool, float)>(&TubeBloomPrePassLight::ClipPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "ClipPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::OnDrawGizmos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::get_isDirty
// Il2CppName: get_isDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::get_isDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "get_isDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::DidRegisterLight
// Il2CppName: DidRegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::DidRegisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "DidRegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::FillMeshData
// Il2CppName: FillMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)(int, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Color>*, ::Array<UnityEngine::Vector4>*, UnityEngine::Matrix4x4, UnityEngine::Matrix4x4, float)>(&TubeBloomPrePassLight::FillMeshData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), "FillMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Color>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLight::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLight::*)()>(&TubeBloomPrePassLight::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlueNoiseDithering
#include "GlobalNamespace/BlueNoiseDithering.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6518
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _noiseParamsID
int GlobalNamespace::BlueNoiseDithering::_get__noiseParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::_get__noiseParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlueNoiseDithering", "_noiseParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _noiseParamsID
void GlobalNamespace::BlueNoiseDithering::_set__noiseParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::_set__noiseParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlueNoiseDithering", "_noiseParamsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6528
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _globalNoiseTextureID
int GlobalNamespace::BlueNoiseDithering::_get__globalNoiseTextureID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::_get__globalNoiseTextureID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlueNoiseDithering", "_globalNoiseTextureID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _globalNoiseTextureID
void GlobalNamespace::BlueNoiseDithering::_set__globalNoiseTextureID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::_set__globalNoiseTextureID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlueNoiseDithering", "_globalNoiseTextureID", value));
}
// Autogenerated method: BlueNoiseDithering.SetBlueNoiseShaderParams
void GlobalNamespace::BlueNoiseDithering::SetBlueNoiseShaderParams(int cameraPixelWidth, int cameraPixelHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::SetBlueNoiseShaderParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBlueNoiseShaderParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPixelWidth), ::il2cpp_utils::ExtractType(cameraPixelHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cameraPixelWidth, cameraPixelHeight);
}
// Autogenerated method: BlueNoiseDithering..cctor
void GlobalNamespace::BlueNoiseDithering::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDithering::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BlueNoiseDithering", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BlueNoiseDithering::SetBlueNoiseShaderParams
// Il2CppName: SetBlueNoiseShaderParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDithering::*)(int, int)>(&BlueNoiseDithering::SetBlueNoiseShaderParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDithering*), "SetBlueNoiseShaderParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BlueNoiseDithering::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDithering::*)()>(&BlueNoiseDithering::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDithering*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDithering::*)()>(&BlueNoiseDithering::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDithering*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlueNoiseDithering::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BlueNoiseDithering::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDithering*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlueNoiseDitheringUpdater
#include "GlobalNamespace/BlueNoiseDitheringUpdater.hpp"
// Including type: BlueNoiseDithering
#include "GlobalNamespace/BlueNoiseDithering.hpp"
// Including type: RandomValueToShader
#include "GlobalNamespace/RandomValueToShader.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BlueNoiseDitheringUpdater.OnEnable
void GlobalNamespace::BlueNoiseDitheringUpdater::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDitheringUpdater::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlueNoiseDitheringUpdater.OnDisable
void GlobalNamespace::BlueNoiseDitheringUpdater::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDitheringUpdater::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlueNoiseDitheringUpdater.HandleCameraPreRender
void GlobalNamespace::BlueNoiseDitheringUpdater::HandleCameraPreRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlueNoiseDitheringUpdater::HandleCameraPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Writing MetadataGetter for method: BlueNoiseDitheringUpdater::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDitheringUpdater::*)()>(&BlueNoiseDitheringUpdater::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDitheringUpdater*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlueNoiseDitheringUpdater::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDitheringUpdater::*)()>(&BlueNoiseDitheringUpdater::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDitheringUpdater*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlueNoiseDitheringUpdater::HandleCameraPreRender
// Il2CppName: HandleCameraPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDitheringUpdater::*)(UnityEngine::Camera*)>(&BlueNoiseDitheringUpdater::HandleCameraPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDitheringUpdater*), "HandleCameraPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: BlueNoiseDitheringUpdater::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDitheringUpdater::*)()>(&BlueNoiseDitheringUpdater::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDitheringUpdater*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlueNoiseDitheringUpdater::*)()>(&BlueNoiseDitheringUpdater::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlueNoiseDitheringUpdater*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomValueToShader
#include "GlobalNamespace/RandomValueToShader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6558
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _randomValueID
int GlobalNamespace::RandomValueToShader::_get__randomValueID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomValueToShader::_get__randomValueID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RandomValueToShader", "_randomValueID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _randomValueID
void GlobalNamespace::RandomValueToShader::_set__randomValueID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomValueToShader::_set__randomValueID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomValueToShader", "_randomValueID", value));
}
// Autogenerated method: RandomValueToShader.SetRandomValueToShaders
void GlobalNamespace::RandomValueToShader::SetRandomValueToShaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomValueToShader::SetRandomValueToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRandomValueToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomValueToShader..cctor
void GlobalNamespace::RandomValueToShader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomValueToShader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RandomValueToShader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: RandomValueToShader::SetRandomValueToShaders
// Il2CppName: SetRandomValueToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomValueToShader::*)()>(&RandomValueToShader::SetRandomValueToShaders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomValueToShader*), "SetRandomValueToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomValueToShader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomValueToShader::*)()>(&RandomValueToShader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomValueToShader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomValueToShader::*)()>(&RandomValueToShader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomValueToShader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomValueToShader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RandomValueToShader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomValueToShader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CameraRenderCallbacksManager
#include "GlobalNamespace/CameraRenderCallbacksManager.hpp"
// Including type: CameraRenderCallbacksManager/ICameraRenderCallbacks
#include "GlobalNamespace/CameraRenderCallbacksManager_ICameraRenderCallbacks.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CameraRenderCallbacksManager> _callbackManagers
System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CameraRenderCallbacksManager*>* GlobalNamespace::CameraRenderCallbacksManager::_get__callbackManagers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::_get__callbackManagers");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CameraRenderCallbacksManager*>*>("", "CameraRenderCallbacksManager", "_callbackManagers")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Camera,CameraRenderCallbacksManager> _callbackManagers
void GlobalNamespace::CameraRenderCallbacksManager::_set__callbackManagers(System::Collections::Generic::Dictionary_2<UnityEngine::Camera*, GlobalNamespace::CameraRenderCallbacksManager*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::_set__callbackManagers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CameraRenderCallbacksManager", "_callbackManagers", value));
}
// Autogenerated method: CameraRenderCallbacksManager.RegisterForCameraCallbacks
void GlobalNamespace::CameraRenderCallbacksManager::RegisterForCameraCallbacks(UnityEngine::Camera* camera, GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks* observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::RegisterForCameraCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CameraRenderCallbacksManager", "RegisterForCameraCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(observer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, camera, observer);
}
// Autogenerated method: CameraRenderCallbacksManager.UnregisterFromCameraCallbacks
void GlobalNamespace::CameraRenderCallbacksManager::UnregisterFromCameraCallbacks(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks* observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::UnregisterFromCameraCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CameraRenderCallbacksManager", "UnregisterFromCameraCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(observer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, observer);
}
// Autogenerated method: CameraRenderCallbacksManager.RegisterForCameraCallbacks
void GlobalNamespace::CameraRenderCallbacksManager::RegisterForCameraCallbacks(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks* observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::RegisterForCameraCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForCameraCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(observer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, observer);
}
// Autogenerated method: CameraRenderCallbacksManager.UnregisterFromCameraCallbacksInternal
void GlobalNamespace::CameraRenderCallbacksManager::UnregisterFromCameraCallbacksInternal(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks* observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::UnregisterFromCameraCallbacksInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromCameraCallbacksInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(observer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, observer);
}
// Autogenerated method: CameraRenderCallbacksManager.Awake
void GlobalNamespace::CameraRenderCallbacksManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CameraRenderCallbacksManager.OnPreRender
void GlobalNamespace::CameraRenderCallbacksManager::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CameraRenderCallbacksManager.OnPostRender
void GlobalNamespace::CameraRenderCallbacksManager::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CameraRenderCallbacksManager..cctor
void GlobalNamespace::CameraRenderCallbacksManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CameraRenderCallbacksManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: CameraRenderCallbacksManager::RegisterForCameraCallbacks
// Il2CppName: RegisterForCameraCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*, GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*)>(&CameraRenderCallbacksManager::RegisterForCameraCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "RegisterForCameraCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*>()});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::UnregisterFromCameraCallbacks
// Il2CppName: UnregisterFromCameraCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*)>(&CameraRenderCallbacksManager::UnregisterFromCameraCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "UnregisterFromCameraCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*>()});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::RegisterForCameraCallbacks
// Il2CppName: RegisterForCameraCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*)>(&CameraRenderCallbacksManager::RegisterForCameraCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "RegisterForCameraCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*>()});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::UnregisterFromCameraCallbacksInternal
// Il2CppName: UnregisterFromCameraCallbacksInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)(GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*)>(&CameraRenderCallbacksManager::UnregisterFromCameraCallbacksInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "UnregisterFromCameraCallbacksInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks*>()});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)()>(&CameraRenderCallbacksManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)()>(&CameraRenderCallbacksManager::OnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)()>(&CameraRenderCallbacksManager::OnPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)()>(&CameraRenderCallbacksManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::*)()>(&CameraRenderCallbacksManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CameraRenderCallbacksManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CameraRenderCallbacksManager/ICameraRenderCallbacks
#include "GlobalNamespace/CameraRenderCallbacksManager_ICameraRenderCallbacks.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CameraRenderCallbacksManager/ICameraRenderCallbacks.OnCameraPostRender
void GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPostRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPostRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: CameraRenderCallbacksManager/ICameraRenderCallbacks.OnCameraPreRender
void GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPreRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Writing MetadataGetter for method: CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPostRender
// Il2CppName: OnCameraPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::ICameraRenderCallbacks::*)(UnityEngine::Camera*)>(&CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager::ICameraRenderCallbacks*), "OnCameraPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPreRender
// Il2CppName: OnCameraPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraRenderCallbacksManager::ICameraRenderCallbacks::*)(UnityEngine::Camera*)>(&CameraRenderCallbacksManager::ICameraRenderCallbacks::OnCameraPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraRenderCallbacksManager::ICameraRenderCallbacks*), "OnCameraPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxLights
int GlobalNamespace::DirectionalLight::_get_kMaxLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_get_kMaxLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DirectionalLight", "kMaxLights"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxLights
void GlobalNamespace::DirectionalLight::_set_kMaxLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_set_kMaxLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "kMaxLights", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<DirectionalLight> _lights
System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>* GlobalNamespace::DirectionalLight::_get__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_get__lights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>*>("", "DirectionalLight", "_lights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<DirectionalLight> _lights
void GlobalNamespace::DirectionalLight::_set__lights(System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_set__lights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "_lights", value));
}
// Autogenerated static field getter
// Get static field: static private DirectionalLight _mainLight
GlobalNamespace::DirectionalLight* GlobalNamespace::DirectionalLight::_get__mainLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_get__mainLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DirectionalLight*>("", "DirectionalLight", "_mainLight"));
}
// Autogenerated static field setter
// Set static field: static private DirectionalLight _mainLight
void GlobalNamespace::DirectionalLight::_set__mainLight(GlobalNamespace::DirectionalLight* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::_set__mainLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DirectionalLight", "_mainLight", value));
}
// Autogenerated method: DirectionalLight.get_lights
System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>* GlobalNamespace::DirectionalLight::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DirectionalLight", "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DirectionalLight.OnEnable
void GlobalNamespace::DirectionalLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DirectionalLight.OnDisable
void GlobalNamespace::DirectionalLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DirectionalLight..cctor
void GlobalNamespace::DirectionalLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DirectionalLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: DirectionalLight::get_lights
// Il2CppName: get_lights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::DirectionalLight*>* (*)()>(&DirectionalLight::get_lights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), "get_lights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectionalLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLight::*)()>(&DirectionalLight::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectionalLight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLight::*)()>(&DirectionalLight::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectionalLight::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLight::*)()>(&DirectionalLight::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLight::*)()>(&DirectionalLight::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectionalLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DirectionalLight::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightManager
#include "GlobalNamespace/LightManager.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF657C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightDirectionsID
int GlobalNamespace::LightManager::_get__directionalLightDirectionsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__directionalLightDirectionsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightDirectionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightDirectionsID
void GlobalNamespace::LightManager::_set__directionalLightDirectionsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__directionalLightDirectionsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightDirectionsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF658C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightPositionID
int GlobalNamespace::LightManager::_get__directionalLightPositionID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__directionalLightPositionID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightPositionID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightPositionID
void GlobalNamespace::LightManager::_set__directionalLightPositionID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__directionalLightPositionID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightPositionID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF659C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightRadiiID
int GlobalNamespace::LightManager::_get__directionalLightRadiiID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__directionalLightRadiiID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightRadiiID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightRadiiID
void GlobalNamespace::LightManager::_set__directionalLightRadiiID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__directionalLightRadiiID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightRadiiID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF65AC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightColorsID
int GlobalNamespace::LightManager::_get__directionalLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__directionalLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightColorsID
void GlobalNamespace::LightManager::_set__directionalLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__directionalLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightColorsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF65BC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightPositionsID
int GlobalNamespace::LightManager::_get__pointLightPositionsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__pointLightPositionsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightPositionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightPositionsID
void GlobalNamespace::LightManager::_set__pointLightPositionsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__pointLightPositionsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightPositionsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF65CC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightColorsID
int GlobalNamespace::LightManager::_get__pointLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_get__pointLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightColorsID
void GlobalNamespace::LightManager::_set__pointLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::_set__pointLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightColorsID", value));
}
// Autogenerated method: LightManager.OnDisable
void GlobalNamespace::LightManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.OnWillRenderObject
void GlobalNamespace::LightManager::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.OnBecameInvisible
void GlobalNamespace::LightManager::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.OnCameraPreRender
void GlobalNamespace::LightManager::OnCameraPreRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnCameraPreRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: LightManager.OnCameraPostRender
void GlobalNamespace::LightManager::OnCameraPostRender(UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnCameraPostRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: LightManager.OnDestroy
void GlobalNamespace::LightManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager.ResetColors
void GlobalNamespace::LightManager::ResetColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::ResetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightManager..cctor
void GlobalNamespace::LightManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: LightManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::OnWillRenderObject
// Il2CppName: OnWillRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::OnWillRenderObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnWillRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::OnCameraPreRender
// Il2CppName: OnCameraPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)(UnityEngine::Camera*)>(&LightManager::OnCameraPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnCameraPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: LightManager::OnCameraPostRender
// Il2CppName: OnCameraPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)(UnityEngine::Camera*)>(&LightManager::OnCameraPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnCameraPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: LightManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::ResetColors
// Il2CppName: ResetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::ResetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), "ResetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightManager::*)()>(&LightManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LightManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PointLight
#include "GlobalNamespace/PointLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxLights
int GlobalNamespace::PointLight::_get_kMaxLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::_get_kMaxLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PointLight", "kMaxLights"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxLights
void GlobalNamespace::PointLight::_set_kMaxLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::_set_kMaxLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PointLight", "kMaxLights", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<PointLight> _lights
System::Collections::Generic::List_1<GlobalNamespace::PointLight*>* GlobalNamespace::PointLight::_get__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::_get__lights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::PointLight*>*>("", "PointLight", "_lights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<PointLight> _lights
void GlobalNamespace::PointLight::_set__lights(System::Collections::Generic::List_1<GlobalNamespace::PointLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::_set__lights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PointLight", "_lights", value));
}
// Autogenerated method: PointLight.get_lights
System::Collections::Generic::List_1<GlobalNamespace::PointLight*>* GlobalNamespace::PointLight::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PointLight", "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::PointLight*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PointLight.OnEnable
void GlobalNamespace::PointLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PointLight.OnDisable
void GlobalNamespace::PointLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PointLight..cctor
void GlobalNamespace::PointLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PointLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PointLight::get_lights
// Il2CppName: get_lights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::PointLight*>* (*)()>(&PointLight::get_lights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), "get_lights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PointLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLight::*)()>(&PointLight::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PointLight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLight::*)()>(&PointLight::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PointLight::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLight::*)()>(&PointLight::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLight::*)()>(&PointLight::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PointLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PointLight::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GaussianSeparableBlurRendererSO
#include "GlobalNamespace/GaussianSeparableBlurRendererSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GaussianSeparableBlurRendererSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GaussianSeparableBlurRendererSO::*)()>(&GaussianSeparableBlurRendererSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GaussianSeparableBlurRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GaussianSeparableBlurRendererSO::*)()>(&GaussianSeparableBlurRendererSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GaussianSeparableBlurRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ImageEffectController
#include "GlobalNamespace/ImageEffectController.hpp"
// Including type: ImageEffectController/RenderImageCallback
#include "GlobalNamespace/ImageEffectController_RenderImageCallback.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ImageEffectController.SetCallback
void GlobalNamespace::ImageEffectController::SetCallback(GlobalNamespace::ImageEffectController::RenderImageCallback* renderImageCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImageEffectController::SetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderImageCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderImageCallback);
}
// Autogenerated method: ImageEffectController.OnRenderImage
void GlobalNamespace::ImageEffectController::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImageEffectController::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Writing MetadataGetter for method: ImageEffectController::SetCallback
// Il2CppName: SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::*)(GlobalNamespace::ImageEffectController::RenderImageCallback*)>(&ImageEffectController::SetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController*), "SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ImageEffectController::RenderImageCallback*>()});
  }
};
// Writing MetadataGetter for method: ImageEffectController::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&ImageEffectController::OnRenderImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: ImageEffectController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::*)()>(&ImageEffectController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::*)()>(&ImageEffectController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ImageEffectController/RenderImageCallback
#include "GlobalNamespace/ImageEffectController_RenderImageCallback.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ImageEffectController/RenderImageCallback.Invoke
void GlobalNamespace::ImageEffectController::RenderImageCallback::Invoke(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImageEffectController::RenderImageCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated method: ImageEffectController/RenderImageCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::ImageEffectController::RenderImageCallback::BeginInvoke(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImageEffectController::RenderImageCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, src, dest, callback, object);
}
// Autogenerated method: ImageEffectController/RenderImageCallback.EndInvoke
void GlobalNamespace::ImageEffectController::RenderImageCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImageEffectController::RenderImageCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ImageEffectController::RenderImageCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::RenderImageCallback::*)(::Il2CppObject*, System::IntPtr)>(&ImageEffectController::RenderImageCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController::RenderImageCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::RenderImageCallback::*)(::Il2CppObject*, System::IntPtr)>(&ImageEffectController::RenderImageCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController::RenderImageCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ImageEffectController::RenderImageCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::RenderImageCallback::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&ImageEffectController::RenderImageCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController::RenderImageCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: ImageEffectController::RenderImageCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ImageEffectController::RenderImageCallback::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, System::AsyncCallback*, ::Il2CppObject*)>(&ImageEffectController::RenderImageCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController::RenderImageCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ImageEffectController::RenderImageCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageEffectController::RenderImageCallback::*)(System::IAsyncResult*)>(&ImageEffectController::RenderImageCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageEffectController::RenderImageCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ReflectionProbeBakingEffect
#include "GlobalNamespace/ReflectionProbeBakingEffect.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ReflectionProbeBakingEffect.OnRenderImage
void GlobalNamespace::ReflectionProbeBakingEffect::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReflectionProbeBakingEffect::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Writing MetadataGetter for method: ReflectionProbeBakingEffect::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeBakingEffect::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&ReflectionProbeBakingEffect::OnRenderImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeBakingEffect*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: ReflectionProbeBakingEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeBakingEffect::*)()>(&ReflectionProbeBakingEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeBakingEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeBakingEffect::*)()>(&ReflectionProbeBakingEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeBakingEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: KawaseBlurRendererSO
#include "GlobalNamespace/KawaseBlurRendererSO.hpp"
// Including type: KawaseBlurRendererSO/KernelSize
#include "GlobalNamespace/KawaseBlurRendererSO_KernelSize.hpp"
// Including type: KawaseBlurRendererSO/WeightsType
#include "GlobalNamespace/KawaseBlurRendererSO_WeightsType.hpp"
// Including type: KawaseBlurRendererSO/BloomKernel
#include "GlobalNamespace/KawaseBlurRendererSO_BloomKernel.hpp"
// Including type: KawaseBlurRendererSO/Pass
#include "GlobalNamespace/KawaseBlurRendererSO_Pass.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxBloomIterations
int GlobalNamespace::KawaseBlurRendererSO::_get_kMaxBloomIterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get_kMaxBloomIterations");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "kMaxBloomIterations"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxBloomIterations
void GlobalNamespace::KawaseBlurRendererSO::_set_kMaxBloomIterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set_kMaxBloomIterations");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "kMaxBloomIterations", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF661C
// Autogenerated static field getter
// Get static field: static private readonly System.Single[][] kBloomIterationWeights
::Array<::Array<float>*>* GlobalNamespace::KawaseBlurRendererSO::_get_kBloomIterationWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get_kBloomIterationWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Array<float>*>*>("", "KawaseBlurRendererSO", "kBloomIterationWeights"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Single[][] kBloomIterationWeights
void GlobalNamespace::KawaseBlurRendererSO::_set_kBloomIterationWeights(::Array<::Array<float>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set_kBloomIterationWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "kBloomIterationWeights", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF662C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _offsetID
int GlobalNamespace::KawaseBlurRendererSO::_get__offsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__offsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_offsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _offsetID
void GlobalNamespace::KawaseBlurRendererSO::_set__offsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__offsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_offsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF663C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _boostID
int GlobalNamespace::KawaseBlurRendererSO::_get__boostID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__boostID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_boostID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _boostID
void GlobalNamespace::KawaseBlurRendererSO::_set__boostID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__boostID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_boostID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF664C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _additiveAlphaID
int GlobalNamespace::KawaseBlurRendererSO::_get__additiveAlphaID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__additiveAlphaID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_additiveAlphaID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _additiveAlphaID
void GlobalNamespace::KawaseBlurRendererSO::_set__additiveAlphaID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__additiveAlphaID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_additiveAlphaID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF665C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaID
int GlobalNamespace::KawaseBlurRendererSO::_get__alphaID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__alphaID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_alphaID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaID
void GlobalNamespace::KawaseBlurRendererSO::_set__alphaID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__alphaID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_alphaID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF666C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tintColorID
int GlobalNamespace::KawaseBlurRendererSO::_get__tintColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__tintColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tintColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tintColorID
void GlobalNamespace::KawaseBlurRendererSO::_set__tintColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__tintColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tintColorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF667C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _alphaWeightsID
int GlobalNamespace::KawaseBlurRendererSO::_get__alphaWeightsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__alphaWeightsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_alphaWeightsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _alphaWeightsID
void GlobalNamespace::KawaseBlurRendererSO::_set__alphaWeightsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__alphaWeightsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_alphaWeightsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF668C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tempTexture0ID
int GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture0ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture0ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tempTexture0ID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tempTexture0ID
void GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture0ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture0ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tempTexture0ID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF669C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tempTexture1ID
int GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture1ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_get__tempTexture1ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "KawaseBlurRendererSO", "_tempTexture1ID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tempTexture1ID
void GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture1ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::_set__tempTexture1ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO", "_tempTexture1ID", value));
}
// Autogenerated method: KawaseBlurRendererSO.GetBlurKernel
::Array<int>* GlobalNamespace::KawaseBlurRendererSO::GetBlurKernel(GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::GetBlurKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBlurKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kernelSize)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(this, ___internal__method, kernelSize);
}
// Autogenerated method: KawaseBlurRendererSO.OnDisable
void GlobalNamespace::KawaseBlurRendererSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBlurRendererSO.Bloom
void GlobalNamespace::KawaseBlurRendererSO::Bloom(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, int iterationsStart, int iterations, float boost, float alphaWeights, GlobalNamespace::KawaseBlurRendererSO::WeightsType blurStartWeightsType, ::Array<float>* bloomIterationWeights) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Bloom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bloom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(iterationsStart), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(blurStartWeightsType), ::il2cpp_utils::ExtractType(bloomIterationWeights)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, iterationsStart, iterations, boost, alphaWeights, blurStartWeightsType, bloomIterationWeights);
}
// Autogenerated method: KawaseBlurRendererSO.DoubleBlur
void GlobalNamespace::KawaseBlurRendererSO::DoubleBlur(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest, GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize0, float boost0, GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize1, float boost1, float secondBlurAlpha, int downsample, bool gammaCorrection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::DoubleBlur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoubleBlur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernelSize0), ::il2cpp_utils::ExtractType(boost0), ::il2cpp_utils::ExtractType(kernelSize1), ::il2cpp_utils::ExtractType(boost1), ::il2cpp_utils::ExtractType(secondBlurAlpha), ::il2cpp_utils::ExtractType(downsample), ::il2cpp_utils::ExtractType(gammaCorrection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, kernelSize0, boost0, kernelSize1, boost1, secondBlurAlpha, downsample, gammaCorrection);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
UnityEngine::Texture2D* GlobalNamespace::KawaseBlurRendererSO::Blur(UnityEngine::Texture* src, GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, int downsample) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(downsample)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method, src, kernelSize, downsample);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
void GlobalNamespace::KawaseBlurRendererSO::Blur(UnityEngine::Texture* src, UnityEngine::RenderTexture* dest, GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, float boost, int downsample) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(downsample)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, kernelSize, boost, downsample);
}
// Autogenerated method: KawaseBlurRendererSO.Blur
void GlobalNamespace::KawaseBlurRendererSO::Blur(UnityEngine::Texture* src, UnityEngine::RenderTexture* dest, ::Array<int>* kernel, float boost, int downsample, int startIdx, int length, float alphaWeights, float additiveAlpha, bool additivelyBlendToDest, bool gammaCorrection, GlobalNamespace::KawaseBlurRendererSO::WeightsType blurStartWeightsType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Blur");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blur", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(kernel), ::il2cpp_utils::ExtractType(boost), ::il2cpp_utils::ExtractType(downsample), ::il2cpp_utils::ExtractType(startIdx), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(alphaWeights), ::il2cpp_utils::ExtractType(additiveAlpha), ::il2cpp_utils::ExtractType(additivelyBlendToDest), ::il2cpp_utils::ExtractType(gammaCorrection), ::il2cpp_utils::ExtractType(blurStartWeightsType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest, kernel, boost, downsample, startIdx, length, alphaWeights, additiveAlpha, additivelyBlendToDest, gammaCorrection, blurStartWeightsType);
}
// Autogenerated method: KawaseBlurRendererSO.AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::AlphaWeights(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::AlphaWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlphaWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated method: KawaseBlurRendererSO.CreateBlurCommandBuffer
UnityEngine::Rendering::CommandBuffer* GlobalNamespace::KawaseBlurRendererSO::CreateBlurCommandBuffer(int width, int height, ::Il2CppString* globalTextureName, GlobalNamespace::KawaseBlurRendererSO::KernelSize kernelSize, float boost) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::CreateBlurCommandBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlurCommandBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(globalTextureName), ::il2cpp_utils::ExtractType(kernelSize), ::il2cpp_utils::ExtractType(boost)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::CommandBuffer*, false>(this, ___internal__method, width, height, globalTextureName, kernelSize, boost);
}
// Autogenerated method: KawaseBlurRendererSO.OnEnable
void GlobalNamespace::KawaseBlurRendererSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KawaseBlurRendererSO..cctor
void GlobalNamespace::KawaseBlurRendererSO::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "KawaseBlurRendererSO", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: KawaseBlurRendererSO::GetBlurKernel
// Il2CppName: GetBlurKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (KawaseBlurRendererSO::*)(GlobalNamespace::KawaseBlurRendererSO::KernelSize)>(&KawaseBlurRendererSO::GetBlurKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "GetBlurKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)()>(&KawaseBlurRendererSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::Bloom
// Il2CppName: Bloom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, int, int, float, float, GlobalNamespace::KawaseBlurRendererSO::WeightsType, ::Array<float>*)>(&KawaseBlurRendererSO::Bloom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "Bloom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::WeightsType>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::DoubleBlur
// Il2CppName: DoubleBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*, GlobalNamespace::KawaseBlurRendererSO::KernelSize, float, GlobalNamespace::KawaseBlurRendererSO::KernelSize, float, float, int, bool)>(&KawaseBlurRendererSO::DoubleBlur)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "DoubleBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (KawaseBlurRendererSO::*)(UnityEngine::Texture*, GlobalNamespace::KawaseBlurRendererSO::KernelSize, int)>(&KawaseBlurRendererSO::Blur)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)(UnityEngine::Texture*, UnityEngine::RenderTexture*, GlobalNamespace::KawaseBlurRendererSO::KernelSize, float, int)>(&KawaseBlurRendererSO::Blur)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)(UnityEngine::Texture*, UnityEngine::RenderTexture*, ::Array<int>*, float, int, int, int, float, float, bool, bool, GlobalNamespace::KawaseBlurRendererSO::WeightsType)>(&KawaseBlurRendererSO::Blur)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::WeightsType>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::AlphaWeights
// Il2CppName: AlphaWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)(UnityEngine::RenderTexture*, UnityEngine::RenderTexture*)>(&KawaseBlurRendererSO::AlphaWeights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "AlphaWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::CreateBlurCommandBuffer
// Il2CppName: CreateBlurCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::CommandBuffer* (KawaseBlurRendererSO::*)(int, int, ::Il2CppString*, GlobalNamespace::KawaseBlurRendererSO::KernelSize, float)>(&KawaseBlurRendererSO::CreateBlurCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "CreateBlurCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KawaseBlurRendererSO::KernelSize>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)()>(&KawaseBlurRendererSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)()>(&KawaseBlurRendererSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::*)()>(&KawaseBlurRendererSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KawaseBlurRendererSO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KawaseBlurRendererSO::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/KernelSize
#include "GlobalNamespace/KawaseBlurRendererSO_KernelSize.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel7
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel7"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel7
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel7(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel7", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel15
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel15"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel15
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel15(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel15", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel23
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel23() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel23");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel23"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel23
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel23(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel23");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel23", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel35
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel35() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel35");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel35"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel35
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel35(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel35");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel35", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel63
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel63() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel63");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel63"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel63
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel63(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel63");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel63", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel127
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel127() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel127");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel127"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel127
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel127(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel127");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel127", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel135
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel135() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel135");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel135"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel135
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel135(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel135");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel135", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/KernelSize Kernel143
GlobalNamespace::KawaseBlurRendererSO::KernelSize GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel143() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_get_Kernel143");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::KernelSize>("", "KawaseBlurRendererSO/KernelSize", "Kernel143"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/KernelSize Kernel143
void GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel143(GlobalNamespace::KawaseBlurRendererSO::KernelSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::KernelSize::_set_Kernel143");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/KernelSize", "Kernel143", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/WeightsType
#include "GlobalNamespace/KawaseBlurRendererSO_WeightsType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType None
GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "None"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType None
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_None(GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType AlphaWeights
GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "AlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaWeights(GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "AlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/WeightsType AlphaAndDepthWeights
GlobalNamespace::KawaseBlurRendererSO::WeightsType GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaAndDepthWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_get_AlphaAndDepthWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::WeightsType>("", "KawaseBlurRendererSO/WeightsType", "AlphaAndDepthWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/WeightsType AlphaAndDepthWeights
void GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaAndDepthWeights(GlobalNamespace::KawaseBlurRendererSO::WeightsType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::WeightsType::_set_AlphaAndDepthWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/WeightsType", "AlphaAndDepthWeights", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/BloomKernel
#include "GlobalNamespace/KawaseBlurRendererSO_BloomKernel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: KawaseBlurRendererSO::BloomKernel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::BloomKernel::*)()>(&KawaseBlurRendererSO::BloomKernel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO::BloomKernel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KawaseBlurRendererSO::BloomKernel::*)()>(&KawaseBlurRendererSO::BloomKernel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KawaseBlurRendererSO::BloomKernel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KawaseBlurRendererSO/Pass
#include "GlobalNamespace/KawaseBlurRendererSO_Pass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass AlphaWeights
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "AlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass AlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaWeights(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "AlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass Blur
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_Blur() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_Blur");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "Blur"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass Blur
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_Blur(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_Blur");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "Blur", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurAndAdd
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurAndAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurAndAdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurAndAdd"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurAndAdd
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurAndAdd(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurAndAdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurAndAdd", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurWithAlphaWeights
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurWithAlphaWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurWithAlphaWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurWithAlphaWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurWithAlphaWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurWithAlphaWeights(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurWithAlphaWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurWithAlphaWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass AlphaAndDepthWeights
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaAndDepthWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_AlphaAndDepthWeights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "AlphaAndDepthWeights"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass AlphaAndDepthWeights
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaAndDepthWeights(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_AlphaAndDepthWeights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "AlphaAndDepthWeights", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurGamma
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurGamma"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurGamma
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGamma(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurGamma", value));
}
// Autogenerated static field getter
// Get static field: static public KawaseBlurRendererSO/Pass BlurGammaAndAdd
GlobalNamespace::KawaseBlurRendererSO::Pass GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGammaAndAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_get_BlurGammaAndAdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::KawaseBlurRendererSO::Pass>("", "KawaseBlurRendererSO/Pass", "BlurGammaAndAdd"));
}
// Autogenerated static field setter
// Set static field: static public KawaseBlurRendererSO/Pass BlurGammaAndAdd
void GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGammaAndAdd(GlobalNamespace::KawaseBlurRendererSO::Pass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KawaseBlurRendererSO::Pass::_set_BlurGammaAndAdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "KawaseBlurRendererSO/Pass", "BlurGammaAndAdd", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId.hpp"
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId/Elements
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId_Elements.hpp"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundColorsGradientElementWithLightId.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientElementWithLightId::*)(UnityEngine::Color)>(&BloomPrePassBackgroundColorsGradientElementWithLightId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientElementWithLightId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradientElementWithLightId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientElementWithLightId::*)()>(&BloomPrePassBackgroundColorsGradientElementWithLightId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientElementWithLightId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientElementWithLightId::*)()>(&BloomPrePassBackgroundColorsGradientElementWithLightId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientElementWithLightId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientElementWithLightId/Elements
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientElementWithLightId_Elements.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::*)()>(&BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientElementWithLightId::Elements*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::*)()>(&BloomPrePassBackgroundColorsGradientElementWithLightId::Elements::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientElementWithLightId::Elements*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundLightWithId
#include "GlobalNamespace/BloomPrePassBackgroundLightWithId.hpp"
// Including type: BloomPrePassBackgroundColor
#include "GlobalNamespace/BloomPrePassBackgroundColor.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundLightWithId.get_color
UnityEngine::Color GlobalNamespace::BloomPrePassBackgroundLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassBackgroundLightWithId.ColorWasSet
void GlobalNamespace::BloomPrePassBackgroundLightWithId::ColorWasSet(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newColor);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (BloomPrePassBackgroundLightWithId::*)()>(&BloomPrePassBackgroundLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundLightWithId::*)(UnityEngine::Color)>(&BloomPrePassBackgroundLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundLightWithId::*)()>(&BloomPrePassBackgroundLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundLightWithId::*)()>(&BloomPrePassBackgroundLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithId
#include "GlobalNamespace/DirectionalLightWithId.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DirectionalLightWithId.ColorWasSet
void GlobalNamespace::DirectionalLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: DirectionalLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithId::*)(UnityEngine::Color)>(&DirectionalLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: DirectionalLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithId::*)()>(&DirectionalLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithId::*)()>(&DirectionalLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DirectionalLightWithIds
#include "GlobalNamespace/DirectionalLightWithIds.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DirectionalLightWithIds.ColorWasSet
void GlobalNamespace::DirectionalLightWithIds::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DirectionalLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: DirectionalLightWithIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithIds::*)(UnityEngine::Color)>(&DirectionalLightWithIds::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: DirectionalLightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithIds::*)()>(&DirectionalLightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectionalLightWithIds::*)()>(&DirectionalLightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectionalLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableRendererWithLightId
#include "GlobalNamespace/EnableRendererWithLightId.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableRendererWithLightId.ColorWasSet
void GlobalNamespace::EnableRendererWithLightId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableRendererWithLightId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: EnableRendererWithLightId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableRendererWithLightId::*)(UnityEngine::Color)>(&EnableRendererWithLightId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableRendererWithLightId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EnableRendererWithLightId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableRendererWithLightId::*)()>(&EnableRendererWithLightId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableRendererWithLightId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableRendererWithLightId::*)()>(&EnableRendererWithLightId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableRendererWithLightId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILightWithId.get_isRegistered
bool GlobalNamespace::ILightWithId::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILightWithId::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.__SetIsRegistered
void GlobalNamespace::ILightWithId::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILightWithId::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.__SetIsUnRegistered
void GlobalNamespace::ILightWithId::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILightWithId::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.get_lightId
int GlobalNamespace::ILightWithId::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILightWithId::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ILightWithId.ColorWasSet
void GlobalNamespace::ILightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: ILightWithId::get_isRegistered
// Il2CppName: get_isRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILightWithId::*)()>(&ILightWithId::get_isRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILightWithId*), "get_isRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILightWithId::__SetIsRegistered
// Il2CppName: __SetIsRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILightWithId::*)()>(&ILightWithId::__SetIsRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILightWithId*), "__SetIsRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILightWithId::__SetIsUnRegistered
// Il2CppName: __SetIsUnRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILightWithId::*)()>(&ILightWithId::__SetIsUnRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILightWithId*), "__SetIsUnRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILightWithId::get_lightId
// Il2CppName: get_lightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ILightWithId::*)()>(&ILightWithId::get_lightId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILightWithId*), "get_lightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILightWithId::*)(UnityEngine::Color)>(&ILightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstancedMaterialLightWithId
#include "GlobalNamespace/InstancedMaterialLightWithId.hpp"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InstancedMaterialLightWithId.ColorWasSet
void GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newColor);
}
// Writing MetadataGetter for method: InstancedMaterialLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstancedMaterialLightWithId::*)(UnityEngine::Color)>(&InstancedMaterialLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstancedMaterialLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: InstancedMaterialLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstancedMaterialLightWithId::*)()>(&InstancedMaterialLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstancedMaterialLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstancedMaterialLightWithId::*)()>(&InstancedMaterialLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstancedMaterialLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxLightId
int GlobalNamespace::LightWithIdManager::_get_kMaxLightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::_get_kMaxLightId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightWithIdManager", "kMaxLightId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxLightId
void GlobalNamespace::LightWithIdManager::_set_kMaxLightId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::_set_kMaxLightId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightWithIdManager", "kMaxLightId", value));
}
// Autogenerated method: LightWithIdManager.add_didChangeSomeColorsThisFrameEvent
void GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.remove_didChangeSomeColorsThisFrameEvent
void GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.add_didSetColorForIdEvent
void GlobalNamespace::LightWithIdManager::add_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::add_didSetColorForIdEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSetColorForIdEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.remove_didSetColorForIdEvent
void GlobalNamespace::LightWithIdManager::remove_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::remove_didSetColorForIdEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSetColorForIdEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightWithIdManager.get_colors
::Array<System::Nullable_1<UnityEngine::Color>>* GlobalNamespace::LightWithIdManager::get_colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::get_colors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Nullable_1<UnityEngine::Color>>*, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdManager.LateUpdate
void GlobalNamespace::LightWithIdManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdManager.RegisterLight
void GlobalNamespace::LightWithIdManager::RegisterLight(GlobalNamespace::ILightWithId* lightWithId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightWithId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightWithId);
}
// Autogenerated method: LightWithIdManager.UnregisterLight
void GlobalNamespace::LightWithIdManager::UnregisterLight(GlobalNamespace::ILightWithId* lightWithId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::UnregisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightWithId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightWithId);
}
// Autogenerated method: LightWithIdManager.SetColorForId
void GlobalNamespace::LightWithIdManager::SetColorForId(int lightId, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::SetColorForId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorForId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightId, color);
}
// Autogenerated method: LightWithIdManager.GetColorForId
UnityEngine::Color GlobalNamespace::LightWithIdManager::GetColorForId(int lightId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::GetColorForId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColorForId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, lightId);
}
// Writing MetadataGetter for method: LightWithIdManager::add_didChangeSomeColorsThisFrameEvent
// Il2CppName: add_didChangeSomeColorsThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(System::Action*)>(&LightWithIdManager::add_didChangeSomeColorsThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "add_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent
// Il2CppName: remove_didChangeSomeColorsThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(System::Action*)>(&LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "remove_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::add_didSetColorForIdEvent
// Il2CppName: add_didSetColorForIdEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(System::Action_2<int, UnityEngine::Color>*)>(&LightWithIdManager::add_didSetColorForIdEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "add_didSetColorForIdEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::remove_didSetColorForIdEvent
// Il2CppName: remove_didSetColorForIdEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(System::Action_2<int, UnityEngine::Color>*)>(&LightWithIdManager::remove_didSetColorForIdEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "remove_didSetColorForIdEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Nullable_1<UnityEngine::Color>>* (LightWithIdManager::*)()>(&LightWithIdManager::get_colors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)()>(&LightWithIdManager::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::RegisterLight
// Il2CppName: RegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(GlobalNamespace::ILightWithId*)>(&LightWithIdManager::RegisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "RegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ILightWithId*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::UnregisterLight
// Il2CppName: UnregisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(GlobalNamespace::ILightWithId*)>(&LightWithIdManager::UnregisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "UnregisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ILightWithId*>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::SetColorForId
// Il2CppName: SetColorForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)(int, UnityEngine::Color)>(&LightWithIdManager::SetColorForId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "SetColorForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::GetColorForId
// Il2CppName: GetColorForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightWithIdManager::*)(int)>(&LightWithIdManager::GetColorForId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), "GetColorForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LightWithIdManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)()>(&LightWithIdManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdManager::*)()>(&LightWithIdManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIdMonoBehaviour
#include "GlobalNamespace/LightWithIdMonoBehaviour.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightWithIdMonoBehaviour.get_lightId
int GlobalNamespace::LightWithIdMonoBehaviour::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.get_isRegistered
bool GlobalNamespace::LightWithIdMonoBehaviour::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.__SetIsRegistered
void GlobalNamespace::LightWithIdMonoBehaviour::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.__SetIsUnRegistered
void GlobalNamespace::LightWithIdMonoBehaviour::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.ColorWasSet
void GlobalNamespace::LightWithIdMonoBehaviour::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: LightWithIdMonoBehaviour.OnEnable
void GlobalNamespace::LightWithIdMonoBehaviour::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.Start
void GlobalNamespace::LightWithIdMonoBehaviour::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.OnDisable
void GlobalNamespace::LightWithIdMonoBehaviour::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.RegisterLight
void GlobalNamespace::LightWithIdMonoBehaviour::RegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::RegisterLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIdMonoBehaviour.SetLightId
void GlobalNamespace::LightWithIdMonoBehaviour::SetLightId(int newLightId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::SetLightId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newLightId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newLightId);
}
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::get_lightId
// Il2CppName: get_lightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::get_lightId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "get_lightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::get_isRegistered
// Il2CppName: get_isRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::get_isRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "get_isRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::__SetIsRegistered
// Il2CppName: __SetIsRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::__SetIsRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "__SetIsRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::__SetIsUnRegistered
// Il2CppName: __SetIsUnRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::__SetIsUnRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "__SetIsUnRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)(UnityEngine::Color)>(&LightWithIdMonoBehaviour::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::RegisterLight
// Il2CppName: RegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::RegisterLight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "RegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::SetLightId
// Il2CppName: SetLightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)(int)>(&LightWithIdMonoBehaviour::SetLightId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), "SetLightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LightWithIdMonoBehaviour::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIdMonoBehaviour::*)()>(&LightWithIdMonoBehaviour::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIdMonoBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
// Including type: LightWithIds/LightData
#include "GlobalNamespace/LightWithIds_LightData.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightWithIds.get_lightIntensityData
System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* GlobalNamespace::LightWithIds::get_lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::get_lightIntensityData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightIntensityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>*, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.Start
void GlobalNamespace::LightWithIds::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.OnEnable
void GlobalNamespace::LightWithIds::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.RegisterForColorChanges
void GlobalNamespace::LightWithIds::RegisterForColorChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::RegisterForColorChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForColorChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.OnDisable
void GlobalNamespace::LightWithIds::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds.HandleLightManagerDidChangeSomeColorsThisFrame
void GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LightWithIds::get_lightIntensityData
// Il2CppName: get_lightIntensityData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* (LightWithIds::*)()>(&LightWithIds::get_lightIntensityData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "get_lightIntensityData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::RegisterForColorChanges
// Il2CppName: RegisterForColorChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::RegisterForColorChanges)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "RegisterForColorChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame
// Il2CppName: HandleLightManagerDidChangeSomeColorsThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::*)()>(&LightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightWithIds/LightData
#include "GlobalNamespace/LightWithIds_LightData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightWithIds/LightData.get_lightId
int GlobalNamespace::LightWithIds::LightData::get_lightId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::get_lightId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightData.get_color
UnityEngine::Color GlobalNamespace::LightWithIds::LightData::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightData.get_isRegistered
bool GlobalNamespace::LightWithIds::LightData::get_isRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::get_isRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightData.__SetIsRegistered
void GlobalNamespace::LightWithIds::LightData::__SetIsRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::__SetIsRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightData.__SetIsUnRegistered
void GlobalNamespace::LightWithIds::LightData::__SetIsUnRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::__SetIsUnRegistered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetIsUnRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightWithIds/LightData.ColorWasSet
void GlobalNamespace::LightWithIds::LightData::ColorWasSet(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated method: LightWithIds/LightData.ProcessColor
UnityEngine::Color GlobalNamespace::LightWithIds::LightData::ProcessColor(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightData::ProcessColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, newColor);
}
// Writing MetadataGetter for method: LightWithIds::LightData::get_lightId
// Il2CppName: get_lightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LightWithIds::LightData::*)()>(&LightWithIds::LightData::get_lightId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "get_lightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightWithIds::LightData::*)()>(&LightWithIds::LightData::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::get_isRegistered
// Il2CppName: get_isRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LightWithIds::LightData::*)()>(&LightWithIds::LightData::get_isRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "get_isRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::__SetIsRegistered
// Il2CppName: __SetIsRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::LightData::*)()>(&LightWithIds::LightData::__SetIsRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "__SetIsRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::__SetIsUnRegistered
// Il2CppName: __SetIsUnRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::LightData::*)()>(&LightWithIds::LightData::__SetIsUnRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "__SetIsUnRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::LightData::*)(UnityEngine::Color)>(&LightWithIds::LightData::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::ProcessColor
// Il2CppName: ProcessColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightWithIds::LightData::*)(UnityEngine::Color)>(&LightWithIds::LightData::ProcessColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), "ProcessColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightWithIds::LightData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::LightData::*)()>(&LightWithIds::LightData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightWithIds::LightData::*)()>(&LightWithIds::LightData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightWithIds::LightData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
// Including type: LightmapLightWithIds/LightIntensitiesData
#include "GlobalNamespace/LightmapLightWithIds_LightIntensitiesData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightData
#include "GlobalNamespace/LightWithIds_LightData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightmapLightWithIds.get_maxTotalIntensity
float GlobalNamespace::LightmapLightWithIds::get_maxTotalIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::get_maxTotalIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxTotalIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.set_maxTotalIntensity
void GlobalNamespace::LightmapLightWithIds::set_maxTotalIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::set_maxTotalIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxTotalIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds.add_globalIntensityDidChangeEvent
void GlobalNamespace::LightmapLightWithIds::add_globalIntensityDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::add_globalIntensityDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_globalIntensityDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds.remove_globalIntensityDidChangeEvent
void GlobalNamespace::LightmapLightWithIds::remove_globalIntensityDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::remove_globalIntensityDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_globalIntensityDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds.get_lightIntensityData
System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* GlobalNamespace::LightmapLightWithIds::get_lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::get_lightIntensityData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightIntensityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>*, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds.HandleLightManagerDidChangeSomeColorsThisFrame
void GlobalNamespace::LightmapLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LightmapLightWithIds::get_maxTotalIntensity
// Il2CppName: get_maxTotalIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LightmapLightWithIds::*)()>(&LightmapLightWithIds::get_maxTotalIntensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "get_maxTotalIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::set_maxTotalIntensity
// Il2CppName: set_maxTotalIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)(float)>(&LightmapLightWithIds::set_maxTotalIntensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "set_maxTotalIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::add_globalIntensityDidChangeEvent
// Il2CppName: add_globalIntensityDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)(System::Action_1<float>*)>(&LightmapLightWithIds::add_globalIntensityDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "add_globalIntensityDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::remove_globalIntensityDidChangeEvent
// Il2CppName: remove_globalIntensityDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)(System::Action_1<float>*)>(&LightmapLightWithIds::remove_globalIntensityDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "remove_globalIntensityDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::get_lightIntensityData
// Il2CppName: get_lightIntensityData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* (LightmapLightWithIds::*)()>(&LightmapLightWithIds::get_lightIntensityData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "get_lightIntensityData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame
// Il2CppName: HandleLightManagerDidChangeSomeColorsThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)()>(&LightmapLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)()>(&LightmapLightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::*)()>(&LightmapLightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapLightWithIds/LightIntensitiesData
#include "GlobalNamespace/LightmapLightWithIds_LightIntensitiesData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.get_intensity
float GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.set_intensity
void GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.get_weight
float GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::get_weight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_weight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.set_weight
void GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_weight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::set_weight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_weight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.SetDataToShaders
void GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::SetDataToShaders(UnityEngine::Color lightmapColor, UnityEngine::Color probeColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::SetDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightmapColor), ::il2cpp_utils::ExtractType(probeColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightmapColor, probeColor);
}
// Autogenerated method: LightmapLightWithIds/LightIntensitiesData.ProcessColor
UnityEngine::Color GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::ProcessColor(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapLightWithIds::LightIntensitiesData::ProcessColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, newColor);
}
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LightmapLightWithIds::LightIntensitiesData::*)()>(&LightmapLightWithIds::LightIntensitiesData::get_intensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::set_intensity
// Il2CppName: set_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::LightIntensitiesData::*)(float)>(&LightmapLightWithIds::LightIntensitiesData::set_intensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "set_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::get_weight
// Il2CppName: get_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LightmapLightWithIds::LightIntensitiesData::*)()>(&LightmapLightWithIds::LightIntensitiesData::get_weight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "get_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::set_weight
// Il2CppName: set_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::LightIntensitiesData::*)(float)>(&LightmapLightWithIds::LightIntensitiesData::set_weight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "set_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::SetDataToShaders
// Il2CppName: SetDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::LightIntensitiesData::*)(UnityEngine::Color, UnityEngine::Color)>(&LightmapLightWithIds::LightIntensitiesData::SetDataToShaders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "SetDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::ProcessColor
// Il2CppName: ProcessColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightmapLightWithIds::LightIntensitiesData::*)(UnityEngine::Color)>(&LightmapLightWithIds::LightIntensitiesData::ProcessColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), "ProcessColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightmapLightWithIds::LightIntensitiesData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::LightIntensitiesData::*)()>(&LightmapLightWithIds::LightIntensitiesData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapLightWithIds::LightIntensitiesData::*)()>(&LightmapLightWithIds::LightIntensitiesData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapLightWithIds::LightIntensitiesData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialLightWithId
#include "GlobalNamespace/MaterialLightWithId.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6AE0
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialLightWithId::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "MaterialLightWithId", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::MaterialLightWithId::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialLightWithId", "_materialPropertyBlock", value));
}
// Autogenerated method: MaterialLightWithId.get_color
UnityEngine::Color GlobalNamespace::MaterialLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialLightWithId.Awake
void GlobalNamespace::MaterialLightWithId::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialLightWithId.ColorWasSet
void GlobalNamespace::MaterialLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: MaterialLightWithId..cctor
void GlobalNamespace::MaterialLightWithId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialLightWithId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialLightWithId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: MaterialLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MaterialLightWithId::*)()>(&MaterialLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialLightWithId::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialLightWithId::*)()>(&MaterialLightWithId::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialLightWithId::*)(UnityEngine::Color)>(&MaterialLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialLightWithId::*)()>(&MaterialLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialLightWithId::*)()>(&MaterialLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialLightWithId::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MaterialLightWithId::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialLightWithId*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ParticleSystemLightWithId
#include "GlobalNamespace/ParticleSystemLightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ParticleSystemLightWithId.get_color
UnityEngine::Color GlobalNamespace::ParticleSystemLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemLightWithId.Awake
void GlobalNamespace::ParticleSystemLightWithId::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemLightWithId::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemLightWithId.ColorWasSet
void GlobalNamespace::ParticleSystemLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: ParticleSystemLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ParticleSystemLightWithId::*)()>(&ParticleSystemLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemLightWithId::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemLightWithId::*)()>(&ParticleSystemLightWithId::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemLightWithId*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemLightWithId::*)(UnityEngine::Color)>(&ParticleSystemLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ParticleSystemLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemLightWithId::*)()>(&ParticleSystemLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemLightWithId::*)()>(&ParticleSystemLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PointLightWithIds
#include "GlobalNamespace/PointLightWithIds.hpp"
// Including type: PointLight
#include "GlobalNamespace/PointLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PointLightWithIds.ColorWasSet
void GlobalNamespace::PointLightWithIds::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PointLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: PointLightWithIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLightWithIds::*)(UnityEngine::Color)>(&PointLightWithIds::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLightWithIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: PointLightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLightWithIds::*)()>(&PointLightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PointLightWithIds::*)()>(&PointLightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PointLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RuntimeLightWithIds
#include "GlobalNamespace/RuntimeLightWithIds.hpp"
// Including type: RuntimeLightWithIds/LightIntensitiesData
#include "GlobalNamespace/RuntimeLightWithIds_LightIntensitiesData.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LightWithIds/LightData
#include "GlobalNamespace/LightWithIds_LightData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RuntimeLightWithIds.ColorWasSet
void GlobalNamespace::RuntimeLightWithIds::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: RuntimeLightWithIds.GetLightColor
UnityEngine::Color GlobalNamespace::RuntimeLightWithIds::GetLightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::GetLightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithIds.get_lightIntensityData
System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* GlobalNamespace::RuntimeLightWithIds::get_lightIntensityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::get_lightIntensityData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightIntensityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>*, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithIds.HandleLightManagerDidChangeSomeColorsThisFrame
void GlobalNamespace::RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeLightWithIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)(UnityEngine::Color)>(&RuntimeLightWithIds::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::GetLightColor
// Il2CppName: GetLightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::GetLightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "GetLightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::get_lightIntensityData
// Il2CppName: get_lightIntensityData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::get_lightIntensityData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "get_lightIntensityData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame
// Il2CppName: HandleLightManagerDidChangeSomeColorsThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RuntimeLightWithIds/LightIntensitiesData
#include "GlobalNamespace/RuntimeLightWithIds_LightIntensitiesData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RuntimeLightWithIds/LightIntensitiesData.get_intensity
float GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::get_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::get_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RuntimeLightWithIds/LightIntensitiesData.set_intensity
void GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::set_intensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::set_intensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RuntimeLightWithIds/LightIntensitiesData.ProcessColor
UnityEngine::Color GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::ProcessColor(UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData::ProcessColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, newColor);
}
// Writing MetadataGetter for method: RuntimeLightWithIds::LightIntensitiesData::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (RuntimeLightWithIds::LightIntensitiesData::*)()>(&RuntimeLightWithIds::LightIntensitiesData::get_intensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds::LightIntensitiesData*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::LightIntensitiesData::set_intensity
// Il2CppName: set_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::LightIntensitiesData::*)(float)>(&RuntimeLightWithIds::LightIntensitiesData::set_intensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds::LightIntensitiesData*), "set_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::LightIntensitiesData::ProcessColor
// Il2CppName: ProcessColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RuntimeLightWithIds::LightIntensitiesData::*)(UnityEngine::Color)>(&RuntimeLightWithIds::LightIntensitiesData::ProcessColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds::LightIntensitiesData*), "ProcessColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::LightIntensitiesData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::LightIntensitiesData::*)()>(&RuntimeLightWithIds::LightIntensitiesData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds::LightIntensitiesData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::LightIntensitiesData::*)()>(&RuntimeLightWithIds::LightIntensitiesData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds::LightIntensitiesData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteLightWithId
#include "GlobalNamespace/SpriteLightWithId.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpriteLightWithId.get_color
UnityEngine::Color GlobalNamespace::SpriteLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SpriteLightWithId.ColorWasSet
void GlobalNamespace::SpriteLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: SpriteLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (SpriteLightWithId::*)()>(&SpriteLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteLightWithId::*)(UnityEngine::Color)>(&SpriteLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SpriteLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteLightWithId::*)()>(&SpriteLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteLightWithId::*)()>(&SpriteLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TubeBloomPrePassLightWithId
#include "GlobalNamespace/TubeBloomPrePassLightWithId.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TubeBloomPrePassLightWithId.get_color
UnityEngine::Color GlobalNamespace::TubeBloomPrePassLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLightWithId.ColorWasSet
void GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeBloomPrePassLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: TubeBloomPrePassLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TubeBloomPrePassLightWithId::*)()>(&TubeBloomPrePassLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLightWithId::*)(UnityEngine::Color)>(&TubeBloomPrePassLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TubeBloomPrePassLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLightWithId::*)()>(&TubeBloomPrePassLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TubeBloomPrePassLightWithId::*)()>(&TubeBloomPrePassLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TubeBloomPrePassLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityLightWithId
#include "GlobalNamespace/UnityLightWithId.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityLightWithId.get_color
UnityEngine::Color GlobalNamespace::UnityLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnityLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: UnityLightWithId.ColorWasSet
void GlobalNamespace::UnityLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnityLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: UnityLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (UnityLightWithId::*)()>(&UnityLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityLightWithId::*)(UnityEngine::Color)>(&UnityLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: UnityLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityLightWithId::*)()>(&UnityLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityLightWithId::*)()>(&UnityLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineLight
#include "GlobalNamespace/LineLight.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
System::Collections::Generic::List_1<GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::_get__lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::_get__lineLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<GlobalNamespace::LineLight*>*>("", "LineLight", "_lineLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<LineLight> _lineLights
void GlobalNamespace::LineLight::_set__lineLights(System::Collections::Generic::List_1<GlobalNamespace::LineLight*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::_set__lineLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLight", "_lineLights", value));
}
// Autogenerated method: LineLight.get_p0
UnityEngine::Vector3 GlobalNamespace::LineLight::get_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::get_p0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_p1
UnityEngine::Vector3 GlobalNamespace::LineLight::get_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::get_p1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_p1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_color
UnityEngine::Color GlobalNamespace::LineLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.get_lineLights
System::Collections::Generic::List_1<GlobalNamespace::LineLight*>* GlobalNamespace::LineLight::get_lineLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::get_lineLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", "get_lineLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::LineLight*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LineLight.OnEnable
void GlobalNamespace::LineLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDisable
void GlobalNamespace::LineLight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight.OnDrawGizmos
void GlobalNamespace::LineLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLight..cctor
void GlobalNamespace::LineLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: LineLight::get_p0
// Il2CppName: get_p0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (LineLight::*)()>(&LineLight::get_p0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "get_p0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::get_p1
// Il2CppName: get_p1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (LineLight::*)()>(&LineLight::get_p1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "get_p1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LineLight::*)()>(&LineLight::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::get_lineLights
// Il2CppName: get_lineLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::LineLight*>* (*)()>(&LineLight::get_lineLights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "get_lineLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLight::*)()>(&LineLight::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLight::*)()>(&LineLight::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLight::*)()>(&LineLight::OnDrawGizmos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLight::*)()>(&LineLight::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLight::*)()>(&LineLight::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LineLight::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LineLightManager
#include "GlobalNamespace/LineLightManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfLights
int GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get_kMaxNumberOfLights");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "kMaxNumberOfLights"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfLights
void GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set_kMaxNumberOfLights");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "kMaxNumberOfLights", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6F60
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _activeLineLightsCountID
int GlobalNamespace::LineLightManager::_get__activeLineLightsCountID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get__activeLineLightsCountID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_activeLineLightsCountID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _activeLineLightsCountID
void GlobalNamespace::LineLightManager::_set__activeLineLightsCountID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set__activeLineLightsCountID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_activeLineLightsCountID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6F70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightPointsID
int GlobalNamespace::LineLightManager::_get__lineLightPointsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get__lineLightPointsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightPointsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightPointsID
void GlobalNamespace::LineLightManager::_set__lineLightPointsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set__lineLightPointsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightPointsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6F80
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirsID
int GlobalNamespace::LineLightManager::_get__lineLightDirsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get__lineLightDirsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirsID
void GlobalNamespace::LineLightManager::_set__lineLightDirsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set__lineLightDirsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6F90
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightDirLengthsID
int GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get__lineLightDirLengthsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightDirLengthsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightDirLengthsID
void GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set__lineLightDirLengthsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightDirLengthsID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF6FA0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lineLightColorsID
int GlobalNamespace::LineLightManager::_get__lineLightColorsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_get__lineLightColorsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LineLightManager", "_lineLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lineLightColorsID
void GlobalNamespace::LineLightManager::_set__lineLightColorsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::_set__lineLightColorsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LineLightManager", "_lineLightColorsID", value));
}
// Autogenerated method: LineLightManager.Update
void GlobalNamespace::LineLightManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LineLightManager..cctor
void GlobalNamespace::LineLightManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineLightManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineLightManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: LineLightManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLightManager::*)()>(&LineLightManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLightManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLightManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLightManager::*)()>(&LineLightManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLightManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineLightManager::*)()>(&LineLightManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLightManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LineLightManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LineLightManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineLightManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialPropertyBlockAnimator
#include "GlobalNamespace/MaterialPropertyBlockAnimator.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockAnimator.get_materialPropertyBlockController
GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController(GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Awake
void GlobalNamespace::MaterialPropertyBlockAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.Update
void GlobalNamespace::MaterialPropertyBlockAnimator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockAnimator.LazyInit
void GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockAnimator::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::get_materialPropertyBlockController
// Il2CppName: get_materialPropertyBlockController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MaterialPropertyBlockController* (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::get_materialPropertyBlockController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "get_materialPropertyBlockController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::set_materialPropertyBlockController
// Il2CppName: set_materialPropertyBlockController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)(GlobalNamespace::MaterialPropertyBlockController*)>(&MaterialPropertyBlockAnimator::set_materialPropertyBlockController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "set_materialPropertyBlockController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MaterialPropertyBlockController*>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::SetProperty
// Il2CppName: SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::SetProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::LazyInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockAnimator::*)()>(&MaterialPropertyBlockAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockColorAnimator
#include "GlobalNamespace/MaterialPropertyBlockColorAnimator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockColorAnimator.get_color
UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorAnimator::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.set_color
void GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorAnimator::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockColorAnimator::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MaterialPropertyBlockColorAnimator::*)()>(&MaterialPropertyBlockColorAnimator::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorAnimator*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorAnimator::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorAnimator::*)(UnityEngine::Color)>(&MaterialPropertyBlockColorAnimator::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorAnimator*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorAnimator::SetProperty
// Il2CppName: SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorAnimator::*)()>(&MaterialPropertyBlockColorAnimator::SetProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorAnimator*), "SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorAnimator::*)()>(&MaterialPropertyBlockColorAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorAnimator::*)()>(&MaterialPropertyBlockColorAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockColorSetter.get_color
UnityEngine::Color GlobalNamespace::MaterialPropertyBlockColorSetter::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.get_materialPropertyBlockController
GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.set_materialPropertyBlockController
void GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController(GlobalNamespace::MaterialPropertyBlockController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::set_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.Awake
void GlobalNamespace::MaterialPropertyBlockColorSetter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.InitIfNeeded
void GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.SetColor
void GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::SetColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: MaterialPropertyBlockColorSetter.OnValidate
void GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockColorSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::get_materialPropertyBlockController
// Il2CppName: get_materialPropertyBlockController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MaterialPropertyBlockController* (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::get_materialPropertyBlockController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "get_materialPropertyBlockController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::set_materialPropertyBlockController
// Il2CppName: set_materialPropertyBlockController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)(GlobalNamespace::MaterialPropertyBlockController*)>(&MaterialPropertyBlockColorSetter::set_materialPropertyBlockController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "set_materialPropertyBlockController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MaterialPropertyBlockController*>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::InitIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)(UnityEngine::Color)>(&MaterialPropertyBlockColorSetter::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockColorSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockColorSetter::*)()>(&MaterialPropertyBlockColorSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockColorSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockController.get_renderers
::Array<UnityEngine::Renderer*>* GlobalNamespace::MaterialPropertyBlockController::get_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockController::get_renderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Renderer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.get_materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockController::get_materialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MaterialPropertyBlock*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyBlockController.ApplyChanges
void GlobalNamespace::MaterialPropertyBlockController::ApplyChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockController::ApplyChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockController::get_renderers
// Il2CppName: get_renderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Renderer*>* (MaterialPropertyBlockController::*)()>(&MaterialPropertyBlockController::get_renderers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockController*), "get_renderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockController::get_materialPropertyBlock
// Il2CppName: get_materialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MaterialPropertyBlock* (MaterialPropertyBlockController::*)()>(&MaterialPropertyBlockController::get_materialPropertyBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockController*), "get_materialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockController::ApplyChanges
// Il2CppName: ApplyChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockController::*)()>(&MaterialPropertyBlockController::ApplyChanges)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockController*), "ApplyChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockController::*)()>(&MaterialPropertyBlockController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockController::*)()>(&MaterialPropertyBlockController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockFloatAnimator
#include "GlobalNamespace/MaterialPropertyBlockFloatAnimator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockFloatAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockFloatAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockFloatAnimator::SetProperty
// Il2CppName: SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockFloatAnimator::*)()>(&MaterialPropertyBlockFloatAnimator::SetProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockFloatAnimator*), "SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockFloatAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockFloatAnimator::*)()>(&MaterialPropertyBlockFloatAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockFloatAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockFloatAnimator::*)()>(&MaterialPropertyBlockFloatAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockFloatAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyBlockVectorAnimator
#include "GlobalNamespace/MaterialPropertyBlockVectorAnimator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyBlockVectorAnimator.SetProperty
void GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyBlockVectorAnimator::SetProperty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyBlockVectorAnimator::SetProperty
// Il2CppName: SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockVectorAnimator::*)()>(&MaterialPropertyBlockVectorAnimator::SetProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockVectorAnimator*), "SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlockVectorAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockVectorAnimator::*)()>(&MaterialPropertyBlockVectorAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockVectorAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlockVectorAnimator::*)()>(&MaterialPropertyBlockVectorAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlockVectorAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialPropertyValuesSetter
#include "GlobalNamespace/MaterialPropertyValuesSetter.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
// Including type: MaterialPropertyValuesSetter/PropertyNameColorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameColorValuePair.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyValuesSetter.Start
void GlobalNamespace::MaterialPropertyValuesSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.OnValidate
void GlobalNamespace::MaterialPropertyValuesSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.RefreshPropertyIds
void GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter.ApplyParams
void GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::RefreshPropertyIds
// Il2CppName: RefreshPropertyIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::RefreshPropertyIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), "RefreshPropertyIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::ApplyParams
// Il2CppName: ApplyParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::ApplyParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), "ApplyParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::*)()>(&MaterialPropertyValuesSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MaterialPropertyValuesSetter/PropertyValuePairBase
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyValuePairBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.get_propertyId
int GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.set_propertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_propertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialPropertyValuesSetter/PropertyValuePairBase.RefreshPropertyId
void GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshPropertyId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId
// Il2CppName: get_propertyId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MaterialPropertyValuesSetter::PropertyValuePairBase::*)()>(&MaterialPropertyValuesSetter::PropertyValuePairBase::get_propertyId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyValuePairBase*), "get_propertyId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId
// Il2CppName: set_propertyId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyValuePairBase::*)(int)>(&MaterialPropertyValuesSetter::PropertyValuePairBase::set_propertyId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyValuePairBase*), "set_propertyId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId
// Il2CppName: RefreshPropertyId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyValuePairBase::*)()>(&MaterialPropertyValuesSetter::PropertyValuePairBase::RefreshPropertyId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyValuePairBase*), "RefreshPropertyId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyValuePairBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyValuePairBase::*)()>(&MaterialPropertyValuesSetter::PropertyValuePairBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyValuePairBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyValuePairBase::*)()>(&MaterialPropertyValuesSetter::PropertyValuePairBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyValuePairBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameFloatValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameFloatValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyNameFloatValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameFloatValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameFloatValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameFloatValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameFloatValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameFloatValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameFloatValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameIntValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameIntValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyNameIntValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameIntValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameIntValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameIntValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameIntValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameIntValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameIntValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameVectorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameVectorValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyNameVectorValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameVectorValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameVectorValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameVectorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameVectorValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameVectorValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameVectorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MaterialPropertyValuesSetter/PropertyNameColorValuePair
#include "GlobalNamespace/MaterialPropertyValuesSetter_PropertyNameColorValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MaterialPropertyValuesSetter::PropertyNameColorValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameColorValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameColorValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameColorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyValuesSetter::PropertyNameColorValuePair::*)()>(&MaterialPropertyValuesSetter::PropertyNameColorValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyValuesSetter::PropertyNameColorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
