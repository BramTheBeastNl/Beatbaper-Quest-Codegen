// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FindUnityObjectsHelper
#include "GlobalNamespace/FindUnityObjectsHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FindUnityObjectsHelper.GetMonoBehavioursInLoadedScenes
::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>* GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetMonoBehavioursInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllRootGameObjectsInLoadedScenes
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllRootGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInGameObject
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, go);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInLoadedScenes
::ArrayW<::UnityEngine::GameObject*> GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::GameObject*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FixedUpdateVector3SmoothValue
#include "GlobalNamespace/FixedUpdateVector3SmoothValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FixedUpdateVector3SmoothValue.Interpolate
::UnityEngine::Vector3 GlobalNamespace::FixedUpdateVector3SmoothValue::Interpolate(::UnityEngine::Vector3 value0, ::UnityEngine::Vector3 value1, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateVector3SmoothValue::Interpolate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, value0, value1, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GenericLogger
#include "GlobalNamespace/GenericLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GenericLogger.VerboseLog
void GlobalNamespace::GenericLogger::VerboseLog(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GenericLogger::VerboseLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GenericLogger", "VerboseLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRefreshable.Refresh
void GlobalNamespace::IRefreshable::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRefreshable::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KeyboardShortcutsManager
#include "GlobalNamespace/KeyboardShortcutsManager.hpp"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<KeyboardShortcutsManager/KeyboardShortcut,System.Collections.Generic.List`1<System.Action>> _keyboardShortcutActions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Collections::Generic::List_1<::System::Action*>*>*& GlobalNamespace::KeyboardShortcutsManager::dyn__keyboardShortcutActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::dyn__keyboardShortcutActions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyboardShortcutActions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Collections::Generic::List_1<::System::Action*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KeyboardShortcutsManager.Update
void GlobalNamespace::KeyboardShortcutsManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::UnityEngine::KeyCode combinationKey2, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::UnityEngine::KeyCode, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, ::System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::UnityEngine::KeyCode combinationKey2, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::UnityEngine::KeyCode combinationKey1, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(::UnityEngine::KeyCode mainKey, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode mainKey
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_mainKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_mainKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainKey"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode combinationKey1
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "combinationKey1"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode combinationKey2
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::dyn_combinationKey2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "combinationKey2"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.GetHashCode
int GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.Equals
bool GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LinkedListExtension
#include "GlobalNamespace/LinkedListExtension.hpp"
// Including type: System.Collections.Generic.LinkedListNode`1
#include "System/Collections/Generic/LinkedListNode_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MipMapBiasSpriteSetter
#include "GlobalNamespace/MipMapBiasSpriteSetter.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite[] _sprites
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& GlobalNamespace::MipMapBiasSpriteSetter::dyn__sprites() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::dyn__sprites");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sprites"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Sprite*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _mipMapBias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MipMapBiasSpriteSetter::dyn__mipMapBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::dyn__mipMapBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mipMapBias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MipMapBiasSpriteSetter.Start
void GlobalNamespace::MipMapBiasSpriteSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MipMapBiasSpriteSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityScenesHelper
#include "GlobalNamespace/UnityScenesHelper.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityScenesHelper.SetActiveRootObjectsInScene
void GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene(::UnityEngine::SceneManagement::Scene scene, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityScenesHelper", "SetActiveRootObjectsInScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, active);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: DrawIfAttribute
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DrawIfAttribute::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object value
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::DrawIfAttribute::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object orValue
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::DrawIfAttribute::dyn_orValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_orValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly DrawIfAttribute/DisablingType disablingType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DrawIfAttribute::DisablingType& GlobalNamespace::DrawIfAttribute::dyn_disablingType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::dyn_disablingType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disablingType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DrawIfAttribute::DisablingType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawIfAttribute/DisablingType
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType ReadOnly
::GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType ReadOnly
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly(::GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType DontDraw
::GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "DontDraw"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType DontDraw
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw(::GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "DontDraw", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DrawIfAttribute::DisablingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawIfAttribute::DisablingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AssertExtensions
#include "GlobalNamespace/AssertExtensions.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kUnityAssertions
::StringW GlobalNamespace::AssertExtensions::_get_kUnityAssertions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::_get_kUnityAssertions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "AssertExtensions", "kUnityAssertions"));
}
// Autogenerated static field setter
// Set static field: static private System.String kUnityAssertions
void GlobalNamespace::AssertExtensions::_set_kUnityAssertions(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::_set_kUnityAssertions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AssertExtensions", "kUnityAssertions", value));
}
// Autogenerated method: AssertExtensions.LessThan
void GlobalNamespace::AssertExtensions::LessThan(float expected, float value, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssertExtensions::LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AssertExtensions", "LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, expected, value, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ComponentExtensions
#include "GlobalNamespace/ComponentExtensions.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CubicBezierHelper
#include "GlobalNamespace/CubicBezierHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CubicBezierHelper.EvaluateCurve
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurve(ByRef<::UnityEngine::Vector3> a1, ByRef<::UnityEngine::Vector3> c1, ByRef<::UnityEngine::Vector3> c2, ByRef<::UnityEngine::Vector3> a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a1), byref(c1), byref(c2), byref(a2), t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative(ByRef<::UnityEngine::Vector3> a1, ByRef<::UnityEngine::Vector3> c1, ByRef<::UnityEngine::Vector3> c2, ByRef<::UnityEngine::Vector3> a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a1), byref(c1), byref(c2), byref(a2), t);
}
// Autogenerated method: CubicBezierHelper.EvaluateCurveSecondDerivative
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative(ByRef<::UnityEngine::Vector3> a1, ByRef<::UnityEngine::Vector3> c1, ByRef<::UnityEngine::Vector3> c2, ByRef<::UnityEngine::Vector3> a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EvaluateCurveSecondDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EvaluateCurveSecondDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a1), byref(c1), byref(c2), byref(a2), t);
}
// Autogenerated method: CubicBezierHelper.Normal
::UnityEngine::Vector3 GlobalNamespace::CubicBezierHelper::Normal(ByRef<::UnityEngine::Vector3> a1, ByRef<::UnityEngine::Vector3> c1, ByRef<::UnityEngine::Vector3> c2, ByRef<::UnityEngine::Vector3> a2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::Normal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "Normal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a1), byref(c1), byref(c2), byref(a2), t);
}
// Autogenerated method: CubicBezierHelper.SplitCurve
void GlobalNamespace::CubicBezierHelper::SplitCurve(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::SplitCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "SplitCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, t);
}
// Autogenerated method: CubicBezierHelper.EstimateCurveLength
float GlobalNamespace::CubicBezierHelper::EstimateCurveLength(ByRef<::UnityEngine::Vector3> p0, ByRef<::UnityEngine::Vector3> p1, ByRef<::UnityEngine::Vector3> p2, ByRef<::UnityEngine::Vector3> p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CubicBezierHelper::EstimateCurveLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubicBezierHelper", "EstimateCurveLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(p0), byref(p1), byref(p2), byref(p3));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawHelpers
#include "GlobalNamespace/DrawHelpers.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DrawHelpers.DrawTexture
void GlobalNamespace::DrawHelpers::DrawTexture(::UnityEngine::Texture* texture, float x, float y, float w, float h, ::UnityEngine::Material* mat, float sx, float sy, float sw, float sh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrawHelpers::DrawTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DrawHelpers", "DrawTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(w), ::il2cpp_utils::ExtractType(h), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(sx), ::il2cpp_utils::ExtractType(sy), ::il2cpp_utils::ExtractType(sw), ::il2cpp_utils::ExtractType(sh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, x, y, w, h, mat, sx, sy, sw, sh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DroppedFramesLabel
#include "GlobalNamespace/DroppedFramesLabel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _text
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::DroppedFramesLabel::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _expectedFrameRate
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__expectedFrameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__expectedFrameRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_expectedFrameRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _resetInterval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__resetInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__resetInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resetInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _totalNumberOfDroppedFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__totalNumberOfDroppedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__totalNumberOfDroppedFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalNumberOfDroppedFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _syncedFrameTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__syncedFrameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__syncedFrameTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncedFrameTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _intervalTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__intervalTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__intervalTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intervalTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxFrameTimeInInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DroppedFramesLabel::dyn__maxFrameTimeInInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__maxFrameTimeInInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxFrameTimeInInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameCountInInterval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DroppedFramesLabel::dyn__frameCountInInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::dyn__frameCountInInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameCountInInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DroppedFramesLabel.Start
void GlobalNamespace::DroppedFramesLabel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.Update
void GlobalNamespace::DroppedFramesLabel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.RefreshText
void GlobalNamespace::DroppedFramesLabel::RefreshText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::RefreshText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RenderTextureExtensions
#include "GlobalNamespace/RenderTextureExtensions.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RenderTextureExtensions.GetTexture2D
::UnityEngine::Texture2D* GlobalNamespace::RenderTextureExtensions::GetTexture2D(::UnityEngine::RenderTexture* rt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RenderTextureExtensions::GetTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RenderTextureExtensions", "GetTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rt);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimeHelper
#include "GlobalNamespace/TimeHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single <time>k__BackingField
float GlobalNamespace::TimeHelper::_get_$time$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$time$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<time>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <time>k__BackingField
void GlobalNamespace::TimeHelper::_set_$time$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$time$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<time>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <deltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<deltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <deltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<deltaTime>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <fixedDeltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<fixedDeltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <fixedDeltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<fixedDeltaTime>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single <interpolationFactor>k__BackingField
float GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<interpolationFactor>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <interpolationFactor>k__BackingField
void GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<interpolationFactor>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single _accumulator
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeHelper::dyn__accumulator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::dyn__accumulator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_accumulator"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeHelper.get_time
float GlobalNamespace::TimeHelper::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_time
void GlobalNamespace::TimeHelper::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_deltaTime
float GlobalNamespace::TimeHelper::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_deltaTime
void GlobalNamespace::TimeHelper::set_deltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_fixedDeltaTime
float GlobalNamespace::TimeHelper::get_fixedDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_fixedDeltaTime
void GlobalNamespace::TimeHelper::set_fixedDeltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_interpolationFactor
float GlobalNamespace::TimeHelper::get_interpolationFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::get_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_interpolationFactor
void GlobalNamespace::TimeHelper::set_interpolationFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::set_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.Awake
void GlobalNamespace::TimeHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.FixedUpdate
void GlobalNamespace::TimeHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.Update
void GlobalNamespace::TimeHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.__SetTime
void GlobalNamespace::TimeHelper::__SetTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeHelper::__SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "__SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VersionStringHelper
#include "GlobalNamespace/VersionStringHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VersionStringHelper.GetMajorVersionNumber
int GlobalNamespace::VersionStringHelper::GetMajorVersionNumber(::StringW versionString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VersionStringHelper::GetMajorVersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VersionStringHelper", "GetMajorVersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(versionString)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, versionString);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Easing
#include "GlobalNamespace/Easing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Easing.Linear
float GlobalNamespace::Easing::Linear(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::Linear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "Linear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InSine
float GlobalNamespace::Easing::InSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutSine
float GlobalNamespace::Easing::OutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutSine
float GlobalNamespace::Easing::InOutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuad
float GlobalNamespace::Easing::InQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuad
float GlobalNamespace::Easing::OutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuad
float GlobalNamespace::Easing::InOutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCubic
float GlobalNamespace::Easing::InCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCubic
float GlobalNamespace::Easing::OutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCubic
float GlobalNamespace::Easing::InOutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuart
float GlobalNamespace::Easing::InQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuart
float GlobalNamespace::Easing::OutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuart
float GlobalNamespace::Easing::InOutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuint
float GlobalNamespace::Easing::InQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuint
float GlobalNamespace::Easing::OutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuint
float GlobalNamespace::Easing::InOutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InExpo
float GlobalNamespace::Easing::InExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutExpo
float GlobalNamespace::Easing::OutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutExpo
float GlobalNamespace::Easing::InOutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCirc
float GlobalNamespace::Easing::InCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCirc
float GlobalNamespace::Easing::OutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCirc
float GlobalNamespace::Easing::InOutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBack
float GlobalNamespace::Easing::InBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBack
float GlobalNamespace::Easing::OutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBack
float GlobalNamespace::Easing::InOutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InElastic
float GlobalNamespace::Easing::InElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutElastic
float GlobalNamespace::Easing::OutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutElastic
float GlobalNamespace::Easing::InOutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBounce
float GlobalNamespace::Easing::InBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBounce
float GlobalNamespace::Easing::OutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::OutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBounce
float GlobalNamespace::Easing::InOutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Easing::InOutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EaseType None
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "None"));
}
// Autogenerated static field setter
// Set static field: static public EaseType None
void GlobalNamespace::EaseType::_set_None(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType Linear
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public EaseType Linear
void GlobalNamespace::EaseType::_set_Linear(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InSine
void GlobalNamespace::EaseType::_set_InSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutSine
void GlobalNamespace::EaseType::_set_OutSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutSine
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutSine"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutSine
void GlobalNamespace::EaseType::_set_InOutSine(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuad
void GlobalNamespace::EaseType::_set_InQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuad
void GlobalNamespace::EaseType::_set_OutQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuad
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuad
void GlobalNamespace::EaseType::_set_InOutQuad(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InCubic
void GlobalNamespace::EaseType::_set_InCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutCubic
void GlobalNamespace::EaseType::_set_OutCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutCubic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutCubic
void GlobalNamespace::EaseType::_set_InOutCubic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuart
void GlobalNamespace::EaseType::_set_InQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuart
void GlobalNamespace::EaseType::_set_OutQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuart
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuart
void GlobalNamespace::EaseType::_set_InOutQuart(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InQuint
void GlobalNamespace::EaseType::_set_InQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutQuint
void GlobalNamespace::EaseType::_set_OutQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutQuint
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutQuint
void GlobalNamespace::EaseType::_set_InOutQuint(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InExpo
void GlobalNamespace::EaseType::_set_InExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutExpo
void GlobalNamespace::EaseType::_set_OutExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutExpo
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutExpo
void GlobalNamespace::EaseType::_set_InOutExpo(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InCirc
void GlobalNamespace::EaseType::_set_InCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutCirc
void GlobalNamespace::EaseType::_set_OutCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutCirc
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutCirc
void GlobalNamespace::EaseType::_set_InOutCirc(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InBack
void GlobalNamespace::EaseType::_set_InBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutBack
void GlobalNamespace::EaseType::_set_OutBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutBack
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutBack"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutBack
void GlobalNamespace::EaseType::_set_InOutBack(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InElastic
void GlobalNamespace::EaseType::_set_InElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutElastic
void GlobalNamespace::EaseType::_set_OutElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutElastic
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutElastic
void GlobalNamespace::EaseType::_set_InOutElastic(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InBounce
void GlobalNamespace::EaseType::_set_InBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InBounce", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType OutBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_OutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_OutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "OutBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType OutBounce
void GlobalNamespace::EaseType::_set_OutBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_OutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "OutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public EaseType InOutBounce
::GlobalNamespace::EaseType GlobalNamespace::EaseType::_get_InOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_get_InOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EaseType>("", "EaseType", "InOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public EaseType InOutBounce
void GlobalNamespace::EaseType::_set_InOutBounce(::GlobalNamespace::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::_set_InOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EaseType", "InOutBounce", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EaseType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EaseType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Interpolation
#include "GlobalNamespace/Interpolation.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Interpolation.Interpolate
float GlobalNamespace::Interpolation::Interpolate(float t, ::GlobalNamespace::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Interpolation::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Interpolation", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(easeType)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, easeType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdate
#include "GlobalNamespace/ManualUpdate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdateManager
#include "GlobalNamespace/ManualUpdateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ActivateOnVisible
#include "GlobalNamespace/ActivateOnVisible.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] _gameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ActivateOnVisible::dyn__gameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::dyn__gameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ActivateOnVisible.Awake
void GlobalNamespace::ActivateOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameVisible
void GlobalNamespace::ActivateOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameInvisible
void GlobalNamespace::ActivateOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo
#include "GlobalNamespace/AlphabetScrollInfo.hpp"
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Char character
[[deprecated("Use field access instead!")]] ::Il2CppChar& GlobalNamespace::AlphabetScrollInfo::Data::dyn_character() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AlphabetScrollInfo::Data::dyn_character");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "character"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 cellIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AlphabetScrollInfo::Data::dyn_cellIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AlphabetScrollInfo::Data::dyn_cellIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cellIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnimationStartParams
#include "GlobalNamespace/AnimationStartParams.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _timeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimationStartParams::dyn__timeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__timeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimationStartParams::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::AnimationStartParams::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AnimationStartParams.Start
void GlobalNamespace::AnimationStartParams::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationStartParams::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ArrayHelpers
#include "GlobalNamespace/ArrayHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper
#include "GlobalNamespace/AsyncHelper.hpp"
// Including type: AsyncHelper/<>c__DisplayClass0_0`1
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass0_0_1.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AsyncHelper.RunSync
void GlobalNamespace::AsyncHelper::RunSync(::System::Func_1<::System::Threading::Tasks::Task*>* asyncTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::RunSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AsyncHelper", "RunSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asyncTask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Func`1<System.Threading.Tasks.Task> asyncTask
[[deprecated("Use field access instead!")]] ::System::Func_1<::System::Threading::Tasks::Task*>*& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::dyn_asyncTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::dyn_asyncTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncTask"))->offset;
  return *reinterpret_cast<::System::Func_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0.<RunSync>b__0
::System::Threading::Tasks::Task* GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$RunSync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::<RunSync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunSync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AsyncHelper/<>c__DisplayClass1_0 <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0*& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.MoveNext
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.SetStateMachine
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard
#include "GlobalNamespace/Billboard.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Billboard/RotationMode _rotationMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Billboard::RotationMode& GlobalNamespace::Billboard::dyn__rotationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__rotationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Billboard::RotationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _flipDirection
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Billboard::dyn__flipDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__flipDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flipDirection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Billboard::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Billboard.Awake
void GlobalNamespace::Billboard::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Billboard.OnWillRenderObject
void GlobalNamespace::Billboard::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard/RotationMode
#include "GlobalNamespace/Billboard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode AllAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_AllAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_AllAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "AllAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode AllAxis
void GlobalNamespace::Billboard::RotationMode::_set_AllAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_AllAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "AllAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode XAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_XAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "XAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode XAxis
void GlobalNamespace::Billboard::RotationMode::_set_XAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_XAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "XAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode YAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_YAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "YAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode YAxis
void GlobalNamespace::Billboard::RotationMode::_set_YAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_YAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "YAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode ZAxis
::GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_get_ZAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "ZAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode ZAxis
void GlobalNamespace::Billboard::RotationMode::_set_ZAxis(::GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::_set_ZAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "ZAxis", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Billboard::RotationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Billboard::RotationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CameraDepthTextureMode
#include "GlobalNamespace/CameraDepthTextureMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.DepthTextureMode _depthTextureMode
[[deprecated("Use field access instead!")]] ::UnityEngine::DepthTextureMode& GlobalNamespace::CameraDepthTextureMode::dyn__depthTextureMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraDepthTextureMode::dyn__depthTextureMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_depthTextureMode"))->offset;
  return *reinterpret_cast<::UnityEngine::DepthTextureMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CameraDepthTextureMode.Awake
void GlobalNamespace::CameraDepthTextureMode::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraDepthTextureMode::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClickButtonWithCommandArgument
#include "GlobalNamespace/ClickButtonWithCommandArgument.hpp"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _argument
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ClickButtonWithCommandArgument::dyn__argument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::dyn__argument");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_argument"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Button _button
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& GlobalNamespace::ClickButtonWithCommandArgument::dyn__button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::dyn__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Button**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ClickButtonWithCommandArgument.Start
::System::Collections::IEnumerator* GlobalNamespace::ClickButtonWithCommandArgument::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ClickButtonWithCommandArgument <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickButtonWithCommandArgument*& GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickButtonWithCommandArgument**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.IDisposable.Dispose
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.MoveNext
bool GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorExtensions
#include "GlobalNamespace/ColorExtensions.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorExtensions.SaturatedColor
::UnityEngine::Color GlobalNamespace::ColorExtensions::SaturatedColor(::UnityEngine::Color color, float saturation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::SaturatedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "SaturatedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(saturation)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, saturation);
}
// Autogenerated method: ColorExtensions.ColorWithAlpha
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithAlpha(::UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, alpha);
}
// Autogenerated method: ColorExtensions.ColorWithR
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithR(::UnityEngine::Color color, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, r);
}
// Autogenerated method: ColorExtensions.ColorWithG
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithG(::UnityEngine::Color color, float g) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithG");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithG", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(g)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, g);
}
// Autogenerated method: ColorExtensions.ColorWithB
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithB(::UnityEngine::Color color, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, b);
}
// Autogenerated method: ColorExtensions.ColorWithValue
::UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithValue(::UnityEngine::Color color, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::ColorWithValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, value);
}
// Autogenerated method: ColorExtensions.LerpRGBUnclamped
::UnityEngine::Color GlobalNamespace::ColorExtensions::LerpRGBUnclamped(::UnityEngine::Color a, ::UnityEngine::Color b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorExtensions::LerpRGBUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "LerpRGBUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConfigSerializer
#include "GlobalNamespace/ConfigSerializer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConfigSerializer.SaveConfig
void GlobalNamespace::ConfigSerializer::SaveConfig(::Il2CppObject* config, ::StringW filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConfigSerializer::SaveConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "SaveConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, config, filePath);
}
// Autogenerated method: ConfigSerializer.LoadConfig
bool GlobalNamespace::ConfigSerializer::LoadConfig(::Il2CppObject* config, ::StringW filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConfigSerializer::LoadConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "LoadConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, config, filePath);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoroutineHelpers
#include "GlobalNamespace/CoroutineHelpers.hpp"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CoroutineHelpers.ExecuteAfterDelayCoroutine
::System::Collections::IEnumerator* GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine(::System::Action* action, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CoroutineHelpers", "ExecuteAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.IDisposable.Dispose
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.MoveNext
bool GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.Reset
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBoundingBox
#include "GlobalNamespace/CustomBoundingBox.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _meshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::CustomBoundingBox::dyn__meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__meshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _boundingBoxCenter
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CustomBoundingBox::dyn__boundingBoxCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__boundingBoxCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundingBoxCenter"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _boundingBoxSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CustomBoundingBox::dyn__boundingBoxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__boundingBoxSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundingBoxSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::CustomBoundingBox::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CustomBoundingBox.Awake
void GlobalNamespace::CustomBoundingBox::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBoundingBox::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableGCWhileEnabled
#include "GlobalNamespace/DisableGCWhileEnabled.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableGCWhileEnabled.OnEnable
void GlobalNamespace::DisableGCWhileEnabled::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisableGCWhileEnabled::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DisableGCWhileEnabled.OnDisable
void GlobalNamespace::DisableGCWhileEnabled::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DisableGCWhileEnabled::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoesNotRequireDomainReloadInitAttribute
#include "GlobalNamespace/DoesNotRequireDomainReloadInitAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableAfterDelay
#include "GlobalNamespace/EnableAfterDelay.hpp"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MonoBehaviour _component
[[deprecated("Use field access instead!")]] ::UnityEngine::MonoBehaviour*& GlobalNamespace::EnableAfterDelay::dyn__component() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::dyn__component");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_component"))->offset;
  return *reinterpret_cast<::UnityEngine::MonoBehaviour**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableAfterDelay.Start
::System::Collections::IEnumerator* GlobalNamespace::EnableAfterDelay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EnableAfterDelay <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnableAfterDelay*& GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnableAfterDelay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.IDisposable.Dispose
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.MoveNext
bool GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.Reset
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableComponentWithCommandArgument
#include "GlobalNamespace/EnableComponentWithCommandArgument.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _argument
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::EnableComponentWithCommandArgument::dyn__argument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::dyn__argument");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_argument"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Behaviour _component
[[deprecated("Use field access instead!")]] ::UnityEngine::Behaviour*& GlobalNamespace::EnableComponentWithCommandArgument::dyn__component() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::dyn__component");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_component"))->offset;
  return *reinterpret_cast<::UnityEngine::Behaviour**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableComponentWithCommandArgument.Awake
void GlobalNamespace::EnableComponentWithCommandArgument::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableComponentWithCommandArgument::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableEmmisionOnVisible
#include "GlobalNamespace/EnableEmmisionOnVisible.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem[] _particleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::EnableEmmisionOnVisible::dyn__particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::dyn__particleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmissionModule[] _emmisionModules
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& GlobalNamespace::EnableEmmisionOnVisible::dyn__emmisionModules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::dyn__emmisionModules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emmisionModules"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableEmmisionOnVisible.Awake
void GlobalNamespace::EnableEmmisionOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameVisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameInvisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableOnVisible
#include "GlobalNamespace/EnableOnVisible.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Boolean> VisibilityChangedEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::EnableOnVisible::dyn_VisibilityChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::dyn_VisibilityChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VisibilityChangedEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Behaviour[] _components
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& GlobalNamespace::EnableOnVisible::dyn__components() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::dyn__components");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_components"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Behaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EnableOnVisible.add_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent(::System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.remove_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent(::System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.Awake
void GlobalNamespace::EnableOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameVisible
void GlobalNamespace::EnableOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameInvisible
void GlobalNamespace::EnableOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnumFlagAttribute
#include "GlobalNamespace/EnumFlagAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String enumName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::EnumFlagAttribute::dyn_enumName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumFlagAttribute::dyn_enumName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enumName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ExtensionMethods
#include "GlobalNamespace/ExtensionMethods.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExtensionMethods.ContainsLayer
bool GlobalNamespace::ExtensionMethods::ContainsLayer(::UnityEngine::LayerMask layerMask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::ContainsLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "ContainsLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerMask, layer);
}
// Autogenerated method: ExtensionMethods.StartUniqueCoroutine
::UnityEngine::Coroutine* GlobalNamespace::ExtensionMethods::StartUniqueCoroutine(::UnityEngine::MonoBehaviour* m, ::System::Func_1<::System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::StartUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StartUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Coroutine*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.StopUniqueCoroutine
void GlobalNamespace::ExtensionMethods::StopUniqueCoroutine(::UnityEngine::MonoBehaviour* m, ::System::Func_1<::System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::StopUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StopUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.IsDescendantOf
bool GlobalNamespace::ExtensionMethods::IsDescendantOf(::UnityEngine::Transform* transform, ::UnityEngine::Transform* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::IsDescendantOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "IsDescendantOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, parent);
}
// Autogenerated method: ExtensionMethods.SetLocalPositionAndRotation
void GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation(::UnityEngine::Transform* tr, ::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "SetLocalPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tr), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tr, pos, rot);
}
// Autogenerated method: ExtensionMethods.GetPath
::StringW GlobalNamespace::ExtensionMethods::GetPath(::UnityEngine::Transform* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::GetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "GetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, current);
}
// Autogenerated method: ExtensionMethods.Reflect
::UnityEngine::Quaternion GlobalNamespace::ExtensionMethods::Reflect(::UnityEngine::Quaternion source, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::Reflect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "Reflect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, normal);
}
// Autogenerated method: ExtensionMethods.CreateTexture2D
::UnityEngine::Texture2D* GlobalNamespace::ExtensionMethods::CreateTexture2D(::UnityEngine::RenderTexture* renderTexture, ::UnityEngine::TextureFormat textureFormat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::CreateTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "CreateTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture), ::il2cpp_utils::ExtractType(textureFormat)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, renderTexture, textureFormat);
}
// Autogenerated method: ExtensionMethods.Rotate
::UnityEngine::Vector2 GlobalNamespace::ExtensionMethods::Rotate(::UnityEngine::Vector2 vector, float rads) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExtensionMethods::Rotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "Rotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(rads)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vector, rads);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EssentialHelpers
#include "GlobalNamespace/EssentialHelpers.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EssentialHelpers.get_CurrentTimeStamp
double GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "get_CurrentTimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: EssentialHelpers.SafeDestroy
void GlobalNamespace::EssentialHelpers::SafeDestroy(::UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EssentialHelpers::SafeDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "SafeDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventBinder
#include "GlobalNamespace/EventBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Action> _unsubscribes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action*>*& GlobalNamespace::EventBinder::dyn__unsubscribes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::dyn__unsubscribes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unsubscribes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Action*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EventBinder.Bind
void GlobalNamespace::EventBinder::Bind(::System::Action* subscribe, ::System::Action* unsubscribe) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscribe), ::il2cpp_utils::ExtractType(unsubscribe)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subscribe, unsubscribe);
}
// Autogenerated method: EventBinder.ClearAllBindings
void GlobalNamespace::EventBinder::ClearAllBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventBinder::ClearAllBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FloatSO _easeValue
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FloatSO*& GlobalNamespace::FadeInOutController::dyn__easeValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__easeValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_easeValue"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FloatSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeInCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::dyn__fadeInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeInCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeOutCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::dyn__fadeOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeOutCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInStartDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__fadeInStartDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__fadeInStartDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInStartDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultFadeOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__defaultFadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__defaultFadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultFadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultFadeInDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::dyn__defaultFadeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::dyn__defaultFadeInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultFadeInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FadeInOutController.FadeOutInstant
void GlobalNamespace::FadeInOutController::FadeOutInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOutInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOutInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(::System::Action* fadeInCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeInCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeInCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(::System::Action* fadeOutCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeOutCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeOutCallback);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration, ::System::Action* fadeInFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeInFinishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, fadeInFinishedCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration, ::System::Action* fadeOutFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOutFinishedCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration, fadeOutFinishedCallback);
}
// Autogenerated method: FadeInOutController.Fade
::System::Collections::IEnumerator* GlobalNamespace::FadeInOutController::Fade(float fromValue, float toValue, float duration, float startDelay, ::UnityEngine::AnimationCurve* curve, ::System::Action* fadeFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromValue), ::il2cpp_utils::ExtractType(toValue), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(fadeFinishedCallback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, fromValue, toValue, duration, startDelay, curve, fadeFinishedCallback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_startDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_startDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FadeInOutController <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FadeInOutController*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FadeInOutController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fromValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fromValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fromValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fromValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single toValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_toValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_toValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve curve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action fadeFinishedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fadeFinishedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_fadeFinishedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeFinishedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$elapsedTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::dyn_$elapsedTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.IDisposable.Dispose
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.MoveNext
bool GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.Reset
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper
#include "GlobalNamespace/FileCompressionHelper.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectoryAsync
void GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync(::StringW sourceDirectoryName, ::StringW destinationArchiveFileName, ::System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectoryAsync
void GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync(::StringW sourceArchiveFileName, ::StringW destinationDirectoryName, ::System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectory
bool GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory(::StringW sourceDirectoryName, ::StringW destinationArchiveFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectory
bool GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory(::StringW sourceArchiveFileName, ::StringW destinationDirectoryName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean success
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_success");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "success"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sourceDirectoryName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_sourceDirectoryName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_sourceDirectoryName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceDirectoryName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String destinationArchiveFileName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_destinationArchiveFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_destinationArchiveFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationArchiveFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Boolean> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean success
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_success");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "success"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sourceArchiveFileName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_sourceArchiveFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_sourceArchiveFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceArchiveFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String destinationDirectoryName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_destinationDirectoryName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_destinationDirectoryName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationDirectoryName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Boolean> finishCallback
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_finishCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::dyn_finishCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finishCallback"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollow
#include "GlobalNamespace/FlexyFollow.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject _followObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::FlexyFollow::dyn__followObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _followSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlexyFollow::dyn__followSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FlexyFollow::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedXOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedXOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedYOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedYOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _fixedZOffset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__fixedZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__fixedZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedZOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _useLocalPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FlexyFollow::dyn__useLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__useLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useLocalPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _followTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollow::dyn__followTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__followTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_followTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollow::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlexyFollow.Start
void GlobalNamespace::FlexyFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlexyFollow.LateUpdate
void GlobalNamespace::FlexyFollow::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollow::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollowAndRotate
#include "GlobalNamespace/FlexyFollowAndRotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlexyFollowAndRotate::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _smooth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FlexyFollowAndRotate::dyn__smooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::dyn__smooth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FlexyFollowAndRotate.Update
void GlobalNamespace::FlexyFollowAndRotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlexyFollowAndRotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FollowLocalRotation
#include "GlobalNamespace/FollowLocalRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform _target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FollowLocalRotation::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FollowLocalRotation::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FollowLocalRotation.Awake
void GlobalNamespace::FollowLocalRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FollowLocalRotation.Update
void GlobalNamespace::FollowLocalRotation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FollowLocalRotation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FrameCounter
#include "GlobalNamespace/FrameCounter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FrameCounter::dyn__numberOfFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::dyn__numberOfFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FrameCounter.Update
void GlobalNamespace::FrameCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FrameCounter.OnDestroy
void GlobalNamespace::FrameCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GeometryTools
#include "GlobalNamespace/GeometryTools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GeometryTools.ThreePointsToBox
bool GlobalNamespace::GeometryTools::ThreePointsToBox(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ByRef<::UnityEngine::Vector3> center, ByRef<::UnityEngine::Vector3> halfSize, ByRef<::UnityEngine::Quaternion> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeometryTools::ThreePointsToBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GeometryTools", "ThreePointsToBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, byref(center), byref(halfSize), byref(orientation));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMAsyncRequest
#include "GlobalNamespace/HMAsyncRequest.hpp"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _cancelled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HMAsyncRequest::dyn__cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::dyn__cancelled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMAsyncRequest/CancelHander _cancelHander
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HMAsyncRequest::CancelHander*& GlobalNamespace::HMAsyncRequest::dyn__cancelHander() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::dyn__cancelHander");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelHander"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HMAsyncRequest::CancelHander**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMAsyncRequest.get_CancelHandler
::GlobalNamespace::HMAsyncRequest::CancelHander* GlobalNamespace::HMAsyncRequest::get_CancelHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::get_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HMAsyncRequest::CancelHander*, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.set_CancelHandler
void GlobalNamespace::HMAsyncRequest::set_CancelHandler(::GlobalNamespace::HMAsyncRequest::CancelHander* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::set_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMAsyncRequest.get_cancelled
bool GlobalNamespace::HMAsyncRequest::get_cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::get_cancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.Cancel
void GlobalNamespace::HMAsyncRequest::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::Cancel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMAsyncRequest/CancelHander.Invoke
void GlobalNamespace::HMAsyncRequest::CancelHander::Invoke(::GlobalNamespace::HMAsyncRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: HMAsyncRequest/CancelHander.BeginInvoke
::System::IAsyncResult* GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke(::GlobalNamespace::HMAsyncRequest* request, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: HMAsyncRequest/CancelHander.EndInvoke
void GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAutoincrementedRequestId
#include "GlobalNamespace/HMAutoincrementedRequestId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt64 _nextRequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "HMAutoincrementedRequestId", "_nextRequestId"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt64 _nextRequestId
void GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMAutoincrementedRequestId", "_nextRequestId", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.UInt64 _requestId
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::HMAutoincrementedRequestId::dyn__requestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::dyn__requestId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HMAutoincrementedRequestId.get_RequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::get_RequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId..cctor
void GlobalNamespace::HMAutoincrementedRequestId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMAutoincrementedRequestId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(::GlobalNamespace::HMAutoincrementedRequestId* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId.GetHashCode
int GlobalNamespace::HMAutoincrementedRequestId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HMAutoincrementedRequestId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HorizontalCameraFov
#include "GlobalNamespace/HorizontalCameraFov.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _horizontalFOV
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorizontalCameraFov::dyn__horizontalFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorizontalCameraFov::dyn__horizontalFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_horizontalFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HorizontalCameraFov.Awake
void GlobalNamespace::HorizontalCameraFov::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorizontalCameraFov::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstantiatePrefab
#include "GlobalNamespace/InstantiatePrefab.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject _prefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::InstantiatePrefab::dyn__prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstantiatePrefab::dyn__prefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InstantiatePrefab.Awake
void GlobalNamespace::InstantiatePrefab::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InstantiatePrefab::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntToRoman
#include "GlobalNamespace/IntToRoman.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntToRoman.Roman
::StringW GlobalNamespace::IntToRoman::Roman(int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IntToRoman::Roman");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IntToRoman", "Roman", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineTriangleIntersection
#include "GlobalNamespace/LineTriangleIntersection.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LineTriangleIntersection.Intersects
bool GlobalNamespace::LineTriangleIntersection::Intersects(::UnityEngine::Ray ray, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineTriangleIntersection::Intersects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineTriangleIntersection", "Intersects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ray, p0, p1, p2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MarkableUIButton
#include "GlobalNamespace/MarkableUIButton.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::MarkableUIButton::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _marked
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MarkableUIButton::dyn__marked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__marked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_marked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _markedTriggerId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MarkableUIButton::dyn__markedTriggerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::dyn__markedTriggerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_markedTriggerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MarkableUIButton.get_marked
bool GlobalNamespace::MarkableUIButton::get_marked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::get_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.set_marked
void GlobalNamespace::MarkableUIButton::set_marked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::set_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MarkableUIButton.Awake
void GlobalNamespace::MarkableUIButton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.ToggleMarked
void GlobalNamespace::MarkableUIButton::ToggleMarked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MarkableUIButton::ToggleMarked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleMarked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MonobehaviourCallbacksOrderDebuger
#include "GlobalNamespace/MonobehaviourCallbacksOrderDebuger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Awake
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.OnEnable
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Start
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NumberTag
#include "GlobalNamespace/NumberTag.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 number
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NumberTag::dyn_number() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NumberTag::dyn_number");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "number"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PerlinNoise
#include "GlobalNamespace/PerlinNoise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E7EA0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] permutation
::ArrayW<int> GlobalNamespace::PerlinNoise::_get_permutation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_get_permutation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("", "PerlinNoise", "permutation"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] permutation
void GlobalNamespace::PerlinNoise::_set_permutation(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_set_permutation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "permutation", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E7EB0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] p
::ArrayW<int> GlobalNamespace::PerlinNoise::_get_p() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_get_p");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("", "PerlinNoise", "p"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] p
void GlobalNamespace::PerlinNoise::_set_p(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::_set_p");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "p", value));
}
// Autogenerated method: PerlinNoise..cctor
void GlobalNamespace::PerlinNoise::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PerlinNoise.OctavePerlin3D
float GlobalNamespace::PerlinNoise::OctavePerlin3D(float x, float y, float z, int octaves, float persistence, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::OctavePerlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "OctavePerlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(octaves), ::il2cpp_utils::ExtractType(persistence), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, octaves, persistence, repeat);
}
// Autogenerated method: PerlinNoise.Perlin3D
float GlobalNamespace::PerlinNoise::Perlin3D(float x, float y, float z, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Perlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Perlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, repeat);
}
// Autogenerated method: PerlinNoise.Inc
int GlobalNamespace::PerlinNoise::Inc(int num, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Inc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Inc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, num, repeat);
}
// Autogenerated method: PerlinNoise.Grad3D
float GlobalNamespace::PerlinNoise::Grad3D(int hash, float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Grad3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Grad3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hash, x, y, z);
}
// Autogenerated method: PerlinNoise.Fade
float GlobalNamespace::PerlinNoise::Fade(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: PerlinNoise.Lerp
float GlobalNamespace::PerlinNoise::Lerp(float a, float b, float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerlinNoise::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PersistentScriptableObject.OnEnable
void GlobalNamespace::PersistentScriptableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PersistentScriptableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PhysicsFollow
#include "GlobalNamespace/PhysicsFollow.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform _targetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PhysicsFollow::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PhysicsFollow::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _friction
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsFollow::dyn__friction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__friction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_friction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _elasticity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PhysicsFollow::dyn__elasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__elasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody2D _rigidBody2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& GlobalNamespace::PhysicsFollow::dyn__rigidBody2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::dyn__rigidBody2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rigidBody2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PhysicsFollow.Start
void GlobalNamespace::PhysicsFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsFollow.FixedUpdate
void GlobalNamespace::PhysicsFollow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhysicsFollow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomAnimationStartTime
#include "GlobalNamespace/RandomAnimationStartTime.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation _animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& GlobalNamespace::RandomAnimationStartTime::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimationStartTime::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomAnimationStartTime.Start
void GlobalNamespace::RandomAnimationStartTime::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimationStartTime::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomAnimatorStartTime
#include "GlobalNamespace/RandomAnimatorStartTime.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::RandomAnimatorStartTime::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _stateName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::RandomAnimatorStartTime::dyn__stateName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::dyn__stateName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stateName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomAnimatorStartTime.Start
void GlobalNamespace::RandomAnimatorStartTime::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomAnimatorStartTime::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Ray2DExtensions
#include "GlobalNamespace/Ray2DExtensions.hpp"
// Including type: UnityEngine.Ray2D
#include "UnityEngine/Ray2D.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Ray2DExtensions.CircleIntersections
int GlobalNamespace::Ray2DExtensions::CircleIntersections(::UnityEngine::Ray2D ray, ::UnityEngine::Vector2 circleCenter, float radius, ::ArrayW<float> distances) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Ray2DExtensions::CircleIntersections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Ray2DExtensions", "CircleIntersections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(circleCenter), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(distances)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ray, circleCenter, radius, distances);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetPlayerPrefsOnButton
#include "GlobalNamespace/ResetPlayerPrefsOnButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.KeyCode _keyCode
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::ResetPlayerPrefsOnButton::dyn__keyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ResetPlayerPrefsOnButton::dyn__keyCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyCode"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ResetPlayerPrefsOnButton.Update
void GlobalNamespace::ResetPlayerPrefsOnButton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ResetPlayerPrefsOnButton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Rotate
#include "GlobalNamespace/Rotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _rotationVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__rotationVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__rotationVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Rotate::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _randomize
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Rotate::dyn__randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _randomMinMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomMinMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomMinMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomMinMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 _randomMaxMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomMaxMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomMaxMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomMaxMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Rotate::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startRotationAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__startRotationAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__startRotationAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startRotationAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _randomizedMultiplier
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Rotate::dyn__randomizedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::dyn__randomizedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomizedMultiplier"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Rotate.Awake
void GlobalNamespace::Rotate::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameVisible
void GlobalNamespace::Rotate::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameInvisible
void GlobalNamespace::Rotate::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Update
void GlobalNamespace::Rotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Randomize
void GlobalNamespace::Rotate::Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Rotate::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneLoadedCallbacksOrderDebug
#include "GlobalNamespace/SceneLoadedCallbacksOrderDebug.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Awake
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnEnable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnSceneLoaded
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scene, mode);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Start
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnDisable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenshotRecorder
#include "GlobalNamespace/ScreenshotRecorder.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _directory
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ScreenshotRecorder::dyn__directory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__directory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directory"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _camera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::ScreenshotRecorder::dyn__camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__camera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_camera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameRate
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__frameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__frameRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _forceFixedFramerate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__forceFixedFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__forceFixedFramerate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forceFixedFramerate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _interval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__interval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ScreenshotRecorder/RecordingType _recordingType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ScreenshotRecorder::RecordingType& GlobalNamespace::ScreenshotRecorder::dyn__recordingType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__recordingType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_recordingType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ScreenshotRecorder::RecordingType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _pauseWithPButton
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__pauseWithPButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__pauseWithPButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pauseWithPButton"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _antiAlias
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__antiAlias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__antiAlias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_antiAlias"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _screenshotWidth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__screenshotWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__screenshotWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_screenshotWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _screenshotHeight
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__screenshotHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__screenshotHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_screenshotHeight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _counter
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__counter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__counter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_counter"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _originalTimeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ScreenshotRecorder::dyn__originalTimeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__originalTimeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalTimeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _paused
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ScreenshotRecorder::dyn__paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__paused");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paused"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _frameNum
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::dyn__frameNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__frameNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_frameNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cubemapLeftEye
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cubemapLeftEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cubemapLeftEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cubemapLeftEye"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cubemapRighEye
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cubemapRighEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cubemapRighEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cubemapRighEye"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _equirectTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__equirectTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__equirectTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_equirectTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture _cameraRenderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::ScreenshotRecorder::dyn__cameraRenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::dyn__cameraRenderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cameraRenderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScreenshotRecorder.get_directory
::StringW GlobalNamespace::ScreenshotRecorder::get_directory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::get_directory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_directory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.set_directory
void GlobalNamespace::ScreenshotRecorder::set_directory(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::set_directory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScreenshotRecorder.OnEnable
void GlobalNamespace::ScreenshotRecorder::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnDisable
void GlobalNamespace::ScreenshotRecorder::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.LateUpdate
void GlobalNamespace::ScreenshotRecorder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnApplicationFocus
void GlobalNamespace::ScreenshotRecorder::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: ScreenshotRecorder.SaveCameraScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveCameraScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.SaveTextureScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot(::UnityEngine::Texture2D* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveTextureScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tex);
}
// Autogenerated method: ScreenshotRecorder.ConvertRenderTexture
::UnityEngine::Texture2D* GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture(::UnityEngine::RenderTexture* renderTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertRenderTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method, renderTexture);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenshotRecorder/RecordingType
#include "GlobalNamespace/ScreenshotRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Mono360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Mono360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Interval
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Interval"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Interval
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Interval", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
::GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause(::GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScreenshotRecorder::RecordingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenshotRecorder::RecordingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SerializationHelpers
#include "GlobalNamespace/SerializationHelpers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SharedCoroutineStarter
#include "GlobalNamespace/SharedCoroutineStarter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
