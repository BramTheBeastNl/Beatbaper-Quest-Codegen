// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.StringFormatMethodAttribute
#include "JetBrains/Annotations/StringFormatMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <FormatParameterName>k__BackingField
::StringW& JetBrains::Annotations::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FormatParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.get_FormatParameterName
::StringW JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.set_FormatParameterName
void JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ValueProviderAttribute
#include "JetBrains/Annotations/ValueProviderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::StringW& JetBrains::Annotations::ValueProviderAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.get_Name
::StringW JetBrains::Annotations::ValueProviderAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.set_Name
void JetBrains::Annotations::ValueProviderAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InvokerParameterNameAttribute
#include "JetBrains/Annotations/InvokerParameterNameAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute
#include "JetBrains/Annotations/NotifyPropertyChangedInvocatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <ParameterName>k__BackingField
::StringW& JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.get_ParameterName
::StringW JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.set_ParameterName
void JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ContractAnnotationAttribute
#include "JetBrains/Annotations/ContractAnnotationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Contract>k__BackingField
::StringW& JetBrains::Annotations::ContractAnnotationAttribute::dyn_$Contract$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::dyn_$Contract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Contract>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ForceFullStates>k__BackingField
bool& JetBrains::Annotations::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForceFullStates>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_Contract
::StringW JetBrains::Annotations::ContractAnnotationAttribute::get_Contract() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_Contract
void JetBrains::Annotations::ContractAnnotationAttribute::set_Contract(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_ForceFullStates
bool JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_ForceFullStates
void JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LocalizationRequiredAttribute
#include "JetBrains/Annotations/LocalizationRequiredAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Required>k__BackingField
bool& JetBrains::Annotations::LocalizationRequiredAttribute::dyn_$Required$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::dyn_$Required$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Required>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.get_Required
bool JetBrains::Annotations::LocalizationRequiredAttribute::get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::get_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.set_Required
void JetBrains::Annotations::LocalizationRequiredAttribute::set_Required(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::set_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CannotApplyEqualityOperatorAttribute
#include "JetBrains/Annotations/CannotApplyEqualityOperatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.BaseTypeRequiredAttribute
#include "JetBrains/Annotations/BaseTypeRequiredAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <BaseType>k__BackingField
System::Type*& JetBrains::Annotations::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.get_BaseType
System::Type* JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.set_BaseType
void JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MeansImplicitUseAttribute
#include "JetBrains/Annotations/MeansImplicitUseAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField
JetBrains::Annotations::ImplicitUseKindFlags& JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::ImplicitUseKindFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField
JetBrains::Annotations::ImplicitUseTargetFlags& JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::ImplicitUseTargetFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_UseKindFlags
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<JetBrains::Annotations::ImplicitUseKindFlags, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_UseKindFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_TargetFlags
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<JetBrains::Annotations::ImplicitUseTargetFlags, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_TargetFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PublicAPIAttribute
#include "JetBrains/Annotations/PublicAPIAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Comment>k__BackingField
::StringW& JetBrains::Annotations::PublicAPIAttribute::dyn_$Comment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::dyn_$Comment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Comment>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.get_Comment
::StringW JetBrains::Annotations::PublicAPIAttribute::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.set_Comment
void JetBrains::Annotations::PublicAPIAttribute::set_Comment(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InstantHandleAttribute
#include "JetBrains/Annotations/InstantHandleAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PureAttribute
#include "JetBrains/Annotations/PureAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MustUseReturnValueAttribute
#include "JetBrains/Annotations/MustUseReturnValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Justification>k__BackingField
::StringW& JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.get_Justification
::StringW JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.set_Justification
void JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ProvidesContextAttribute
#include "JetBrains/Annotations/ProvidesContextAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PathReferenceAttribute
#include "JetBrains/Annotations/PathReferenceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BasePath>k__BackingField
::StringW& JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.get_BasePath
::StringW JetBrains::Annotations::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.set_BasePath
void JetBrains::Annotations::PathReferenceAttribute::set_BasePath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.SourceTemplateAttribute
#include "JetBrains/Annotations/SourceTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MacroAttribute
#include "JetBrains/Annotations/MacroAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Expression>k__BackingField
::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Expression>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Editable>k__BackingField
int& JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Editable>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Target>k__BackingField
::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Target>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Expression
::StringW JetBrains::Annotations::MacroAttribute::get_Expression() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Expression
void JetBrains::Annotations::MacroAttribute::set_Expression(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Editable
int JetBrains::Annotations::MacroAttribute::get_Editable() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Editable
void JetBrains::Annotations::MacroAttribute::set_Editable(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Target
::StringW JetBrains::Annotations::MacroAttribute::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Target
void JetBrains::Annotations::MacroAttribute::set_Target(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
::StringW& JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionAttribute
#include "JetBrains/Annotations/AspMvcActionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
::StringW& JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaAttribute
#include "JetBrains/Annotations/AspMvcAreaAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
::StringW& JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcControllerAttribute
#include "JetBrains/Annotations/AspMvcControllerAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
::StringW& JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterAttribute
#include "JetBrains/Annotations/AspMvcMasterAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcModelTypeAttribute
#include "JetBrains/Annotations/AspMvcModelTypeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewAttribute
#include "JetBrains/Annotations/AspMvcPartialViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcSuppressViewErrorAttribute
#include "JetBrains/Annotations/AspMvcSuppressViewErrorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcDisplayTemplateAttribute
#include "JetBrains/Annotations/AspMvcDisplayTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcEditorTemplateAttribute
#include "JetBrains/Annotations/AspMvcEditorTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcTemplateAttribute
#include "JetBrains/Annotations/AspMvcTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewAttribute
#include "JetBrains/Annotations/AspMvcViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentAttribute
#include "JetBrains/Annotations/AspMvcViewComponentAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentViewAttribute
#include "JetBrains/Annotations/AspMvcViewComponentViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionSelectorAttribute
#include "JetBrains/Annotations/AspMvcActionSelectorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlElementAttributesAttribute
#include "JetBrains/Annotations/HtmlElementAttributesAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::StringW& JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.get_Name
::StringW JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.set_Name
void JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlAttributeValueAttribute
#include "JetBrains/Annotations/HtmlAttributeValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::StringW& JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.get_Name
::StringW JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.set_Name
void JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorSectionAttribute
#include "JetBrains/Annotations/RazorSectionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessAttribute
#include "JetBrains/Annotations/CollectionAccessAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.CollectionAccessType <CollectionAccessType>k__BackingField
JetBrains::Annotations::CollectionAccessType& JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CollectionAccessType>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::CollectionAccessType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.get_CollectionAccessType
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<JetBrains::Annotations::CollectionAccessType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.set_CollectionAccessType
void JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessType
#include "JetBrains/Annotations/CollectionAccessType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType None
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "None"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType None
void JetBrains::Annotations::CollectionAccessType::_set_None(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType Read
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "Read"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType Read
void JetBrains::Annotations::CollectionAccessType::_set_Read(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
void JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
void JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& JetBrains::Annotations::CollectionAccessType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionMethodAttribute
#include "JetBrains/Annotations/AssertionMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionAttribute
#include "JetBrains/Annotations/AssertionConditionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.AssertionConditionType <ConditionType>k__BackingField
JetBrains::Annotations::AssertionConditionType& JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ConditionType>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::AssertionConditionType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.get_ConditionType
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<JetBrains::Annotations::AssertionConditionType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.set_ConditionType
void JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionType
#include "JetBrains/Annotations/AssertionConditionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
void JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
void JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NULL(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& JetBrains::Annotations::AssertionConditionType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.TerminatesProgramAttribute
#include "JetBrains/Annotations/TerminatesProgramAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LinqTunnelAttribute
#include "JetBrains/Annotations/LinqTunnelAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoEnumerationAttribute
#include "JetBrains/Annotations/NoEnumerationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RegexPatternAttribute
#include "JetBrains/Annotations/RegexPatternAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoReorderAttribute
#include "JetBrains/Annotations/NoReorderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemsControlAttribute
#include "JetBrains/Annotations/XamlItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute
#include "JetBrains/Annotations/XamlItemBindingOfItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspChildControlTypeAttribute
#include "JetBrains/Annotations/AspChildControlTypeAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <TagName>k__BackingField
::StringW& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TagName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <ControlType>k__BackingField
System::Type*& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ControlType>k__BackingField"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_TagName
::StringW JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_TagName
void JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_ControlType
System::Type* JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_ControlType
void JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldAttribute
#include "JetBrains/Annotations/AspDataFieldAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldsAttribute
#include "JetBrains/Annotations/AspDataFieldsAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMethodPropertyAttribute
#include "JetBrains/Annotations/AspMethodPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspRequiredAttributeAttribute
#include "JetBrains/Annotations/AspRequiredAttributeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Attribute>k__BackingField
::StringW& JetBrains::Annotations::AspRequiredAttributeAttribute::dyn_$Attribute$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspRequiredAttributeAttribute::dyn_$Attribute$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Attribute>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.get_Attribute
::StringW JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.set_Attribute
void JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspTypePropertyAttribute
#include "JetBrains/Annotations/AspTypePropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <CreateConstructorReferences>k__BackingField
bool& JetBrains::Annotations::AspTypePropertyAttribute::dyn_$CreateConstructorReferences$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspTypePropertyAttribute::dyn_$CreateConstructorReferences$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CreateConstructorReferences>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.get_CreateConstructorReferences
bool JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.set_CreateConstructorReferences
void JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorImportNamespaceAttribute
#include "JetBrains/Annotations/RazorImportNamespaceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::StringW& JetBrains::Annotations::RazorImportNamespaceAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorImportNamespaceAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.get_Name
::StringW JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.set_Name
void JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorInjectionAttribute
#include "JetBrains/Annotations/RazorInjectionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Type>k__BackingField
::StringW& JetBrains::Annotations::RazorInjectionAttribute::dyn_$Type$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::dyn_$Type$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Type>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <FieldName>k__BackingField
::StringW& JetBrains::Annotations::RazorInjectionAttribute::dyn_$FieldName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::dyn_$FieldName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FieldName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_Type
::StringW JetBrains::Annotations::RazorInjectionAttribute::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_Type
void JetBrains::Annotations::RazorInjectionAttribute::set_Type(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::set_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_FieldName
::StringW JetBrains::Annotations::RazorInjectionAttribute::get_FieldName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::get_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_FieldName
void JetBrains::Annotations::RazorInjectionAttribute::set_FieldName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::set_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorDirectiveAttribute
#include "JetBrains/Annotations/RazorDirectiveAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Directive>k__BackingField
::StringW& JetBrains::Annotations::RazorDirectiveAttribute::dyn_$Directive$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorDirectiveAttribute::dyn_$Directive$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Directive>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.get_Directive
::StringW JetBrains::Annotations::RazorDirectiveAttribute::get_Directive() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorDirectiveAttribute::get_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.set_Directive
void JetBrains::Annotations::RazorDirectiveAttribute::set_Directive(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorDirectiveAttribute::set_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorPageBaseTypeAttribute
#include "JetBrains/Annotations/RazorPageBaseTypeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BaseType>k__BackingField
::StringW& JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <PageName>k__BackingField
::StringW& JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$PageName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$PageName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PageName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_BaseType
::StringW JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_BaseType
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_PageName
::StringW JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_PageName
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorHelperCommonAttribute
#include "JetBrains/Annotations/RazorHelperCommonAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorLayoutAttribute
#include "JetBrains/Annotations/RazorLayoutAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteLiteralMethodAttribute
#include "JetBrains/Annotations/RazorWriteLiteralMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodAttribute
#include "JetBrains/Annotations/RazorWriteMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodParameterAttribute
#include "JetBrains/Annotations/RazorWriteMethodParameterAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NoReflectionBakingAttribute
#include "Zenject/NoReflectionBakingAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectAllowDuringValidationAttribute
#include "Zenject/ZenjectAllowDuringValidationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HashSetExtensions
#include "GlobalNamespace/HashSetExtensions.hpp"
// Including type: HashSetExtensions/HashSetDelegateHolder`1
#include "GlobalNamespace/HashSetExtensions_HashSetDelegateHolder_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Assert
#include "ModestTree/_Assert.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.IsNotEmpty
void ModestTree::_Assert::IsNotEmpty(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str);
}
// Autogenerated method: ModestTree.Assert.DerivesFrom
void ModestTree::_Assert::DerivesFrom(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.DerivesFromOrEqual
void ModestTree::_Assert::DerivesFromOrEqual(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsApproximately
void ModestTree::_Assert::IsApproximately(float left, float right, float epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsApproximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsApproximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(epsilon)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, epsilon);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1, p2, p3);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.Throws
void ModestTree::_Assert::Throws(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Throws");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Throws", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(::StringW message, ::ArrayW<::Il2CppObject*> parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, parameters);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(System::Exception* innerException, ::StringW message, ::ArrayW<::Il2CppObject*> parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerException), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, innerException, message, parameters);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.LinqExtensions
#include "ModestTree/LinqExtensions.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<Yield>d__0`1
#include "ModestTree/LinqExtensions_-Yield-d__0_1.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<>c__7`1
#include "ModestTree/LinqExtensions_--c__7_1.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<>c__DisplayClass9_0`1
#include "ModestTree/LinqExtensions_--c__DisplayClass9_0_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Log
#include "ModestTree/Log.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Log.Debug
void ModestTree::Log::Debug(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Debug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Debug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Info
void ModestTree::Log::Info(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Warn
void ModestTree::Log::Warn(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Trace
void ModestTree::Log::Trace(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Trace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Trace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e);
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(::StringW message, System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, e);
}
// Autogenerated method: ModestTree.Log.Error
void ModestTree::Log::Error(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.MiscExtensions
#include "ModestTree/MiscExtensions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.LinkedList`1
#include "System/Collections/Generic/LinkedList_1.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.MiscExtensions.Fmt
::StringW ModestTree::MiscExtensions::Fmt(::StringW s, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::MiscExtensions::Fmt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Fmt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, args);
}
// Autogenerated method: ModestTree.MiscExtensions.Join
::StringW ModestTree::MiscExtensions::Join(System::Collections::Generic::IEnumerable_1<::StringW>* values, ::StringW separator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::MiscExtensions::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(separator)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, values, separator);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions
#include "ModestTree/TypeExtensions.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isClosedGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isClosedGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isClosedGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
void ModestTree::TypeExtensions::_set__isClosedGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isClosedGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isClosedGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isOpenGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isOpenGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isOpenGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
void ModestTree::TypeExtensions::_set__isOpenGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isOpenGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isOpenGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isValueType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isValueType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isValueType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
void ModestTree::TypeExtensions::_set__isValueType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isValueType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isValueType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
System::Collections::Generic::Dictionary_2<System::Type*, ::ArrayW<System::Type*>>* ModestTree::TypeExtensions::_get__interfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__interfaces");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, ::ArrayW<System::Type*>>*>("ModestTree", "TypeExtensions", "_interfaces")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
void ModestTree::TypeExtensions::_set__interfaces(System::Collections::Generic::Dictionary_2<System::Type*, ::ArrayW<System::Type*>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__interfaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_interfaces", value));
}
// Autogenerated method: ModestTree.TypeExtensions..cctor
void ModestTree::TypeExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFrom
bool ModestTree::TypeExtensions::DerivesFrom(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFromOrEqual
bool ModestTree::TypeExtensions::DerivesFromOrEqual(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAssignableToGenericType
bool ModestTree::TypeExtensions::IsAssignableToGenericType(System::Type* givenType, System::Type* genericType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsAssignableToGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAssignableToGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(givenType), ::il2cpp_utils::ExtractType(genericType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, givenType, genericType);
}
// Autogenerated method: ModestTree.TypeExtensions.IsEnum
bool ModestTree::TypeExtensions::IsEnum(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsValueType
bool ModestTree::TypeExtensions::IsValueType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsValueType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsValueType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceMethods
::ArrayW<System::Reflection::MethodInfo*> ModestTree::TypeExtensions::DeclaredInstanceMethods(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceMethods");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Reflection::MethodInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceProperties
::ArrayW<System::Reflection::PropertyInfo*> ModestTree::TypeExtensions::DeclaredInstanceProperties(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Reflection::PropertyInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceFields
::ArrayW<System::Reflection::FieldInfo*> ModestTree::TypeExtensions::DeclaredInstanceFields(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Reflection::FieldInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.BaseType
System::Type* ModestTree::TypeExtensions::BaseType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericType
bool ModestTree::TypeExtensions::IsGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericTypeDefinition
bool ModestTree::TypeExtensions::IsGenericTypeDefinition(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsGenericTypeDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsPrimitive
bool ModestTree::TypeExtensions::IsPrimitive(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsPrimitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsPrimitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsInterface
bool ModestTree::TypeExtensions::IsInterface(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.ContainsGenericParameters
bool ModestTree::TypeExtensions::ContainsGenericParameters(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::ContainsGenericParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAbstract
bool ModestTree::TypeExtensions::IsAbstract(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsSealed
bool ModestTree::TypeExtensions::IsSealed(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsSealed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsSealed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Method
System::Reflection::MethodInfo* ModestTree::TypeExtensions::Method(System::Delegate* del) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(del)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, del);
}
// Autogenerated method: ModestTree.TypeExtensions.GenericArguments
::ArrayW<System::Type*> ModestTree::TypeExtensions::GenericArguments(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GenericArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GenericArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Interfaces
::ArrayW<System::Type*> ModestTree::TypeExtensions::Interfaces(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Interfaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Interfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Constructors
::ArrayW<System::Reflection::ConstructorInfo*> ModestTree::TypeExtensions::Constructors(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Constructors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Constructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Reflection::ConstructorInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetDefaultValue
::Il2CppObject* ModestTree::TypeExtensions::GetDefaultValue(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GetDefaultValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetDefaultValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsClosedGenericType
bool ModestTree::TypeExtensions::IsClosedGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsClosedGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsClosedGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetParentTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* ModestTree::TypeExtensions::GetParentTypes(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GetParentTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetParentTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsOpenGenericType
bool ModestTree::TypeExtensions::IsOpenGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsOpenGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsOpenGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::MemberInfo* provider, ::ArrayW<System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::MemberInfo* provider, ::ArrayW<System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::ParameterInfo* provider, ::ArrayW<System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::ParameterInfo* provider, ::ArrayW<System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <>2__current
System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
int& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type type
System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type <>3__type
System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$3__type() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$3__type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__type"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<System.Type> <>7__wrap1
System::Collections::Generic::IEnumerator_1<System::Type*>*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.Generic.IEnumerator<System.Type>.get_Current
System::Type* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.IDisposable.Dispose
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.MoveNext
bool ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.<>m__Finally1
void ModestTree::TypeExtensions::$GetParentTypes$d__28::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerator.Reset
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
System::Collections::Generic::IEnumerator_1<System::Type*>* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerator_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type[] attributeTypes
::ArrayW<System::Type*>& ModestTree::TypeExtensions::$$c__DisplayClass35_0::dyn_attributeTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_0::dyn_attributeTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attributeTypes"))->offset;
  return *reinterpret_cast<::ArrayW<System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass35_0::$AllAttributes$b__0(System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Attribute a
System::Attribute*& ModestTree::TypeExtensions::$$c__DisplayClass35_1::dyn_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_1::dyn_a");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "a"))->offset;
  return *reinterpret_cast<System::Attribute**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass35_1::$AllAttributes$b__1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type[] attributeTypes
::ArrayW<System::Type*>& ModestTree::TypeExtensions::$$c__DisplayClass39_0::dyn_attributeTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_0::dyn_attributeTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attributeTypes"))->offset;
  return *reinterpret_cast<::ArrayW<System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass39_0::$AllAttributes$b__0(System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Attribute a
System::Attribute*& ModestTree::TypeExtensions::$$c__DisplayClass39_1::dyn_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_1::dyn_a");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "a"))->offset;
  return *reinterpret_cast<System::Attribute**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass39_1::$AllAttributes$b__1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeStringFormatter
#include "ModestTree/TypeStringFormatter.hpp"
// Including type: ModestTree.TypeStringFormatter/ModestTree.<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
System::Collections::Generic::Dictionary_2<System::Type*, ::StringW>* ModestTree::TypeStringFormatter::_get__prettyNameCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::_get__prettyNameCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, ::StringW>*>("ModestTree", "TypeStringFormatter", "_prettyNameCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
void ModestTree::TypeStringFormatter::_set__prettyNameCache(System::Collections::Generic::Dictionary_2<System::Type*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::_set__prettyNameCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter", "_prettyNameCache", value));
}
// Autogenerated method: ModestTree.TypeStringFormatter..cctor
void ModestTree::TypeStringFormatter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyName
::StringW ModestTree::TypeStringFormatter::PrettyName(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::PrettyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyNameInternal
::StringW ModestTree::TypeStringFormatter::PrettyNameInternal(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::PrettyNameInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyNameInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.GetCSharpTypeName
::StringW ModestTree::TypeStringFormatter::GetCSharpTypeName(::StringW typeName) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::GetCSharpTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "GetCSharpTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, typeName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeStringFormatter/ModestTree.<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.TypeStringFormatter/ModestTree.<>c <>9
ModestTree::TypeStringFormatter::$$c* ModestTree::TypeStringFormatter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<ModestTree::TypeStringFormatter::$$c*>("ModestTree", "TypeStringFormatter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.TypeStringFormatter/ModestTree.<>c <>9
void ModestTree::TypeStringFormatter::$$c::_set_$$9(ModestTree::TypeStringFormatter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.String> <>9__2_0
System::Func_2<System::Type*, ::StringW>* ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, ::StringW>*>("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.String> <>9__2_0
void ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0(System::Func_2<System::Type*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0", value)));
}
// Autogenerated method: ModestTree.TypeStringFormatter/ModestTree.<>c..cctor
void ModestTree::TypeStringFormatter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeStringFormatter/ModestTree.<>c.<PrettyNameInternal>b__2_0
::StringW ModestTree::TypeStringFormatter::$$c::$PrettyNameInternal$b__2_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::<PrettyNameInternal>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PrettyNameInternal>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.ReflectionUtil
#include "ModestTree/ReflectionUtil.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Action`5
#include "System/Action_5.hpp"
// Including type: System.Action`6
#include "System/Action_6.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Func`4
#include "System/Func_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.ReflectionUtil.CreateArray
System::Array* ModestTree::ReflectionUtil::CreateArray(System::Type* elementType, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::CreateArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Array*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.CreateGenericList
System::Collections::IList* ModestTree::ReflectionUtil::CreateGenericList(System::Type* elementType, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::CreateGenericList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateGenericList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::IList*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::StringW ModestTree::ReflectionUtil::ToDebugString(System::Reflection::MethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::StringW ModestTree::ReflectionUtil::ToDebugString(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.PreserveAttribute
#include "ModestTree/Util/PreserveAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.ValuePair
#include "ModestTree/Util/ValuePair.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: ModestTree.Util.ValuePair`3
#include "ModestTree/Util/ValuePair_3.hpp"
// Including type: ModestTree.Util.ValuePair`4
#include "ModestTree/Util/ValuePair_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil
#include "ModestTree/Util/UnityUtil.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17
#include "ModestTree/Util/UnityUtil_-GetParentsAndSelf-d__17.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20
#include "ModestTree/Util/UnityUtil_-GetDirectChildrenAndSelf-d__20.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21
#include "ModestTree/Util/UnityUtil_-GetDirectChildren-d__21.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllScenes
System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_AllScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllLoadedScenes
System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_AllLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsAltKeyDown
bool ModestTree::Util::UnityUtil::get_IsAltKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsAltKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsAltKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsControlKeyDown
bool ModestTree::Util::UnityUtil::get_IsControlKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsControlKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsControlKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsShiftKeyDown
bool ModestTree::Util::UnityUtil::get_IsShiftKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsShiftKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsShiftKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasShiftKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasShiftKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasAltKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasAltKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDepthLevel
int ModestTree::Util::UnityUtil::GetDepthLevel(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDepthLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDepthLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetRootParentOrSelf
UnityEngine::GameObject* ModestTree::Util::UnityUtil::GetRootParentOrSelf(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetRootParentOrSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetRootParentOrSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::GameObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParents
System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParents(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetParents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParentsAndSelf
System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParentsAndSelf(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetParentsAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParentsAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenTopDown
System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown(UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenTopDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenBottomUp
System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp(UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenBottomUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildrenAndSelf
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf(UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildrenAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildren
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildren(UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDirectChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetAllGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllRootGameObjects
System::Collections::Generic::List_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetAllRootGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SceneManagement.Scene <>2__current
UnityEngine::SceneManagement::Scene& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<UnityEngine::SceneManagement::Scene*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <i>5__2
int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$i$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$i$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current
UnityEngine::SceneManagement::Scene ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerator$UnityEngine_SceneManagement_Scene$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::SceneManagement::Scene, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.MoveNext
bool ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerable$UnityEngine_SceneManagement_Scene$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerator_1<UnityEngine::SceneManagement::Scene>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.Util.UnityUtil/ModestTree.Util.<>c <>9
ModestTree::Util::UnityUtil::$$c* ModestTree::Util::UnityUtil::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<ModestTree::Util::UnityUtil::$$c*>("ModestTree.Util", "UnityUtil/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.Util.UnityUtil/ModestTree.Util.<>c <>9
void ModestTree::Util::UnityUtil::$$c::_set_$$9(ModestTree::Util::UnityUtil::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
System::Func_2<UnityEngine::SceneManagement::Scene, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::SceneManagement::Scene, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0(System::Func_2<UnityEngine::SceneManagement::Scene, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0(System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
System::Func_2<UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0(System::Func_2<UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
System::Func_2<UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0(System::Func_2<UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0(System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
System::Func_2<UnityEngine::GameObject*, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::GameObject*, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0(System::Func_2<UnityEngine::GameObject*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0", value)));
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c..cctor
void ModestTree::Util::UnityUtil::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<get_AllLoadedScenes>b__3_0
bool ModestTree::Util::UnityUtil::$$c::$get_AllLoadedScenes$b__3_0(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<get_AllLoadedScenes>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AllLoadedScenes>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, scene);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetRootParentOrSelf>b__15_0
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetRootParentOrSelf$b__15_0(UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetRootParentOrSelf>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetRootParentOrSelf>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetComponentsInChildrenTopDown>b__18_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenTopDown$b__18_0(UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenTopDown>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenTopDown>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetComponentsInChildrenBottomUp>b__19_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenBottomUp$b__19_0(UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenBottomUp>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenBottomUp>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetAllGameObjects>b__22_0
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetAllGameObjects$b__22_0(UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetAllGameObjects>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllGameObjects>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetAllRootGameObjects>b__23_0
bool ModestTree::Util::UnityUtil::$$c::$GetAllRootGameObjects$b__23_0(UnityEngine::GameObject* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetAllRootGameObjects>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllRootGameObjects>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <>2__current
UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
int& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform transform
UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform <>3__transform
UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$3__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$3__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__transform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<UnityEngine.Transform> <>7__wrap1
System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
UnityEngine::Transform* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.MoveNext
bool ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetParents$d__16::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
