// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions
#include "ModestTree/TypeExtensions.hpp"
// Including type: ModestTree.TypeExtensions/<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isClosedGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_get__isClosedGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isClosedGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
void ModestTree::TypeExtensions::_set__isClosedGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_set__isClosedGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isClosedGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isOpenGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_get__isOpenGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isOpenGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
void ModestTree::TypeExtensions::_set__isOpenGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_set__isOpenGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isOpenGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isValueType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_get__isValueType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isValueType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
void ModestTree::TypeExtensions::_set__isValueType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_set__isValueType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isValueType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* ModestTree::TypeExtensions::_get__interfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_get__interfaces");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>*>("ModestTree", "TypeExtensions", "_interfaces")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
void ModestTree::TypeExtensions::_set__interfaces(System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("_set__interfaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_interfaces", value));
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFrom
bool ModestTree::TypeExtensions::DerivesFrom(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFrom", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFromOrEqual
bool ModestTree::TypeExtensions::DerivesFromOrEqual(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAssignableToGenericType
bool ModestTree::TypeExtensions::IsAssignableToGenericType(System::Type* givenType, System::Type* genericType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsAssignableToGenericType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAssignableToGenericType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(givenType, genericType)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, givenType, genericType);
}
// Autogenerated method: ModestTree.TypeExtensions.IsEnum
bool ModestTree::TypeExtensions::IsEnum(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsValueType
bool ModestTree::TypeExtensions::IsValueType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsValueType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsValueType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceMethods
::Array<System::Reflection::MethodInfo*>* ModestTree::TypeExtensions::DeclaredInstanceMethods(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("DeclaredInstanceMethods");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceMethods", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceProperties
::Array<System::Reflection::PropertyInfo*>* ModestTree::TypeExtensions::DeclaredInstanceProperties(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("DeclaredInstanceProperties");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceProperties", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::PropertyInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceFields
::Array<System::Reflection::FieldInfo*>* ModestTree::TypeExtensions::DeclaredInstanceFields(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("DeclaredInstanceFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::FieldInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.BaseType
System::Type* ModestTree::TypeExtensions::BaseType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("BaseType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "BaseType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericType
bool ModestTree::TypeExtensions::IsGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsGenericType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericTypeDefinition
bool ModestTree::TypeExtensions::IsGenericTypeDefinition(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsGenericTypeDefinition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsPrimitive
bool ModestTree::TypeExtensions::IsPrimitive(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsPrimitive");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsPrimitive", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsInterface
bool ModestTree::TypeExtensions::IsInterface(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsInterface");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsInterface", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.ContainsGenericParameters
bool ModestTree::TypeExtensions::ContainsGenericParameters(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("ContainsGenericParameters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAbstract
bool ModestTree::TypeExtensions::IsAbstract(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsAbstract");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAbstract", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsSealed
bool ModestTree::TypeExtensions::IsSealed(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsSealed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsSealed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Method
System::Reflection::MethodInfo* ModestTree::TypeExtensions::Method(System::Delegate* del) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("Method");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Method", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(del)));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, del);
}
// Autogenerated method: ModestTree.TypeExtensions.GenericArguments
::Array<System::Type*>* ModestTree::TypeExtensions::GenericArguments(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("GenericArguments");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GenericArguments", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Interfaces
::Array<System::Type*>* ModestTree::TypeExtensions::Interfaces(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("Interfaces");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Interfaces", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Constructors
::Array<System::Reflection::ConstructorInfo*>* ModestTree::TypeExtensions::Constructors(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("Constructors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Constructors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ConstructorInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetDefaultValue
::Il2CppObject* ModestTree::TypeExtensions::GetDefaultValue(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("GetDefaultValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetDefaultValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsClosedGenericType
bool ModestTree::TypeExtensions::IsClosedGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsClosedGenericType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsClosedGenericType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetParentTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* ModestTree::TypeExtensions::GetParentTypes(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("GetParentTypes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetParentTypes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsOpenGenericType
bool ModestTree::TypeExtensions::IsOpenGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("IsOpenGenericType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsOpenGenericType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("HasAttribute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(provider, attributeTypes)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Boolean HasAttribute(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes)
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::MemberInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::HasAttribute(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("AllAttributes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(provider, attributeTypes)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes)
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::MemberInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::AllAttributes(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("HasAttribute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(provider, attributeTypes)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Boolean HasAttribute(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes)
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::ParameterInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::HasAttribute(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext("AllAttributes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(provider, attributeTypes)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes)
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::ParameterInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::AllAttributes(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions..cctor
void ModestTree::TypeExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("TypeExtensions").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
