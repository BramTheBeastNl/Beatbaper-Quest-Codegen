// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Assert
#include "ModestTree/Assert.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "That", condition));
}
// Autogenerated method: ModestTree.Assert.IsNotEmpty
void ModestTree::Assert::IsNotEmpty(::CsString* str) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotEmpty", str));
}
// Autogenerated method: ModestTree.Assert.DerivesFrom
void ModestTree::Assert::DerivesFrom(System::Type* childType, System::Type* parentType) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "DerivesFrom", childType, parentType));
}
// Autogenerated method: ModestTree.Assert.DerivesFromOrEqual
void ModestTree::Assert::DerivesFromOrEqual(System::Type* childType, System::Type* parentType) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "DerivesFromOrEqual", childType, parentType));
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::CsObject* left, ::CsObject* right) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsEqual", left, right));
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::CsObject* left, ::CsObject* right, System::Func_1<::CsString*>* messageGenerator) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsEqual", left, right, messageGenerator));
}
// Autogenerated method: ModestTree.Assert.IsApproximately
void ModestTree::Assert::IsApproximately(float left, float right, float epsilon) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsApproximately", left, right, epsilon));
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::CsObject* left, ::CsObject* right, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsEqual", left, right, message));
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::CsObject* left, ::CsObject* right) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotEqual", left, right));
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::CsObject* left, ::CsObject* right, System::Func_1<::CsString*>* messageGenerator) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotEqual", left, right, messageGenerator));
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::CsObject* val) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNull", val));
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::CsObject* val, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNull", val, message));
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::CsObject* val, ::CsString* message, ::CsObject* p1) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNull", val, message, p1));
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::CsObject* val) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotNull", val));
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::CsObject* val, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotNull", val, message));
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::CsObject* val, ::CsString* message, ::CsObject* p1) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotNull", val, message, p1));
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::CsObject* val, ::CsString* message, ::CsObject* p1, ::CsObject* p2) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotNull", val, message, p1, p2));
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::CsObject* left, ::CsObject* right, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "IsNotEqual", left, right, message));
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "Warn", condition));
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition, System::Func_1<::CsString*>* messageGenerator) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "Warn", condition, messageGenerator));
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "That", condition, message));
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::CsString* message, ::CsObject* p1) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "That", condition, message, p1));
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::CsString* message, ::CsObject* p1, ::CsObject* p2) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "That", condition, message, p1, p2));
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::CsString* message, ::CsObject* p1, ::CsObject* p2, ::CsObject* p3) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "That", condition, message, p1, p2, p3));
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition, ::CsString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "Warn", condition, message));
}
// Autogenerated method: ModestTree.Assert.Throws
void ModestTree::Assert::Throws(System::Action* action) {
  THROW_UNLESS(il2cpp_utils::RunMethod("ModestTree", "Assert", "Throws", action));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ZenjectException*>("ModestTree", "Assert", "CreateException"));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(::CsString* message) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ZenjectException*>("ModestTree", "Assert", "CreateException", message));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(::CsString* message, ::Array<::CsObject*>* parameters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ZenjectException*>("ModestTree", "Assert", "CreateException", message, parameters));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(System::Exception* innerException, ::CsString* message, ::Array<::CsObject*>* parameters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ZenjectException*>("ModestTree", "Assert", "CreateException", innerException, message, parameters));
}
