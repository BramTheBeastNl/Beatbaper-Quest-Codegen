// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Assert
#include "ModestTree/Assert.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("That");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "That", {}, ::il2cpp_utils::ExtractTypes(condition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.IsNotEmpty
void ModestTree::Assert::IsNotEmpty(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotEmpty", {}, ::il2cpp_utils::ExtractTypes(str)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str);
}
// Autogenerated method: ModestTree.Assert.DerivesFrom
void ModestTree::Assert::DerivesFrom(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "DerivesFrom", {}, ::il2cpp_utils::ExtractTypes(childType, parentType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.DerivesFromOrEqual
void ModestTree::Assert::DerivesFromOrEqual(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "DerivesFromOrEqual", {}, ::il2cpp_utils::ExtractTypes(childType, parentType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsEqual", {}, ::il2cpp_utils::ExtractTypes(left, right)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsEqual", {}, ::il2cpp_utils::ExtractTypes(left, right, messageGenerator)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsApproximately
void ModestTree::Assert::IsApproximately(float left, float right, float epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsApproximately");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsApproximately", {}, ::il2cpp_utils::ExtractTypes(left, right, epsilon)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, epsilon);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsEqual", {}, ::il2cpp_utils::ExtractTypes(left, right, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotEqual", {}, ::il2cpp_utils::ExtractTypes(left, right)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotEqual", {}, ::il2cpp_utils::ExtractTypes(left, right, messageGenerator)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNull", {}, ::il2cpp_utils::ExtractTypes(val)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::Il2CppObject* val, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNull", {}, ::il2cpp_utils::ExtractTypes(val, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::Assert::IsNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNull", {}, ::il2cpp_utils::ExtractTypes(val, message, p1)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotNull", {}, ::il2cpp_utils::ExtractTypes(val)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotNull", {}, ::il2cpp_utils::ExtractTypes(val, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotNull", {}, ::il2cpp_utils::ExtractTypes(val, message, p1)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotNull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotNull", {}, ::il2cpp_utils::ExtractTypes(val, message, p1, p2)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "IsNotEqual", {}, ::il2cpp_utils::ExtractTypes(left, right, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("Warn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "Warn", {}, ::il2cpp_utils::ExtractTypes(condition)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("Warn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "Warn", {}, ::il2cpp_utils::ExtractTypes(condition, messageGenerator)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("That");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "That", {}, ::il2cpp_utils::ExtractTypes(condition, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("That");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "That", {}, ::il2cpp_utils::ExtractTypes(condition, message, p1)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("That");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "That", {}, ::il2cpp_utils::ExtractTypes(condition, message, p1, p2)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("That");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "That", {}, ::il2cpp_utils::ExtractTypes(condition, message, p1, p2, p3)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1, p2, p3);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::Assert::Warn(bool condition, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("Warn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "Warn", {}, ::il2cpp_utils::ExtractTypes(condition, message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.Throws
void ModestTree::Assert::Throws(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("Throws");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<void>(), "Throws", {}, ::il2cpp_utils::ExtractTypes(action)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("CreateException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<Zenject::ZenjectException*>(), "CreateException", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("CreateException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<Zenject::ZenjectException*>(), "CreateException", {}, ::il2cpp_utils::ExtractTypes(message)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(::Il2CppString* message, ::Array<::Il2CppObject*>* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("CreateException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<Zenject::ZenjectException*>(), "CreateException", {}, ::il2cpp_utils::ExtractTypes(message, parameters)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, parameters);
}
// Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
Zenject::ZenjectException* ModestTree::Assert::CreateException(::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters) {
  return ModestTree::Assert::CreateException(message, ::Array<::Il2CppObject*>::New(parameters));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::Assert::CreateException(System::Exception* innerException, ::Il2CppString* message, ::Array<::Il2CppObject*>* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("ModestTree").WithContext("Assert").WithContext("CreateException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", il2cpp_utils::NoArgClass<Zenject::ZenjectException*>(), "CreateException", {}, ::il2cpp_utils::ExtractTypes(innerException, message, parameters)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, innerException, message, parameters);
}
// Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
Zenject::ZenjectException* ModestTree::Assert::CreateException(System::Exception* innerException, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters) {
  return ModestTree::Assert::CreateException(innerException, message, ::Array<::Il2CppObject*>::New(parameters));
}
