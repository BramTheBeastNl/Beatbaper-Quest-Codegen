// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel/LocalNetworkPlayer
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkPlayer.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPeerBroadcastTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kPeerBroadcastTimeout() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kPeerBroadcastTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPeerBroadcastTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kPeerBroadcastTimeout(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kPeerBroadcastTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kConnectionTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kConnectionTimeout() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kConnectionTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kConnectionTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kConnectionTimeout(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kConnectionTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kRequestTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kRequestTimeout() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kRequestTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kRequestTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kRequestTimeout(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kRequestTimeout", value));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_ipAddress
System::Net::IPAddress* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Net::IPAddress*>(this, "get_ipAddress"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isPartyOwner
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isPartyOwner"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_otherPlayersCanInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_otherPlayersCanInvite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_otherPlayersCanInvite"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isBlocked
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isBlocked"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_hasBlockedMe
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_hasBlockedMe"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_secret
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_secret"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_multiplayerPort
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_multiplayerPort"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_allowedJoinToMyParty
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_allowedJoinToMyParty"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnecting
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnecting"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_wasConnecting
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_wasConnecting"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isTimedOut
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isTimedOut"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer..ctor
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::New_ctor(GlobalNamespace::LocalNetworkPlayerModel* playerModel, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPAddress* ipAddress, bool isMe) {
  return THROW_UNLESS(il2cpp_utils::New<LocalNetworkPlayerModel::LocalNetworkPlayer*>(playerModel, userId, userName, ipAddress, isMe));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Update
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Update(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, int currentPartySize, int maxPartySize, GlobalNamespace::GameplayServerConfiguration configuration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Update", flags, currentPartySize, maxPartySize, configuration));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.HasFailedToConnect
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HasFailedToConnect"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetInvited
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, ::Il2CppString* secret, int multiplayerPort) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetInvited", flags, secret, multiplayerPort));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse(::Il2CppString* secret, int multiplayerPort, bool blocked) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetJoinResponse", secret, multiplayerPort, blocked));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse(bool accepted, bool blocked) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetInviteResponse", accepted, blocked));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetJoinRequested
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetJoinRequested", flags));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetConnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SetConnected"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetDisconnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SetDisconnected"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.UpdateState
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::UpdateState(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateState", connectedPlayer));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnectable
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnectable"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Connect
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Connect() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Connect"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userId"));
}
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::GlobalNamespace_INetworkPlayer_get_userId() {
  return GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId();
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userName"));
}
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::GlobalNamespace_INetworkPlayer_get_userName() {
  return GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName();
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isMe
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isMe"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_currentPartySize
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_currentPartySize"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_maxPartySize
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_maxPartySize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_maxPartySize"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_difficulties() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapDifficultyMask>(this, "get_difficulties"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_modifiers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::GameplayModifierMask>(this, "get_modifiers"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_songPacks() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>(this, "get_songPacks"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isOpenParty
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isOpenParty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isOpenParty"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isPlayer
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPlayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isPlayer"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isSpectating
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isSpectating() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isSpectating"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isDedicatedServer
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isDedicatedServer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isDedicatedServer"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isMyPartyOwner
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isMyPartyOwner"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnected"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isWaitingOnJoin
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isWaitingOnJoin"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canJoin
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canJoin"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Join
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Join"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_requiresPassword
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_requiresPassword"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Join
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join(::Il2CppString* password) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Join", password));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isWaitingOnInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isWaitingOnInvite"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canInvite"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Invite
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Invite() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Invite"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canKick
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canKick"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Kick
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Kick() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Kick"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canLeave
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canLeave"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Leave
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Leave() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Leave"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canBlock
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canBlock"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Block
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Block() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Block"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canUnblock
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canUnblock"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Unblock
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Unblock"));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SendJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse(bool accept) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendJoinResponse", accept));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SendInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse(bool accept) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendInviteResponse", accept));
}
