// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR
#include "GlobalNamespace/SteamVR.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _enabled
bool GlobalNamespace::SteamVR::_get__enabled() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "_enabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _enabled
void GlobalNamespace::SteamVR::_set__enabled(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_enabled", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR _instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::_get__instance() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR*>("", "SteamVR", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR _instance
void GlobalNamespace::SteamVR::_set__instance(GlobalNamespace::SteamVR* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <initializing>k__BackingField
bool GlobalNamespace::SteamVR::_get_$initializing$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<initializing>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <initializing>k__BackingField
void GlobalNamespace::SteamVR::_set_$initializing$k__BackingField(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<initializing>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <calibrating>k__BackingField
bool GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<calibrating>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <calibrating>k__BackingField
void GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<calibrating>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <outOfRange>k__BackingField
bool GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<outOfRange>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <outOfRange>k__BackingField
void GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<outOfRange>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean[] connected
::Array<bool>* GlobalNamespace::SteamVR::_get_connected() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<bool>*>("", "SteamVR", "connected"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean[] connected
void GlobalNamespace::SteamVR::_set_connected(::Array<bool>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "connected", value));
}
// Autogenerated method: SteamVR.get_active
bool GlobalNamespace::SteamVR::get_active() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_active"));
}
// Autogenerated method: SteamVR.get_enabled
bool GlobalNamespace::SteamVR::get_enabled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_enabled"));
}
// Autogenerated method: SteamVR.set_enabled
void GlobalNamespace::SteamVR::set_enabled(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "set_enabled", value));
}
// Autogenerated method: SteamVR.get_instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::get_instance() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR*>("", "SteamVR", "get_instance"));
}
// Autogenerated method: SteamVR.get_usingNativeSupport
bool GlobalNamespace::SteamVR::get_usingNativeSupport() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_usingNativeSupport"));
}
// Autogenerated method: SteamVR.CreateInstance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::CreateInstance() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR*>("", "SteamVR", "CreateInstance"));
}
// Autogenerated method: SteamVR.ReportError
void GlobalNamespace::SteamVR::ReportError(Valve::VR::EVRInitError error) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "ReportError", error));
}
// Autogenerated method: SteamVR.get_hmd
Valve::VR::CVRSystem* GlobalNamespace::SteamVR::get_hmd() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRSystem*>(this, "get_hmd"));
}
// Autogenerated method: SteamVR.set_hmd
void GlobalNamespace::SteamVR::set_hmd(Valve::VR::CVRSystem* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_hmd", value));
}
// Autogenerated method: SteamVR.get_compositor
Valve::VR::CVRCompositor* GlobalNamespace::SteamVR::get_compositor() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRCompositor*>(this, "get_compositor"));
}
// Autogenerated method: SteamVR.set_compositor
void GlobalNamespace::SteamVR::set_compositor(Valve::VR::CVRCompositor* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_compositor", value));
}
// Autogenerated method: SteamVR.get_overlay
Valve::VR::CVROverlay* GlobalNamespace::SteamVR::get_overlay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVROverlay*>(this, "get_overlay"));
}
// Autogenerated method: SteamVR.set_overlay
void GlobalNamespace::SteamVR::set_overlay(Valve::VR::CVROverlay* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_overlay", value));
}
// Autogenerated method: SteamVR.get_initializing
bool GlobalNamespace::SteamVR::get_initializing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_initializing"));
}
// Autogenerated method: SteamVR.set_initializing
void GlobalNamespace::SteamVR::set_initializing(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "set_initializing", value));
}
// Autogenerated method: SteamVR.get_calibrating
bool GlobalNamespace::SteamVR::get_calibrating() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_calibrating"));
}
// Autogenerated method: SteamVR.set_calibrating
void GlobalNamespace::SteamVR::set_calibrating(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "set_calibrating", value));
}
// Autogenerated method: SteamVR.get_outOfRange
bool GlobalNamespace::SteamVR::get_outOfRange() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR", "get_outOfRange"));
}
// Autogenerated method: SteamVR.set_outOfRange
void GlobalNamespace::SteamVR::set_outOfRange(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "set_outOfRange", value));
}
// Autogenerated method: SteamVR.get_sceneWidth
float GlobalNamespace::SteamVR::get_sceneWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_sceneWidth"));
}
// Autogenerated method: SteamVR.set_sceneWidth
void GlobalNamespace::SteamVR::set_sceneWidth(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_sceneWidth", value));
}
// Autogenerated method: SteamVR.get_sceneHeight
float GlobalNamespace::SteamVR::get_sceneHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_sceneHeight"));
}
// Autogenerated method: SteamVR.set_sceneHeight
void GlobalNamespace::SteamVR::set_sceneHeight(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_sceneHeight", value));
}
// Autogenerated method: SteamVR.get_aspect
float GlobalNamespace::SteamVR::get_aspect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_aspect"));
}
// Autogenerated method: SteamVR.set_aspect
void GlobalNamespace::SteamVR::set_aspect(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_aspect", value));
}
// Autogenerated method: SteamVR.get_fieldOfView
float GlobalNamespace::SteamVR::get_fieldOfView() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fieldOfView"));
}
// Autogenerated method: SteamVR.set_fieldOfView
void GlobalNamespace::SteamVR::set_fieldOfView(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fieldOfView", value));
}
// Autogenerated method: SteamVR.get_tanHalfFov
UnityEngine::Vector2 GlobalNamespace::SteamVR::get_tanHalfFov() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "get_tanHalfFov"));
}
// Autogenerated method: SteamVR.set_tanHalfFov
void GlobalNamespace::SteamVR::set_tanHalfFov(UnityEngine::Vector2 value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_tanHalfFov", value));
}
// Autogenerated method: SteamVR.get_textureBounds
::Array<Valve::VR::VRTextureBounds_t>* GlobalNamespace::SteamVR::get_textureBounds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<Valve::VR::VRTextureBounds_t>*>(this, "get_textureBounds"));
}
// Autogenerated method: SteamVR.set_textureBounds
void GlobalNamespace::SteamVR::set_textureBounds(::Array<Valve::VR::VRTextureBounds_t>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_textureBounds", value));
}
// Autogenerated method: SteamVR.get_eyes
::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* GlobalNamespace::SteamVR::get_eyes() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>*>(this, "get_eyes"));
}
// Autogenerated method: SteamVR.set_eyes
void GlobalNamespace::SteamVR::set_eyes(::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_eyes", value));
}
// Autogenerated method: SteamVR.get_hmd_TrackingSystemName
::CsString* GlobalNamespace::SteamVR::get_hmd_TrackingSystemName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "get_hmd_TrackingSystemName"));
}
// Autogenerated method: SteamVR.get_hmd_ModelNumber
::CsString* GlobalNamespace::SteamVR::get_hmd_ModelNumber() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "get_hmd_ModelNumber"));
}
// Autogenerated method: SteamVR.get_hmd_SerialNumber
::CsString* GlobalNamespace::SteamVR::get_hmd_SerialNumber() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "get_hmd_SerialNumber"));
}
// Autogenerated method: SteamVR.get_hmd_SecondsFromVsyncToPhotons
float GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_hmd_SecondsFromVsyncToPhotons"));
}
// Autogenerated method: SteamVR.get_hmd_DisplayFrequency
float GlobalNamespace::SteamVR::get_hmd_DisplayFrequency() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_hmd_DisplayFrequency"));
}
// Autogenerated method: SteamVR.GetTrackedDeviceString
::CsString* GlobalNamespace::SteamVR::GetTrackedDeviceString(uint deviceId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "GetTrackedDeviceString", deviceId));
}
// Autogenerated method: SteamVR.GetStringProperty
::CsString* GlobalNamespace::SteamVR::GetStringProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "GetStringProperty", prop, deviceId));
}
// Autogenerated method: SteamVR.GetFloatProperty
float GlobalNamespace::SteamVR::GetFloatProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetFloatProperty", prop, deviceId));
}
// Autogenerated method: SteamVR.OnInitializing
void GlobalNamespace::SteamVR::OnInitializing(bool initializing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnInitializing", initializing));
}
// Autogenerated method: SteamVR.OnCalibrating
void GlobalNamespace::SteamVR::OnCalibrating(bool calibrating) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnCalibrating", calibrating));
}
// Autogenerated method: SteamVR.OnOutOfRange
void GlobalNamespace::SteamVR::OnOutOfRange(bool outOfRange) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnOutOfRange", outOfRange));
}
// Autogenerated method: SteamVR.OnDeviceConnected
void GlobalNamespace::SteamVR::OnDeviceConnected(int i, bool connected) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDeviceConnected", i, connected));
}
// Autogenerated method: SteamVR.OnNewPoses
void GlobalNamespace::SteamVR::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnNewPoses", poses));
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: SteamVR.SafeDispose
void GlobalNamespace::SteamVR::SafeDispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", "SafeDispose"));
}
// Autogenerated method: SteamVR..cctor
void GlobalNamespace::SteamVR::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR", ".cctor"));
}
// Autogenerated method: SteamVR..ctor
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::New_ctor() {
  return (SteamVR*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR"));
}
// Autogenerated method: SteamVR.Finalize
void GlobalNamespace::SteamVR::Finalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Finalize"));
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void GlobalNamespace::SteamVR::System_IDisposable_Dispose() {
  Dispose();
}
