// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR
#include "GlobalNamespace/SteamVR.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _enabled
bool GlobalNamespace::SteamVR::_get__enabled() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get__enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "_enabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _enabled
void GlobalNamespace::SteamVR::_set__enabled(bool value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set__enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_enabled", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR _instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::_get__instance() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR*>("", "SteamVR", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR _instance
void GlobalNamespace::SteamVR::_set__instance(GlobalNamespace::SteamVR* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_instance", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD8A38C
// Autogenerated static field getter
// Get static field: static private System.Boolean <initializing>k__BackingField
bool GlobalNamespace::SteamVR::_get_$initializing$k__BackingField() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get_$initializing$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<initializing>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <initializing>k__BackingField
void GlobalNamespace::SteamVR::_set_$initializing$k__BackingField(bool value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set_$initializing$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<initializing>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD8A39C
// Autogenerated static field getter
// Get static field: static private System.Boolean <calibrating>k__BackingField
bool GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get_$calibrating$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<calibrating>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <calibrating>k__BackingField
void GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField(bool value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set_$calibrating$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<calibrating>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD8A3AC
// Autogenerated static field getter
// Get static field: static private System.Boolean <outOfRange>k__BackingField
bool GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get_$outOfRange$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<outOfRange>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <outOfRange>k__BackingField
void GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField(bool value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set_$outOfRange$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<outOfRange>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean[] connected
::Array<bool>* GlobalNamespace::SteamVR::_get_connected() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_get_connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<bool>*>("", "SteamVR", "connected"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean[] connected
void GlobalNamespace::SteamVR::_set_connected(::Array<bool>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("_set_connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "connected", value));
}
// Autogenerated method: SteamVR.get_active
bool GlobalNamespace::SteamVR::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_active");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_active", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_enabled
bool GlobalNamespace::SteamVR::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_enabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_enabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_enabled
void GlobalNamespace::SteamVR::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_enabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "set_enabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_instance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_usingNativeSupport
bool GlobalNamespace::SteamVR::get_usingNativeSupport() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_usingNativeSupport");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_usingNativeSupport", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.CreateInstance
GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::CreateInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("CreateInstance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "CreateInstance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.ReportError
void GlobalNamespace::SteamVR::ReportError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("ReportError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "ReportError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: SteamVR.get_hmd
Valve::VR::CVRSystem* GlobalNamespace::SteamVR::get_hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_hmd
void GlobalNamespace::SteamVR::set_hmd(Valve::VR::CVRSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_hmd");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_hmd", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_compositor
Valve::VR::CVRCompositor* GlobalNamespace::SteamVR::get_compositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_compositor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_compositor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_compositor
void GlobalNamespace::SteamVR::set_compositor(Valve::VR::CVRCompositor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_compositor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_compositor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_overlay
Valve::VR::CVROverlay* GlobalNamespace::SteamVR::get_overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_overlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_overlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_overlay
void GlobalNamespace::SteamVR::set_overlay(Valve::VR::CVROverlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_overlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_overlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_initializing
bool GlobalNamespace::SteamVR::get_initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_initializing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_initializing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_initializing
void GlobalNamespace::SteamVR::set_initializing(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_initializing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "set_initializing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_calibrating
bool GlobalNamespace::SteamVR::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_calibrating");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_calibrating", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_calibrating
void GlobalNamespace::SteamVR::set_calibrating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_calibrating");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "set_calibrating", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_outOfRange
bool GlobalNamespace::SteamVR::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "get_outOfRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_outOfRange
void GlobalNamespace::SteamVR::set_outOfRange(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_outOfRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "set_outOfRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneWidth
float GlobalNamespace::SteamVR::get_sceneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_sceneWidth", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneWidth
void GlobalNamespace::SteamVR::set_sceneWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_sceneWidth", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneHeight
float GlobalNamespace::SteamVR::get_sceneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_sceneHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneHeight
void GlobalNamespace::SteamVR::set_sceneHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_sceneHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_aspect
float GlobalNamespace::SteamVR::get_aspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_aspect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_aspect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_aspect
void GlobalNamespace::SteamVR::set_aspect(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_aspect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_aspect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_fieldOfView
float GlobalNamespace::SteamVR::get_fieldOfView() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_fieldOfView", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_fieldOfView
void GlobalNamespace::SteamVR::set_fieldOfView(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_fieldOfView", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_tanHalfFov
UnityEngine::Vector2 GlobalNamespace::SteamVR::get_tanHalfFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_tanHalfFov", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_tanHalfFov
void GlobalNamespace::SteamVR::set_tanHalfFov(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_tanHalfFov", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_textureBounds
::Array<Valve::VR::VRTextureBounds_t>* GlobalNamespace::SteamVR::get_textureBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_textureBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_textureBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<Valve::VR::VRTextureBounds_t>*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_textureBounds
void GlobalNamespace::SteamVR::set_textureBounds(::Array<Valve::VR::VRTextureBounds_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_textureBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_textureBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_eyes
::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* GlobalNamespace::SteamVR::get_eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_eyes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_eyes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_eyes
void GlobalNamespace::SteamVR::set_eyes(::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("set_eyes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_eyes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_hmd_TrackingSystemName
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_TrackingSystemName() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd_TrackingSystemName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd_TrackingSystemName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_ModelNumber
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_ModelNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd_ModelNumber");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd_ModelNumber", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SerialNumber
::Il2CppString* GlobalNamespace::SteamVR::get_hmd_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd_SerialNumber");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd_SerialNumber", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SecondsFromVsyncToPhotons
float GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd_SecondsFromVsyncToPhotons");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd_SecondsFromVsyncToPhotons", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_DisplayFrequency
float GlobalNamespace::SteamVR::get_hmd_DisplayFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("get_hmd_DisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hmd_DisplayFrequency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.GetTrackedDeviceString
::Il2CppString* GlobalNamespace::SteamVR::GetTrackedDeviceString(uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("GetTrackedDeviceString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deviceId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, deviceId);
}
// Autogenerated method: SteamVR.GetStringProperty
::Il2CppString* GlobalNamespace::SteamVR::GetStringProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("GetStringProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetStringProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(prop, deviceId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.GetFloatProperty
float GlobalNamespace::SteamVR::GetFloatProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("GetFloatProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFloatProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(prop, deviceId)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.OnInitializing
void GlobalNamespace::SteamVR::OnInitializing(bool initializing) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("OnInitializing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInitializing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(initializing)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initializing);
}
// Autogenerated method: SteamVR.OnCalibrating
void GlobalNamespace::SteamVR::OnCalibrating(bool calibrating) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("OnCalibrating");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnCalibrating", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(calibrating)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, calibrating);
}
// Autogenerated method: SteamVR.OnOutOfRange
void GlobalNamespace::SteamVR::OnOutOfRange(bool outOfRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("OnOutOfRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnOutOfRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(outOfRange)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outOfRange);
}
// Autogenerated method: SteamVR.OnDeviceConnected
void GlobalNamespace::SteamVR::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR.OnNewPoses
void GlobalNamespace::SteamVR::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(poses)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(disposing)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: SteamVR.SafeDispose
void GlobalNamespace::SteamVR::SafeDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("SafeDispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", "SafeDispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR..cctor
void GlobalNamespace::SteamVR::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.Finalize
void GlobalNamespace::SteamVR::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("Finalize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR").WithContext("Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
void GlobalNamespace::SteamVR::System_IDisposable_Dispose() {
  GlobalNamespace::SteamVR::Dispose();
}
