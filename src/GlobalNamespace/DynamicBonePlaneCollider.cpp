// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBonePlaneCollider
#include "GlobalNamespace/DynamicBonePlaneCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBonePlaneCollider.OnValidate
void GlobalNamespace::DynamicBonePlaneCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DynamicBonePlaneCollider").WithContext("OnValidate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.OnDrawGizmosSelected
void GlobalNamespace::DynamicBonePlaneCollider::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DynamicBonePlaneCollider").WithContext("OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.Collide
void GlobalNamespace::DynamicBonePlaneCollider::Collide(UnityEngine::Vector3& particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DynamicBonePlaneCollider").WithContext("Collide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particlePosition, particleRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particlePosition, particleRadius);
}
