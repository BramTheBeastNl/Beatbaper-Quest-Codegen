// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockMasterServerAvailabilityModel
#include "GlobalNamespace/MockMasterServerAvailabilityModel.hpp"
// Including type: MultiplayerMockSettings
#include "GlobalNamespace/MultiplayerMockSettings.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockMasterServerAvailabilityModel.GetAvailabilityAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GlobalNamespace::MockMasterServerAvailabilityModel::GetAvailabilityAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MockMasterServerAvailabilityModel").WithContext("GetAvailabilityAsync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*>(), "GetAvailabilityAsync", {}, ::il2cpp_utils::ExtractTypes(cancellationToken)));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: MockMasterServerAvailabilityModel..ctor
GlobalNamespace::MockMasterServerAvailabilityModel* GlobalNamespace::MockMasterServerAvailabilityModel::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MockMasterServerAvailabilityModel").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<MockMasterServerAvailabilityModel*>());
}
