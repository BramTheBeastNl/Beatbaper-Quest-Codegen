// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformHelper
#include "GlobalNamespace/VRPlatformHelper.hpp"
// Including type: OculusVRHelper
#include "GlobalNamespace/OculusVRHelper.hpp"
// Including type: VRPlatformHelper/VRNodeTransform
#include "GlobalNamespace/VRPlatformHelper_VRNodeTransform.hpp"
// Including type: OpenVRHelper
#include "GlobalNamespace/OpenVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRPlatformHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::VRPlatformHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_inputFocusWasCapturedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::VRPlatformHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_inputFocusWasCapturedEvent", value));
}
// Autogenerated method: VRPlatformHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::VRPlatformHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_inputFocusWasReleasedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::VRPlatformHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_inputFocusWasReleasedEvent", value));
}
// Autogenerated method: VRPlatformHelper.add_dashboardWasActivatedEvent
void GlobalNamespace::VRPlatformHelper::add_dashboardWasActivatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_dashboardWasActivatedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_dashboardWasActivatedEvent
void GlobalNamespace::VRPlatformHelper::remove_dashboardWasActivatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_dashboardWasActivatedEvent", value));
}
// Autogenerated method: VRPlatformHelper.add_dashboardWasDectivatedEvent
void GlobalNamespace::VRPlatformHelper::add_dashboardWasDectivatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_dashboardWasDectivatedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_dashboardWasDectivatedEvent
void GlobalNamespace::VRPlatformHelper::remove_dashboardWasDectivatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_dashboardWasDectivatedEvent", value));
}
// Autogenerated method: VRPlatformHelper.add_hmdUnmountedEvent
void GlobalNamespace::VRPlatformHelper::add_hmdUnmountedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_hmdUnmountedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_hmdUnmountedEvent
void GlobalNamespace::VRPlatformHelper::remove_hmdUnmountedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_hmdUnmountedEvent", value));
}
// Autogenerated method: VRPlatformHelper.add_hmdMountedEvent
void GlobalNamespace::VRPlatformHelper::add_hmdMountedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_hmdMountedEvent", value));
}
// Autogenerated method: VRPlatformHelper.remove_hmdMountedEvent
void GlobalNamespace::VRPlatformHelper::remove_hmdMountedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_hmdMountedEvent", value));
}
// Autogenerated method: VRPlatformHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformHelper::VRPlatformSDK GlobalNamespace::VRPlatformHelper::get_vrPlatformSDK() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::VRPlatformHelper::VRPlatformSDK>(this, "get_vrPlatformSDK"));
}
// Autogenerated method: VRPlatformHelper.set_vrPlatformSDK
void GlobalNamespace::VRPlatformHelper::set_vrPlatformSDK(GlobalNamespace::VRPlatformHelper::VRPlatformSDK value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_vrPlatformSDK", value));
}
// Autogenerated method: VRPlatformHelper.get_currentXRDeviceModel
GlobalNamespace::VRPlatformHelper::XRDeviceModel GlobalNamespace::VRPlatformHelper::get_currentXRDeviceModel() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::VRPlatformHelper::XRDeviceModel>(this, "get_currentXRDeviceModel"));
}
// Autogenerated method: VRPlatformHelper.set_currentXRDeviceModel
void GlobalNamespace::VRPlatformHelper::set_currentXRDeviceModel(GlobalNamespace::VRPlatformHelper::XRDeviceModel value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_currentXRDeviceModel", value));
}
// Autogenerated method: VRPlatformHelper.get_isAlwaysWireless
bool GlobalNamespace::VRPlatformHelper::get_isAlwaysWireless() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isAlwaysWireless"));
}
// Autogenerated method: VRPlatformHelper.Awake
void GlobalNamespace::VRPlatformHelper::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: VRPlatformHelper.Update
void GlobalNamespace::VRPlatformHelper::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update"));
}
// Autogenerated method: VRPlatformHelper.FixedUpdate
void GlobalNamespace::VRPlatformHelper::FixedUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FixedUpdate"));
}
// Autogenerated method: VRPlatformHelper.LateUpdate
void GlobalNamespace::VRPlatformHelper::LateUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LateUpdate"));
}
// Autogenerated method: VRPlatformHelper.HandleInputFocusWasCaptured
void GlobalNamespace::VRPlatformHelper::HandleInputFocusWasCaptured() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleInputFocusWasCaptured"));
}
// Autogenerated method: VRPlatformHelper.HandleInputFocusWasReleased
void GlobalNamespace::VRPlatformHelper::HandleInputFocusWasReleased() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleInputFocusWasReleased"));
}
// Autogenerated method: VRPlatformHelper.HandleHMDMounted
void GlobalNamespace::VRPlatformHelper::HandleHMDMounted() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleHMDMounted"));
}
// Autogenerated method: VRPlatformHelper.HandleHMDUnmounted
void GlobalNamespace::VRPlatformHelper::HandleHMDUnmounted() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleHMDUnmounted"));
}
// Autogenerated method: VRPlatformHelper.HandleDashboardWasActivated
void GlobalNamespace::VRPlatformHelper::HandleDashboardWasActivated() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleDashboardWasActivated"));
}
// Autogenerated method: VRPlatformHelper.HandleDashboardWasDectivated
void GlobalNamespace::VRPlatformHelper::HandleDashboardWasDectivated() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleDashboardWasDectivated"));
}
// Autogenerated method: VRPlatformHelper.GetNodePose
bool GlobalNamespace::VRPlatformHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetNodePose", nodeType, idx, pos, rot));
}
// Autogenerated method: VRPlatformHelper.TriggerHapticPulse
void GlobalNamespace::VRPlatformHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float strength) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TriggerHapticPulse", node, strength));
}
// Autogenerated method: VRPlatformHelper.AdjustPlatformSpecificControllerTransform
void GlobalNamespace::VRPlatformHelper::AdjustPlatformSpecificControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 addPosition, UnityEngine::Vector3 addRotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AdjustPlatformSpecificControllerTransform", node, transform, addPosition, addRotation));
}
// Autogenerated method: VRPlatformHelper..ctor
GlobalNamespace::VRPlatformHelper* GlobalNamespace::VRPlatformHelper::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<VRPlatformHelper*>());
}
