// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Single[] bpmValues
::Array<float>* GlobalNamespace::LevelFilterParams::_get_bpmValues() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<float>*>("", "LevelFilterParams", "bpmValues"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single[] bpmValues
void GlobalNamespace::LevelFilterParams::_set_bpmValues(::Array<float>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelFilterParams", "bpmValues", value));
}
// Autogenerated method: LevelFilterParams.get_filterByLevelIds
bool GlobalNamespace::LevelFilterParams::get_filterByLevelIds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByLevelIds"));
}
// Autogenerated method: LevelFilterParams.set_filterByLevelIds
void GlobalNamespace::LevelFilterParams::set_filterByLevelIds(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByLevelIds", value));
}
// Autogenerated method: LevelFilterParams.get_beatmapLevelIds
System::Collections::Generic::HashSet_1<::Il2CppString*>* GlobalNamespace::LevelFilterParams::get_beatmapLevelIds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::HashSet_1<::Il2CppString*>*>(this, "get_beatmapLevelIds"));
}
// Autogenerated method: LevelFilterParams.set_beatmapLevelIds
void GlobalNamespace::LevelFilterParams::set_beatmapLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_beatmapLevelIds", value));
}
// Autogenerated method: LevelFilterParams.get_filterByOwned
bool GlobalNamespace::LevelFilterParams::get_filterByOwned() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByOwned"));
}
// Autogenerated method: LevelFilterParams.set_filterByOwned
void GlobalNamespace::LevelFilterParams::set_filterByOwned(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByOwned", value));
}
// Autogenerated method: LevelFilterParams.get_searchText
::Il2CppString* GlobalNamespace::LevelFilterParams::get_searchText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_searchText"));
}
// Autogenerated method: LevelFilterParams.set_searchText
void GlobalNamespace::LevelFilterParams::set_searchText(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_searchText", value));
}
// Autogenerated method: LevelFilterParams.get_filterByDifficulty
bool GlobalNamespace::LevelFilterParams::get_filterByDifficulty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByDifficulty"));
}
// Autogenerated method: LevelFilterParams.set_filterByDifficulty
void GlobalNamespace::LevelFilterParams::set_filterByDifficulty(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByDifficulty", value));
}
// Autogenerated method: LevelFilterParams.get_filteredDifficulty
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LevelFilterParams::get_filteredDifficulty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapDifficultyMask>(this, "get_filteredDifficulty"));
}
// Autogenerated method: LevelFilterParams.set_filteredDifficulty
void GlobalNamespace::LevelFilterParams::set_filteredDifficulty(GlobalNamespace::BeatmapDifficultyMask value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filteredDifficulty", value));
}
// Autogenerated method: LevelFilterParams.get_filterBySongPacks
bool GlobalNamespace::LevelFilterParams::get_filterBySongPacks() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterBySongPacks"));
}
// Autogenerated method: LevelFilterParams.set_filterBySongPacks
void GlobalNamespace::LevelFilterParams::set_filterBySongPacks(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterBySongPacks", value));
}
// Autogenerated method: LevelFilterParams.get_filteredSongPacks
GlobalNamespace::SongPackMask GlobalNamespace::LevelFilterParams::get_filteredSongPacks() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>(this, "get_filteredSongPacks"));
}
// Autogenerated method: LevelFilterParams.set_filteredSongPacks
void GlobalNamespace::LevelFilterParams::set_filteredSongPacks(GlobalNamespace::SongPackMask value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filteredSongPacks", value));
}
// Autogenerated method: LevelFilterParams.get_filterByCharacteristic
bool GlobalNamespace::LevelFilterParams::get_filterByCharacteristic() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByCharacteristic"));
}
// Autogenerated method: LevelFilterParams.set_filterByCharacteristic
void GlobalNamespace::LevelFilterParams::set_filterByCharacteristic(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByCharacteristic", value));
}
// Autogenerated method: LevelFilterParams.get_filteredCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::LevelFilterParams::get_filteredCharacteristic() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapCharacteristicSO*>(this, "get_filteredCharacteristic"));
}
// Autogenerated method: LevelFilterParams.set_filteredCharacteristic
void GlobalNamespace::LevelFilterParams::set_filteredCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filteredCharacteristic", value));
}
// Autogenerated method: LevelFilterParams.get_filterByNotPlayedYet
bool GlobalNamespace::LevelFilterParams::get_filterByNotPlayedYet() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByNotPlayedYet"));
}
// Autogenerated method: LevelFilterParams.set_filterByNotPlayedYet
void GlobalNamespace::LevelFilterParams::set_filterByNotPlayedYet(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByNotPlayedYet", value));
}
// Autogenerated method: LevelFilterParams.get_filterByMinBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMinBpm() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByMinBpm"));
}
// Autogenerated method: LevelFilterParams.set_filterByMinBpm
void GlobalNamespace::LevelFilterParams::set_filterByMinBpm(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByMinBpm", value));
}
// Autogenerated method: LevelFilterParams.get_filteredMinBpm
float GlobalNamespace::LevelFilterParams::get_filteredMinBpm() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_filteredMinBpm"));
}
// Autogenerated method: LevelFilterParams.set_filteredMinBpm
void GlobalNamespace::LevelFilterParams::set_filteredMinBpm(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filteredMinBpm", value));
}
// Autogenerated method: LevelFilterParams.get_filterByMaxBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMaxBpm() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_filterByMaxBpm"));
}
// Autogenerated method: LevelFilterParams.set_filterByMaxBpm
void GlobalNamespace::LevelFilterParams::set_filterByMaxBpm(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filterByMaxBpm", value));
}
// Autogenerated method: LevelFilterParams.get_filteredMaxBpm
float GlobalNamespace::LevelFilterParams::get_filteredMaxBpm() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_filteredMaxBpm"));
}
// Autogenerated method: LevelFilterParams.set_filteredMaxBpm
void GlobalNamespace::LevelFilterParams::set_filteredMaxBpm(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_filteredMaxBpm", value));
}
// Autogenerated method: LevelFilterParams..ctor
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::New_ctor(bool filterByLevelIds, System::Collections::Generic::HashSet_1<::Il2CppString*>* beatmapLevelIds, ::Il2CppString* searchText, bool filterByOwned, bool filterByDifficulty, GlobalNamespace::BeatmapDifficultyMask filteredDifficulty, bool filterByCharacteristic, GlobalNamespace::BeatmapCharacteristicSO* filteredCharacteristic, bool filterBySongPacks, GlobalNamespace::SongPackMask filteredSongPacks, bool filterByNotPlayedYet, bool filterByMinBpm, float filteredMinBpm, bool filterByMaxBpm, float filteredMaxBpm) {
  return THROW_UNLESS(il2cpp_utils::New<LevelFilterParams*>(filterByLevelIds, beatmapLevelIds, searchText, filterByOwned, filterByDifficulty, filteredDifficulty, filterByCharacteristic, filteredCharacteristic, filterBySongPacks, filteredSongPacks, filterByNotPlayedYet, filterByMinBpm, filteredMinBpm, filterByMaxBpm, filteredMaxBpm));
}
// Autogenerated method: LevelFilterParams.IsWithoutFilter
bool GlobalNamespace::LevelFilterParams::IsWithoutFilter(bool ignoreFilterBySongs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsWithoutFilter", ignoreFilterBySongs));
}
// Autogenerated method: LevelFilterParams..ctor
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::New_ctor(System::Collections::Generic::HashSet_1<::Il2CppString*>* beatmapLevelIds) {
  return THROW_UNLESS(il2cpp_utils::New<LevelFilterParams*>(beatmapLevelIds));
}
// Autogenerated method: LevelFilterParams..ctor
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::New_ctor(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  return THROW_UNLESS(il2cpp_utils::New<LevelFilterParams*>(beatmapCharacteristic));
}
// Autogenerated method: LevelFilterParams.NoFilter
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::NoFilter() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::LevelFilterParams*>("", "LevelFilterParams", "NoFilter"));
}
// Autogenerated method: LevelFilterParams.ByBeatmapLevelIds
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* beatmapLevelIds) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::LevelFilterParams*>("", "LevelFilterParams", "ByBeatmapLevelIds", beatmapLevelIds));
}
// Autogenerated method: LevelFilterParams.ByBeatmapCharacteristic
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::LevelFilterParams*>("", "LevelFilterParams", "ByBeatmapCharacteristic", beatmapCharacteristic));
}
// Autogenerated method: LevelFilterParams..cctor
void GlobalNamespace::LevelFilterParams::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "LevelFilterParams", ".cctor"));
}
// Autogenerated method: LevelFilterParams..ctor
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<LevelFilterParams*>());
}
