// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/NetPeerConnectionRequest
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnectionRequest.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_userId
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userId"));
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_userName
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userName"));
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_isConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_isConnectionOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnectionOwner"));
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_endPoint
System::Net::IPEndPoint* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_endPoint() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Net::IPEndPoint*>(this, "get_endPoint"));
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest..ctor
GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::New_ctor(LiteNetLib::ConnectionRequest* request, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  return THROW_UNLESS(il2cpp_utils::New<LiteNetLibConnectionManager::NetPeerConnectionRequest*>(request, userId, userName, isConnectionOwner));
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.Accept
LiteNetLib::NetPeer* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::Accept() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::NetPeer*>(this, "Accept"));
}
