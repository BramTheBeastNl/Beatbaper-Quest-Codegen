// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteData.get_colorType
GlobalNamespace::ColorType GlobalNamespace::NoteData::get_colorType() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::ColorType>(this, "get_colorType"));
}
// Autogenerated method: NoteData.set_colorType
void GlobalNamespace::NoteData::set_colorType(GlobalNamespace::ColorType value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_colorType", value));
}
// Autogenerated method: NoteData.get_cutDirection
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteData::get_cutDirection() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteCutDirection>(this, "get_cutDirection"));
}
// Autogenerated method: NoteData.set_cutDirection
void GlobalNamespace::NoteData::set_cutDirection(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_cutDirection", value));
}
// Autogenerated method: NoteData.get_timeToNextColorNote
float GlobalNamespace::NoteData::get_timeToNextColorNote() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_timeToNextColorNote"));
}
// Autogenerated method: NoteData.set_timeToNextColorNote
void GlobalNamespace::NoteData::set_timeToNextColorNote(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_timeToNextColorNote", value));
}
// Autogenerated method: NoteData.get_timeToPrevColorNote
float GlobalNamespace::NoteData::get_timeToPrevColorNote() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_timeToPrevColorNote"));
}
// Autogenerated method: NoteData.set_timeToPrevColorNote
void GlobalNamespace::NoteData::set_timeToPrevColorNote(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_timeToPrevColorNote", value));
}
// Autogenerated method: NoteData.get_noteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_noteLineLayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteLineLayer>(this, "get_noteLineLayer"));
}
// Autogenerated method: NoteData.set_noteLineLayer
void GlobalNamespace::NoteData::set_noteLineLayer(GlobalNamespace::NoteLineLayer value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_noteLineLayer", value));
}
// Autogenerated method: NoteData.get_startNoteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_startNoteLineLayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteLineLayer>(this, "get_startNoteLineLayer"));
}
// Autogenerated method: NoteData.set_startNoteLineLayer
void GlobalNamespace::NoteData::set_startNoteLineLayer(GlobalNamespace::NoteLineLayer value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_startNoteLineLayer", value));
}
// Autogenerated method: NoteData.get_flipLineIndex
int GlobalNamespace::NoteData::get_flipLineIndex() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_flipLineIndex"));
}
// Autogenerated method: NoteData.set_flipLineIndex
void GlobalNamespace::NoteData::set_flipLineIndex(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_flipLineIndex", value));
}
// Autogenerated method: NoteData.get_flipYSide
float GlobalNamespace::NoteData::get_flipYSide() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_flipYSide"));
}
// Autogenerated method: NoteData.set_flipYSide
void GlobalNamespace::NoteData::set_flipYSide(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_flipYSide", value));
}
// Autogenerated method: NoteData.get_duration
float GlobalNamespace::NoteData::get_duration() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_duration"));
}
// Autogenerated method: NoteData.set_duration
void GlobalNamespace::NoteData::set_duration(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_duration", value));
}
// Autogenerated method: NoteData..ctor
GlobalNamespace::NoteData* GlobalNamespace::NoteData::New_ctor(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::NoteLineLayer startNoteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection, float timeToNextColorNote, float timeToPrevColorNote, int flipLineIndex, float flipYSide, float duration) {
  return THROW_UNLESS(il2cpp_utils::New<NoteData*>(time, lineIndex, noteLineLayer, startNoteLineLayer, colorType, cutDirection, timeToNextColorNote, timeToPrevColorNote, flipLineIndex, flipYSide, duration));
}
// Autogenerated method: NoteData.CreateBombNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBombNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteData*>("", "NoteData", "CreateBombNoteData", time, lineIndex, noteLineLayer));
}
// Autogenerated method: NoteData.CreateBasicNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBasicNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteData*>("", "NoteData", "CreateBasicNoteData", time, lineIndex, noteLineLayer, colorType, cutDirection));
}
// Autogenerated method: NoteData.CreateLongNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateLongNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection, float duration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::NoteData*>("", "NoteData", "CreateLongNoteData", time, lineIndex, noteLineLayer, colorType, cutDirection, duration));
}
// Autogenerated method: NoteData.SetNoteStartLineLayer
void GlobalNamespace::NoteData::SetNoteStartLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNoteStartLineLayer", lineLayer));
}
// Autogenerated method: NoteData.SetNoteFlipToNote
void GlobalNamespace::NoteData::SetNoteFlipToNote(GlobalNamespace::NoteData* targetNote) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNoteFlipToNote", targetNote));
}
// Autogenerated method: NoteData.SwitchNoteColorType
void GlobalNamespace::NoteData::SwitchNoteColorType() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SwitchNoteColorType"));
}
// Autogenerated method: NoteData.MirrorTransformCutDirection
void GlobalNamespace::NoteData::MirrorTransformCutDirection() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "MirrorTransformCutDirection"));
}
// Autogenerated method: NoteData.SetNoteToAnyCutDirection
void GlobalNamespace::NoteData::SetNoteToAnyCutDirection() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNoteToAnyCutDirection"));
}
// Autogenerated method: NoteData.ChangeNoteCutDirection
void GlobalNamespace::NoteData::ChangeNoteCutDirection(GlobalNamespace::NoteCutDirection newCutDirection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ChangeNoteCutDirection", newCutDirection));
}
// Autogenerated method: NoteData.TransformNoteAOrBToRandomType
void GlobalNamespace::NoteData::TransformNoteAOrBToRandomType() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TransformNoteAOrBToRandomType"));
}
// Autogenerated method: NoteData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::NoteData::get_beatmapObjectType() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapObjectType>(this, "get_beatmapObjectType"));
}
// Autogenerated method: NoteData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::NoteData::GetCopy() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapObjectData*>(this, "GetCopy"));
}
// Autogenerated method: NoteData.MirrorLineIndex
void GlobalNamespace::NoteData::MirrorLineIndex(int lineCount) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "MirrorLineIndex", lineCount));
}
