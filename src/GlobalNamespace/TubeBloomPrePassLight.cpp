// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: ParametricBoxController
#include "GlobalNamespace/ParametricBoxController.hpp"
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TubeBloomPrePassLight.get_length
float GlobalNamespace::TubeBloomPrePassLight::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("get_length");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_length
void GlobalNamespace::TubeBloomPrePassLight::set_length(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("set_length");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_width
float GlobalNamespace::TubeBloomPrePassLight::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("get_width");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_width
void GlobalNamespace::TubeBloomPrePassLight::set_width(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("set_width");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_lightWidthMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_lightWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("get_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_lightWidthMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_lightWidthMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("set_lightWidthMultiplier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_lightWidthMultiplier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_bloomFogIntensityMultiplier
float GlobalNamespace::TubeBloomPrePassLight::get_bloomFogIntensityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("get_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.set_bloomFogIntensityMultiplier
void GlobalNamespace::TubeBloomPrePassLight::set_bloomFogIntensityMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("set_bloomFogIntensityMultiplier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_bloomFogIntensityMultiplier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.set_color
void GlobalNamespace::TubeBloomPrePassLight::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("set_color");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TubeBloomPrePassLight.get_color
UnityEngine::Color GlobalNamespace::TubeBloomPrePassLight::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("get_color");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.Refresh
void GlobalNamespace::TubeBloomPrePassLight::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("Refresh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.ClipPoints
void GlobalNamespace::TubeBloomPrePassLight::ClipPoints(UnityEngine::Vector4& fromPointClipPos, UnityEngine::Vector4& toPointClipPos, UnityEngine::Vector3& fromPointViewPos, UnityEngine::Vector3& toPointViewPos, bool fromPointInside, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("ClipPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClipPoints", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fromPointClipPos, toPointClipPos, fromPointViewPos, toPointViewPos, fromPointInside, t)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fromPointClipPos, toPointClipPos, fromPointViewPos, toPointViewPos, fromPointInside, t);
}
// Autogenerated method: TubeBloomPrePassLight.OnDrawGizmos
void GlobalNamespace::TubeBloomPrePassLight::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.NoDomainReloadInit
void GlobalNamespace::TubeBloomPrePassLight::NoDomainReloadInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("NoDomainReloadInit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "TubeBloomPrePassLight", "NoDomainReloadInit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.OnEnable
void GlobalNamespace::TubeBloomPrePassLight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.DidRegisterLight
void GlobalNamespace::TubeBloomPrePassLight::DidRegisterLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("DidRegisterLight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DidRegisterLight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TubeBloomPrePassLight.FillMeshData
void GlobalNamespace::TubeBloomPrePassLight::FillMeshData(int lightNum, ::Array<UnityEngine::Vector3>* vertices, ::Array<UnityEngine::Color>* colors, ::Array<UnityEngine::Vector4>* viewPos, UnityEngine::Matrix4x4 viewMatrix, UnityEngine::Matrix4x4 projectionMatrix, float lineWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TubeBloomPrePassLight").WithContext("FillMeshData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FillMeshData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lightNum, vertices, colors, viewPos, viewMatrix, projectionMatrix, lineWidth)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightNum, vertices, colors, viewPos, viewMatrix, projectionMatrix, lineWidth);
}
