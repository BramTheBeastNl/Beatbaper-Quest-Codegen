// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: BezierSplineEvaluator/CubicSolveResult
#include "GlobalNamespace/BezierSplineEvaluator_CubicSolveResult.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSlightAboveOne
float GlobalNamespace::BezierSplineEvaluator::_get_kSlightAboveOne() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("_get_kSlightAboveOne");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BezierSplineEvaluator", "kSlightAboveOne"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSlightAboveOne
void GlobalNamespace::BezierSplineEvaluator::_set_kSlightAboveOne(float value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("_set_kSlightAboveOne");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierSplineEvaluator", "kSlightAboveOne", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSlightBelowZero
float GlobalNamespace::BezierSplineEvaluator::_get_kSlightBelowZero() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("_get_kSlightBelowZero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BezierSplineEvaluator", "kSlightBelowZero"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSlightBelowZero
void GlobalNamespace::BezierSplineEvaluator::_set_kSlightBelowZero(float value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("_set_kSlightBelowZero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierSplineEvaluator", "kSlightBelowZero", value));
}
// Autogenerated method: BezierSplineEvaluator.EvaluatePosition
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluatePosition(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("EvaluatePosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EvaluatePosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.Evaluate
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::Evaluate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("Evaluate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.EvaluateFirstDerivation
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluateFirstDerivation(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("EvaluateFirstDerivation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EvaluateFirstDerivation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.EvaluateSecondDerivation
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluateSecondDerivation(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("EvaluateSecondDerivation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EvaluateSecondDerivation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.OffsetSegmentAndGetT
float GlobalNamespace::BezierSplineEvaluator::OffsetSegmentAndGetT(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("OffsetSegmentAndGetT");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OffsetSegmentAndGetT", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.GetTForSegment
float GlobalNamespace::BezierSplineEvaluator::GetTForSegment(int segmentIndex, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("GetTForSegment");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTForSegment", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(segmentIndex, time)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, segmentIndex, time);
}
// Autogenerated method: BezierSplineEvaluator.GetTimeValuesForSegment
void GlobalNamespace::BezierSplineEvaluator::GetTimeValuesForSegment(int segmentIndex, float& t0Value, float& t1Value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("GetTimeValuesForSegment");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTimeValuesForSegment", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(segmentIndex, t0Value, t1Value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, segmentIndex, t0Value, t1Value);
}
// Autogenerated method: BezierSplineEvaluator.OffsetStartIndexToDistance
void GlobalNamespace::BezierSplineEvaluator::OffsetStartIndexToDistance(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("OffsetStartIndexToDistance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OffsetStartIndexToDistance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.CubeRoot
float GlobalNamespace::BezierSplineEvaluator::CubeRoot(float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("CubeRoot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "BezierSplineEvaluator", "CubeRoot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(x)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated method: BezierSplineEvaluator.SolveCubic
GlobalNamespace::BezierSplineEvaluator::CubicSolveResult GlobalNamespace::BezierSplineEvaluator::SolveCubic(float a, float b, float c, float d) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSplineEvaluator").WithContext("SolveCubic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "BezierSplineEvaluator", "SolveCubic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b, c, d)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BezierSplineEvaluator::CubicSolveResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, c, d);
}
