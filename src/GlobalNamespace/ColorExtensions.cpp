// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorExtensions
#include "GlobalNamespace/ColorExtensions.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorExtensions.SaturatedColor
UnityEngine::Color GlobalNamespace::ColorExtensions::SaturatedColor(UnityEngine::Color color, float saturation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("SaturatedColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "SaturatedColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, saturation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, saturation);
}
// Autogenerated method: ColorExtensions.ColorWithAlpha
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithAlpha(UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("ColorWithAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, alpha)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, alpha);
}
// Autogenerated method: ColorExtensions.ColorWithR
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithR(UnityEngine::Color color, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("ColorWithR");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithR", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, r)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, r);
}
// Autogenerated method: ColorExtensions.ColorWithG
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithG(UnityEngine::Color color, float g) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("ColorWithG");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithG", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, g)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, g);
}
// Autogenerated method: ColorExtensions.ColorWithB
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithB(UnityEngine::Color color, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("ColorWithB");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithB", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, b)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, b);
}
// Autogenerated method: ColorExtensions.ColorWithValue
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithValue(UnityEngine::Color color, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ColorExtensions").WithContext("ColorWithValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, value)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, value);
}
