// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AlwaysOwnedContentSO
#include "GlobalNamespace/AlwaysOwnedContentSO.hpp"
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AlwaysOwnedContentSO.get_alwaysOwnedPacks
::Array<GlobalNamespace::BeatmapLevelPackSO*>* GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("AlwaysOwnedContentSO").WithContext("get_alwaysOwnedPacks");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<::Array<GlobalNamespace::BeatmapLevelPackSO*>*>(), "get_alwaysOwnedPacks", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapLevelPackSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentSO.get_alwaysOwnedBeatmapLevels
::Array<GlobalNamespace::BeatmapLevelSO*>* GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("AlwaysOwnedContentSO").WithContext("get_alwaysOwnedBeatmapLevels");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<::Array<GlobalNamespace::BeatmapLevelSO*>*>(), "get_alwaysOwnedBeatmapLevels", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapLevelSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentSO..ctor
GlobalNamespace::AlwaysOwnedContentSO* GlobalNamespace::AlwaysOwnedContentSO::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("AlwaysOwnedContentSO").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<AlwaysOwnedContentSO*>());
}
