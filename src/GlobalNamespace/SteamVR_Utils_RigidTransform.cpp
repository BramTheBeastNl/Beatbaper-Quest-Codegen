// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/RigidTransform.get_identity
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Utils::RigidTransform>("", "SteamVR_Utils/RigidTransform", "get_identity"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.FromLocal
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal(UnityEngine::Transform* t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Utils::RigidTransform>("", "SteamVR_Utils/RigidTransform", "FromLocal", t));
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform* GlobalNamespace::SteamVR_Utils::RigidTransform::New_ctor(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  return (SteamVR_Utils::RigidTransform*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Utils/RigidTransform", pos, rot));
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform* GlobalNamespace::SteamVR_Utils::RigidTransform::New_ctor(UnityEngine::Transform* t) {
  return (SteamVR_Utils::RigidTransform*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Utils/RigidTransform", t));
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform* GlobalNamespace::SteamVR_Utils::RigidTransform::New_ctor(UnityEngine::Transform* from, UnityEngine::Transform* to) {
  return (SteamVR_Utils::RigidTransform*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Utils/RigidTransform", from, to));
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform* GlobalNamespace::SteamVR_Utils::RigidTransform::New_ctor(Valve::VR::HmdMatrix34_t pose) {
  return (SteamVR_Utils::RigidTransform*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Utils/RigidTransform", pose));
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform* GlobalNamespace::SteamVR_Utils::RigidTransform::New_ctor(Valve::VR::HmdMatrix44_t pose) {
  return (SteamVR_Utils::RigidTransform*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Utils/RigidTransform", pose));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix44
Valve::VR::HmdMatrix44_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix44_t>(*this, "ToHmdMatrix44"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix34
Valve::VR::HmdMatrix34_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix34_t>(*this, "ToHmdMatrix34"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Inverse
void GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Inverse"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetInverse
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Utils::RigidTransform>(*this, "GetInverse"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Multiply
void GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Multiply", a, b));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.InverseTransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint(UnityEngine::Vector3 point) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>(*this, "InverseTransformPoint", point));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.TransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint(UnityEngine::Vector3 point) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>(*this, "TransformPoint", point));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Utils::RigidTransform>("", "SteamVR_Utils/RigidTransform", "Interpolate", a, b, t));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
void GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform to, float t) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Interpolate", to, t));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Equals
bool GlobalNamespace::SteamVR_Utils::RigidTransform::Equals(::CsObject* o) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", o));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetHashCode
int GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR_Utils/RigidTransform", "op_Equality", a, b));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR_Utils/RigidTransform", "op_Inequality", a, b));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Utils::RigidTransform>("", "SteamVR_Utils/RigidTransform", "op_Multiply", a, b));
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
UnityEngine::Vector3 GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& t, const UnityEngine::Vector3& v) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("", "SteamVR_Utils/RigidTransform", "op_Multiply", t, v));
}
