// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerConnectionManager/ConnectionAttempt
#include "GlobalNamespace/MasterServerConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt None
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "None"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt None
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_None(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_NatPunchthrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_get_NatPunchthrough");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "NatPunchthrough"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_NatPunchthrough(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_set_NatPunchthrough");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "NatPunchthrough", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_DedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_get_DedicatedServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "DedicatedServer"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_DedicatedServer(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ConnectionAttempt").WithContext("_set_DedicatedServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "DedicatedServer", value));
}
