// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLevelLoader
#include "GlobalNamespace/MultiplayerLevelLoader.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`5
#include "System/Action_5.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLevelLoader.add_stillDownloadingSongEvent
void GlobalNamespace::MultiplayerLevelLoader::add_stillDownloadingSongEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_stillDownloadingSongEvent", value));
}
// Autogenerated method: MultiplayerLevelLoader.remove_stillDownloadingSongEvent
void GlobalNamespace::MultiplayerLevelLoader::remove_stillDownloadingSongEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_stillDownloadingSongEvent", value));
}
// Autogenerated method: MultiplayerLevelLoader.add_countdownFinishedEvent
void GlobalNamespace::MultiplayerLevelLoader::add_countdownFinishedEvent(System::Action_5<GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_countdownFinishedEvent", value));
}
// Autogenerated method: MultiplayerLevelLoader.remove_countdownFinishedEvent
void GlobalNamespace::MultiplayerLevelLoader::remove_countdownFinishedEvent(System::Action_5<GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_countdownFinishedEvent", value));
}
// Autogenerated method: MultiplayerLevelLoader.LoadLevel
void GlobalNamespace::MultiplayerLevelLoader::LoadLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float initialStartTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LoadLevel", beatmapId, gameplayModifiers, initialStartTime));
}
// Autogenerated method: MultiplayerLevelLoader.SetNewStartTime
void GlobalNamespace::MultiplayerLevelLoader::SetNewStartTime(float newStartTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNewStartTime", newStartTime));
}
// Autogenerated method: MultiplayerLevelLoader.ClearLoading
void GlobalNamespace::MultiplayerLevelLoader::ClearLoading() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearLoading"));
}
// Autogenerated method: MultiplayerLevelLoader.<LoadLevel>b__19_0
bool GlobalNamespace::MultiplayerLevelLoader::$LoadLevel$b__19_0(GlobalNamespace::PreviewDifficultyBeatmapSet* set) {
  return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "<LoadLevel>b__19_0", set)));
}
// Autogenerated method: MultiplayerLevelLoader.Tick
void GlobalNamespace::MultiplayerLevelLoader::Tick() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Tick"));
}
// Autogenerated method: MultiplayerLevelLoader..ctor
GlobalNamespace::MultiplayerLevelLoader* GlobalNamespace::MultiplayerLevelLoader::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<MultiplayerLevelLoader*>());
}
