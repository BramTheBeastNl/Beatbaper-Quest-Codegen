// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace\SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace\SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace\SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine\Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine\Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine\Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine\Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine\GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(UnityEngine::Quaternion A, UnityEngine::Quaternion B, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Quaternion>("", "SteamVR_Utils", "Slerp", A, B, t));
}
// Autogenerated method: SteamVR_Utils.Lerp
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("", "SteamVR_Utils", "Lerp", A, B, t));
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "Lerp", A, B, t));
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<double>("", "SteamVR_Utils", "Lerp", A, B, t));
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, UnityEngine::Vector3 result) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "InverseLerp", A, B, result));
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "InverseLerp", A, B, result));
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<double>("", "SteamVR_Utils", "InverseLerp", A, B, result));
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "Saturate", A));
}
// Autogenerated method: SteamVR_Utils.Saturate
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(UnityEngine::Vector2 A) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>("", "SteamVR_Utils", "Saturate", A));
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "Abs", A));
}
// Autogenerated method: SteamVR_Utils.Abs
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(UnityEngine::Vector2 A) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>("", "SteamVR_Utils", "Abs", A));
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_Utils", "_copysign", sizeval, signval));
}
// Autogenerated method: SteamVR_Utils.GetRotation
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(UnityEngine::Matrix4x4 matrix) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Quaternion>("", "SteamVR_Utils", "GetRotation", matrix));
}
// Autogenerated method: SteamVR_Utils.GetPosition
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(UnityEngine::Matrix4x4 matrix) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("", "SteamVR_Utils", "GetPosition", matrix));
}
// Autogenerated method: SteamVR_Utils.GetScale
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(UnityEngine::Matrix4x4 m) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("", "SteamVR_Utils", "GetScale", m));
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::Array<::Il2CppObject*>* args) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>("", "SteamVR_Utils", "CallSystemFn", fn, args));
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, UnityEngine::GameObject* target, int cellSize, float ipd, ::Il2CppString*& previewFilename, ::Il2CppString*& VRFilename) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Utils", "TakeStereoScreenshot", screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename));
}
