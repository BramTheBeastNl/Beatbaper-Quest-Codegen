// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(UnityEngine::Quaternion A, UnityEngine::Quaternion B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Slerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Quaternion>(), "Slerp", {}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Vector3>(), "Lerp", {}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "Lerp", {}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<double>(), "Lerp", {}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, UnityEngine::Vector3 result) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "InverseLerp", {}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "InverseLerp", {}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<double>(), "InverseLerp", {}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Saturate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "Saturate", {}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Saturate
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Saturate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Vector2>(), "Saturate", {}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Abs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "Abs", {}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("Abs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Vector2>(), "Abs", {}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("_copysign");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<float>(), "_copysign", {}, ::il2cpp_utils::ExtractTypes(sizeval, signval)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sizeval, signval);
}
// Autogenerated method: SteamVR_Utils.GetRotation
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("GetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Quaternion>(), "GetRotation", {}, ::il2cpp_utils::ExtractTypes(matrix)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetPosition
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("GetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Vector3>(), "GetPosition", {}, ::il2cpp_utils::ExtractTypes(matrix)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetScale
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("GetScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<UnityEngine::Vector3>(), "GetScale", {}, ::il2cpp_utils::ExtractTypes(m)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("CallSystemFn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<::Il2CppObject*>(), "CallSystemFn", {}, ::il2cpp_utils::ExtractTypes(fn, args)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fn, args);
}
// Creating initializer_list -> params proxy for: System.Object CallSystemFn(SteamVR_Utils/SystemFn fn, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::CallSystemFn(fn, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, UnityEngine::GameObject* target, int cellSize, float ipd, ::Il2CppString*& previewFilename, ::Il2CppString*& VRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Utils").WithContext("TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", il2cpp_utils::NoArgClass<void>(), "TakeStereoScreenshot", {}, ::il2cpp_utils::ExtractTypes(screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename);
}
