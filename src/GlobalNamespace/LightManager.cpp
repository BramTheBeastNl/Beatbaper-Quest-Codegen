// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightManager
#include "GlobalNamespace/LightManager.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightDirectionsID
int GlobalNamespace::LightManager::_get__directionalLightDirectionsID() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightDirectionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightDirectionsID
void GlobalNamespace::LightManager::_set__directionalLightDirectionsID(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightDirectionsID", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _directionalLightColorsID
int GlobalNamespace::LightManager::_get__directionalLightColorsID() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_directionalLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _directionalLightColorsID
void GlobalNamespace::LightManager::_set__directionalLightColorsID(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_directionalLightColorsID", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightPositionsID
int GlobalNamespace::LightManager::_get__pointLightPositionsID() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightPositionsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightPositionsID
void GlobalNamespace::LightManager::_set__pointLightPositionsID(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightPositionsID", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _pointLightColorsID
int GlobalNamespace::LightManager::_get__pointLightColorsID() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightManager", "_pointLightColorsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _pointLightColorsID
void GlobalNamespace::LightManager::_set__pointLightColorsID(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightManager", "_pointLightColorsID", value));
}
// Autogenerated method: LightManager.OnDisable
void GlobalNamespace::LightManager::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: LightManager.OnWillRenderObject
void GlobalNamespace::LightManager::OnWillRenderObject() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnWillRenderObject"));
}
// Autogenerated method: LightManager.OnBecameInvisible
void GlobalNamespace::LightManager::OnBecameInvisible() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnBecameInvisible"));
}
// Autogenerated method: LightManager.OnDestroy
void GlobalNamespace::LightManager::OnDestroy() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
}
// Autogenerated method: LightManager.ResetColors
void GlobalNamespace::LightManager::ResetColors() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResetColors"));
}
// Autogenerated method: LightManager.OnCameraPreRender
void GlobalNamespace::LightManager::OnCameraPreRender(UnityEngine::Camera* camera) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnCameraPreRender", camera));
}
// Autogenerated method: LightManager.OnCameraPostRender
void GlobalNamespace::LightManager::OnCameraPostRender(UnityEngine::Camera* camera) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnCameraPostRender", camera));
}
// Autogenerated method: LightManager..ctor
GlobalNamespace::LightManager* GlobalNamespace::LightManager::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<LightManager*>());
}
// Autogenerated method: LightManager..cctor
void GlobalNamespace::LightManager::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "LightManager", ".cctor"));
}
