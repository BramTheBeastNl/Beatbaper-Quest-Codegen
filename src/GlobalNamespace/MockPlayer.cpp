// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: MenuRpcManager
#include "GlobalNamespace/MenuRpcManager.hpp"
// Including type: GameplayRpcManager
#include "GlobalNamespace/GameplayRpcManager.hpp"
// Including type: MockMultiplayerSessionManager
#include "GlobalNamespace/MockMultiplayerSessionManager.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPlayer.get_scoreGainCurve
UnityEngine::AnimationCurve* GlobalNamespace::MockPlayer::get_scoreGainCurve() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::AnimationCurve*>(this, "get_scoreGainCurve"));
}
// Autogenerated method: MockPlayer.set_isMe
void GlobalNamespace::MockPlayer::set_isMe(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isMe", value));
}
// Autogenerated method: MockPlayer.get_isReady
bool GlobalNamespace::MockPlayer::get_isReady() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isReady"));
}
// Autogenerated method: MockPlayer.set_isReady
void GlobalNamespace::MockPlayer::set_isReady(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isReady", value));
}
// Autogenerated method: MockPlayer.set_currentPartySize
void GlobalNamespace::MockPlayer::set_currentPartySize(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_currentPartySize", value));
}
// Autogenerated method: MockPlayer.set_maxPartySize
void GlobalNamespace::MockPlayer::set_maxPartySize(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_maxPartySize", value));
}
// Autogenerated method: MockPlayer.set_difficulties
void GlobalNamespace::MockPlayer::set_difficulties(GlobalNamespace::BeatmapDifficultyMask value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_difficulties", value));
}
// Autogenerated method: MockPlayer.set_modifiers
void GlobalNamespace::MockPlayer::set_modifiers(GlobalNamespace::GameplayModifierMask value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_modifiers", value));
}
// Autogenerated method: MockPlayer.set_songPacks
void GlobalNamespace::MockPlayer::set_songPacks(GlobalNamespace::SongPackMask value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_songPacks", value));
}
// Autogenerated method: MockPlayer.set_isMyPartyOwner
void GlobalNamespace::MockPlayer::set_isMyPartyOwner(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isMyPartyOwner", value));
}
// Autogenerated method: MockPlayer.set_isOpenParty
void GlobalNamespace::MockPlayer::set_isOpenParty(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isOpenParty", value));
}
// Autogenerated method: MockPlayer.set_userId
void GlobalNamespace::MockPlayer::set_userId(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_userId", value));
}
// Autogenerated method: MockPlayer.set_userName
void GlobalNamespace::MockPlayer::set_userName(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_userName", value));
}
// Autogenerated method: MockPlayer.set_currentLatency
void GlobalNamespace::MockPlayer::set_currentLatency(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_currentLatency", value));
}
// Autogenerated method: MockPlayer.set_isConnected
void GlobalNamespace::MockPlayer::set_isConnected(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isConnected", value));
}
// Autogenerated method: MockPlayer.set_isPlayer
void GlobalNamespace::MockPlayer::set_isPlayer(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isPlayer", value));
}
// Autogenerated method: MockPlayer.get_wantsToPlayNextLevel
bool GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_wantsToPlayNextLevel"));
}
// Autogenerated method: MockPlayer.set_wantsToPlayNextLevel
void GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_wantsToPlayNextLevel", value));
}
// Autogenerated method: MockPlayer.get_isLeftHanded
bool GlobalNamespace::MockPlayer::get_isLeftHanded() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isLeftHanded"));
}
// Autogenerated method: MockPlayer.set_isLeftHanded
void GlobalNamespace::MockPlayer::set_isLeftHanded(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isLeftHanded", value));
}
// Autogenerated method: MockPlayer.set_isDedicatedServer
void GlobalNamespace::MockPlayer::set_isDedicatedServer(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isDedicatedServer", value));
}
// Autogenerated method: MockPlayer.set_isSpectating
void GlobalNamespace::MockPlayer::set_isSpectating(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isSpectating", value));
}
// Autogenerated method: MockPlayer.set_requiresPassword
void GlobalNamespace::MockPlayer::set_requiresPassword(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_requiresPassword", value));
}
// Autogenerated method: MockPlayer.set_isWaitingOnJoin
void GlobalNamespace::MockPlayer::set_isWaitingOnJoin(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isWaitingOnJoin", value));
}
// Autogenerated method: MockPlayer.set_canInvite
void GlobalNamespace::MockPlayer::set_canInvite(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_canInvite", value));
}
// Autogenerated method: MockPlayer.set_isWaitingOnInvite
void GlobalNamespace::MockPlayer::set_isWaitingOnInvite(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isWaitingOnInvite", value));
}
// Autogenerated method: MockPlayer.set_canKick
void GlobalNamespace::MockPlayer::set_canKick(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_canKick", value));
}
// Autogenerated method: MockPlayer.set_canLeave
void GlobalNamespace::MockPlayer::set_canLeave(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_canLeave", value));
}
// Autogenerated method: MockPlayer.set_canBlock
void GlobalNamespace::MockPlayer::set_canBlock(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_canBlock", value));
}
// Autogenerated method: MockPlayer.set_canUnblock
void GlobalNamespace::MockPlayer::set_canUnblock(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_canUnblock", value));
}
// Autogenerated method: MockPlayer.set_isConnectionOwner
void GlobalNamespace::MockPlayer::set_isConnectionOwner(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isConnectionOwner", value));
}
// Autogenerated method: MockPlayer.get_wasActiveAtLevelStart
bool GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_wasActiveAtLevelStart"));
}
// Autogenerated method: MockPlayer.set_wasActiveAtLevelStart
void GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_wasActiveAtLevelStart", value));
}
// Autogenerated method: MockPlayer.get_isActive
bool GlobalNamespace::MockPlayer::get_isActive() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isActive"));
}
// Autogenerated method: MockPlayer.set_isActive
void GlobalNamespace::MockPlayer::set_isActive(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isActive", value));
}
// Autogenerated method: MockPlayer.get_finishedLevel
bool GlobalNamespace::MockPlayer::get_finishedLevel() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_finishedLevel"));
}
// Autogenerated method: MockPlayer.set_finishedLevel
void GlobalNamespace::MockPlayer::set_finishedLevel(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_finishedLevel", value));
}
// Autogenerated method: MockPlayer.set_sortIndex
void GlobalNamespace::MockPlayer::set_sortIndex(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_sortIndex", value));
}
// Autogenerated method: MockPlayer.set_isKicked
void GlobalNamespace::MockPlayer::set_isKicked(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isKicked", value));
}
// Autogenerated method: MockPlayer.SetState
void GlobalNamespace::MockPlayer::SetState(::Il2CppString* state, bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetState", state, value));
}
// Autogenerated method: MockPlayer.Init
void GlobalNamespace::MockPlayer::Init(GlobalNamespace::MockMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::AvatarPartsModel* avatarPartsModel) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", multiplayerSessionManager, avatarPartsModel));
}
// Autogenerated method: MockPlayer.Connect
void GlobalNamespace::MockPlayer::Connect(GlobalNamespace::MockMultiplayerSessionManager* multiplayerSessionManagerMock) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Connect", multiplayerSessionManagerMock));
}
// Autogenerated method: MockPlayer.Disconnect
void GlobalNamespace::MockPlayer::Disconnect() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect"));
}
// Autogenerated method: MockPlayer.HandleGetIsReady
void GlobalNamespace::MockPlayer::HandleGetIsReady(::Il2CppString* u) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetIsReady", u));
}
// Autogenerated method: MockPlayer.HandleGetIsEntitledToLevel
void GlobalNamespace::MockPlayer::HandleGetIsEntitledToLevel(::Il2CppString* u, ::Il2CppString* level) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetIsEntitledToLevel", u, level));
}
// Autogenerated method: MockPlayer.HandleGetIsInLobby
void GlobalNamespace::MockPlayer::HandleGetIsInLobby(::Il2CppString* u) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetIsInLobby", u));
}
// Autogenerated method: MockPlayer.HandleNoteCut
void GlobalNamespace::MockPlayer::HandleNoteCut(::Il2CppString* u, float st, float t, GlobalNamespace::NoteCutInfoNetSerializable* nc) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleNoteCut", u, st, t, nc));
}
// Autogenerated method: MockPlayer.HandleNoteMissed
void GlobalNamespace::MockPlayer::HandleNoteMissed(::Il2CppString* u, float st, float t, GlobalNamespace::NoteMissInfoNetSerializable* nc) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleNoteMissed", u, st, t, nc));
}
// Autogenerated method: MockPlayer.HandleLevelFinished
void GlobalNamespace::MockPlayer::HandleLevelFinished(::Il2CppString* user, GlobalNamespace::LevelCompletionResults* results) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelFinished", user, results));
}
// Autogenerated method: MockPlayer.HandleGetGameplaySceneReady
void GlobalNamespace::MockPlayer::HandleGetGameplaySceneReady(::Il2CppString* user) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetGameplaySceneReady", user));
}
// Autogenerated method: MockPlayer.HandleSetGameplaySceneReady
void GlobalNamespace::MockPlayer::HandleSetGameplaySceneReady(::Il2CppString* user) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleSetGameplaySceneReady", user));
}
// Autogenerated method: MockPlayer.HandleGetGameplaySongReady
void GlobalNamespace::MockPlayer::HandleGetGameplaySongReady(::Il2CppString* user) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetGameplaySongReady", user));
}
// Autogenerated method: MockPlayer.HandleSetGameplaySongReady
void GlobalNamespace::MockPlayer::HandleSetGameplaySongReady(::Il2CppString* user) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleSetGameplaySongReady", user));
}
// Autogenerated method: MockPlayer.HandleLevelEndedEarly
void GlobalNamespace::MockPlayer::HandleLevelEndedEarly(::Il2CppString* user) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelEndedEarly", user));
}
// Autogenerated method: MockPlayer.get_isMe
bool GlobalNamespace::MockPlayer::get_isMe() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isMe"));
}
// Autogenerated method: MockPlayer.get_currentPartySize
int GlobalNamespace::MockPlayer::get_currentPartySize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_currentPartySize"));
}
// Autogenerated method: MockPlayer.get_maxPartySize
int GlobalNamespace::MockPlayer::get_maxPartySize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_maxPartySize"));
}
// Autogenerated method: MockPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::MockPlayer::get_difficulties() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapDifficultyMask>(this, "get_difficulties"));
}
// Autogenerated method: MockPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::MockPlayer::get_modifiers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::GameplayModifierMask>(this, "get_modifiers"));
}
// Autogenerated method: MockPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::MockPlayer::get_songPacks() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>(this, "get_songPacks"));
}
// Autogenerated method: MockPlayer.get_isMyPartyOwner
bool GlobalNamespace::MockPlayer::get_isMyPartyOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isMyPartyOwner"));
}
// Autogenerated method: MockPlayer.get_isOpenParty
bool GlobalNamespace::MockPlayer::get_isOpenParty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isOpenParty"));
}
// Autogenerated method: MockPlayer.get_userId
::Il2CppString* GlobalNamespace::MockPlayer::get_userId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userId"));
}
::Il2CppString* GlobalNamespace::MockPlayer::GlobalNamespace_INetworkPlayer_get_userId() {
  return GlobalNamespace::MockPlayer::get_userId();
}
// Autogenerated method: MockPlayer.get_userName
::Il2CppString* GlobalNamespace::MockPlayer::get_userName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userName"));
}
::Il2CppString* GlobalNamespace::MockPlayer::GlobalNamespace_INetworkPlayer_get_userName() {
  return GlobalNamespace::MockPlayer::get_userName();
}
// Autogenerated method: MockPlayer.get_currentLatency
float GlobalNamespace::MockPlayer::get_currentLatency() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_currentLatency"));
}
// Autogenerated method: MockPlayer.get_offsetSyncTime
float GlobalNamespace::MockPlayer::get_offsetSyncTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_offsetSyncTime"));
}
// Autogenerated method: MockPlayer.get_isConnected
bool GlobalNamespace::MockPlayer::get_isConnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnected"));
}
// Autogenerated method: MockPlayer.get_isPlayer
bool GlobalNamespace::MockPlayer::get_isPlayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isPlayer"));
}
// Autogenerated method: MockPlayer.get_isDedicatedServer
bool GlobalNamespace::MockPlayer::get_isDedicatedServer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isDedicatedServer"));
}
// Autogenerated method: MockPlayer.get_isSpectating
bool GlobalNamespace::MockPlayer::get_isSpectating() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isSpectating"));
}
// Autogenerated method: MockPlayer.get_canJoin
bool GlobalNamespace::MockPlayer::get_canJoin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canJoin"));
}
// Autogenerated method: MockPlayer.get_requiresPassword
bool GlobalNamespace::MockPlayer::get_requiresPassword() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_requiresPassword"));
}
// Autogenerated method: MockPlayer.get_isWaitingOnJoin
bool GlobalNamespace::MockPlayer::get_isWaitingOnJoin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isWaitingOnJoin"));
}
// Autogenerated method: MockPlayer.get_canInvite
bool GlobalNamespace::MockPlayer::get_canInvite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canInvite"));
}
// Autogenerated method: MockPlayer.get_isWaitingOnInvite
bool GlobalNamespace::MockPlayer::get_isWaitingOnInvite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isWaitingOnInvite"));
}
// Autogenerated method: MockPlayer.get_canKick
bool GlobalNamespace::MockPlayer::get_canKick() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canKick"));
}
// Autogenerated method: MockPlayer.get_canLeave
bool GlobalNamespace::MockPlayer::get_canLeave() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canLeave"));
}
// Autogenerated method: MockPlayer.get_canBlock
bool GlobalNamespace::MockPlayer::get_canBlock() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canBlock"));
}
// Autogenerated method: MockPlayer.get_canUnblock
bool GlobalNamespace::MockPlayer::get_canUnblock() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canUnblock"));
}
// Autogenerated method: MockPlayer.get_isConnectionOwner
bool GlobalNamespace::MockPlayer::get_isConnectionOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnectionOwner"));
}
// Autogenerated method: MockPlayer.get_sortIndex
int GlobalNamespace::MockPlayer::get_sortIndex() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_sortIndex"));
}
// Autogenerated method: MockPlayer.get_isKicked
bool GlobalNamespace::MockPlayer::get_isKicked() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isKicked"));
}
// Autogenerated method: MockPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::MockPlayer::get_multiplayerAvatarData() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerAvatarData>(this, "get_multiplayerAvatarData"));
}
// Autogenerated method: MockPlayer..ctor
GlobalNamespace::MockPlayer* GlobalNamespace::MockPlayer::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<MockPlayer*>());
}
// Autogenerated method: MockPlayer.HasState
bool GlobalNamespace::MockPlayer::HasState(::Il2CppString* state) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HasState", state));
}
// Autogenerated method: MockPlayer.Unblock
void GlobalNamespace::MockPlayer::Unblock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Unblock"));
}
// Autogenerated method: MockPlayer.SendJoinResponse
void GlobalNamespace::MockPlayer::SendJoinResponse(bool accept) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendJoinResponse", accept));
}
// Autogenerated method: MockPlayer.SendInviteResponse
void GlobalNamespace::MockPlayer::SendInviteResponse(bool accept) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendInviteResponse", accept));
}
// Autogenerated method: MockPlayer.Block
void GlobalNamespace::MockPlayer::Block() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Block"));
}
// Autogenerated method: MockPlayer.Leave
void GlobalNamespace::MockPlayer::Leave() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Leave"));
}
// Autogenerated method: MockPlayer.Kick
void GlobalNamespace::MockPlayer::Kick() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Kick"));
}
// Autogenerated method: MockPlayer.Invite
void GlobalNamespace::MockPlayer::Invite() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Invite"));
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join(::Il2CppString* password) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Join", password));
}
// Autogenerated method: MockPlayer.Join
void GlobalNamespace::MockPlayer::Join() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Join"));
}
