// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand
#include "GlobalNamespace/OVRHand.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OVRHand/HandFinger
#include "GlobalNamespace/OVRHand_HandFinger.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRHand.get_IsDataValid
bool GlobalNamespace::OVRHand::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataValid
void GlobalNamespace::OVRHand::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsDataHighConfidence
bool GlobalNamespace::OVRHand::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataHighConfidence
void GlobalNamespace::OVRHand::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsTracked
bool GlobalNamespace::OVRHand::get_IsTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_IsTracked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsTracked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsTracked
void GlobalNamespace::OVRHand::set_IsTracked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_IsTracked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsTracked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsSystemGestureInProgress
bool GlobalNamespace::OVRHand::get_IsSystemGestureInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsSystemGestureInProgress
void GlobalNamespace::OVRHand::set_IsSystemGestureInProgress(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsPointerPoseValid
bool GlobalNamespace::OVRHand::get_IsPointerPoseValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsPointerPoseValid
void GlobalNamespace::OVRHand::set_IsPointerPoseValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_PointerPose
UnityEngine::Transform* GlobalNamespace::OVRHand::get_PointerPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_PointerPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_PointerPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_PointerPose
void GlobalNamespace::OVRHand::set_PointerPose(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_PointerPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_PointerPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandScale
float GlobalNamespace::OVRHand::get_HandScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_HandScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_HandScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandScale
void GlobalNamespace::OVRHand::set_HandScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_HandScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_HandScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandConfidence
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::get_HandConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("get_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_HandConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandConfidence
void GlobalNamespace::OVRHand::set_HandConfidence(GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("set_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_HandConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.Awake
void GlobalNamespace::OVRHand::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.Update
void GlobalNamespace::OVRHand::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.FixedUpdate
void GlobalNamespace::OVRHand::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.GetHandState
void GlobalNamespace::OVRHand::GetHandState(GlobalNamespace::OVRPlugin::Step step) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("GetHandState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHandState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(step)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, step);
}
// Autogenerated method: OVRHand.GetFingerIsPinching
bool GlobalNamespace::OVRHand::GetFingerIsPinching(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("GetFingerIsPinching");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFingerIsPinching", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finger)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerPinchStrength
float GlobalNamespace::OVRHand::GetFingerPinchStrength(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("GetFingerPinchStrength");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFingerPinchStrength", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finger)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerConfidence
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::GetFingerConfidence(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("GetFingerConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFingerConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finger)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRHand::GlobalNamespace_OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData
GlobalNamespace::OVRSkeleton::SkeletonPoseData GlobalNamespace::OVRHand::GlobalNamespace_OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonPoseData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData GlobalNamespace::OVRHand::GlobalNamespace_OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider_GetSkeletonRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMesh.IOVRMeshDataProvider.GetMeshType
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRHand::GlobalNamespace_OVRMesh_IOVRMeshDataProvider_GetMeshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("OVRMesh.IOVRMeshDataProvider.GetMeshType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OVRMesh.IOVRMeshDataProvider.GetMeshType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMesh::MeshType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData
GlobalNamespace::OVRMeshRenderer::MeshRendererData GlobalNamespace::OVRHand::GlobalNamespace_OVRMeshRenderer_IOVRMeshRendererDataProvider_GetMeshRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRHand").WithContext("OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMeshRenderer::MeshRendererData, false>(this, ___internal__method);
}
