// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::Il2CppString* GlobalNamespace::SongPackMask::_get_kToStringPrefix() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SongPackMask", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::SongPackMask::_set_kToStringPrefix(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::Il2CppString* GlobalNamespace::SongPackMask::_get_kToStringSuffix() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SongPackMask", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::SongPackMask::_set_kToStringSuffix(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringSuffix", value));
}
// Autogenerated method: SongPackMask..ctor
GlobalNamespace::SongPackMask::SongPackMask(::Il2CppString* packId) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", packId));
}
// Autogenerated method: SongPackMask..ctor
// ABORTED elsewhere.  GlobalNamespace::SongPackMask::SongPackMask(GlobalNamespace::BloomFilter bloomFilter)
// Autogenerated method: SongPackMask.get_all
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::get_all() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "get_all"));
}
// Autogenerated method: SongPackMask.Contains
bool GlobalNamespace::SongPackMask::Contains(GlobalNamespace::SongPackMask other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Contains", other));
}
// Autogenerated method: SongPackMask.DifferenceFrom
int GlobalNamespace::SongPackMask::DifferenceFrom(GlobalNamespace::SongPackMask other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "DifferenceFrom", other));
}
// Autogenerated method: SongPackMask.Deserialize
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "Deserialize", reader));
}
// Autogenerated method: SongPackMask.ToShortString
::Il2CppString* GlobalNamespace::SongPackMask::ToShortString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToShortString"));
}
// Autogenerated method: SongPackMask.ToBytes
::Array<uint8_t>* GlobalNamespace::SongPackMask::ToBytes() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(*this, "ToBytes"));
}
// Autogenerated method: SongPackMask.TryParse
bool GlobalNamespace::SongPackMask::TryParse(::Il2CppString* stringSerializedMask, GlobalNamespace::SongPackMask& songPackMask) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SongPackMask", "TryParse", stringSerializedMask, songPackMask));
}
// Autogenerated method: SongPackMask.Parse
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Parse(::Il2CppString* stringSerializedMask) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "Parse", stringSerializedMask));
}
// Autogenerated method: SongPackMask.FromBytes
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::FromBytes(::Array<uint8_t>* bytes, int offset) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "FromBytes", bytes, offset));
}
// Autogenerated method: SongPackMask.Serialize
void GlobalNamespace::SongPackMask::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Serialize", writer));
}
// Autogenerated method: SongPackMask.CreateFromSerializedData
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>(*this, "CreateFromSerializedData", reader));
}
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  return GlobalNamespace::SongPackMask::CreateFromSerializedData(reader);
}
// Autogenerated method: SongPackMask.ToString
::Il2CppString* GlobalNamespace::SongPackMask::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString"));
}
// Autogenerated method: SongPackMask.GetHashCode
int GlobalNamespace::SongPackMask::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(GlobalNamespace::SongPackMask other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(::Il2CppObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", obj));
}
// Autogenerated method: SongPackMask.op_BitwiseOr
GlobalNamespace::SongPackMask GlobalNamespace::operator|(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "op_BitwiseOr", a, b));
}
// Autogenerated method: SongPackMask.op_BitwiseAnd
GlobalNamespace::SongPackMask GlobalNamespace::operator&(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>("", "SongPackMask", "op_BitwiseAnd", a, b));
}
// Autogenerated method: SongPackMask.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SongPackMask", "op_Equality", a, b));
}
// Autogenerated method: SongPackMask.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SongPackMask", "op_Inequality", a, b));
}
