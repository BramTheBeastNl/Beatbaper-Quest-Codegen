// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render
#include "GlobalNamespace/SteamVR_Render.hpp"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xD8A5F0
// Autogenerated static field getter
// Get static field: static private Valve.VR.EVREye <eye>k__BackingField
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_get_$eye$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("", "SteamVR_Render", "<eye>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.EVREye <eye>k__BackingField
void GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_set_$eye$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "<eye>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_Render _instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Render _instance
void GlobalNamespace::SteamVR_Render::_set__instance(GlobalNamespace::SteamVR_Render* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isQuitting
bool GlobalNamespace::SteamVR_Render::_get_isQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_get_isQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "isQuitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isQuitting
void GlobalNamespace::SteamVR_Render::_set_isQuitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_set_isQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "isQuitting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _pauseRendering
bool GlobalNamespace::SteamVR_Render::_get__pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_get__pauseRendering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "_pauseRendering"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _pauseRendering
void GlobalNamespace::SteamVR_Render::_set__pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("_set__pauseRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_pauseRendering", value));
}
// Autogenerated method: SteamVR_Render.get_eye
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::get_eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("get_eye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_eye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVREye, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_eye
void GlobalNamespace::SteamVR_Render::set_eye(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("set_eye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_eye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.get_instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Render*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDestroy
void GlobalNamespace::SteamVR_Render::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnApplicationQuit
void GlobalNamespace::SteamVR_Render::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Add
void GlobalNamespace::SteamVR_Render::Add(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("Add");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Remove
void GlobalNamespace::SteamVR_Render::Remove(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("Remove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Top
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("Top");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Top", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.AddInternal
void GlobalNamespace::SteamVR_Render::AddInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("AddInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.RemoveInternal
void GlobalNamespace::SteamVR_Render::RemoveInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("RemoveInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.TopInternal
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::TopInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("TopInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TopInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.get_pauseRendering
bool GlobalNamespace::SteamVR_Render::get_pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("get_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_pauseRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_pauseRendering
void GlobalNamespace::SteamVR_Render::set_pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("set_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_pauseRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.RenderLoop
System::Collections::IEnumerator* GlobalNamespace::SteamVR_Render::RenderLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("RenderLoop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderLoop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.RenderExternalCamera
void GlobalNamespace::SteamVR_Render::RenderExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("RenderExternalCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderExternalCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnInputFocus
void GlobalNamespace::SteamVR_Render::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hasFocus)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_Render.OnQuit
void GlobalNamespace::SteamVR_Render::OnQuit(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.GetScreenshotFilename
::Il2CppString* GlobalNamespace::SteamVR_Render::GetScreenshotFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("GetScreenshotFilename");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetScreenshotFilename", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, screenshotPropertyFilename)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, screenshotHandle, screenshotPropertyFilename);
}
// Autogenerated method: SteamVR_Render.OnRequestScreenshot
void GlobalNamespace::SteamVR_Render::OnRequestScreenshot(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnRequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnRequestScreenshot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.OnEnable
void GlobalNamespace::SteamVR_Render::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDisable
void GlobalNamespace::SteamVR_Render::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Awake
void GlobalNamespace::SteamVR_Render::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.UpdatePoses
void GlobalNamespace::SteamVR_Render::UpdatePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("UpdatePoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdatePoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnBeforeRender
void GlobalNamespace::SteamVR_Render::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Update
void GlobalNamespace::SteamVR_Render::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Render").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
