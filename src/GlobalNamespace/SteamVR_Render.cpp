// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render
#include "GlobalNamespace/SteamVR_Render.hpp"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Valve.VR.EVREye <eye>k__BackingField
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("", "SteamVR_Render", "<eye>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.EVREye <eye>k__BackingField
void GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField(Valve::VR::EVREye value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "<eye>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_Render _instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::_get__instance() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Render _instance
void GlobalNamespace::SteamVR_Render::_set__instance(GlobalNamespace::SteamVR_Render* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isQuitting
bool GlobalNamespace::SteamVR_Render::_get_isQuitting() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "isQuitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isQuitting
void GlobalNamespace::SteamVR_Render::_set_isQuitting(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "isQuitting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _pauseRendering
bool GlobalNamespace::SteamVR_Render::_get__pauseRendering() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "_pauseRendering"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _pauseRendering
void GlobalNamespace::SteamVR_Render::_set__pauseRendering(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_pauseRendering", value));
}
// Autogenerated method: SteamVR_Render.get_eye
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::get_eye() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVREye>("", "SteamVR_Render", "get_eye"));
}
// Autogenerated method: SteamVR_Render.set_eye
void GlobalNamespace::SteamVR_Render::set_eye(Valve::VR::EVREye value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Render", "set_eye", value));
}
// Autogenerated method: SteamVR_Render.get_instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::get_instance() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "get_instance"));
}
// Autogenerated method: SteamVR_Render.OnDestroy
void GlobalNamespace::SteamVR_Render::OnDestroy() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
}
// Autogenerated method: SteamVR_Render.OnApplicationQuit
void GlobalNamespace::SteamVR_Render::OnApplicationQuit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnApplicationQuit"));
}
// Autogenerated method: SteamVR_Render.Add
void GlobalNamespace::SteamVR_Render::Add(GlobalNamespace::SteamVR_Camera* vrcam) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Render", "Add", vrcam));
}
// Autogenerated method: SteamVR_Render.Remove
void GlobalNamespace::SteamVR_Render::Remove(GlobalNamespace::SteamVR_Camera* vrcam) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Render", "Remove", vrcam));
}
// Autogenerated method: SteamVR_Render.Top
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::Top() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Camera*>("", "SteamVR_Render", "Top"));
}
// Autogenerated method: SteamVR_Render.AddInternal
void GlobalNamespace::SteamVR_Render::AddInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddInternal", vrcam));
}
// Autogenerated method: SteamVR_Render.RemoveInternal
void GlobalNamespace::SteamVR_Render::RemoveInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveInternal", vrcam));
}
// Autogenerated method: SteamVR_Render.TopInternal
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::TopInternal() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Camera*>(this, "TopInternal"));
}
// Autogenerated method: SteamVR_Render.get_pauseRendering
bool GlobalNamespace::SteamVR_Render::get_pauseRendering() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR_Render", "get_pauseRendering"));
}
// Autogenerated method: SteamVR_Render.set_pauseRendering
void GlobalNamespace::SteamVR_Render::set_pauseRendering(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Render", "set_pauseRendering", value));
}
// Autogenerated method: SteamVR_Render.RenderLoop
System::Collections::IEnumerator* GlobalNamespace::SteamVR_Render::RenderLoop() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "RenderLoop"));
}
// Autogenerated method: SteamVR_Render.RenderExternalCamera
void GlobalNamespace::SteamVR_Render::RenderExternalCamera() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RenderExternalCamera"));
}
// Autogenerated method: SteamVR_Render.OnInputFocus
void GlobalNamespace::SteamVR_Render::OnInputFocus(bool hasFocus) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnInputFocus", hasFocus));
}
// Autogenerated method: SteamVR_Render.OnQuit
void GlobalNamespace::SteamVR_Render::OnQuit(Valve::VR::VREvent_t vrEvent) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnQuit", vrEvent));
}
// Autogenerated method: SteamVR_Render.GetScreenshotFilename
::Il2CppString* GlobalNamespace::SteamVR_Render::GetScreenshotFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetScreenshotFilename", screenshotHandle, screenshotPropertyFilename));
}
// Autogenerated method: SteamVR_Render.OnRequestScreenshot
void GlobalNamespace::SteamVR_Render::OnRequestScreenshot(Valve::VR::VREvent_t vrEvent) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnRequestScreenshot", vrEvent));
}
// Autogenerated method: SteamVR_Render.OnEnable
void GlobalNamespace::SteamVR_Render::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: SteamVR_Render.OnDisable
void GlobalNamespace::SteamVR_Render::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: SteamVR_Render.Awake
void GlobalNamespace::SteamVR_Render::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: SteamVR_Render.UpdatePoses
void GlobalNamespace::SteamVR_Render::UpdatePoses() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdatePoses"));
}
// Autogenerated method: SteamVR_Render.OnBeforeRender
void GlobalNamespace::SteamVR_Render::OnBeforeRender() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnBeforeRender"));
}
// Autogenerated method: SteamVR_Render.Update
void GlobalNamespace::SteamVR_Render::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update"));
}
// Autogenerated method: SteamVR_Render..ctor
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::New_ctor() {
  return (SteamVR_Render*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_Render"));
}
