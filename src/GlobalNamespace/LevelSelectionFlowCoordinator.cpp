// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: LevelSelectionNavigationController
#include "GlobalNamespace/LevelSelectionNavigationController.hpp"
// Including type: SearchFilterParamsViewController
#include "GlobalNamespace/SearchFilterParamsViewController.hpp"
// Including type: LevelSearchViewController
#include "GlobalNamespace/LevelSearchViewController.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelSelectionFlowCoordinator.get_isInRootViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_isInRootViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isInRootViewController"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedLevelCategory
GlobalNamespace::SelectLevelCategoryViewController::LevelCategory GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedLevelCategory() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>(this, "get_selectedLevelCategory"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedBeatmapLevelPack
GlobalNamespace::IBeatmapLevelPack* GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IBeatmapLevelPack*>(this, "get_selectedBeatmapLevelPack"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedDifficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IDifficultyBeatmap*>(this, "get_selectedDifficultyBeatmap"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialTopScreenViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ViewController*>(this, "get_initialTopScreenViewController"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialLeftScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialLeftScreenViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ViewController*>(this, "get_initialLeftScreenViewController"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialRightScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialRightScreenViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ViewController*>(this, "get_initialRightScreenViewController"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_showBackButtonForMainViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_showBackButtonForMainViewController"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_hidePacksIfOneOrNone
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_hidePacksIfOneOrNone"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_hidePracticeButton
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePracticeButton() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_hidePracticeButton"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_showPlayerStatsInDetailView"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_actionButtonText
::Il2CppString* GlobalNamespace::LevelSelectionFlowCoordinator::get_actionButtonText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_actionButtonText"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_mainTitle
::Il2CppString* GlobalNamespace::LevelSelectionFlowCoordinator::get_mainTitle() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_mainTitle"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_enableCustomLevels
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_enableCustomLevels() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableCustomLevels"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_songPackMask
GlobalNamespace::SongPackMask GlobalNamespace::LevelSelectionFlowCoordinator::get_songPackMask() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SongPackMask>(this, "get_songPackMask"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_allowedBeatmapDifficultyMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BeatmapDifficultyMask>(this, "get_allowedBeatmapDifficultyMask"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_notAllowedCharacteristics
::Array<GlobalNamespace::BeatmapCharacteristicSO*>* GlobalNamespace::LevelSelectionFlowCoordinator::get_notAllowedCharacteristics() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<GlobalNamespace::BeatmapCharacteristicSO*>*>(this, "get_notAllowedCharacteristics"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LevelSelectionFlowCoordinatorDidActivate", firstActivation, addedToHierarchy));
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LevelSelectionFlowCoordinatorDidDeactivate", removedFromHierarchy));
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorTopViewControllerWillChange
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LevelSelectionFlowCoordinatorTopViewControllerWillChange", oldViewController, newViewController, animationType));
}
// Autogenerated method: LevelSelectionFlowCoordinator.ActionButtonWasPressed
void GlobalNamespace::LevelSelectionFlowCoordinator::ActionButtonWasPressed() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ActionButtonWasPressed"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.PracticeButtonWasPressed
void GlobalNamespace::LevelSelectionFlowCoordinator::PracticeButtonWasPressed() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PracticeButtonWasPressed"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.SelectionDidChange
void GlobalNamespace::LevelSelectionFlowCoordinator::SelectionDidChange(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IDifficultyBeatmap* beatmap) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SelectionDidChange", pack, beatmap));
}
// Autogenerated method: LevelSelectionFlowCoordinator.Setup
void GlobalNamespace::LevelSelectionFlowCoordinator::Setup(GlobalNamespace::LevelSelectionFlowCoordinator::State* state) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Setup", state));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidSelectPack
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevelPack* pack) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSelectionNavigationControllerDidSelectPack", viewController, pack));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleSearchFilterParamsViewControllerDidFinish
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish(GlobalNamespace::SearchFilterParamsViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleSearchFilterParamsViewControllerDidFinish", viewController, levelFilterParams));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSearchViewControllerDidPressSearchButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton(GlobalNamespace::LevelSearchViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSearchViewControllerDidPressSearchButton", viewController, levelFilterParams));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidPressActionButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton(GlobalNamespace::LevelSelectionNavigationController* viewController) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSelectionNavigationControllerDidPressActionButton", viewController));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidPressPracticeButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevel* level) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSelectionNavigationControllerDidPressPracticeButton", viewController, level));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IDifficultyBeatmap* beatmap) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap", viewController, beatmap));
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::StandardLevelDetailViewController::ContentType contentType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent", viewController, contentType));
}
// Autogenerated method: LevelSelectionFlowCoordinator.Refresh
void GlobalNamespace::LevelSelectionFlowCoordinator::Refresh() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Refresh"));
}
// Autogenerated method: LevelSelectionFlowCoordinator.IsMainViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::IsMainViewController(HMUI::ViewController* viewController) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsMainViewController", viewController));
}
// Autogenerated method: LevelSelectionFlowCoordinator.PresentMainViewController
void GlobalNamespace::LevelSelectionFlowCoordinator::PresentMainViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PresentMainViewController", finishedCallback, animationType));
}
// Autogenerated method: LevelSelectionFlowCoordinator.DidActivate
void GlobalNamespace::LevelSelectionFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidActivate", firstActivation, addedToHierarchy, screenSystemEnabling));
}
// Autogenerated method: LevelSelectionFlowCoordinator.DidDeactivate
void GlobalNamespace::LevelSelectionFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidDeactivate", removedFromHierarchy, screenSystemDisabling));
}
// Autogenerated method: LevelSelectionFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::LevelSelectionFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TopViewControllerWillChange", oldViewController, newViewController, animationType));
}
// Autogenerated method: LevelSelectionFlowCoordinator..ctor
GlobalNamespace::LevelSelectionFlowCoordinator* GlobalNamespace::LevelSelectionFlowCoordinator::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<LevelSelectionFlowCoordinator*>());
}
