// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OnRenderImageTest
#include "GlobalNamespace/OnRenderImageTest.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OnRenderImageTest.Start
void GlobalNamespace::OnRenderImageTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OnRenderImageTest").WithContext("Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Start", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OnRenderImageTest.OnRenderImage
void GlobalNamespace::OnRenderImageTest::OnRenderImage(UnityEngine::RenderTexture* source, UnityEngine::RenderTexture* destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OnRenderImageTest").WithContext("OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "OnRenderImage", {}, ::il2cpp_utils::ExtractTypes(source, destination)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, destination);
}
// Autogenerated method: OnRenderImageTest..ctor
GlobalNamespace::OnRenderImageTest* GlobalNamespace::OnRenderImageTest::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OnRenderImageTest").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<OnRenderImageTest*>());
}
