// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerMockSettings
#include "GlobalNamespace/MultiplayerMockSettings.hpp"
// Including type: MultiplayerMockSettings/<get_mockServers>d__21
#include "GlobalNamespace/MultiplayerMockSettings_-get_mockServers-d__21.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MockPlayer
#include "GlobalNamespace/MockPlayer.hpp"
// Including type: MockServer
#include "GlobalNamespace/MockServer.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerMockSettings.get_localPlayer
GlobalNamespace::MockPlayer* GlobalNamespace::MultiplayerMockSettings::get_localPlayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MockPlayer*>(this, "get_localPlayer"));
}
// Autogenerated method: MultiplayerMockSettings.get_scoreGainAmount
float GlobalNamespace::MultiplayerMockSettings::get_scoreGainAmount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_scoreGainAmount"));
}
// Autogenerated method: MultiplayerMockSettings.get_scoreGainRepeatInterval
float GlobalNamespace::MultiplayerMockSettings::get_scoreGainRepeatInterval() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_scoreGainRepeatInterval"));
}
// Autogenerated method: MultiplayerMockSettings.get_scoreStartDelay
float GlobalNamespace::MultiplayerMockSettings::get_scoreStartDelay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_scoreStartDelay"));
}
// Autogenerated method: MultiplayerMockSettings.get_masterServerAvailabilityData
GlobalNamespace::MasterServerAvailabilityData* GlobalNamespace::MultiplayerMockSettings::get_masterServerAvailabilityData() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MasterServerAvailabilityData*>(this, "get_masterServerAvailabilityData"));
}
// Autogenerated method: MultiplayerMockSettings.get_otherPlayers
System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>* GlobalNamespace::MultiplayerMockSettings::get_otherPlayers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>*>(this, "get_otherPlayers"));
}
// Autogenerated method: MultiplayerMockSettings.get_mockServers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::MockServer*>* GlobalNamespace::MultiplayerMockSettings::get_mockServers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerable_1<GlobalNamespace::MockServer*>*>(this, "get_mockServers"));
}
// Autogenerated method: MultiplayerMockSettings.get_mockServer
GlobalNamespace::MockServer* GlobalNamespace::MultiplayerMockSettings::get_mockServer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MockServer*>(this, "get_mockServer"));
}
// Autogenerated method: MultiplayerMockSettings.add_partyCreatedEvent
void GlobalNamespace::MultiplayerMockSettings::add_partyCreatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_partyCreatedEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.remove_partyCreatedEvent
void GlobalNamespace::MultiplayerMockSettings::remove_partyCreatedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_partyCreatedEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.add_playerDidConnectEvent
void GlobalNamespace::MultiplayerMockSettings::add_playerDidConnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_playerDidConnectEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.remove_playerDidConnectEvent
void GlobalNamespace::MultiplayerMockSettings::remove_playerDidConnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_playerDidConnectEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.add_playerDidDisconnectEvent
void GlobalNamespace::MultiplayerMockSettings::add_playerDidDisconnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_playerDidDisconnectEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.remove_playerDidDisconnectEvent
void GlobalNamespace::MultiplayerMockSettings::remove_playerDidDisconnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_playerDidDisconnectEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.add_playerStateChangedEvent
void GlobalNamespace::MultiplayerMockSettings::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_playerStateChangedEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.remove_playerStateChangedEvent
void GlobalNamespace::MultiplayerMockSettings::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_playerStateChangedEvent", value));
}
// Autogenerated method: MultiplayerMockSettings.get_isEnabled
bool GlobalNamespace::MultiplayerMockSettings::get_isEnabled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isEnabled"));
}
// Autogenerated method: MultiplayerMockSettings.set_isEnabled
void GlobalNamespace::MultiplayerMockSettings::set_isEnabled(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isEnabled", value));
}
// Autogenerated method: MultiplayerMockSettings.CreateParty
void GlobalNamespace::MultiplayerMockSettings::CreateParty() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CreateParty"));
}
// Autogenerated method: MultiplayerMockSettings.ConnectPlayer
void GlobalNamespace::MultiplayerMockSettings::ConnectPlayer(GlobalNamespace::MockPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ConnectPlayer", player));
}
// Autogenerated method: MultiplayerMockSettings.DisconnectPlayer
void GlobalNamespace::MultiplayerMockSettings::DisconnectPlayer(GlobalNamespace::MockPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectPlayer", player));
}
// Autogenerated method: MultiplayerMockSettings.ReportPlayerStateChanged
void GlobalNamespace::MultiplayerMockSettings::ReportPlayerStateChanged(GlobalNamespace::MockPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReportPlayerStateChanged", player));
}
// Autogenerated method: MultiplayerMockSettings.FailPlayer
void GlobalNamespace::MultiplayerMockSettings::FailPlayer(GlobalNamespace::MockPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FailPlayer", player));
}
// Autogenerated method: MultiplayerMockSettings.SharedSettings
GlobalNamespace::MultiplayerMockSettings* GlobalNamespace::MultiplayerMockSettings::SharedSettings() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerMockSettings*>("", "MultiplayerMockSettings", "SharedSettings"));
}
// Autogenerated method: MultiplayerMockSettings..ctor
GlobalNamespace::MultiplayerMockSettings* GlobalNamespace::MultiplayerMockSettings::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<MultiplayerMockSettings*>());
}
