// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass4_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass4_0.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass8_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass8_0.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: PacketEncryptionLayer/EncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.get_isEmpty
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isEmpty"));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.GetSortedEncryptionStates
::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates(int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>*>(this, "GetSortedEncryptionStates", port));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.TryGetEncryptionState
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState*& encryptionState) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryGetEncryptionState", port, encryptionState));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Add
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Add(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState* encryptionState) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Add", port, encryptionState));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", port));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState* encryptionState) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", port, encryptionState));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Dispose
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::System_IDisposable_Dispose() {
  GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose();
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList..ctor
GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<PacketEncryptionLayer::PendingEncryptionStateList*>());
}
