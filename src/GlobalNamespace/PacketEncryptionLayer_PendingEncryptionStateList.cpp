// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass4_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass4_0.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass8_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass8_0.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: PacketEncryptionLayer/EncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.get_isEmpty
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.GetSortedEncryptionStates
::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("GetSortedEncryptionStates");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSortedEncryptionStates", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(port)));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>*, false>(this, ___internal__method, port);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.TryGetEncryptionState
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState*& encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("TryGetEncryptionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryGetEncryptionState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(port, encryptionState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port, encryptionState);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Add
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Add(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState* encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("Add");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(port, encryptionState)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, port, encryptionState);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("Remove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(port)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port, GlobalNamespace::PacketEncryptionLayer::EncryptionState* encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("Remove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(port, encryptionState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port, encryptionState);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Dispose
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("PendingEncryptionStateList").WithContext("Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::System_IDisposable_Dispose() {
  GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose();
}
