// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OpenVRHelper
#include "GlobalNamespace/OpenVRHelper.hpp"
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMicroSecondsInSecond
float GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_get_kMicroSecondsInSecond");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kMicroSecondsInSecond"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMicroSecondsInSecond
void GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond(float value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_set_kMicroSecondsInSecond");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMicroSecondsInSecond", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kUpdateInterval
int GlobalNamespace::OpenVRHelper::_get_kUpdateInterval() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kUpdateInterval
void GlobalNamespace::OpenVRHelper::_set_kUpdateInterval(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateInterval", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDurationMs
int GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_get_kMaxDurationMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kMaxDurationMs"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDurationMs
void GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_set_kMaxDurationMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMaxDurationMs", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kUpdateIntervalSeconds
float GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_get_kUpdateIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kUpdateIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kUpdateIntervalSeconds
void GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds(float value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("_set_kUpdateIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateIntervalSeconds", value));
}
// Autogenerated method: OpenVRHelper.get_vrControllerManufacturerName
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("get_vrControllerManufacturerName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_vrControllerManufacturerName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.Awake
void GlobalNamespace::OpenVRHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.Update
void GlobalNamespace::OpenVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.LateUpdate
void GlobalNamespace::OpenVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnDestroy
void GlobalNamespace::OpenVRHelper::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.DisableEventSystem
void GlobalNamespace::OpenVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.EnableEventSystem
void GlobalNamespace::OpenVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnBeforeRender
void GlobalNamespace::OpenVRHelper::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_inputFocusWasCapturedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_inputFocusWasCapturedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_inputFocusWasReleasedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_inputFocusWasReleasedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_hmdUnmountedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_hmdUnmountedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_hmdMountedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_hmdMountedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_joystickWasCenteredThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_joystickWasCenteredThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("add_joystickWasNotCenteredThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("remove_joystickWasNotCenteredThisFrameEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OpenVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("get_isAlwaysWireless");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::OpenVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("get_vrPlatformSDK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("get_currentXRDeviceModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.TriggerHapticPulse
void GlobalNamespace::OpenVRHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, duration, strength, frequency)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OpenVRHelper.StopHaptics
void GlobalNamespace::OpenVRHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("StopHaptics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OpenVRHelper.AdjustControllerTransform
void GlobalNamespace::OpenVRHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("AdjustControllerTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, transform, position, rotation)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OpenVRHelper.GetNodePose
bool GlobalNamespace::OpenVRHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OpenVRHelper").WithContext("GetNodePose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeType, idx, pos, rot)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
