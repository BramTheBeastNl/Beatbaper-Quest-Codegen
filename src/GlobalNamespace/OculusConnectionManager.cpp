// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusConnectionManager
#include "GlobalNamespace/OculusConnectionManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: OculusConnectionManager/OculusConnection
#include "GlobalNamespace/OculusConnectionManager_OculusConnection.hpp"
// Including type: OculusConnectionManager/StartServerParams
#include "GlobalNamespace/OculusConnectionManager_StartServerParams.hpp"
// Including type: OculusConnectionManager/ConnectToServerParams
#include "GlobalNamespace/OculusConnectionManager_ConnectToServerParams.hpp"
// Including type: OculusConnectionManager/<HandlePeerConnectionRequest>d__62
#include "GlobalNamespace/OculusConnectionManager_-HandlePeerConnectionRequest-d__62.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.NetworkingPeer
#include "Oculus/Platform/Models/NetworkingPeer.hpp"
// Including type: Oculus.Platform.SendPolicy
#include "Oculus/Platform/SendPolicy.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPingFrequency
float GlobalNamespace::OculusConnectionManager::_get_kPingFrequency() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OculusConnectionManager", "kPingFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPingFrequency
void GlobalNamespace::OculusConnectionManager::_set_kPingFrequency(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusConnectionManager", "kPingFrequency", value));
}
// Autogenerated method: OculusConnectionManager.set_isDisconnecting
void GlobalNamespace::OculusConnectionManager::set_isDisconnecting(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isDisconnecting", value));
}
// Autogenerated method: OculusConnectionManager.get_isServer
bool GlobalNamespace::OculusConnectionManager::get_isServer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isServer"));
}
// Autogenerated method: OculusConnectionManager.get_isClient
bool GlobalNamespace::OculusConnectionManager::get_isClient() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isClient"));
}
// Autogenerated method: OculusConnectionManager.DisconnectInternal
void GlobalNamespace::OculusConnectionManager::DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectInternal", disconnectedReason, connectionFailedReason));
}
// Autogenerated method: OculusConnectionManager.HandlePeerConnectionRequest
void GlobalNamespace::OculusConnectionManager::HandlePeerConnectionRequest(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandlePeerConnectionRequest", message));
}
// Autogenerated method: OculusConnectionManager.HandleConnectionStateChanged
void GlobalNamespace::OculusConnectionManager::HandleConnectionStateChanged(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleConnectionStateChanged", message));
}
// Autogenerated method: OculusConnectionManager.GetConnection
GlobalNamespace::OculusConnectionManager::OculusConnection* GlobalNamespace::OculusConnectionManager::GetConnection(uint64_t user) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::OculusConnectionManager::OculusConnection*>(this, "GetConnection", user));
}
// Autogenerated method: OculusConnectionManager.RemoveConnection
void GlobalNamespace::OculusConnectionManager::RemoveConnection(uint64_t id, GlobalNamespace::DisconnectedReason reason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveConnection", id, reason));
}
// Autogenerated method: OculusConnectionManager.AcquireBuffer
::Array<uint8_t>* GlobalNamespace::OculusConnectionManager::AcquireBuffer(int size) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "AcquireBuffer", size));
}
// Autogenerated method: OculusConnectionManager.ReleaseBuffer
void GlobalNamespace::OculusConnectionManager::ReleaseBuffer(::Array<uint8_t>* buffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReleaseBuffer", buffer));
}
// Autogenerated method: OculusConnectionManager.DeliveryMethodToSendPolicy
Oculus::Platform::SendPolicy GlobalNamespace::OculusConnectionManager::DeliveryMethodToSendPolicy(LiteNetLib::DeliveryMethod deliveryMethod) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Oculus::Platform::SendPolicy>("", "OculusConnectionManager", "DeliveryMethodToSendPolicy", deliveryMethod));
}
// Autogenerated method: OculusConnectionManager.SendPolicyToDeliveryMethod
LiteNetLib::DeliveryMethod GlobalNamespace::OculusConnectionManager::SendPolicyToDeliveryMethod(Oculus::Platform::SendPolicy sendPolicy) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::DeliveryMethod>("", "OculusConnectionManager", "SendPolicyToDeliveryMethod", sendPolicy));
}
// Autogenerated method: OculusConnectionManager.VoidHandler
void GlobalNamespace::OculusConnectionManager::VoidHandler(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "OculusConnectionManager", "VoidHandler", message));
}
// Autogenerated method: OculusConnectionManager.<PollUpdate>b__56_0
void GlobalNamespace::OculusConnectionManager::$PollUpdate$b__56_0(GlobalNamespace::OculusConnectionManager::OculusConnection* connection, float latency) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "<PollUpdate>b__56_0", connection, latency));
}
// Autogenerated method: OculusConnectionManager.add_onConnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onConnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onDisconnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onDisconnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionFailedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionFailedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionConnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionConnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionDisconnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionDisconnectedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::OculusConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onLatencyUpdatedEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::OculusConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onLatencyUpdatedEvent", value));
}
// Autogenerated method: OculusConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::OculusConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onReceivedDataEvent", value));
}
// Autogenerated method: OculusConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::OculusConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onReceivedDataEvent", value));
}
// Autogenerated method: OculusConnectionManager.get_userId
::Il2CppString* GlobalNamespace::OculusConnectionManager::get_userId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userId"));
}
// Autogenerated method: OculusConnectionManager.get_userName
::Il2CppString* GlobalNamespace::OculusConnectionManager::get_userName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userName"));
}
// Autogenerated method: OculusConnectionManager.get_isConnected
bool GlobalNamespace::OculusConnectionManager::get_isConnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnected"));
}
// Autogenerated method: OculusConnectionManager.get_isConnecting
bool GlobalNamespace::OculusConnectionManager::get_isConnecting() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnecting"));
}
// Autogenerated method: OculusConnectionManager.get_isDisconnecting
bool GlobalNamespace::OculusConnectionManager::get_isDisconnecting() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isDisconnecting"));
}
// Autogenerated method: OculusConnectionManager.get_isDisposed
bool GlobalNamespace::OculusConnectionManager::get_isDisposed() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isDisposed"));
}
// Autogenerated method: OculusConnectionManager.get_isConnectionOwner
bool GlobalNamespace::OculusConnectionManager::get_isConnectionOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnectionOwner"));
}
// Autogenerated method: OculusConnectionManager.get_connectionCount
int GlobalNamespace::OculusConnectionManager::get_connectionCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_connectionCount"));
}
// Autogenerated method: OculusConnectionManager.SendToAll
void GlobalNamespace::OculusConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, deliveryMethod));
}
// Autogenerated method: OculusConnectionManager.SendToAll
void GlobalNamespace::OculusConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, deliveryMethod, excludingConnection));
}
// Autogenerated method: OculusConnectionManager.PollUpdate
void GlobalNamespace::OculusConnectionManager::PollUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PollUpdate"));
}
// Autogenerated method: OculusConnectionManager.Disconnect
void GlobalNamespace::OculusConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect", disconnectedReason));
}
// Autogenerated method: OculusConnectionManager.Dispose
void GlobalNamespace::OculusConnectionManager::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void GlobalNamespace::OculusConnectionManager::System_IDisposable_Dispose() {
  GlobalNamespace::OculusConnectionManager::Dispose();
}
// Autogenerated method: OculusConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::OculusConnectionManager::GetConnection(int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IConnection*>(this, "GetConnection", index));
}
// Autogenerated method: OculusConnectionManager..ctor
GlobalNamespace::OculusConnectionManager* GlobalNamespace::OculusConnectionManager::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<OculusConnectionManager*>());
}
