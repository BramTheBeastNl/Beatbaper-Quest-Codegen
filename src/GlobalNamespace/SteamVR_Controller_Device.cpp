// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Controller/Device.get_index
uint GlobalNamespace::SteamVR_Controller::Device::get_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_index");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_index", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_index
void GlobalNamespace::SteamVR_Controller::Device::set_index(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("set_index");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_index", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_valid
bool GlobalNamespace::SteamVR_Controller::Device::get_valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_valid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_valid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_valid
void GlobalNamespace::SteamVR_Controller::Device::set_valid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("set_valid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_valid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_connected
bool GlobalNamespace::SteamVR_Controller::Device::get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_connected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_connected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_hasTracking
bool GlobalNamespace::SteamVR_Controller::Device::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_outOfRange
bool GlobalNamespace::SteamVR_Controller::Device::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_outOfRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_calibrating
bool GlobalNamespace::SteamVR_Controller::Device::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_calibrating");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_calibrating", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_uninitialized
bool GlobalNamespace::SteamVR_Controller::Device::get_uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_uninitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_uninitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Controller::Device::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_velocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPrevState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetPrevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPrevState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPrevState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_Controller::Device::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.Update
void GlobalNamespace::SteamVR_Controller::Device::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPressDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPressUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPressDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetPressUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetAxis
UnityEngine::Vector2 GlobalNamespace::SteamVR_Controller::Device::GetAxis(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.TriggerHapticPulse
void GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse(uint16_t durationMicroSec, Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(durationMicroSec, buttonId)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, durationMicroSec, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.UpdateHairTrigger
void GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("UpdateHairTrigger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateHairTrigger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTrigger
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetHairTrigger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTrigger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerDown
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetHairTriggerDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTriggerDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerUp
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Device").WithContext("GetHairTriggerUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTriggerUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
