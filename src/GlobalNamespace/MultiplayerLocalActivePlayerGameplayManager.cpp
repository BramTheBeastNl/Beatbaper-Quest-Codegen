// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLocalActivePlayerGameplayManager
#include "GlobalNamespace/MultiplayerLocalActivePlayerGameplayManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IMultiplayerLevelEndActionsListener
#include "GlobalNamespace/IMultiplayerLevelEndActionsListener.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: MultiplayerLocalActivePlayerInGameMenuController
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuController.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: MultiplayerLocalPlayerDisconnectHelper
#include "GlobalNamespace/MultiplayerLocalPlayerDisconnectHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.Start
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.OnDisable
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.PerformPlayerFail
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::PerformPlayerFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("PerformPlayerFail");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PerformPlayerFail", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInGameMenuControllerDidGiveUp
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerDidGiveUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleInGameMenuControllerDidGiveUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleInGameMenuControllerDidGiveUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInGameMenuControllerRequestsDisconnect
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInGameMenuControllerRequestsDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleInGameMenuControllerRequestsDisconnect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleInGameMenuControllerRequestsDisconnect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleSongDidFinish
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleLevelEndedEarly
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleLevelEndedEarly(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleLevelEndedEarly");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleLevelEndedEarly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(userId)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleHmdUnmounted
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleHmdUnmounted() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleHmdUnmounted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleHmdUnmounted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.HandleInputFocusWasCaptured
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::HandleInputFocusWasCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("HandleInputFocusWasCaptured");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleInputFocusWasCaptured", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerGameplayManager.OnApplicationFocus
void GlobalNamespace::MultiplayerLocalActivePlayerGameplayManager::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MultiplayerLocalActivePlayerGameplayManager").WithContext("OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hasFocus)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
