// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: MultiplayerScoreProvider/<>c
#include "GlobalNamespace/MultiplayerScoreProvider_--c.hpp"
// Including type: MultiplayerScoreProvider/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerScoreProvider_--c__DisplayClass18_0.hpp"
// Including type: IScoreSyncStateManager
#include "GlobalNamespace/IScoreSyncStateManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerScoreProvider.get_scoresAvailable
bool GlobalNamespace::MultiplayerScoreProvider::get_scoresAvailable() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_scoresAvailable"));
}
// Autogenerated method: MultiplayerScoreProvider.get_firstPlayer
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* GlobalNamespace::MultiplayerScoreProvider::get_firstPlayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>(this, "get_firstPlayer"));
}
// Autogenerated method: MultiplayerScoreProvider.set_firstPlayer
void GlobalNamespace::MultiplayerScoreProvider::set_firstPlayer(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_firstPlayer", value));
}
// Autogenerated method: MultiplayerScoreProvider.add_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::add_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_firstPlayerDidChangeEvent", value));
}
// Autogenerated method: MultiplayerScoreProvider.remove_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::remove_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_firstPlayerDidChangeEvent", value));
}
// Autogenerated method: MultiplayerScoreProvider.get_rankedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* GlobalNamespace::MultiplayerScoreProvider::get_rankedPlayers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*>(this, "get_rankedPlayers"));
}
// Autogenerated method: MultiplayerScoreProvider.Update
void GlobalNamespace::MultiplayerScoreProvider::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update"));
}
// Autogenerated method: MultiplayerScoreProvider.TryGetScore
bool GlobalNamespace::MultiplayerScoreProvider::TryGetScore(::Il2CppString* userId, GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*& data) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryGetScore", userId, data));
}
// Autogenerated method: MultiplayerScoreProvider.GetPositionOfPlayer
int GlobalNamespace::MultiplayerScoreProvider::GetPositionOfPlayer(::Il2CppString* userId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetPositionOfPlayer", userId));
}
// Autogenerated method: MultiplayerScoreProvider..ctor
GlobalNamespace::MultiplayerScoreProvider* GlobalNamespace::MultiplayerScoreProvider::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<MultiplayerScoreProvider*>());
}
