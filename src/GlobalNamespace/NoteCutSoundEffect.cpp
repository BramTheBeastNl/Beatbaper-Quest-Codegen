// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutSoundEffect
#include "GlobalNamespace/NoteCutSoundEffect.hpp"
// Including type: NoteCutSoundEffect/Pool
#include "GlobalNamespace/NoteCutSoundEffect_Pool.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kEndOverlap
float GlobalNamespace::NoteCutSoundEffect::_get_kEndOverlap() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffect", "kEndOverlap"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kEndOverlap
void GlobalNamespace::NoteCutSoundEffect::_set_kEndOverlap(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffect", "kEndOverlap", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kEndFadeLength
float GlobalNamespace::NoteCutSoundEffect::_get_kEndFadeLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffect", "kEndFadeLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kEndFadeLength
void GlobalNamespace::NoteCutSoundEffect::_set_kEndFadeLength(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffect", "kEndFadeLength", value));
}
// Autogenerated method: NoteCutSoundEffect.add_didFinishEvent
void GlobalNamespace::NoteCutSoundEffect::add_didFinishEvent(System::Action_1<GlobalNamespace::NoteCutSoundEffect*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didFinishEvent", value));
}
// Autogenerated method: NoteCutSoundEffect.remove_didFinishEvent
void GlobalNamespace::NoteCutSoundEffect::remove_didFinishEvent(System::Action_1<GlobalNamespace::NoteCutSoundEffect*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didFinishEvent", value));
}
// Autogenerated method: NoteCutSoundEffect.set_volumeMultiplier
void GlobalNamespace::NoteCutSoundEffect::set_volumeMultiplier(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_volumeMultiplier", value));
}
// Autogenerated method: NoteCutSoundEffect.get_volumeMultiplier
float GlobalNamespace::NoteCutSoundEffect::get_volumeMultiplier() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_volumeMultiplier"));
}
// Autogenerated method: NoteCutSoundEffect.get_time
float GlobalNamespace::NoteCutSoundEffect::get_time() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_time"));
}
// Autogenerated method: NoteCutSoundEffect.Awake
void GlobalNamespace::NoteCutSoundEffect::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: NoteCutSoundEffect.Start
void GlobalNamespace::NoteCutSoundEffect::Start() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Start"));
}
// Autogenerated method: NoteCutSoundEffect.Init
void GlobalNamespace::NoteCutSoundEffect::Init(UnityEngine::AudioClip* audioClip, GlobalNamespace::NoteController* noteController, double noteDSPTime, float aheadTime, float missedTimeOffset, float timeToPrevNote, float timeToNextNote, GlobalNamespace::Saber* saber, bool handleWrongSaberTypeAsGood, float volumeMultiplier, bool ignoreSaberSpeed, bool ignoreBadCuts) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", audioClip, noteController, noteDSPTime, aheadTime, missedTimeOffset, timeToPrevNote, timeToNextNote, saber, handleWrongSaberTypeAsGood, volumeMultiplier, ignoreSaberSpeed, ignoreBadCuts));
}
// Autogenerated method: NoteCutSoundEffect.ComputeDSPTimes
void GlobalNamespace::NoteCutSoundEffect::ComputeDSPTimes(double noteDSPTime, float aheadTime, float timeToPrevNote, float timeToNextNote) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ComputeDSPTimes", noteDSPTime, aheadTime, timeToPrevNote, timeToNextNote));
}
// Autogenerated method: NoteCutSoundEffect.LateUpdate
void GlobalNamespace::NoteCutSoundEffect::LateUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LateUpdate"));
}
// Autogenerated method: NoteCutSoundEffect.StopPlayingAndFinish
void GlobalNamespace::NoteCutSoundEffect::StopPlayingAndFinish() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StopPlayingAndFinish"));
}
// Autogenerated method: NoteCutSoundEffect.PausePlaying
void GlobalNamespace::NoteCutSoundEffect::PausePlaying() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PausePlaying"));
}
// Autogenerated method: NoteCutSoundEffect.ResumePlaying
void GlobalNamespace::NoteCutSoundEffect::ResumePlaying(double noteDSPTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResumePlaying", noteDSPTime));
}
// Autogenerated method: NoteCutSoundEffect.NoteWasCut
void GlobalNamespace::NoteCutSoundEffect::NoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "NoteWasCut", noteController, noteCutInfo));
}
// Autogenerated method: NoteCutSoundEffect..ctor
GlobalNamespace::NoteCutSoundEffect* GlobalNamespace::NoteCutSoundEffect::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<NoteCutSoundEffect*>());
}
