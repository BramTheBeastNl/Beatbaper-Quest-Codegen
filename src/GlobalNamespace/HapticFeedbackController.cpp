// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: HapticFeedbackController/ContinousRumbleParams
#include "GlobalNamespace/HapticFeedbackController_ContinousRumbleParams.hpp"
// Including type: HapticFeedbackController/<OneShotRumbleCoroutine>d__12
#include "GlobalNamespace/HapticFeedbackController_-OneShotRumbleCoroutine-d__12.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: VRPlatformHelper
#include "GlobalNamespace/VRPlatformHelper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuesRumbleImpulseStrength
float GlobalNamespace::HapticFeedbackController::_get_kContinuesRumbleImpulseStrength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuesRumbleImpulseStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuesRumbleImpulseStrength
void GlobalNamespace::HapticFeedbackController::_set_kContinuesRumbleImpulseStrength(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuesRumbleImpulseStrength", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kContinuesRumbleIntervalTime
float GlobalNamespace::HapticFeedbackController::_get_kContinuesRumbleIntervalTime() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuesRumbleIntervalTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuesRumbleIntervalTime
void GlobalNamespace::HapticFeedbackController::_set_kContinuesRumbleIntervalTime(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuesRumbleIntervalTime", value));
}
// Autogenerated method: HapticFeedbackController.Awake
void GlobalNamespace::HapticFeedbackController::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: HapticFeedbackController.LateUpdate
void GlobalNamespace::HapticFeedbackController::LateUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LateUpdate"));
}
// Autogenerated method: HapticFeedbackController.ContinuousRumble
void GlobalNamespace::HapticFeedbackController::ContinuousRumble(UnityEngine::XR::XRNode node) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ContinuousRumble", node));
}
// Autogenerated method: HapticFeedbackController.HitNote
void GlobalNamespace::HapticFeedbackController::HitNote(UnityEngine::XR::XRNode node) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HitNote", node));
}
// Autogenerated method: HapticFeedbackController.Rumble
void GlobalNamespace::HapticFeedbackController::Rumble(UnityEngine::XR::XRNode node, float duration, float impulseStrength, float intervalDuration) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Rumble", node, duration, impulseStrength, intervalDuration));
}
// Autogenerated method: HapticFeedbackController.OneShotRumbleCoroutine
System::Collections::IEnumerator* GlobalNamespace::HapticFeedbackController::OneShotRumbleCoroutine(UnityEngine::XR::XRNode node, float duration, float impulseStrength, float intervalDuration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "OneShotRumbleCoroutine", node, duration, impulseStrength, intervalDuration));
}
// Autogenerated method: HapticFeedbackController..ctor
GlobalNamespace::HapticFeedbackController* GlobalNamespace::HapticFeedbackController::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<HapticFeedbackController*>());
}
