// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuousRumbleFrameDuration
float GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("_get_kContinuousRumbleFrameDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuousRumbleFrameDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuousRumbleFrameDuration
void GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("_set_kContinuousRumbleFrameDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuousRumbleFrameDuration", value));
}
// Autogenerated method: HapticFeedbackController.get_continuousRumblePreset
Libraries::HM::HMLib::VR::HapticPresetSO* GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("get_continuousRumblePreset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_continuousRumblePreset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Libraries::HM::HMLib::VR::HapticPresetSO*, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.Awake
void GlobalNamespace::HapticFeedbackController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.PlayHapticFeedback
void GlobalNamespace::HapticFeedbackController::PlayHapticFeedback(UnityEngine::XR::XRNode node, Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("PlayHapticFeedback");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PlayHapticFeedback", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, hapticPreset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, hapticPreset);
}
// Autogenerated method: HapticFeedbackController.Update
void GlobalNamespace::HapticFeedbackController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.UpdateRumbles
void GlobalNamespace::HapticFeedbackController::UpdateRumbles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("UpdateRumbles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateRumbles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.GetRumble
GlobalNamespace::HapticFeedbackController::RumbleData* GlobalNamespace::HapticFeedbackController::GetRumble(UnityEngine::XR::XRNode node, ::Il2CppObject* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HapticFeedbackController").WithContext("GetRumble");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRumble", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, preset)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HapticFeedbackController::RumbleData*, false>(this, ___internal__method, node, preset);
}
