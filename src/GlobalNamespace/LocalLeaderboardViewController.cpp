// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalLeaderboardViewController
#include "GlobalNamespace/LocalLeaderboardViewController.hpp"
// Including type: LocalLeaderboardsModel
#include "GlobalNamespace/LocalLeaderboardsModel.hpp"
// Including type: LocalLeaderboardTableView
#include "GlobalNamespace/LocalLeaderboardTableView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: HMUI.NoTransitionsButton
#include "HMUI/NoTransitionsButton.hpp"
// Including type: HMUI.IconSegmentedControl
#include "HMUI/IconSegmentedControl.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: HMUI.SegmentedControl
#include "HMUI/SegmentedControl.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private LocalLeaderboardsModel/LeaderboardType _leaderboardType
GlobalNamespace::LocalLeaderboardsModel::LeaderboardType GlobalNamespace::LocalLeaderboardViewController::_get__leaderboardType() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalLeaderboardsModel::LeaderboardType>("", "LocalLeaderboardViewController", "_leaderboardType"));
}
// Autogenerated static field setter
// Set static field: static private LocalLeaderboardsModel/LeaderboardType _leaderboardType
void GlobalNamespace::LocalLeaderboardViewController::_set__leaderboardType(GlobalNamespace::LocalLeaderboardsModel::LeaderboardType value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalLeaderboardViewController", "_leaderboardType", value));
}
// Autogenerated method: LocalLeaderboardViewController.get_leaderboardsModel
GlobalNamespace::LocalLeaderboardsModel* GlobalNamespace::LocalLeaderboardViewController::get_leaderboardsModel() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::LocalLeaderboardsModel*>(this, "get_leaderboardsModel"));
}
// Autogenerated method: LocalLeaderboardViewController.Setup
void GlobalNamespace::LocalLeaderboardViewController::Setup(bool enableClear) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Setup", enableClear));
}
// Autogenerated method: LocalLeaderboardViewController.RefreshScopeSegmentedControl
void GlobalNamespace::LocalLeaderboardViewController::RefreshScopeSegmentedControl() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RefreshScopeSegmentedControl"));
}
// Autogenerated method: LocalLeaderboardViewController.HandleScopeSegmentedControlDidSelectCell
void GlobalNamespace::LocalLeaderboardViewController::HandleScopeSegmentedControlDidSelectCell(HMUI::SegmentedControl* segmentedControl, int cellNumber) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleScopeSegmentedControlDidSelectCell", segmentedControl, cellNumber));
}
// Autogenerated method: LocalLeaderboardViewController.ClearLeaderboards
void GlobalNamespace::LocalLeaderboardViewController::ClearLeaderboards() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearLeaderboards"));
}
// Autogenerated method: LocalLeaderboardViewController.SetContent
void GlobalNamespace::LocalLeaderboardViewController::SetContent(::Il2CppString* leaderboardID, GlobalNamespace::LocalLeaderboardsModel::LeaderboardType leaderboardType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetContent", leaderboardID, leaderboardType));
}
// Autogenerated method: LocalLeaderboardViewController.HandleNewScoreWasAddedToLeaderboard
void GlobalNamespace::LocalLeaderboardViewController::HandleNewScoreWasAddedToLeaderboard(::Il2CppString* leaderboardID, GlobalNamespace::LocalLeaderboardsModel::LeaderboardType leaderboardType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleNewScoreWasAddedToLeaderboard", leaderboardID, leaderboardType));
}
// Autogenerated method: LocalLeaderboardViewController.Refresh
void GlobalNamespace::LocalLeaderboardViewController::Refresh() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Refresh"));
}
// Autogenerated method: LocalLeaderboardViewController.<DidActivate>b__18_0
void GlobalNamespace::LocalLeaderboardViewController::$DidActivate$b__18_0() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "<DidActivate>b__18_0"));
}
// Autogenerated method: LocalLeaderboardViewController.SetData
void GlobalNamespace::LocalLeaderboardViewController::SetData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetData", difficultyBeatmap));
}
// Autogenerated method: LocalLeaderboardViewController.DidActivate
void GlobalNamespace::LocalLeaderboardViewController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidActivate", firstActivation, addedToHierarchy, screenSystemEnabling));
}
// Autogenerated method: LocalLeaderboardViewController.DidDeactivate
void GlobalNamespace::LocalLeaderboardViewController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidDeactivate", removedFromHierarchy, screenSystemDisabling));
}
// Autogenerated method: LocalLeaderboardViewController.OnDestroy
void GlobalNamespace::LocalLeaderboardViewController::OnDestroy() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
}
// Autogenerated method: LocalLeaderboardViewController..ctor
GlobalNamespace::LocalLeaderboardViewController* GlobalNamespace::LocalLeaderboardViewController::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<LocalLeaderboardViewController*>());
}
// Autogenerated method: LocalLeaderboardViewController..cctor
void GlobalNamespace::LocalLeaderboardViewController::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "LocalLeaderboardViewController", ".cctor"));
}
