// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimeExtensions
#include "GlobalNamespace/TimeExtensions.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TimeExtensions.MinSecDurationText
::Il2CppString* GlobalNamespace::TimeExtensions::MinSecDurationText(float duration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>("", "TimeExtensions", "MinSecDurationText", duration));
}
// Autogenerated method: TimeExtensions.MinSecMillisecDurationText
::Il2CppString* GlobalNamespace::TimeExtensions::MinSecMillisecDurationText(float duration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>("", "TimeExtensions", "MinSecMillisecDurationText", duration));
}
// Autogenerated method: TimeExtensions.SecondsToDays
int GlobalNamespace::TimeExtensions::SecondsToDays(int time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "SecondsToDays", time));
}
// Autogenerated method: TimeExtensions.SecondsToHours
int GlobalNamespace::TimeExtensions::SecondsToHours(int time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "SecondsToHours", time));
}
// Autogenerated method: TimeExtensions.SecondsToMinutes
int GlobalNamespace::TimeExtensions::SecondsToMinutes(int time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "SecondsToMinutes", time));
}
// Autogenerated method: TimeExtensions.DaysToSeconds
int GlobalNamespace::TimeExtensions::DaysToSeconds(int days) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "DaysToSeconds", days));
}
// Autogenerated method: TimeExtensions.HoursToSeconds
int GlobalNamespace::TimeExtensions::HoursToSeconds(int hours) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "HoursToSeconds", hours));
}
// Autogenerated method: TimeExtensions.MinutesToSeconds
int GlobalNamespace::TimeExtensions::MinutesToSeconds(int minutes) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "MinutesToSeconds", minutes));
}
// Autogenerated method: TimeExtensions.Hours
int GlobalNamespace::TimeExtensions::Hours(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "Hours", time));
}
// Autogenerated method: TimeExtensions.Minutes
int GlobalNamespace::TimeExtensions::Minutes(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "Minutes", time));
}
// Autogenerated method: TimeExtensions.Seconds
int GlobalNamespace::TimeExtensions::Seconds(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "Seconds", time));
}
// Autogenerated method: TimeExtensions.Milliseconds
int GlobalNamespace::TimeExtensions::Milliseconds(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "Milliseconds", time));
}
// Autogenerated method: TimeExtensions.TotalDays
int GlobalNamespace::TimeExtensions::TotalDays(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "TotalDays", time));
}
// Autogenerated method: TimeExtensions.TotalHours
int GlobalNamespace::TimeExtensions::TotalHours(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "TotalHours", time));
}
// Autogenerated method: TimeExtensions.TotalMinutes
int GlobalNamespace::TimeExtensions::TotalMinutes(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "TotalMinutes", time));
}
// Autogenerated method: TimeExtensions.TotalSeconds
int GlobalNamespace::TimeExtensions::TotalSeconds(float time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "TimeExtensions", "TotalSeconds", time));
}
// Autogenerated method: TimeExtensions.ToUnixTime
int64_t GlobalNamespace::TimeExtensions::ToUnixTime(System::DateTime dateTime) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>("", "TimeExtensions", "ToUnixTime", dateTime));
}
// Autogenerated method: TimeExtensions.AsUnixTime
System::DateTime GlobalNamespace::TimeExtensions::AsUnixTime(int64_t unixTime) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DateTime>("", "TimeExtensions", "AsUnixTime", unixTime));
}
