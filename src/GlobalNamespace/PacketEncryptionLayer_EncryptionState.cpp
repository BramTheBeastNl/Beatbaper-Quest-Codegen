// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/EncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionState.hpp"
// Including type: System.Collections.Concurrent.ConcurrentQueue`1
#include "System/Collections/Concurrent/ConcurrentQueue_1.hpp"
// Including type: Org.BouncyCastle.Crypto.Macs.HMac
#include "Org/BouncyCastle/Crypto/Macs/HMac.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kReceivedSequencNumBufferLength
int GlobalNamespace::PacketEncryptionLayer::EncryptionState::_get_kReceivedSequencNumBufferLength() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("_get_kReceivedSequencNumBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PacketEncryptionLayer/EncryptionState", "kReceivedSequencNumBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kReceivedSequencNumBufferLength
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::_set_kReceivedSequencNumBufferLength(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("_set_kReceivedSequencNumBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer/EncryptionState", "kReceivedSequencNumBufferLength", value));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.ComputeSendMac
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::ComputeSendMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("ComputeSendMac");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeSendMac", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(data, offset, count)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.ComputeReceiveMac
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("ComputeReceiveMac");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeReceiveMac", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(data, offset, count)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.IsValidSequenceNum
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::IsValidSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("IsValidSequenceNum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValidSequenceNum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sequenceNum)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PutSequenceNum
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::PutSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("PutSequenceNum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PutSequenceNum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sequenceNum)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.GetNextSentSequenceNum
uint GlobalNamespace::PacketEncryptionLayer::EncryptionState::GetNextSentSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("GetNextSentSequenceNum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetNextSentSequenceNum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.MakeSeed
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("MakeSeed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MakeSeed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(baseSeed, serverSeed, clientSeed)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, baseSeed, serverSeed, clientSeed);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PRF
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("PRF");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "PacketEncryptionLayer/EncryptionState", "PRF", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, seed, length)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, length);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PRF_Hash
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("PRF_Hash");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "PacketEncryptionLayer/EncryptionState", "PRF_Hash", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, seed, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, length);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.get_isValid
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("get_isValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.Dispose
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("EncryptionState").WithContext("Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::System_IDisposable_Dispose() {
  GlobalNamespace::PacketEncryptionLayer::EncryptionState::Dispose();
}
