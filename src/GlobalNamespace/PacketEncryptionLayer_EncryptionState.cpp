// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/EncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionState.hpp"
// Including type: System.Collections.Concurrent.ConcurrentQueue`1
#include "System/Collections/Concurrent/ConcurrentQueue_1.hpp"
// Including type: Org.BouncyCastle.Crypto.Macs.HMac
#include "Org/BouncyCastle/Crypto/Macs/HMac.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kReceivedSequencNumBufferLength
int GlobalNamespace::PacketEncryptionLayer::EncryptionState::_get_kReceivedSequencNumBufferLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PacketEncryptionLayer/EncryptionState", "kReceivedSequencNumBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kReceivedSequencNumBufferLength
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::_set_kReceivedSequencNumBufferLength(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer/EncryptionState", "kReceivedSequencNumBufferLength", value));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.ComputeSendMac
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::ComputeSendMac(::Array<uint8_t>* data, int offset, int count) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "ComputeSendMac", data, offset, count));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.ComputeReceiveMac
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "ComputeReceiveMac", data, offset, count));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.IsValidSequenceNum
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::IsValidSequenceNum(uint sequenceNum) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsValidSequenceNum", sequenceNum));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PutSequenceNum
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::PutSequenceNum(uint sequenceNum) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "PutSequenceNum", sequenceNum));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.GetNextSentSequenceNum
uint GlobalNamespace::PacketEncryptionLayer::EncryptionState::GetNextSentSequenceNum() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetNextSentSequenceNum"));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState..ctor
GlobalNamespace::PacketEncryptionLayer::EncryptionState* GlobalNamespace::PacketEncryptionLayer::EncryptionState::New_ctor(uint protocolVersion, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
  return THROW_UNLESS(il2cpp_utils::New<PacketEncryptionLayer::EncryptionState*>(protocolVersion, preMasterSecret, serverSeed, clientSeed, isClient));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.MakeSeed
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "MakeSeed", baseSeed, serverSeed, clientSeed));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PRF
::Array<uint8_t>* GlobalNamespace::PacketEncryptionLayer::EncryptionState::PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>("", "PacketEncryptionLayer/EncryptionState", "PRF", key, seed, length));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.PRF_Hash
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int& length) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "PacketEncryptionLayer/EncryptionState", "PRF_Hash", key, seed, length));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.get_isValid
bool GlobalNamespace::PacketEncryptionLayer::EncryptionState::get_isValid() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isValid"));
}
// Autogenerated method: PacketEncryptionLayer/EncryptionState.Dispose
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void GlobalNamespace::PacketEncryptionLayer::EncryptionState::System_IDisposable_Dispose() {
  GlobalNamespace::PacketEncryptionLayer::EncryptionState::Dispose();
}
