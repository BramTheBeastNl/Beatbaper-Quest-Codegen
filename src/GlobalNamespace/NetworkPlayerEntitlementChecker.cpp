// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker
#include "GlobalNamespace/NetworkPlayerEntitlementChecker.hpp"
// Including type: NetworkPlayerEntitlementChecker/CachedTcs
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_CachedTcs.hpp"
// Including type: NetworkPlayerEntitlementChecker/<HandleGetIsEntitledToLevel>d__15
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-HandleGetIsEntitledToLevel-d__15.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetPlayerLevelEntitlementsAsync>d__17
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetPlayerLevelEntitlementsAsync-d__17.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetCanPlayLevelAsync>d__18
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetCanPlayLevelAsync-d__18.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetEntitlementStatus>d__20
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetEntitlementStatus-d__20.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker.add_didInvalidateDataEvent
void GlobalNamespace::NetworkPlayerEntitlementChecker::add_didInvalidateDataEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didInvalidateDataEvent", value));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.remove_didInvalidateDataEvent
void GlobalNamespace::NetworkPlayerEntitlementChecker::remove_didInvalidateDataEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didInvalidateDataEvent", value));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.Start
void GlobalNamespace::NetworkPlayerEntitlementChecker::Start() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Start"));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.OnDestroy
void GlobalNamespace::NetworkPlayerEntitlementChecker::OnDestroy() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.InvalidateData
void GlobalNamespace::NetworkPlayerEntitlementChecker::InvalidateData() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InvalidateData"));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleDataInvalidated
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleDataInvalidated() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleDataInvalidated"));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleLevelEntitlementStatusesInvalidated
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleLevelEntitlementStatusesInvalidated(::Il2CppString* userId) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleLevelEntitlementStatusesInvalidated", userId));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandlePlayerDisconnected
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandlePlayerDisconnected", player));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandlePlayerConnected
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandlePlayerConnected", player));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleGetIsEntitledToLevel
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleGetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGetIsEntitledToLevel", userId, levelId));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleSetIsEntitledToLevel
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleSetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus status) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleSetIsEntitledToLevel", userId, levelId, status));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetPlayerLevelEntitlementsAsync
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetPlayerLevelEntitlementsAsync(GlobalNamespace::IConnectedPlayer* player, ::Il2CppString* levelId, System::Threading::CancellationToken token) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>(this, "GetPlayerLevelEntitlementsAsync", player, levelId, token));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetCanPlayLevelAsync
System::Threading::Tasks::Task_1<bool>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetCanPlayLevelAsync(::Il2CppString* levelId, System::Threading::CancellationToken token) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<bool>*>(this, "GetCanPlayLevelAsync", levelId, token));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetTcsTaskCanPlayerPlayLevel
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetTcsTaskCanPlayerPlayLevel(GlobalNamespace::IConnectedPlayer* player, ::Il2CppString* levelId, System::Threading::CancellationToken token, bool& rpcRequired) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>(this, "GetTcsTaskCanPlayerPlayLevel", player, levelId, token, rpcRequired));
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetEntitlementStatus
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetEntitlementStatus(::Il2CppString* levelId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>(this, "GetEntitlementStatus", levelId));
}
// Autogenerated method: NetworkPlayerEntitlementChecker..ctor
GlobalNamespace::NetworkPlayerEntitlementChecker* GlobalNamespace::NetworkPlayerEntitlementChecker::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<NetworkPlayerEntitlementChecker*>());
}
