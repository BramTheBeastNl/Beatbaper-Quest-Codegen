// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: SteamVR_Overlay/IntersectionResults
#include "GlobalNamespace/SteamVR_Overlay_IntersectionResults.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xD8A5D0
// Autogenerated static field getter
// Get static field: static private SteamVR_Overlay <instance>k__BackingField
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Overlay*>("", "SteamVR_Overlay", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Overlay <instance>k__BackingField
void GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Overlay", "<instance>k__BackingField", value));
}
// Autogenerated method: SteamVR_Overlay.get_instance
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Overlay*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.set_instance
void GlobalNamespace::SteamVR_Overlay::set_instance(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("set_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "set_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Overlay.get_key
::Il2CppString* GlobalNamespace::SteamVR_Overlay::get_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("get_key");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_key", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnEnable
void GlobalNamespace::SteamVR_Overlay::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnDisable
void GlobalNamespace::SteamVR_Overlay::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.UpdateOverlay
void GlobalNamespace::SteamVR_Overlay::UpdateOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("UpdateOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.PollNextEvent
bool GlobalNamespace::SteamVR_Overlay::PollNextEvent(Valve::VR::VREvent_t& pEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent);
}
// Autogenerated method: SteamVR_Overlay.ComputeIntersection
bool GlobalNamespace::SteamVR_Overlay::ComputeIntersection(UnityEngine::Vector3 source, UnityEngine::Vector3 direction, GlobalNamespace::SteamVR_Overlay::IntersectionResults& results) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_Overlay").WithContext("ComputeIntersection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeIntersection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(source, direction, results)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, source, direction, results);
}
