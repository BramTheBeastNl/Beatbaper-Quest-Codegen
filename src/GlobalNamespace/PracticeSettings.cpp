// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PracticeSettings
#include "GlobalNamespace/PracticeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDelayBeforeStart
float GlobalNamespace::PracticeSettings::_get_kDelayBeforeStart() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PracticeSettings", "kDelayBeforeStart"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDelayBeforeStart
void GlobalNamespace::PracticeSettings::_set_kDelayBeforeStart(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PracticeSettings", "kDelayBeforeStart", value));
}
// Autogenerated method: PracticeSettings.get_startSongTime
float GlobalNamespace::PracticeSettings::get_startSongTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_startSongTime"));
}
// Autogenerated method: PracticeSettings.set_startSongTime
void GlobalNamespace::PracticeSettings::set_startSongTime(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_startSongTime", value));
}
// Autogenerated method: PracticeSettings.get_songSpeedMul
float GlobalNamespace::PracticeSettings::get_songSpeedMul() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_songSpeedMul"));
}
// Autogenerated method: PracticeSettings.set_songSpeedMul
void GlobalNamespace::PracticeSettings::set_songSpeedMul(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_songSpeedMul", value));
}
// Autogenerated method: PracticeSettings.get_startInAdvanceAndClearNotes
bool GlobalNamespace::PracticeSettings::get_startInAdvanceAndClearNotes() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_startInAdvanceAndClearNotes"));
}
// Autogenerated method: PracticeSettings.set_startInAdvanceAndClearNotes
void GlobalNamespace::PracticeSettings::set_startInAdvanceAndClearNotes(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_startInAdvanceAndClearNotes", value));
}
// Autogenerated method: PracticeSettings.get_defaultPracticeSettings
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::get_defaultPracticeSettings() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::PracticeSettings*>("", "PracticeSettings", "get_defaultPracticeSettings"));
}
// Autogenerated method: PracticeSettings..ctor
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::New_ctor(GlobalNamespace::PracticeSettings* practiceSettings) {
  return (PracticeSettings*)THROW_UNLESS(il2cpp_utils::New("", "PracticeSettings", practiceSettings));
}
// Autogenerated method: PracticeSettings..ctor
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::New_ctor(float startSongTime, float songSpeedMul) {
  return (PracticeSettings*)THROW_UNLESS(il2cpp_utils::New("", "PracticeSettings", startSongTime, songSpeedMul));
}
// Autogenerated method: PracticeSettings.ResetToDefault
void GlobalNamespace::PracticeSettings::ResetToDefault() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResetToDefault"));
}
// Autogenerated method: PracticeSettings..ctor
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::New_ctor() {
  return (PracticeSettings*)THROW_UNLESS(il2cpp_utils::New("", "PracticeSettings"));
}
