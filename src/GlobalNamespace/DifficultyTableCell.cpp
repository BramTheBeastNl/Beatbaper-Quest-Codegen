// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DifficultyTableCell
#include "GlobalNamespace/DifficultyTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: FillIndicator
#include "GlobalNamespace/FillIndicator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DifficultyTableCell.set_difficultyText
void GlobalNamespace::DifficultyTableCell::set_difficultyText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext("set_difficultyText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "set_difficultyText", {}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DifficultyTableCell.get_difficultyText
::Il2CppString* GlobalNamespace::DifficultyTableCell::get_difficultyText() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext("get_difficultyText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<::Il2CppString*>(), "get_difficultyText", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DifficultyTableCell.set_difficultyValue
void GlobalNamespace::DifficultyTableCell::set_difficultyValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext("set_difficultyValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "set_difficultyValue", {}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DifficultyTableCell.SelectionDidChange
void GlobalNamespace::DifficultyTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext("SelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "SelectionDidChange", {}, ::il2cpp_utils::ExtractTypes(transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: DifficultyTableCell.HighlightDidChange
void GlobalNamespace::DifficultyTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext("HighlightDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "HighlightDidChange", {}, ::il2cpp_utils::ExtractTypes(transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: DifficultyTableCell..ctor
GlobalNamespace::DifficultyTableCell* GlobalNamespace::DifficultyTableCell::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("DifficultyTableCell").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<DifficultyTableCell*>());
}
