// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatLine
#include "GlobalNamespace/BeatLine.hpp"
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatLine.get_isFinished
bool GlobalNamespace::BeatLine::get_isFinished() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isFinished"));
}
// Autogenerated method: BeatLine.get_rotation
float GlobalNamespace::BeatLine::get_rotation() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_rotation"));
}
// Autogenerated method: BeatLine.Init
void GlobalNamespace::BeatLine::Init(UnityEngine::Vector3 position, float rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", position, rotation));
}
// Autogenerated method: BeatLine.AddHighlight
void GlobalNamespace::BeatLine::AddHighlight(float startTime, float arriveDuration, float jumpDuration) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddHighlight", startTime, arriveDuration, jumpDuration));
}
// Autogenerated method: BeatLine.ManualUpdate
void GlobalNamespace::BeatLine::ManualUpdate(float songTime) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ManualUpdate", songTime));
}
// Autogenerated method: BeatLine.ColorWasSet
void GlobalNamespace::BeatLine::ColorWasSet(UnityEngine::Color color) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ColorWasSet", color));
}
// Autogenerated method: BeatLine..ctor
GlobalNamespace::BeatLine* GlobalNamespace::BeatLine::New_ctor() {
  return (BeatLine*)THROW_UNLESS(il2cpp_utils::New("", "BeatLine"));
}
