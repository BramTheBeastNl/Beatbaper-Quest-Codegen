// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/GUID
#include "GlobalNamespace/OVRPlugin_GUID.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/CameraStatus
#include "GlobalNamespace/OVRPlugin_CameraStatus.hpp"
// Including type: OVRPlugin/Eye
#include "GlobalNamespace/OVRPlugin_Eye.hpp"
// Including type: OVRPlugin/Tracker
#include "GlobalNamespace/OVRPlugin_Tracker.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/Controller
#include "GlobalNamespace/OVRPlugin_Controller.hpp"
// Including type: OVRPlugin/Handedness
#include "GlobalNamespace/OVRPlugin_Handedness.hpp"
// Including type: OVRPlugin/TrackingOrigin
#include "GlobalNamespace/OVRPlugin_TrackingOrigin.hpp"
// Including type: OVRPlugin/RecenterFlags
#include "GlobalNamespace/OVRPlugin_RecenterFlags.hpp"
// Including type: OVRPlugin/BatteryStatus
#include "GlobalNamespace/OVRPlugin_BatteryStatus.hpp"
// Including type: OVRPlugin/EyeTextureFormat
#include "GlobalNamespace/OVRPlugin_EyeTextureFormat.hpp"
// Including type: OVRPlugin/PlatformUI
#include "GlobalNamespace/OVRPlugin_PlatformUI.hpp"
// Including type: OVRPlugin/SystemRegion
#include "GlobalNamespace/OVRPlugin_SystemRegion.hpp"
// Including type: OVRPlugin/SystemHeadset
#include "GlobalNamespace/OVRPlugin_SystemHeadset.hpp"
// Including type: OVRPlugin/OverlayShape
#include "GlobalNamespace/OVRPlugin_OverlayShape.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/CameraDevice
#include "GlobalNamespace/OVRPlugin_CameraDevice.hpp"
// Including type: OVRPlugin/CameraDeviceDepthSensingMode
#include "GlobalNamespace/OVRPlugin_CameraDeviceDepthSensingMode.hpp"
// Including type: OVRPlugin/CameraDeviceDepthQuality
#include "GlobalNamespace/OVRPlugin_CameraDeviceDepthQuality.hpp"
// Including type: OVRPlugin/FixedFoveatedRenderingLevel
#include "GlobalNamespace/OVRPlugin_FixedFoveatedRenderingLevel.hpp"
// Including type: OVRPlugin/TiledMultiResLevel
#include "GlobalNamespace/OVRPlugin_TiledMultiResLevel.hpp"
// Including type: OVRPlugin/PerfMetrics
#include "GlobalNamespace/OVRPlugin_PerfMetrics.hpp"
// Including type: OVRPlugin/CameraDeviceIntrinsicsParameters
#include "GlobalNamespace/OVRPlugin_CameraDeviceIntrinsicsParameters.hpp"
// Including type: OVRPlugin/OverlayFlag
#include "GlobalNamespace/OVRPlugin_OverlayFlag.hpp"
// Including type: OVRPlugin/Vector2f
#include "GlobalNamespace/OVRPlugin_Vector2f.hpp"
// Including type: OVRPlugin/Vector4f
#include "GlobalNamespace/OVRPlugin_Vector4f.hpp"
// Including type: OVRPlugin/Vector4s
#include "GlobalNamespace/OVRPlugin_Vector4s.hpp"
// Including type: OVRPlugin/TextureRectMatrixf
#include "GlobalNamespace/OVRPlugin_TextureRectMatrixf.hpp"
// Including type: OVRPlugin/PoseStatef
#include "GlobalNamespace/OVRPlugin_PoseStatef.hpp"
// Including type: OVRPlugin/ControllerState4
#include "GlobalNamespace/OVRPlugin_ControllerState4.hpp"
// Including type: OVRPlugin/ControllerState2
#include "GlobalNamespace/OVRPlugin_ControllerState2.hpp"
// Including type: OVRPlugin/ControllerState
#include "GlobalNamespace/OVRPlugin_ControllerState.hpp"
// Including type: OVRPlugin/HapticsBuffer
#include "GlobalNamespace/OVRPlugin_HapticsBuffer.hpp"
// Including type: OVRPlugin/HapticsState
#include "GlobalNamespace/OVRPlugin_HapticsState.hpp"
// Including type: OVRPlugin/HapticsDesc
#include "GlobalNamespace/OVRPlugin_HapticsDesc.hpp"
// Including type: OVRPlugin/AppPerfFrameStats
#include "GlobalNamespace/OVRPlugin_AppPerfFrameStats.hpp"
// Including type: OVRPlugin/AppPerfStats
#include "GlobalNamespace/OVRPlugin_AppPerfStats.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/Sizef
#include "GlobalNamespace/OVRPlugin_Sizef.hpp"
// Including type: OVRPlugin/Vector2i
#include "GlobalNamespace/OVRPlugin_Vector2i.hpp"
// Including type: OVRPlugin/Recti
#include "GlobalNamespace/OVRPlugin_Recti.hpp"
// Including type: OVRPlugin/Rectf
#include "GlobalNamespace/OVRPlugin_Rectf.hpp"
// Including type: OVRPlugin/Frustumf
#include "GlobalNamespace/OVRPlugin_Frustumf.hpp"
// Including type: OVRPlugin/Frustumf2
#include "GlobalNamespace/OVRPlugin_Frustumf2.hpp"
// Including type: OVRPlugin/BoundaryType
#include "GlobalNamespace/OVRPlugin_BoundaryType.hpp"
// Including type: OVRPlugin/BoundaryTestResult
#include "GlobalNamespace/OVRPlugin_BoundaryTestResult.hpp"
// Including type: OVRPlugin/BoundaryGeometry
#include "GlobalNamespace/OVRPlugin_BoundaryGeometry.hpp"
// Including type: OVRPlugin/Colorf
#include "GlobalNamespace/OVRPlugin_Colorf.hpp"
// Including type: OVRPlugin/Fovf
#include "GlobalNamespace/OVRPlugin_Fovf.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
// Including type: OVRPlugin/LayerLayout
#include "GlobalNamespace/OVRPlugin_LayerLayout.hpp"
// Including type: OVRPlugin/LayerFlags
#include "GlobalNamespace/OVRPlugin_LayerFlags.hpp"
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
// Including type: OVRPlugin/LayerSubmit
#include "GlobalNamespace/OVRPlugin_LayerSubmit.hpp"
// Including type: OVRPlugin/Hand
#include "GlobalNamespace/OVRPlugin_Hand.hpp"
// Including type: OVRPlugin/BoneId
#include "GlobalNamespace/OVRPlugin_BoneId.hpp"
// Including type: OVRPlugin/HandFinger
#include "GlobalNamespace/OVRPlugin_HandFinger.hpp"
// Including type: OVRPlugin/HandState
#include "GlobalNamespace/OVRPlugin_HandState.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: OVRPlugin/BoneCapsule
#include "GlobalNamespace/OVRPlugin_BoneCapsule.hpp"
// Including type: OVRPlugin/Bone
#include "GlobalNamespace/OVRPlugin_Bone.hpp"
// Including type: OVRPlugin/SkeletonConstants
#include "GlobalNamespace/OVRPlugin_SkeletonConstants.hpp"
// Including type: OVRPlugin/SkeletonType
#include "GlobalNamespace/OVRPlugin_SkeletonType.hpp"
// Including type: OVRPlugin/Skeleton
#include "GlobalNamespace/OVRPlugin_Skeleton.hpp"
// Including type: OVRPlugin/MeshConstants
#include "GlobalNamespace/OVRPlugin_MeshConstants.hpp"
// Including type: OVRPlugin/MeshType
#include "GlobalNamespace/OVRPlugin_MeshType.hpp"
// Including type: OVRPlugin/Mesh
#include "GlobalNamespace/OVRPlugin_Mesh.hpp"
// Including type: OVRPlugin/Media
#include "GlobalNamespace/OVRPlugin_Media.hpp"
// Including type: OVRPlugin/OVRP_0_1_0
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_0.hpp"
// Including type: OVRPlugin/OVRP_0_1_1
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_1.hpp"
// Including type: OVRPlugin/OVRP_0_1_2
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_2.hpp"
// Including type: OVRPlugin/OVRP_0_1_3
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_3.hpp"
// Including type: OVRPlugin/OVRP_0_5_0
#include "GlobalNamespace/OVRPlugin_OVRP_0_5_0.hpp"
// Including type: OVRPlugin/OVRP_1_0_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_0_0.hpp"
// Including type: OVRPlugin/OVRP_1_1_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_1_0.hpp"
// Including type: OVRPlugin/OVRP_1_2_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_2_0.hpp"
// Including type: OVRPlugin/OVRP_1_3_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_3_0.hpp"
// Including type: OVRPlugin/OVRP_1_5_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_5_0.hpp"
// Including type: OVRPlugin/OVRP_1_6_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_6_0.hpp"
// Including type: OVRPlugin/OVRP_1_7_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_7_0.hpp"
// Including type: OVRPlugin/OVRP_1_8_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_8_0.hpp"
// Including type: OVRPlugin/OVRP_1_9_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_9_0.hpp"
// Including type: OVRPlugin/OVRP_1_10_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_10_0.hpp"
// Including type: OVRPlugin/OVRP_1_11_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_11_0.hpp"
// Including type: OVRPlugin/OVRP_1_12_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_12_0.hpp"
// Including type: OVRPlugin/OVRP_1_15_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_15_0.hpp"
// Including type: OVRPlugin/OVRP_1_16_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_16_0.hpp"
// Including type: OVRPlugin/OVRP_1_17_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_17_0.hpp"
// Including type: OVRPlugin/OVRP_1_18_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_18_0.hpp"
// Including type: OVRPlugin/OVRP_1_19_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_19_0.hpp"
// Including type: OVRPlugin/OVRP_1_21_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_21_0.hpp"
// Including type: OVRPlugin/OVRP_1_28_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_28_0.hpp"
// Including type: OVRPlugin/OVRP_1_29_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_29_0.hpp"
// Including type: OVRPlugin/OVRP_1_30_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_30_0.hpp"
// Including type: OVRPlugin/OVRP_1_31_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_31_0.hpp"
// Including type: OVRPlugin/OVRP_1_32_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_32_0.hpp"
// Including type: OVRPlugin/OVRP_1_34_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_34_0.hpp"
// Including type: OVRPlugin/OVRP_1_35_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_35_0.hpp"
// Including type: OVRPlugin/OVRP_1_36_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_36_0.hpp"
// Including type: OVRPlugin/OVRP_1_37_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_37_0.hpp"
// Including type: OVRPlugin/OVRP_1_38_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_38_0.hpp"
// Including type: OVRPlugin/OVRP_1_39_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_39_0.hpp"
// Including type: OVRPlugin/OVRP_1_40_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_40_0.hpp"
// Including type: OVRPlugin/OVRP_1_41_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_41_0.hpp"
// Including type: OVRPlugin/OVRP_1_42_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_42_0.hpp"
// Including type: OVRPlugin/OVRP_1_43_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_43_0.hpp"
// Including type: OVRPlugin/OVRP_1_44_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_44_0.hpp"
// Including type: OVRPlugin/OVRP_1_45_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_45_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRNativeBuffer
#include "GlobalNamespace/OVRNativeBuffer.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean isSupportedPlatform
bool GlobalNamespace::OVRPlugin::_get_isSupportedPlatform() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_isSupportedPlatform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "OVRPlugin", "isSupportedPlatform"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean isSupportedPlatform
void GlobalNamespace::OVRPlugin::_set_isSupportedPlatform(bool value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_isSupportedPlatform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "isSupportedPlatform", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Version wrapperVersion
System::Version* GlobalNamespace::OVRPlugin::_get_wrapperVersion() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_wrapperVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin", "wrapperVersion"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version wrapperVersion
void GlobalNamespace::OVRPlugin::_set_wrapperVersion(System::Version* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_wrapperVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "wrapperVersion", value));
}
// Autogenerated static field getter
// Get static field: static private System.Version _version
System::Version* GlobalNamespace::OVRPlugin::_get__version() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin", "_version"));
}
// Autogenerated static field setter
// Set static field: static private System.Version _version
void GlobalNamespace::OVRPlugin::_set__version(System::Version* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_version", value));
}
// Autogenerated static field getter
// Get static field: static private System.Version _nativeSDKVersion
System::Version* GlobalNamespace::OVRPlugin::_get__nativeSDKVersion() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__nativeSDKVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin", "_nativeSDKVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Version _nativeSDKVersion
void GlobalNamespace::OVRPlugin::_set__nativeSDKVersion(System::Version* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__nativeSDKVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_nativeSDKVersion", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OverlayShapeFlagShift
int GlobalNamespace::OVRPlugin::_get_OverlayShapeFlagShift() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_OverlayShapeFlagShift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin", "OverlayShapeFlagShift"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OverlayShapeFlagShift
void GlobalNamespace::OVRPlugin::_set_OverlayShapeFlagShift(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_OverlayShapeFlagShift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "OverlayShapeFlagShift", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 AppPerfFrameStatsMaxCount
int GlobalNamespace::OVRPlugin::_get_AppPerfFrameStatsMaxCount() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_AppPerfFrameStatsMaxCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin", "AppPerfFrameStatsMaxCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 AppPerfFrameStatsMaxCount
void GlobalNamespace::OVRPlugin::_set_AppPerfFrameStatsMaxCount(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_AppPerfFrameStatsMaxCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "AppPerfFrameStatsMaxCount", value));
}
// Autogenerated static field getter
// Get static field: static private OVRPlugin/GUID _nativeAudioOutGuid
GlobalNamespace::OVRPlugin::GUID* GlobalNamespace::OVRPlugin::_get__nativeAudioOutGuid() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__nativeAudioOutGuid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRPlugin::GUID*>("", "OVRPlugin", "_nativeAudioOutGuid"));
}
// Autogenerated static field setter
// Set static field: static private OVRPlugin/GUID _nativeAudioOutGuid
void GlobalNamespace::OVRPlugin::_set__nativeAudioOutGuid(GlobalNamespace::OVRPlugin::GUID* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__nativeAudioOutGuid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_nativeAudioOutGuid", value));
}
// Autogenerated static field getter
// Get static field: static private System.Guid _cachedAudioOutGuid
System::Guid GlobalNamespace::OVRPlugin::_get__cachedAudioOutGuid() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__cachedAudioOutGuid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Guid>("", "OVRPlugin", "_cachedAudioOutGuid"));
}
// Autogenerated static field setter
// Set static field: static private System.Guid _cachedAudioOutGuid
void GlobalNamespace::OVRPlugin::_set__cachedAudioOutGuid(System::Guid value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__cachedAudioOutGuid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_cachedAudioOutGuid", value));
}
// Autogenerated static field getter
// Get static field: static private System.String _cachedAudioOutString
::Il2CppString* GlobalNamespace::OVRPlugin::_get__cachedAudioOutString() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__cachedAudioOutString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRPlugin", "_cachedAudioOutString"));
}
// Autogenerated static field setter
// Set static field: static private System.String _cachedAudioOutString
void GlobalNamespace::OVRPlugin::_set__cachedAudioOutString(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__cachedAudioOutString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_cachedAudioOutString", value));
}
// Autogenerated static field getter
// Get static field: static private OVRPlugin/GUID _nativeAudioInGuid
GlobalNamespace::OVRPlugin::GUID* GlobalNamespace::OVRPlugin::_get__nativeAudioInGuid() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__nativeAudioInGuid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRPlugin::GUID*>("", "OVRPlugin", "_nativeAudioInGuid"));
}
// Autogenerated static field setter
// Set static field: static private OVRPlugin/GUID _nativeAudioInGuid
void GlobalNamespace::OVRPlugin::_set__nativeAudioInGuid(GlobalNamespace::OVRPlugin::GUID* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__nativeAudioInGuid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_nativeAudioInGuid", value));
}
// Autogenerated static field getter
// Get static field: static private System.Guid _cachedAudioInGuid
System::Guid GlobalNamespace::OVRPlugin::_get__cachedAudioInGuid() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__cachedAudioInGuid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Guid>("", "OVRPlugin", "_cachedAudioInGuid"));
}
// Autogenerated static field setter
// Set static field: static private System.Guid _cachedAudioInGuid
void GlobalNamespace::OVRPlugin::_set__cachedAudioInGuid(System::Guid value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__cachedAudioInGuid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_cachedAudioInGuid", value));
}
// Autogenerated static field getter
// Get static field: static private System.String _cachedAudioInString
::Il2CppString* GlobalNamespace::OVRPlugin::_get__cachedAudioInString() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__cachedAudioInString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRPlugin", "_cachedAudioInString"));
}
// Autogenerated static field setter
// Set static field: static private System.String _cachedAudioInString
void GlobalNamespace::OVRPlugin::_set__cachedAudioInString(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__cachedAudioInString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_cachedAudioInString", value));
}
// Autogenerated static field getter
// Get static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
GlobalNamespace::OVRNativeBuffer* GlobalNamespace::OVRPlugin::_get__nativeSystemDisplayFrequenciesAvailable() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__nativeSystemDisplayFrequenciesAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRNativeBuffer*>("", "OVRPlugin", "_nativeSystemDisplayFrequenciesAvailable"));
}
// Autogenerated static field setter
// Set static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
void GlobalNamespace::OVRPlugin::_set__nativeSystemDisplayFrequenciesAvailable(GlobalNamespace::OVRNativeBuffer* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__nativeSystemDisplayFrequenciesAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_nativeSystemDisplayFrequenciesAvailable", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
::Array<float>* GlobalNamespace::OVRPlugin::_get__cachedSystemDisplayFrequenciesAvailable() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__cachedSystemDisplayFrequenciesAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<float>*>("", "OVRPlugin", "_cachedSystemDisplayFrequenciesAvailable"));
}
// Autogenerated static field setter
// Set static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
void GlobalNamespace::OVRPlugin::_set__cachedSystemDisplayFrequenciesAvailable(::Array<float>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__cachedSystemDisplayFrequenciesAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_cachedSystemDisplayFrequenciesAvailable", value));
}
// Autogenerated static field getter
// Get static field: static private OVRPlugin/HandStateInternal cachedHandState
GlobalNamespace::OVRPlugin::HandStateInternal GlobalNamespace::OVRPlugin::_get_cachedHandState() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_cachedHandState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRPlugin::HandStateInternal>("", "OVRPlugin", "cachedHandState"));
}
// Autogenerated static field setter
// Set static field: static private OVRPlugin/HandStateInternal cachedHandState
void GlobalNamespace::OVRPlugin::_set_cachedHandState(GlobalNamespace::OVRPlugin::HandStateInternal value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_cachedHandState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "cachedHandState", value));
}
// Autogenerated static field getter
// Get static field: static private System.String pluginName
::Il2CppString* GlobalNamespace::OVRPlugin::_get_pluginName() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get_pluginName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRPlugin", "pluginName"));
}
// Autogenerated static field setter
// Set static field: static private System.String pluginName
void GlobalNamespace::OVRPlugin::_set_pluginName(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set_pluginName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "pluginName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Version _versionZero
System::Version* GlobalNamespace::OVRPlugin::_get__versionZero() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_get__versionZero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin", "_versionZero"));
}
// Autogenerated static field setter
// Set static field: static private System.Version _versionZero
void GlobalNamespace::OVRPlugin::_set__versionZero(System::Version* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("_set__versionZero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin", "_versionZero", value));
}
// Autogenerated method: OVRPlugin.get_version
System::Version* GlobalNamespace::OVRPlugin::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_version");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_version", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Version*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_nativeSDKVersion
System::Version* GlobalNamespace::OVRPlugin::get_nativeSDKVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_nativeSDKVersion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_nativeSDKVersion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Version*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_initialized
bool GlobalNamespace::OVRPlugin::get_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_initialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_initialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_chromatic
bool GlobalNamespace::OVRPlugin::get_chromatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_chromatic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_chromatic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_chromatic
void GlobalNamespace::OVRPlugin::set_chromatic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_chromatic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_chromatic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_monoscopic
bool GlobalNamespace::OVRPlugin::get_monoscopic() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_monoscopic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_monoscopic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_monoscopic
void GlobalNamespace::OVRPlugin::set_monoscopic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_monoscopic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_monoscopic", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_rotation
bool GlobalNamespace::OVRPlugin::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_rotation
void GlobalNamespace::OVRPlugin::set_rotation(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_position
bool GlobalNamespace::OVRPlugin::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_position
void GlobalNamespace::OVRPlugin::set_position(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_useIPDInPositionTracking
bool GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_useIPDInPositionTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_useIPDInPositionTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_useIPDInPositionTracking
void GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_useIPDInPositionTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_useIPDInPositionTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_positionSupported
bool GlobalNamespace::OVRPlugin::get_positionSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_positionSupported");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_positionSupported", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_positionTracked
bool GlobalNamespace::OVRPlugin::get_positionTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_positionTracked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_positionTracked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_powerSaving
bool GlobalNamespace::OVRPlugin::get_powerSaving() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_powerSaving");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_powerSaving", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_hmdPresent
bool GlobalNamespace::OVRPlugin::get_hmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_hmdPresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_hmdPresent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_userPresent
bool GlobalNamespace::OVRPlugin::get_userPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_userPresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_userPresent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_headphonesPresent
bool GlobalNamespace::OVRPlugin::get_headphonesPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_headphonesPresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_headphonesPresent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_recommendedMSAALevel
int GlobalNamespace::OVRPlugin::get_recommendedMSAALevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_recommendedMSAALevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_recommendedMSAALevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_systemRegion
GlobalNamespace::OVRPlugin::SystemRegion GlobalNamespace::OVRPlugin::get_systemRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_systemRegion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_systemRegion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::SystemRegion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_audioOutId
::Il2CppString* GlobalNamespace::OVRPlugin::get_audioOutId() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_audioOutId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_audioOutId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_audioInId
::Il2CppString* GlobalNamespace::OVRPlugin::get_audioInId() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_audioInId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_audioInId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_hasVrFocus
bool GlobalNamespace::OVRPlugin::get_hasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_hasVrFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_hasVrFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_hasInputFocus
bool GlobalNamespace::OVRPlugin::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_hasInputFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_shouldQuit
bool GlobalNamespace::OVRPlugin::get_shouldQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_shouldQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_shouldQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_shouldRecenter
bool GlobalNamespace::OVRPlugin::get_shouldRecenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_shouldRecenter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_shouldRecenter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_productName
::Il2CppString* GlobalNamespace::OVRPlugin::get_productName() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_productName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_productName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_latency
::Il2CppString* GlobalNamespace::OVRPlugin::get_latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_latency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_latency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_eyeDepth
float GlobalNamespace::OVRPlugin::get_eyeDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_eyeDepth");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_eyeDepth", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_eyeDepth
void GlobalNamespace::OVRPlugin::set_eyeDepth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_eyeDepth");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_eyeDepth", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_eyeHeight
float GlobalNamespace::OVRPlugin::get_eyeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_eyeHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_eyeHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_eyeHeight
void GlobalNamespace::OVRPlugin::set_eyeHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_eyeHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_eyeHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_batteryLevel
float GlobalNamespace::OVRPlugin::get_batteryLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_batteryLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_batteryLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_batteryTemperature
float GlobalNamespace::OVRPlugin::get_batteryTemperature() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_batteryTemperature");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_batteryTemperature", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_cpuLevel
int GlobalNamespace::OVRPlugin::get_cpuLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_cpuLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_cpuLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_cpuLevel
void GlobalNamespace::OVRPlugin::set_cpuLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_cpuLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_cpuLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_gpuLevel
int GlobalNamespace::OVRPlugin::get_gpuLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_gpuLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_gpuLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_gpuLevel
void GlobalNamespace::OVRPlugin::set_gpuLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_gpuLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_gpuLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_vsyncCount
int GlobalNamespace::OVRPlugin::get_vsyncCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_vsyncCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_vsyncCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_vsyncCount
void GlobalNamespace::OVRPlugin::set_vsyncCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_vsyncCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_vsyncCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_systemVolume
float GlobalNamespace::OVRPlugin::get_systemVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_systemVolume");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_systemVolume", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_ipd
float GlobalNamespace::OVRPlugin::get_ipd() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_ipd");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_ipd", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_ipd
void GlobalNamespace::OVRPlugin::set_ipd(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_ipd");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_ipd", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_occlusionMesh
bool GlobalNamespace::OVRPlugin::get_occlusionMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_occlusionMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_occlusionMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_occlusionMesh
void GlobalNamespace::OVRPlugin::set_occlusionMesh(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_occlusionMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_occlusionMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_batteryStatus
GlobalNamespace::OVRPlugin::BatteryStatus GlobalNamespace::OVRPlugin::get_batteryStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_batteryStatus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_batteryStatus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BatteryStatus, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetEyeFrustum
GlobalNamespace::OVRPlugin::Frustumf GlobalNamespace::OVRPlugin::GetEyeFrustum(GlobalNamespace::OVRPlugin::Eye eyeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetEyeFrustum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetEyeFrustum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eyeId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Frustumf, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eyeId);
}
// Autogenerated method: OVRPlugin.GetEyeTextureSize
GlobalNamespace::OVRPlugin::Sizei GlobalNamespace::OVRPlugin::GetEyeTextureSize(GlobalNamespace::OVRPlugin::Eye eyeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetEyeTextureSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetEyeTextureSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eyeId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Sizei, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eyeId);
}
// Autogenerated method: OVRPlugin.GetTrackerPose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetTrackerPose(GlobalNamespace::OVRPlugin::Tracker trackerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackerPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackerPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(trackerId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackerId);
}
// Autogenerated method: OVRPlugin.GetTrackerFrustum
GlobalNamespace::OVRPlugin::Frustumf GlobalNamespace::OVRPlugin::GetTrackerFrustum(GlobalNamespace::OVRPlugin::Tracker trackerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackerFrustum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackerFrustum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(trackerId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Frustumf, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackerId);
}
// Autogenerated method: OVRPlugin.ShowUI
bool GlobalNamespace::OVRPlugin::ShowUI(GlobalNamespace::OVRPlugin::PlatformUI ui) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("ShowUI");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "ShowUI", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ui)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ui);
}
// Autogenerated method: OVRPlugin.EnqueueSubmitLayer
bool GlobalNamespace::OVRPlugin::EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, System::IntPtr leftTexture, System::IntPtr rightTexture, int layerId, int frameIndex, GlobalNamespace::OVRPlugin::Posef pose, GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex, GlobalNamespace::OVRPlugin::OverlayShape shape, bool overrideTextureRectMatrix, GlobalNamespace::OVRPlugin::TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool hidden) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("EnqueueSubmitLayer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "EnqueueSubmitLayer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(onTop, headLocked, noDepthBufferTesting, leftTexture, rightTexture, layerId, frameIndex, pose, scale, layerIndex, shape, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset, expensiveSuperSample, hidden)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, onTop, headLocked, noDepthBufferTesting, leftTexture, rightTexture, layerId, frameIndex, pose, scale, layerIndex, shape, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset, expensiveSuperSample, hidden);
}
// Autogenerated method: OVRPlugin.CalculateLayerDesc
GlobalNamespace::OVRPlugin::LayerDesc GlobalNamespace::OVRPlugin::CalculateLayerDesc(GlobalNamespace::OVRPlugin::OverlayShape shape, GlobalNamespace::OVRPlugin::LayerLayout layout, GlobalNamespace::OVRPlugin::Sizei textureSize, int mipLevels, int sampleCount, GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("CalculateLayerDesc");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "CalculateLayerDesc", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::LayerDesc, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags);
}
// Autogenerated method: OVRPlugin.EnqueueSetupLayer
bool GlobalNamespace::OVRPlugin::EnqueueSetupLayer(GlobalNamespace::OVRPlugin::LayerDesc desc, int compositionDepth, System::IntPtr layerID) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("EnqueueSetupLayer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "EnqueueSetupLayer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(desc, compositionDepth, layerID)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, desc, compositionDepth, layerID);
}
// Autogenerated method: OVRPlugin.EnqueueDestroyLayer
bool GlobalNamespace::OVRPlugin::EnqueueDestroyLayer(System::IntPtr layerID) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("EnqueueDestroyLayer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "EnqueueDestroyLayer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerID)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerID);
}
// Autogenerated method: OVRPlugin.GetLayerTexture
System::IntPtr GlobalNamespace::OVRPlugin::GetLayerTexture(int layerId, int stage, GlobalNamespace::OVRPlugin::Eye eyeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetLayerTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetLayerTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerId, stage, eyeId)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId, stage, eyeId);
}
// Autogenerated method: OVRPlugin.GetLayerTextureStageCount
int GlobalNamespace::OVRPlugin::GetLayerTextureStageCount(int layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetLayerTextureStageCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetLayerTextureStageCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerId)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId);
}
// Autogenerated method: OVRPlugin.GetLayerAndroidSurfaceObject
System::IntPtr GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject(int layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetLayerAndroidSurfaceObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(layerId)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId);
}
// Autogenerated method: OVRPlugin.UpdateNodePhysicsPoses
bool GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses(int frameIndex, double predictionSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("UpdateNodePhysicsPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "UpdateNodePhysicsPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(frameIndex, predictionSeconds)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, frameIndex, predictionSeconds);
}
// Autogenerated method: OVRPlugin.GetNodePose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetNodePose(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodePose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodePose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetNodeVelocity
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::GetNodeVelocity(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeVelocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeVelocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetNodeAngularVelocity
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::GetNodeAngularVelocity(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeAngularVelocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeAngularVelocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetNodeAcceleration
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::GetNodeAcceleration(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeAcceleration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeAcceleration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetNodeAngularAcceleration
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeAngularAcceleration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeAngularAcceleration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetNodePresent
bool GlobalNamespace::OVRPlugin::GetNodePresent(GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodePresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodePresent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin.GetNodeOrientationTracked
bool GlobalNamespace::OVRPlugin::GetNodeOrientationTracked(GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeOrientationTracked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeOrientationTracked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin.GetNodeOrientationValid
bool GlobalNamespace::OVRPlugin::GetNodeOrientationValid(GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeOrientationValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeOrientationValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin.GetNodePositionTracked
bool GlobalNamespace::OVRPlugin::GetNodePositionTracked(GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodePositionTracked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodePositionTracked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin.GetNodePositionValid
bool GlobalNamespace::OVRPlugin::GetNodePositionValid(GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodePositionValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodePositionValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin.GetNodePoseStateRaw
GlobalNamespace::OVRPlugin::PoseStatef GlobalNamespace::OVRPlugin::GetNodePoseStateRaw(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodePoseStateRaw");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodePoseStateRaw", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, stepId)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::PoseStatef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, stepId);
}
// Autogenerated method: OVRPlugin.GetCurrentTrackingTransformPose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetCurrentTrackingTransformPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetTrackingTransformRawPose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackingTransformRawPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackingTransformRawPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetTrackingTransformRelativePose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose(GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackingTransformRelativePose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackingTransformRelativePose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(trackingOrigin)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackingOrigin);
}
// Autogenerated method: OVRPlugin.GetControllerState
GlobalNamespace::OVRPlugin::ControllerState GlobalNamespace::OVRPlugin::GetControllerState(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetControllerState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetControllerState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::ControllerState, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin.GetControllerState2
GlobalNamespace::OVRPlugin::ControllerState2 GlobalNamespace::OVRPlugin::GetControllerState2(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetControllerState2");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetControllerState2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::ControllerState2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin.GetControllerState4
GlobalNamespace::OVRPlugin::ControllerState4 GlobalNamespace::OVRPlugin::GetControllerState4(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetControllerState4");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetControllerState4", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::ControllerState4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin.SetControllerVibration
bool GlobalNamespace::OVRPlugin::SetControllerVibration(uint controllerMask, float frequency, float amplitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetControllerVibration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetControllerVibration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask, frequency, amplitude)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask, frequency, amplitude);
}
// Autogenerated method: OVRPlugin.GetControllerHapticsDesc
GlobalNamespace::OVRPlugin::HapticsDesc GlobalNamespace::OVRPlugin::GetControllerHapticsDesc(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetControllerHapticsDesc");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetControllerHapticsDesc", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::HapticsDesc, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin.GetControllerHapticsState
GlobalNamespace::OVRPlugin::HapticsState GlobalNamespace::OVRPlugin::GetControllerHapticsState(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetControllerHapticsState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetControllerHapticsState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::HapticsState, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin.SetControllerHaptics
bool GlobalNamespace::OVRPlugin::SetControllerHaptics(uint controllerMask, GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetControllerHaptics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetControllerHaptics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controllerMask, hapticsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask, hapticsBuffer);
}
// Autogenerated method: OVRPlugin.GetEyeRecommendedResolutionScale
float GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetEyeRecommendedResolutionScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetAppCpuStartToGpuEndTime
float GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetAppCpuStartToGpuEndTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetBoundaryConfigured
bool GlobalNamespace::OVRPlugin::GetBoundaryConfigured() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetBoundaryConfigured");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetBoundaryConfigured", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.TestBoundaryNode
GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::TestBoundaryNode(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("TestBoundaryNode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "TestBoundaryNode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, boundaryType)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, boundaryType);
}
// Autogenerated method: OVRPlugin.TestBoundaryPoint
GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::TestBoundaryPoint(GlobalNamespace::OVRPlugin::Vector3f point, GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("TestBoundaryPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "TestBoundaryPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(point, boundaryType)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, point, boundaryType);
}
// Autogenerated method: OVRPlugin.GetBoundaryGeometry
GlobalNamespace::OVRPlugin::BoundaryGeometry GlobalNamespace::OVRPlugin::GetBoundaryGeometry(GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetBoundaryGeometry");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetBoundaryGeometry", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boundaryType)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryGeometry, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin.GetBoundaryGeometry2
bool GlobalNamespace::OVRPlugin::GetBoundaryGeometry2(GlobalNamespace::OVRPlugin::BoundaryType boundaryType, System::IntPtr points, int& pointsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetBoundaryGeometry2");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetBoundaryGeometry2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boundaryType, points, pointsCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType, points, pointsCount);
}
// Autogenerated method: OVRPlugin.GetAppPerfStats
GlobalNamespace::OVRPlugin::AppPerfStats GlobalNamespace::OVRPlugin::GetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetAppPerfStats", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::AppPerfStats, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.ResetAppPerfStats
bool GlobalNamespace::OVRPlugin::ResetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("ResetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "ResetAppPerfStats", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetAppFramerate
float GlobalNamespace::OVRPlugin::GetAppFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetAppFramerate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetAppFramerate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetHandNodePoseStateLatency
bool GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency(double latencyInSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(latencyInSeconds)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, latencyInSeconds);
}
// Autogenerated method: OVRPlugin.GetHandNodePoseStateLatency
double GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetDesiredEyeTextureFormat
GlobalNamespace::OVRPlugin::EyeTextureFormat GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::EyeTextureFormat, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetDesiredEyeTextureFormat
bool GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat(GlobalNamespace::OVRPlugin::EyeTextureFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.InitializeMixedReality
bool GlobalNamespace::OVRPlugin::InitializeMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("InitializeMixedReality");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "InitializeMixedReality", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.ShutdownMixedReality
bool GlobalNamespace::OVRPlugin::ShutdownMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("ShutdownMixedReality");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "ShutdownMixedReality", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.IsMixedRealityInitialized
bool GlobalNamespace::OVRPlugin::IsMixedRealityInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("IsMixedRealityInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "IsMixedRealityInitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetExternalCameraCount
int GlobalNamespace::OVRPlugin::GetExternalCameraCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetExternalCameraCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetExternalCameraCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.UpdateExternalCamera
bool GlobalNamespace::OVRPlugin::UpdateExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("UpdateExternalCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "UpdateExternalCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetMixedRealityCameraInfo
bool GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo(int cameraId, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::Posef& calibrationRawPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetMixedRealityCameraInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetMixedRealityCameraInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraId, cameraExtrinsics, cameraIntrinsics, calibrationRawPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, cameraExtrinsics, cameraIntrinsics, calibrationRawPose);
}
// Autogenerated method: OVRPlugin.OverrideExternalCameraFov
bool GlobalNamespace::OVRPlugin::OverrideExternalCameraFov(int cameraId, bool useOverriddenFov, GlobalNamespace::OVRPlugin::Fovf fov) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("OverrideExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "OverrideExternalCameraFov", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraId, useOverriddenFov, fov)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenFov, fov);
}
// Autogenerated method: OVRPlugin.GetUseOverriddenExternalCameraFov
bool GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov(int cameraId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetUseOverriddenExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId);
}
// Autogenerated method: OVRPlugin.OverrideExternalCameraStaticPose
bool GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose(int cameraId, bool useOverriddenPose, GlobalNamespace::OVRPlugin::Posef pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("OverrideExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraId, useOverriddenPose, pose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenPose, pose);
}
// Autogenerated method: OVRPlugin.GetUseOverriddenExternalCameraStaticPose
bool GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose(int cameraId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetUseOverriddenExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId);
}
// Autogenerated method: OVRPlugin.ResetDefaultExternalCamera
bool GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("ResetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "ResetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetDefaultExternalCamera
bool GlobalNamespace::OVRPlugin::SetDefaultExternalCamera(::Il2CppString* cameraName, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cameraName, cameraIntrinsics, cameraExtrinsics)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
// Autogenerated method: OVRPlugin.GetBoundaryDimensions
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::GetBoundaryDimensions(GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetBoundaryDimensions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetBoundaryDimensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(boundaryType)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin.GetBoundaryVisible
bool GlobalNamespace::OVRPlugin::GetBoundaryVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetBoundaryVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetBoundaryVisible
bool GlobalNamespace::OVRPlugin::SetBoundaryVisible(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetBoundaryVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.GetSystemHeadsetType
GlobalNamespace::OVRPlugin::SystemHeadset GlobalNamespace::OVRPlugin::GetSystemHeadsetType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetSystemHeadsetType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetSystemHeadsetType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::SystemHeadset, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetActiveController
GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::GetActiveController() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetActiveController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetActiveController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetConnectedControllers
GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::GetConnectedControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetConnectedControllers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetConnectedControllers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.ToBool
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::ToBool(bool b) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("ToBool");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "ToBool", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(b)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, b);
}
// Autogenerated method: OVRPlugin.GetTrackingOriginType
GlobalNamespace::OVRPlugin::TrackingOrigin GlobalNamespace::OVRPlugin::GetTrackingOriginType() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackingOriginType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackingOriginType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::TrackingOrigin, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetTrackingOriginType
bool GlobalNamespace::OVRPlugin::SetTrackingOriginType(GlobalNamespace::OVRPlugin::TrackingOrigin originType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetTrackingOriginType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetTrackingOriginType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(originType)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, originType);
}
// Autogenerated method: OVRPlugin.GetTrackingCalibratedOrigin
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTrackingCalibratedOrigin");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTrackingCalibratedOrigin", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetTrackingCalibratedOrigin
bool GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetTrackingCalibratedOrigin");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetTrackingCalibratedOrigin", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.RecenterTrackingOrigin
bool GlobalNamespace::OVRPlugin::RecenterTrackingOrigin(GlobalNamespace::OVRPlugin::RecenterFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("RecenterTrackingOrigin");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "RecenterTrackingOrigin", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(flags)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: OVRPlugin.get_fixedFoveatedRenderingSupported
bool GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_fixedFoveatedRenderingSupported");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_fixedFoveatedRenderingSupported", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_fixedFoveatedRenderingLevel
GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_fixedFoveatedRenderingLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_fixedFoveatedRenderingLevel
void GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_fixedFoveatedRenderingLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_tiledMultiResSupported
bool GlobalNamespace::OVRPlugin::get_tiledMultiResSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_tiledMultiResSupported");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_tiledMultiResSupported", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_tiledMultiResLevel
GlobalNamespace::OVRPlugin::TiledMultiResLevel GlobalNamespace::OVRPlugin::get_tiledMultiResLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_tiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_tiledMultiResLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::TiledMultiResLevel, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_tiledMultiResLevel
void GlobalNamespace::OVRPlugin::set_tiledMultiResLevel(GlobalNamespace::OVRPlugin::TiledMultiResLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_tiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_tiledMultiResLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.get_gpuUtilSupported
bool GlobalNamespace::OVRPlugin::get_gpuUtilSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_gpuUtilSupported");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_gpuUtilSupported", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_gpuUtilLevel
float GlobalNamespace::OVRPlugin::get_gpuUtilLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_gpuUtilLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_gpuUtilLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_systemDisplayFrequenciesAvailable
::Array<float>* GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_systemDisplayFrequenciesAvailable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_systemDisplayFrequenciesAvailable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_systemDisplayFrequency
float GlobalNamespace::OVRPlugin::get_systemDisplayFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_systemDisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_systemDisplayFrequency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.set_systemDisplayFrequency
void GlobalNamespace::OVRPlugin::set_systemDisplayFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("set_systemDisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "set_systemDisplayFrequency", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin.GetNodeFrustum2
bool GlobalNamespace::OVRPlugin::GetNodeFrustum2(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Frustumf2& frustum) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetNodeFrustum2");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetNodeFrustum2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nodeId, frustum)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, frustum);
}
// Autogenerated method: OVRPlugin.get_AsymmetricFovEnabled
bool GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_AsymmetricFovEnabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_AsymmetricFovEnabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.get_EyeTextureArrayEnabled
bool GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("get_EyeTextureArrayEnabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "get_EyeTextureArrayEnabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetDominantHand
GlobalNamespace::OVRPlugin::Handedness GlobalNamespace::OVRPlugin::GetDominantHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetDominantHand");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetDominantHand", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Handedness, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetReorientHMDOnControllerRecenter
bool GlobalNamespace::OVRPlugin::GetReorientHMDOnControllerRecenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetReorientHMDOnControllerRecenter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetReorientHMDOnControllerRecenter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetReorientHMDOnControllerRecenter
bool GlobalNamespace::OVRPlugin::SetReorientHMDOnControllerRecenter(bool recenterSetting) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetReorientHMDOnControllerRecenter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetReorientHMDOnControllerRecenter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(recenterSetting)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, recenterSetting);
}
// Autogenerated method: OVRPlugin.SendEvent
bool GlobalNamespace::OVRPlugin::SendEvent(::Il2CppString* name, ::Il2CppString* param, ::Il2CppString* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SendEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SendEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(name, param, source)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, param, source);
}
// Autogenerated method: OVRPlugin.SetHeadPoseModifier
bool GlobalNamespace::OVRPlugin::SetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(relativeRotation, relativeTranslation)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relativeRotation, relativeTranslation);
}
// Autogenerated method: OVRPlugin.GetHeadPoseModifier
bool GlobalNamespace::OVRPlugin::GetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(relativeRotation, relativeTranslation)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relativeRotation, relativeTranslation);
}
// Autogenerated method: OVRPlugin.IsPerfMetricsSupported
bool GlobalNamespace::OVRPlugin::IsPerfMetricsSupported(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("IsPerfMetricsSupported");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "IsPerfMetricsSupported", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(perfMetrics)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics);
}
// Autogenerated method: OVRPlugin.GetPerfMetricsFloat
System::Nullable_1<float> GlobalNamespace::OVRPlugin::GetPerfMetricsFloat(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetPerfMetricsFloat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetPerfMetricsFloat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(perfMetrics)));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<float>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics);
}
// Autogenerated method: OVRPlugin.GetPerfMetricsInt
System::Nullable_1<int> GlobalNamespace::OVRPlugin::GetPerfMetricsInt(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetPerfMetricsInt");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetPerfMetricsInt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(perfMetrics)));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics);
}
// Autogenerated method: OVRPlugin.GetTimeInSeconds
double GlobalNamespace::OVRPlugin::GetTimeInSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetTimeInSeconds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetTimeInSeconds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.SetColorScaleAndOffset
bool GlobalNamespace::OVRPlugin::SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool applyToAllLayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetColorScaleAndOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetColorScaleAndOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorScale, colorOffset, applyToAllLayers)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, colorScale, colorOffset, applyToAllLayers);
}
// Autogenerated method: OVRPlugin.AddCustomMetadata
bool GlobalNamespace::OVRPlugin::AddCustomMetadata(::Il2CppString* name, ::Il2CppString* param) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("AddCustomMetadata");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "AddCustomMetadata", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(name, param)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, param);
}
// Autogenerated method: OVRPlugin.SetDeveloperMode
bool GlobalNamespace::OVRPlugin::SetDeveloperMode(GlobalNamespace::OVRPlugin::Bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("SetDeveloperMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "SetDeveloperMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(active)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, active);
}
// Autogenerated method: OVRPlugin.GetAdaptiveGPUPerformanceScale
float GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetAdaptiveGPUPerformanceScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetAdaptiveGPUPerformanceScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetHandTrackingEnabled
bool GlobalNamespace::OVRPlugin::GetHandTrackingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetHandTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetHandTrackingEnabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin.GetHandState
bool GlobalNamespace::OVRPlugin::GetHandState(GlobalNamespace::OVRPlugin::Step stepId, GlobalNamespace::OVRPlugin::Hand hand, GlobalNamespace::OVRPlugin::HandState& handState) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetHandState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetHandState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(stepId, hand, handState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stepId, hand, handState);
}
// Autogenerated method: OVRPlugin.GetSkeleton
bool GlobalNamespace::OVRPlugin::GetSkeleton(GlobalNamespace::OVRPlugin::SkeletonType skeletonType, GlobalNamespace::OVRPlugin::Skeleton& skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetSkeleton");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetSkeleton", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(skeletonType, skeleton)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, skeletonType, skeleton);
}
// Autogenerated method: OVRPlugin.GetMesh
bool GlobalNamespace::OVRPlugin::GetMesh(GlobalNamespace::OVRPlugin::MeshType meshType, GlobalNamespace::OVRPlugin::Mesh*& mesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(meshType, mesh)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, meshType, mesh);
}
// Autogenerated method: OVRPlugin.GetSystemHmd3DofModeEnabled
bool GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext("GetSystemHmd3DofModeEnabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", "GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin..cctor
void GlobalNamespace::OVRPlugin::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRPlugin").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRPlugin", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
