// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: BezierSpline/ComputeControlPointsResults
#include "GlobalNamespace/BezierSpline_ComputeControlPointsResults.hpp"
// Including type: BezierSpline/<>c
#include "GlobalNamespace/BezierSpline_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BezierSpline.get_segments
System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* GlobalNamespace::BezierSpline::get_segments() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("get_segments");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_segments", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.AddPoint
void GlobalNamespace::BezierSpline::AddPoint(float distance, UnityEngine::Vector2 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("AddPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(distance, point)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance, point);
}
// Autogenerated method: BezierSpline.SortSourceData
void GlobalNamespace::BezierSpline::SortSourceData() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("SortSourceData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SortSourceData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.AddArtificialStartAndFinishPoint
void GlobalNamespace::BezierSpline::AddArtificialStartAndFinishPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("AddArtificialStartAndFinishPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddArtificialStartAndFinishPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.ComputeControlPoints
void GlobalNamespace::BezierSpline::ComputeControlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("ComputeControlPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeControlPoints", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.Clear
void GlobalNamespace::BezierSpline::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("Clear");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.ComputeControlPoints
GlobalNamespace::BezierSpline::ComputeControlPointsResults GlobalNamespace::BezierSpline::ComputeControlPoints(System::Collections::Generic::List_1<float>* k) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("BezierSpline").WithContext("ComputeControlPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeControlPoints", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(k)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BezierSpline::ComputeControlPointsResults, false>(this, ___internal__method, k);
}
