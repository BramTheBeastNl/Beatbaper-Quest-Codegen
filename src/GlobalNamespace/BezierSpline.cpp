// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: BezierSpline/ComputeControlPointsResults
#include "GlobalNamespace/BezierSpline_ComputeControlPointsResults.hpp"
// Including type: BezierSpline/<>c
#include "GlobalNamespace/BezierSpline_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BezierSpline.get_segments
System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* GlobalNamespace::BezierSpline::get_segments() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*>(this, "get_segments"));
}
// Autogenerated method: BezierSpline.AddPoint
void GlobalNamespace::BezierSpline::AddPoint(float distance, UnityEngine::Vector2 point) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddPoint", distance, point));
}
// Autogenerated method: BezierSpline.SortSourceData
void GlobalNamespace::BezierSpline::SortSourceData() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SortSourceData"));
}
// Autogenerated method: BezierSpline.AddArtificialStartAndFinishPoint
void GlobalNamespace::BezierSpline::AddArtificialStartAndFinishPoint() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddArtificialStartAndFinishPoint"));
}
// Autogenerated method: BezierSpline.ComputeControlPoints
void GlobalNamespace::BezierSpline::ComputeControlPoints() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ComputeControlPoints"));
}
// Autogenerated method: BezierSpline.Clear
void GlobalNamespace::BezierSpline::Clear() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
}
// Autogenerated method: BezierSpline.ComputeControlPoints
GlobalNamespace::BezierSpline::ComputeControlPointsResults GlobalNamespace::BezierSpline::ComputeControlPoints(System::Collections::Generic::List_1<float>* k) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::BezierSpline::ComputeControlPointsResults>(this, "ComputeControlPoints", k));
}
// Autogenerated method: BezierSpline..ctor
GlobalNamespace::BezierSpline* GlobalNamespace::BezierSpline::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<BezierSpline*>());
}
