// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMinLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_get_kMinLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMinLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMinLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_set_kMinLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMinLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMaxLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_get_kMaxLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMaxLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMaxLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_set_kMaxLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMaxLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kLifeTimeOffset
float GlobalNamespace::NoteDebrisSpawner::_get_kLifeTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_get_kLifeTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kLifeTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLifeTimeOffset
void GlobalNamespace::NoteDebrisSpawner::_set_kLifeTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("_set_kLifeTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kLifeTimeOffset", value));
}
// Autogenerated method: NoteDebrisSpawner.SpawnDebris
void GlobalNamespace::NoteDebrisSpawner::SpawnDebris(UnityEngine::Vector3 cutPoint, UnityEngine::Vector3 cutNormal, float saberSpeed, UnityEngine::Vector3 saberDir, UnityEngine::Vector3 notePos, UnityEngine::Quaternion noteRotation, GlobalNamespace::ColorType colorType, float timeToNextColorNote, UnityEngine::Vector3 moveVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("SpawnDebris");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SpawnDebris", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cutPoint, cutNormal, saberSpeed, saberDir, notePos, noteRotation, colorType, timeToNextColorNote, moveVec)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutPoint, cutNormal, saberSpeed, saberDir, notePos, noteRotation, colorType, timeToNextColorNote, moveVec);
}
// Autogenerated method: NoteDebrisSpawner.HandleNoteDebrisDidFinish
void GlobalNamespace::NoteDebrisSpawner::HandleNoteDebrisDidFinish(GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("NoteDebrisSpawner").WithContext("HandleNoteDebrisDidFinish");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleNoteDebrisDidFinish", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(noteDebris)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteDebris);
}
