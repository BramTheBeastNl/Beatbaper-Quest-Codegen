// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Up
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Up() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Up
void GlobalNamespace::NoteCutDirection::_set_Up(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Down
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Down() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Down
void GlobalNamespace::NoteCutDirection::_set_Down(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Left
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Left() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Left
void GlobalNamespace::NoteCutDirection::_set_Left(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Right
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Right() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Right
void GlobalNamespace::NoteCutDirection::_set_Right(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpLeft() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpLeft
void GlobalNamespace::NoteCutDirection::_set_UpLeft(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpRight() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpRight
void GlobalNamespace::NoteCutDirection::_set_UpRight(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownLeft() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownLeft
void GlobalNamespace::NoteCutDirection::_set_DownLeft(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownRight() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownRight
void GlobalNamespace::NoteCutDirection::_set_DownRight(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Any
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Any() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Any"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Any
void GlobalNamespace::NoteCutDirection::_set_Any(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection None
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_None() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection None
void GlobalNamespace::NoteCutDirection::_set_None(GlobalNamespace::NoteCutDirection value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "None", value));
}
