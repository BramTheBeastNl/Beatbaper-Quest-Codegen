// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: LiteNetLibConnectionManager/LiteNetLibConnectionParamsBase
#include "GlobalNamespace/LiteNetLibConnectionManager_LiteNetLibConnectionParamsBase.hpp"
// Including type: LiteNetLibConnectionManager/StartServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartServerParams.hpp"
// Including type: LiteNetLibConnectionManager/StartRelayParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartRelayParams.hpp"
// Including type: LiteNetLibConnectionManager/StartClientParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartClientParams.hpp"
// Including type: LiteNetLibConnectionManager/ConnectToServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_ConnectToServerParams.hpp"
// Including type: LiteNetLibConnectionManager/NetPeerConnectionRequest
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnectionRequest.hpp"
// Including type: LiteNetLibConnectionManager/NetPeerConnection
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnection.hpp"
// Including type: LiteNetLibConnectionManager/<>c
#include "GlobalNamespace/LiteNetLibConnectionManager_--c.hpp"
// Including type: LiteNetLibConnectionManager/<BackgroundDisconnectSentry>d__113
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundDisconnectSentry-d__113.hpp"
// Including type: LiteNetLibConnectionManager/<BackgroundShutdownSentry>d__114
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundShutdownSentry-d__114.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 kBackgroundDisconnectTimeout
int64_t GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundDisconnectTimeout() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "LiteNetLibConnectionManager", "kBackgroundDisconnectTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kBackgroundDisconnectTimeout
void GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundDisconnectTimeout(int64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager", "kBackgroundDisconnectTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kBackgroundShutdownTimeout
int64_t GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundShutdownTimeout() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "LiteNetLibConnectionManager", "kBackgroundShutdownTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kBackgroundShutdownTimeout
void GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundShutdownTimeout(int64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager", "kBackgroundShutdownTimeout", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onReceiveUnconnectedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onReceiveUnconnectedDataEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onReceiveUnconnectedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onReceiveUnconnectedDataEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.get_hasConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::get_hasConnectionOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_hasConnectionOwner"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isRelay
bool GlobalNamespace::LiteNetLibConnectionManager::get_isRelay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isRelay"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isServer
bool GlobalNamespace::LiteNetLibConnectionManager::get_isServer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isServer"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isClient
bool GlobalNamespace::LiteNetLibConnectionManager::get_isClient() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isClient"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_secret
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_secret() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_secret"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_port
int GlobalNamespace::LiteNetLibConnectionManager::get_port() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_port"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_encryptionLayer
GlobalNamespace::PacketEncryptionLayer* GlobalNamespace::LiteNetLibConnectionManager::get_encryptionLayer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::PacketEncryptionLayer*>(this, "get_encryptionLayer"));
}
// Autogenerated method: LiteNetLibConnectionManager.SendUnconnectedMessage
void GlobalNamespace::LiteNetLibConnectionManager::SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* endPoint) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendUnconnectedMessage", writer, endPoint));
}
// Autogenerated method: LiteNetLibConnectionManager.SendUnconnectedMessage
void GlobalNamespace::LiteNetLibConnectionManager::SendUnconnectedMessage(::Array<uint8_t>* message, int offset, int length, System::Net::IPEndPoint* endPoint) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendUnconnectedMessage", message, offset, length, endPoint));
}
// Autogenerated method: LiteNetLibConnectionManager.SetSecret
void GlobalNamespace::LiteNetLibConnectionManager::SetSecret(::Il2CppString* secret) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetSecret", secret));
}
// Autogenerated method: LiteNetLibConnectionManager.ConnectToEndPoint
void GlobalNamespace::LiteNetLibConnectionManager::ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* remoteUserId, ::Il2CppString* remoteUserName, bool remoteUserIsConnectionOwner) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ConnectToEndPoint", remoteEndPoint, remoteUserId, remoteUserName, remoteUserIsConnectionOwner));
}
// Autogenerated method: LiteNetLibConnectionManager.DisconnectInternal
void GlobalNamespace::LiteNetLibConnectionManager::DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisconnectInternal", disconnectedReason, connectionFailedReason));
}
// Autogenerated method: LiteNetLibConnectionManager.TryStartNetManager
bool GlobalNamespace::LiteNetLibConnectionManager::TryStartNetManager(int port, bool enableBackgroundSentry) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryStartNetManager", port, enableBackgroundSentry));
}
// Autogenerated method: LiteNetLibConnectionManager.StartBackgroundSentry
void GlobalNamespace::LiteNetLibConnectionManager::StartBackgroundSentry() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StartBackgroundSentry"));
}
// Autogenerated method: LiteNetLibConnectionManager.CheckSentryState
void GlobalNamespace::LiteNetLibConnectionManager::CheckSentryState() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CheckSentryState"));
}
// Autogenerated method: LiteNetLibConnectionManager.IsConnectedToUser
bool GlobalNamespace::LiteNetLibConnectionManager::IsConnectedToUser(::Il2CppString* userId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsConnectedToUser", userId));
}
// Autogenerated method: LiteNetLibConnectionManager.HasConnectionToEndPoint
bool GlobalNamespace::LiteNetLibConnectionManager::HasConnectionToEndPoint(System::Net::IPEndPoint* endPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HasConnectionToEndPoint", endPoint));
}
// Autogenerated method: LiteNetLibConnectionManager.HasPendingConnectionToEndPoint
bool GlobalNamespace::LiteNetLibConnectionManager::HasPendingConnectionToEndPoint(System::Net::IPEndPoint* endPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HasPendingConnectionToEndPoint", endPoint));
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnection
GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* GlobalNamespace::LiteNetLibConnectionManager::GetConnection(LiteNetLib::NetPeer* peer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>(this, "GetConnection", peer));
}
// Autogenerated method: LiteNetLibConnectionManager.AcceptAllPendingRequests
void GlobalNamespace::LiteNetLibConnectionManager::AcceptAllPendingRequests() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AcceptAllPendingRequests"));
}
// Autogenerated method: LiteNetLibConnectionManager.TryAccept
void GlobalNamespace::LiteNetLibConnectionManager::TryAccept(LiteNetLib::ConnectionRequest* request, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TryAccept", request, userId, userName, isConnectionOwner));
}
// Autogenerated method: LiteNetLibConnectionManager.CreatePendingConnection
void GlobalNamespace::LiteNetLibConnectionManager::CreatePendingConnection(LiteNetLib::NetPeer* peer, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CreatePendingConnection", peer, userId, userName, isConnectionOwner));
}
// Autogenerated method: LiteNetLibConnectionManager.RemoveConnection
void GlobalNamespace::LiteNetLibConnectionManager::RemoveConnection(LiteNetLib::NetPeer* netPeer, LiteNetLib::DisconnectReason reason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveConnection", netPeer, reason));
}
// Autogenerated method: LiteNetLibConnectionManager.TryDisconnect
void GlobalNamespace::LiteNetLibConnectionManager::TryDisconnect(LiteNetLib::DisconnectReason reason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TryDisconnect", reason));
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnectionMessage
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::LiteNetLibConnectionManager::GetConnectionMessage() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::NetDataWriter*>(this, "GetConnectionMessage"));
}
// Autogenerated method: LiteNetLibConnectionManager.ParseConnectionMessage
bool GlobalNamespace::LiteNetLibConnectionManager::ParseConnectionMessage(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppString*& secret, ::Il2CppString*& userId, ::Il2CppString*& userName, bool& isConnectionOwner) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ParseConnectionMessage", reader, secret, userId, userName, isConnectionOwner));
}
// Autogenerated method: LiteNetLibConnectionManager.BackgroundDisconnectSentry
System::Threading::Tasks::Task* GlobalNamespace::LiteNetLibConnectionManager::BackgroundDisconnectSentry() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "BackgroundDisconnectSentry"));
}
// Autogenerated method: LiteNetLibConnectionManager.BackgroundShutdownSentry
System::Threading::Tasks::Task* GlobalNamespace::LiteNetLibConnectionManager::BackgroundShutdownSentry() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "BackgroundShutdownSentry"));
}
// Autogenerated method: LiteNetLibConnectionManager.Log
void GlobalNamespace::LiteNetLibConnectionManager::Log(::Il2CppString* msg) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Log", msg));
}
// Autogenerated method: LiteNetLibConnectionManager.LogError
void GlobalNamespace::LiteNetLibConnectionManager::LogError(::Il2CppString* msg) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LogError", msg));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectedEvent(System::Action* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onDisconnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onDisconnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionFailedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionFailedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionConnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionConnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onConnectionDisconnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onConnectionDisconnectedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onLatencyUpdatedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onLatencyUpdatedEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_onReceivedDataEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_onReceivedDataEvent", value));
}
// Autogenerated method: LiteNetLibConnectionManager.get_userId
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_userId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userId"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_userName
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_userName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_userName"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnected
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnected() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnected"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnecting
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnecting() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnecting"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnectionOwner() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isConnectionOwner"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_isDisposed
bool GlobalNamespace::LiteNetLibConnectionManager::get_isDisposed() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isDisposed"));
}
// Autogenerated method: LiteNetLibConnectionManager.get_connectionCount
int GlobalNamespace::LiteNetLibConnectionManager::get_connectionCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_connectionCount"));
}
// Autogenerated method: LiteNetLibConnectionManager..ctor
GlobalNamespace::LiteNetLibConnectionManager* GlobalNamespace::LiteNetLibConnectionManager::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<LiteNetLibConnectionManager*>());
}
// Autogenerated method: LiteNetLibConnectionManager.SendToAll
void GlobalNamespace::LiteNetLibConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, deliveryMethod));
}
// Autogenerated method: LiteNetLibConnectionManager.SendToAll
void GlobalNamespace::LiteNetLibConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SendToAll", writer, deliveryMethod, excludingConnection));
}
// Autogenerated method: LiteNetLibConnectionManager.PollUpdate
void GlobalNamespace::LiteNetLibConnectionManager::PollUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PollUpdate"));
}
// Autogenerated method: LiteNetLibConnectionManager.Dispose
void GlobalNamespace::LiteNetLibConnectionManager::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void GlobalNamespace::LiteNetLibConnectionManager::System_IDisposable_Dispose() {
  GlobalNamespace::LiteNetLibConnectionManager::Dispose();
}
// Autogenerated method: LiteNetLibConnectionManager.Disconnect
void GlobalNamespace::LiteNetLibConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Disconnect", disconnectedReason));
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::LiteNetLibConnectionManager::GetConnection(int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IConnection*>(this, "GetConnection", index));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnPeerConnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnPeerConnected", peer));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkError
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnNetworkError", endPoint, socketErrorCode));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latencyMs) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", peer, latencyMs));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnConnectionRequest
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnConnectionRequest", request));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnPeerDisconnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnPeerDisconnected", peer, disconnectInfo));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkReceive
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceive", peer, reader, deliveryMethod));
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", remoteEndPoint, reader, messageType));
}
