// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Controller
#include "GlobalNamespace/SteamVR_Controller.hpp"
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_Controller/Device[] devices
::Array<GlobalNamespace::SteamVR_Controller::Device*>* GlobalNamespace::SteamVR_Controller::_get_devices() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_Controller::Device*>*>("", "SteamVR_Controller", "devices"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Controller/Device[] devices
void GlobalNamespace::SteamVR_Controller::_set_devices(::Array<GlobalNamespace::SteamVR_Controller::Device*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller", "devices", value));
}
// Autogenerated method: SteamVR_Controller.Input
GlobalNamespace::SteamVR_Controller::Device* GlobalNamespace::SteamVR_Controller::Input(int deviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_Controller::Device*>("", "SteamVR_Controller", "Input", deviceIndex));
}
// Autogenerated method: SteamVR_Controller.Update
void GlobalNamespace::SteamVR_Controller::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_Controller", "Update"));
}
// Autogenerated method: SteamVR_Controller.GetDeviceIndex
int GlobalNamespace::SteamVR_Controller::GetDeviceIndex(GlobalNamespace::SteamVR_Controller::DeviceRelation relation, Valve::VR::ETrackedDeviceClass deviceClass, int relativeTo) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("", "SteamVR_Controller", "GetDeviceIndex", relation, deviceClass, relativeTo));
}
// Autogenerated method: SteamVR_Controller..ctor
GlobalNamespace::SteamVR_Controller* GlobalNamespace::SteamVR_Controller::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<SteamVR_Controller*>());
}
