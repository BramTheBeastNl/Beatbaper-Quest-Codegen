// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomizedPitch
#include "GlobalNamespace/RandomizedPitch.hpp"
// Including type: RandomizedPitch/<PlayDelayedCoroutine>d__9
#include "GlobalNamespace/RandomizedPitch_-PlayDelayedCoroutine-d__9.hpp"
// Including type: RandomizedPitch/<RestorePitchWithDelay>d__10
#include "GlobalNamespace/RandomizedPitch_-RestorePitchWithDelay-d__10.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RandomizedPitch.OnEnable
void GlobalNamespace::RandomizedPitch::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: RandomizedPitch.Play
void GlobalNamespace::RandomizedPitch::Play() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Play"));
}
// Autogenerated method: RandomizedPitch.PlayDelayed
void GlobalNamespace::RandomizedPitch::PlayDelayed(float delay) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PlayDelayed", delay));
}
// Autogenerated method: RandomizedPitch.PlayDelayedCoroutine
System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::PlayDelayedCoroutine(float delay) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "PlayDelayedCoroutine", delay));
}
// Autogenerated method: RandomizedPitch.RestorePitchWithDelay
System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::RestorePitchWithDelay(float delay) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "RestorePitchWithDelay", delay));
}
// Autogenerated method: RandomizedPitch..ctor
GlobalNamespace::RandomizedPitch* GlobalNamespace::RandomizedPitch::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<RandomizedPitch*>());
}
