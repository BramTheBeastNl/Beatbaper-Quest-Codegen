// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel
#include "GlobalNamespace/SteamVR_LoadLevel.hpp"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__45
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__45.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_LoadLevel _active
GlobalNamespace::SteamVR_LoadLevel* GlobalNamespace::SteamVR_LoadLevel::_get__active() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_LoadLevel*>("", "SteamVR_LoadLevel", "_active"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_LoadLevel _active
void GlobalNamespace::SteamVR_LoadLevel::_set__active(GlobalNamespace::SteamVR_LoadLevel* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_LoadLevel", "_active", value));
}
// Autogenerated method: SteamVR_LoadLevel.get_loading
bool GlobalNamespace::SteamVR_LoadLevel::get_loading() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("", "SteamVR_LoadLevel", "get_loading"));
}
// Autogenerated method: SteamVR_LoadLevel.get_progress
float GlobalNamespace::SteamVR_LoadLevel::get_progress() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("", "SteamVR_LoadLevel", "get_progress"));
}
// Autogenerated method: SteamVR_LoadLevel.get_progressTexture
UnityEngine::Texture* GlobalNamespace::SteamVR_LoadLevel::get_progressTexture() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Texture*>("", "SteamVR_LoadLevel", "get_progressTexture"));
}
// Autogenerated method: SteamVR_LoadLevel.OnEnable
void GlobalNamespace::SteamVR_LoadLevel::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: SteamVR_LoadLevel.Trigger
void GlobalNamespace::SteamVR_LoadLevel::Trigger() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Trigger"));
}
// Autogenerated method: SteamVR_LoadLevel.Begin
void GlobalNamespace::SteamVR_LoadLevel::Begin(::CsString* levelName, bool showGrid, float fadeOutTime, float r, float g, float b, float a) {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_LoadLevel", "Begin", levelName, showGrid, fadeOutTime, r, g, b, a));
}
// Autogenerated method: SteamVR_LoadLevel.OnGUI
void GlobalNamespace::SteamVR_LoadLevel::OnGUI() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnGUI"));
}
// Autogenerated method: SteamVR_LoadLevel.Update
void GlobalNamespace::SteamVR_LoadLevel::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update"));
}
// Autogenerated method: SteamVR_LoadLevel.LoadLevel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_LoadLevel::LoadLevel() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "LoadLevel"));
}
// Autogenerated method: SteamVR_LoadLevel.GetOverlayHandle
uint64_t GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle(::CsString* overlayName, UnityEngine::Transform* transform, float widthInMeters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint64_t>(this, "GetOverlayHandle", overlayName, transform, widthInMeters));
}
// Autogenerated method: SteamVR_LoadLevel..ctor
GlobalNamespace::SteamVR_LoadLevel* GlobalNamespace::SteamVR_LoadLevel::New_ctor() {
  return (SteamVR_LoadLevel*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_LoadLevel"));
}
// Autogenerated method: SteamVR_LoadLevel..cctor
void GlobalNamespace::SteamVR_LoadLevel::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_LoadLevel", ".cctor"));
}
