// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.RenderModel_t
#include "Valve/VR/RenderModel_t.hpp"
// Including type: Valve.VR.RenderModel_TextureMap_t
#include "Valve/VR/RenderModel_TextureMap_t.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String modelOverrideWarning
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "modelOverrideWarning"));
}
// Autogenerated static field setter
// Set static field: static public System.String modelOverrideWarning
void GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "modelOverrideWarning", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_localTransformName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "k_localTransformName"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_localTransformName
void GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "k_localTransformName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable models
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_models() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "models"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable models
void GlobalNamespace::SteamVR_RenderModel::_set_models(System::Collections::Hashtable* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "models", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable materials
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_materials() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "materials"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable materials
void GlobalNamespace::SteamVR_RenderModel::_set_materials(System::Collections::Hashtable* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "materials", value));
}
// Autogenerated method: SteamVR_RenderModel.get_renderModelName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::get_renderModelName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_renderModelName"));
}
// Autogenerated method: SteamVR_RenderModel.set_renderModelName
void GlobalNamespace::SteamVR_RenderModel::set_renderModelName(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_renderModelName", value));
}
// Autogenerated method: SteamVR_RenderModel.OnModelSkinSettingsHaveChanged
void GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged(Valve::VR::VREvent_t vrEvent) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnModelSkinSettingsHaveChanged", vrEvent));
}
// Autogenerated method: SteamVR_RenderModel.OnHideRenderModels
void GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels(bool hidden) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnHideRenderModels", hidden));
}
// Autogenerated method: SteamVR_RenderModel.OnDeviceConnected
void GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected(int i, bool connected) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDeviceConnected", i, connected));
}
// Autogenerated method: SteamVR_RenderModel.UpdateModel
void GlobalNamespace::SteamVR_RenderModel::UpdateModel() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateModel"));
}
// Autogenerated method: SteamVR_RenderModel.SetModelAsync
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::SetModelAsync(::Il2CppString* renderModelName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "SetModelAsync", renderModelName));
}
// Autogenerated method: SteamVR_RenderModel.SetModel
bool GlobalNamespace::SteamVR_RenderModel::SetModel(::Il2CppString* renderModelName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SetModel", renderModelName));
}
// Autogenerated method: SteamVR_RenderModel.LoadRenderModel
GlobalNamespace::SteamVR_RenderModel::RenderModel* GlobalNamespace::SteamVR_RenderModel::LoadRenderModel(Valve::VR::CVRRenderModels* renderModels, ::Il2CppString* renderModelName, ::Il2CppString* baseName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::SteamVR_RenderModel::RenderModel*>(this, "LoadRenderModel", renderModels, renderModelName, baseName));
}
// Autogenerated method: SteamVR_RenderModel.FreeRenderModel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::FreeRenderModel(System::IntPtr pRenderModel) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "FreeRenderModel", pRenderModel));
}
// Autogenerated method: SteamVR_RenderModel.FindComponent
UnityEngine::Transform* GlobalNamespace::SteamVR_RenderModel::FindComponent(::Il2CppString* componentName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>(this, "FindComponent", componentName));
}
// Autogenerated method: SteamVR_RenderModel.StripMesh
void GlobalNamespace::SteamVR_RenderModel::StripMesh(UnityEngine::GameObject* go) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StripMesh", go));
}
// Autogenerated method: SteamVR_RenderModel.LoadComponents
bool GlobalNamespace::SteamVR_RenderModel::LoadComponents(GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder* holder, ::Il2CppString* renderModelName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "LoadComponents", holder, renderModelName));
}
// Autogenerated method: SteamVR_RenderModel.OnEnable
void GlobalNamespace::SteamVR_RenderModel::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: SteamVR_RenderModel.OnDisable
void GlobalNamespace::SteamVR_RenderModel::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: SteamVR_RenderModel.Update
void GlobalNamespace::SteamVR_RenderModel::Update() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update"));
}
// Autogenerated method: SteamVR_RenderModel.UpdateComponents
void GlobalNamespace::SteamVR_RenderModel::UpdateComponents(Valve::VR::CVRRenderModels* renderModels) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateComponents", renderModels));
}
// Autogenerated method: SteamVR_RenderModel.SetDeviceIndex
void GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex(int index) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetDeviceIndex", index));
}
// Autogenerated method: SteamVR_RenderModel.Sleep
void GlobalNamespace::SteamVR_RenderModel::Sleep() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_RenderModel", "Sleep"));
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel
Valve::VR::RenderModel_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel(System::IntPtr pRenderModel) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::RenderModel_t>(this, "MarshalRenderModel", pRenderModel));
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel_TextureMap
Valve::VR::RenderModel_TextureMap_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap(System::IntPtr pRenderModel) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::RenderModel_TextureMap_t>(this, "MarshalRenderModel_TextureMap", pRenderModel));
}
// Autogenerated method: SteamVR_RenderModel..ctor
GlobalNamespace::SteamVR_RenderModel* GlobalNamespace::SteamVR_RenderModel::New_ctor() {
  return (SteamVR_RenderModel*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_RenderModel"));
}
// Autogenerated method: SteamVR_RenderModel..cctor
void GlobalNamespace::SteamVR_RenderModel::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_RenderModel", ".cctor"));
}
