// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataValid
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataValid
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataHighConfidence
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataHighConfidence
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("MeshRendererData").WithContext("set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
