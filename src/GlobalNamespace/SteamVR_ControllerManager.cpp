// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ControllerManager
#include "GlobalNamespace/SteamVR_ControllerManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String hiddenPrefix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_get_hiddenPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPrefix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_set_hiddenPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String hiddenPostfix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_get_hiddenPostfix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPostfix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_set_hiddenPostfix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPostfix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String[] labels
::Array<::Il2CppString*>* GlobalNamespace::SteamVR_ControllerManager::_get_labels() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_get_labels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("", "SteamVR_ControllerManager", "labels"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] labels
void GlobalNamespace::SteamVR_ControllerManager::_set_labels(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("_set_labels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "labels", value));
}
// Autogenerated method: SteamVR_ControllerManager.SetUniqueObject
void GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject(UnityEngine::GameObject* o, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("SetUniqueObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetUniqueObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(o, index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, o, index);
}
// Autogenerated method: SteamVR_ControllerManager.UpdateTargets
void GlobalNamespace::SteamVR_ControllerManager::UpdateTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("UpdateTargets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateTargets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.Awake
void GlobalNamespace::SteamVR_ControllerManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnEnable
void GlobalNamespace::SteamVR_ControllerManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnDisable
void GlobalNamespace::SteamVR_ControllerManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnInputFocus
void GlobalNamespace::SteamVR_ControllerManager::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hasFocus)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_ControllerManager.HideObject
void GlobalNamespace::SteamVR_ControllerManager::HideObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("HideObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, name)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.ShowObject
void GlobalNamespace::SteamVR_ControllerManager::ShowObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("ShowObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, name)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.SetTrackedDeviceIndex
void GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("SetTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(objectIndex, trackedDeviceIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, objectIndex, trackedDeviceIndex);
}
// Autogenerated method: SteamVR_ControllerManager.OnTrackedDeviceRoleChanged
void GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("OnTrackedDeviceRoleChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnTrackedDeviceRoleChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_ControllerManager.OnDeviceConnected
void GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_ControllerManager.Refresh
void GlobalNamespace::SteamVR_ControllerManager::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext("Refresh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager..cctor
void GlobalNamespace::SteamVR_ControllerManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SteamVR_ControllerManager").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_ControllerManager", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
