// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ControllerManager
#include "GlobalNamespace/SteamVR_ControllerManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String hiddenPrefix
::CsString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsString*>("", "SteamVR_ControllerManager", "hiddenPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPrefix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix(::CsString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String hiddenPostfix
::CsString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsString*>("", "SteamVR_ControllerManager", "hiddenPostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPostfix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix(::CsString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPostfix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String[] labels
::Array<::CsString*>* GlobalNamespace::SteamVR_ControllerManager::_get_labels() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::CsString*>*>("", "SteamVR_ControllerManager", "labels"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] labels
void GlobalNamespace::SteamVR_ControllerManager::_set_labels(::Array<::CsString*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "labels", value));
}
// Autogenerated method: SteamVR_ControllerManager.SetUniqueObject
void GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject(UnityEngine::GameObject* o, int index) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetUniqueObject", o, index));
}
// Autogenerated method: SteamVR_ControllerManager.UpdateTargets
void GlobalNamespace::SteamVR_ControllerManager::UpdateTargets() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateTargets"));
}
// Autogenerated method: SteamVR_ControllerManager.Awake
void GlobalNamespace::SteamVR_ControllerManager::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: SteamVR_ControllerManager.OnEnable
void GlobalNamespace::SteamVR_ControllerManager::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: SteamVR_ControllerManager.OnDisable
void GlobalNamespace::SteamVR_ControllerManager::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: SteamVR_ControllerManager.OnInputFocus
void GlobalNamespace::SteamVR_ControllerManager::OnInputFocus(bool hasFocus) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnInputFocus", hasFocus));
}
// Autogenerated method: SteamVR_ControllerManager.HideObject
void GlobalNamespace::SteamVR_ControllerManager::HideObject(UnityEngine::Transform* t, ::CsString* name) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HideObject", t, name));
}
// Autogenerated method: SteamVR_ControllerManager.ShowObject
void GlobalNamespace::SteamVR_ControllerManager::ShowObject(UnityEngine::Transform* t, ::CsString* name) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ShowObject", t, name));
}
// Autogenerated method: SteamVR_ControllerManager.SetTrackedDeviceIndex
void GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTrackedDeviceIndex", objectIndex, trackedDeviceIndex));
}
// Autogenerated method: SteamVR_ControllerManager.OnTrackedDeviceRoleChanged
void GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged(Valve::VR::VREvent_t vrEvent) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnTrackedDeviceRoleChanged", vrEvent));
}
// Autogenerated method: SteamVR_ControllerManager.OnDeviceConnected
void GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected(int index, bool connected) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDeviceConnected", index, connected));
}
// Autogenerated method: SteamVR_ControllerManager.Refresh
void GlobalNamespace::SteamVR_ControllerManager::Refresh() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Refresh"));
}
// Autogenerated method: SteamVR_ControllerManager..ctor
GlobalNamespace::SteamVR_ControllerManager* GlobalNamespace::SteamVR_ControllerManager::New_ctor() {
  return (SteamVR_ControllerManager*)THROW_UNLESS(il2cpp_utils::New("", "SteamVR_ControllerManager"));
}
// Autogenerated method: SteamVR_ControllerManager..cctor
void GlobalNamespace::SteamVR_ControllerManager::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("", "SteamVR_ControllerManager", ".cctor"));
}
