// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.Canvas/WillRenderCanvases
#include "UnityEngine/Canvas_WillRenderCanvases.hpp"
// Including type: UnityEngine.RenderMode
#include "UnityEngine/RenderMode.hpp"
// Including type: UnityEngine.AdditionalCanvasShaderChannels
#include "UnityEngine/AdditionalCanvasShaderChannels.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDB4F74
// [DebuggerBrowsableAttribute] Offset: 0xDB4F74
// Autogenerated static field getter
// Get static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
UnityEngine::Canvas::WillRenderCanvases* UnityEngine::Canvas::_get_willRenderCanvases() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::_get_willRenderCanvases");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Canvas::WillRenderCanvases*>("UnityEngine", "Canvas", "willRenderCanvases"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
void UnityEngine::Canvas::_set_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::_set_willRenderCanvases");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Canvas", "willRenderCanvases", value));
}
// Autogenerated method: UnityEngine.Canvas.add_willRenderCanvases
void UnityEngine::Canvas::add_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::add_willRenderCanvases");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "add_willRenderCanvases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.remove_willRenderCanvases
void UnityEngine::Canvas::remove_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::remove_willRenderCanvases");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "remove_willRenderCanvases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_renderMode
UnityEngine::RenderMode UnityEngine::Canvas::get_renderMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_renderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_renderMode
void UnityEngine::Canvas::set_renderMode(UnityEngine::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_renderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_renderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_isRootCanvas
bool UnityEngine::Canvas::get_isRootCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_isRootCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRootCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.get_scaleFactor
float UnityEngine::Canvas::get_scaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_scaleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scaleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_scaleFactor
void UnityEngine::Canvas::set_scaleFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_scaleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scaleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_referencePixelsPerUnit
float UnityEngine::Canvas::get_referencePixelsPerUnit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_referencePixelsPerUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_referencePixelsPerUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_referencePixelsPerUnit
void UnityEngine::Canvas::set_referencePixelsPerUnit(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_referencePixelsPerUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_referencePixelsPerUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_pixelPerfect
bool UnityEngine::Canvas::get_pixelPerfect() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_pixelPerfect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pixelPerfect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_pixelPerfect
void UnityEngine::Canvas::set_pixelPerfect(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_pixelPerfect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pixelPerfect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_renderOrder
int UnityEngine::Canvas::get_renderOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_renderOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.get_overrideSorting
bool UnityEngine::Canvas::get_overrideSorting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_overrideSorting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overrideSorting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_overrideSorting
void UnityEngine::Canvas::set_overrideSorting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_overrideSorting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overrideSorting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_sortingOrder
int UnityEngine::Canvas::get_sortingOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_sortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_sortingOrder
void UnityEngine::Canvas::set_sortingOrder(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_sortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_targetDisplay
int UnityEngine::Canvas::get_targetDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_targetDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.get_sortingLayerID
int UnityEngine::Canvas::get_sortingLayerID() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_sortingLayerID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortingLayerID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_sortingLayerID
void UnityEngine::Canvas::set_sortingLayerID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_sortingLayerID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortingLayerID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_additionalShaderChannels
UnityEngine::AdditionalCanvasShaderChannels UnityEngine::Canvas::get_additionalShaderChannels() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_additionalShaderChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_additionalShaderChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AdditionalCanvasShaderChannels, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_additionalShaderChannels
void UnityEngine::Canvas::set_additionalShaderChannels(UnityEngine::AdditionalCanvasShaderChannels value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_additionalShaderChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_additionalShaderChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.get_rootCanvas
UnityEngine::Canvas* UnityEngine::Canvas::get_rootCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_rootCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Canvas*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.get_worldCamera
UnityEngine::Camera* UnityEngine::Canvas::get_worldCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::get_worldCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.set_worldCamera
void UnityEngine::Canvas::set_worldCamera(UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::set_worldCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_worldCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Canvas.GetDefaultCanvasMaterial
UnityEngine::Material* UnityEngine::Canvas::GetDefaultCanvasMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::GetDefaultCanvasMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "GetDefaultCanvasMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.GetETC1SupportedCanvasMaterial
UnityEngine::Material* UnityEngine::Canvas::GetETC1SupportedCanvasMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::GetETC1SupportedCanvasMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "GetETC1SupportedCanvasMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.ForceUpdateCanvases
void UnityEngine::Canvas::ForceUpdateCanvases() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::ForceUpdateCanvases");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "ForceUpdateCanvases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas.SendWillRenderCanvases
void UnityEngine::Canvas::SendWillRenderCanvases() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::SendWillRenderCanvases");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Canvas", "SendWillRenderCanvases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Canvas::add_willRenderCanvases
// Il2CppName: add_willRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Canvas::WillRenderCanvases*)>(&Canvas::add_willRenderCanvases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "add_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas::WillRenderCanvases*>()});
  }
};
// Writing MetadataGetter for method: Canvas::remove_willRenderCanvases
// Il2CppName: remove_willRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Canvas::WillRenderCanvases*)>(&Canvas::remove_willRenderCanvases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "remove_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas::WillRenderCanvases*>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_renderMode
// Il2CppName: get_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderMode (Canvas::*)()>(&Canvas::get_renderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_renderMode
// Il2CppName: set_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::RenderMode)>(&Canvas::set_renderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderMode>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_isRootCanvas
// Il2CppName: get_isRootCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_isRootCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_isRootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::get_scaleFactor
// Il2CppName: get_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Canvas::*)()>(&Canvas::get_scaleFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_scaleFactor
// Il2CppName: set_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(float)>(&Canvas::set_scaleFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_referencePixelsPerUnit
// Il2CppName: get_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Canvas::*)()>(&Canvas::get_referencePixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_referencePixelsPerUnit
// Il2CppName: set_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(float)>(&Canvas::set_referencePixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_pixelPerfect
// Il2CppName: get_pixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_pixelPerfect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_pixelPerfect
// Il2CppName: set_pixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(bool)>(&Canvas::set_pixelPerfect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_renderOrder
// Il2CppName: get_renderOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_renderOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_renderOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::get_overrideSorting
// Il2CppName: get_overrideSorting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_overrideSorting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_overrideSorting
// Il2CppName: set_overrideSorting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(bool)>(&Canvas::set_overrideSorting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_sortingOrder
// Il2CppName: get_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_sortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_sortingOrder
// Il2CppName: set_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(int)>(&Canvas::set_sortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_targetDisplay
// Il2CppName: get_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_targetDisplay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::get_sortingLayerID
// Il2CppName: get_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_sortingLayerID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_sortingLayerID
// Il2CppName: set_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(int)>(&Canvas::set_sortingLayerID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_additionalShaderChannels
// Il2CppName: get_additionalShaderChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AdditionalCanvasShaderChannels (Canvas::*)()>(&Canvas::get_additionalShaderChannels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_additionalShaderChannels
// Il2CppName: set_additionalShaderChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::AdditionalCanvasShaderChannels)>(&Canvas::set_additionalShaderChannels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AdditionalCanvasShaderChannels>()});
  }
};
// Writing MetadataGetter for method: Canvas::get_rootCanvas
// Il2CppName: get_rootCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Canvas* (Canvas::*)()>(&Canvas::get_rootCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_rootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::get_worldCamera
// Il2CppName: get_worldCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (Canvas::*)()>(&Canvas::get_worldCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::set_worldCamera
// Il2CppName: set_worldCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::Camera*)>(&Canvas::set_worldCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: Canvas::GetDefaultCanvasMaterial
// Il2CppName: GetDefaultCanvasMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)()>(&Canvas::GetDefaultCanvasMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "GetDefaultCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::GetETC1SupportedCanvasMaterial
// Il2CppName: GetETC1SupportedCanvasMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)()>(&Canvas::GetETC1SupportedCanvasMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "GetETC1SupportedCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::ForceUpdateCanvases
// Il2CppName: ForceUpdateCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Canvas::ForceUpdateCanvases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "ForceUpdateCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::SendWillRenderCanvases
// Il2CppName: SendWillRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Canvas::SendWillRenderCanvases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), "SendWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)()>(&Canvas::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)()>(&Canvas::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Canvas/WillRenderCanvases
#include "UnityEngine/Canvas_WillRenderCanvases.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Canvas/WillRenderCanvases.Invoke
void UnityEngine::Canvas::WillRenderCanvases::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::WillRenderCanvases::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Canvas/WillRenderCanvases.BeginInvoke
System::IAsyncResult* UnityEngine::Canvas::WillRenderCanvases::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::WillRenderCanvases::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: UnityEngine.Canvas/WillRenderCanvases.EndInvoke
void UnityEngine::Canvas::WillRenderCanvases::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::WillRenderCanvases::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: Canvas::WillRenderCanvases::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::WillRenderCanvases::*)(::Il2CppObject*, System::IntPtr)>(&Canvas::WillRenderCanvases::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas::WillRenderCanvases*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::WillRenderCanvases::*)(::Il2CppObject*, System::IntPtr)>(&Canvas::WillRenderCanvases::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas::WillRenderCanvases*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Canvas::WillRenderCanvases::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::WillRenderCanvases::*)()>(&Canvas::WillRenderCanvases::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas::WillRenderCanvases*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Canvas::WillRenderCanvases::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Canvas::WillRenderCanvases::*)(System::AsyncCallback*, ::Il2CppObject*)>(&Canvas::WillRenderCanvases::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas::WillRenderCanvases*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Canvas::WillRenderCanvases::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::WillRenderCanvases::*)(System::IAsyncResult*)>(&Canvas::WillRenderCanvases::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Canvas::WillRenderCanvases*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UISystemProfilerApi
#include "UnityEngine/UISystemProfilerApi.hpp"
// Including type: UnityEngine.UISystemProfilerApi/SampleType
#include "UnityEngine/UISystemProfilerApi_SampleType.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.UISystemProfilerApi.BeginSample
void UnityEngine::UISystemProfilerApi::BeginSample(UnityEngine::UISystemProfilerApi::SampleType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::BeginSample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UISystemProfilerApi", "BeginSample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.UISystemProfilerApi.EndSample
void UnityEngine::UISystemProfilerApi::EndSample(UnityEngine::UISystemProfilerApi::SampleType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::EndSample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UISystemProfilerApi", "EndSample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.UISystemProfilerApi.AddMarker
void UnityEngine::UISystemProfilerApi::AddMarker(::Il2CppString* name, UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::AddMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UISystemProfilerApi", "AddMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, obj);
}
// Writing MetadataGetter for method: UISystemProfilerApi::BeginSample
// Il2CppName: BeginSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::UISystemProfilerApi::SampleType)>(&UISystemProfilerApi::BeginSample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UISystemProfilerApi*), "BeginSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UISystemProfilerApi::SampleType>()});
  }
};
// Writing MetadataGetter for method: UISystemProfilerApi::EndSample
// Il2CppName: EndSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::UISystemProfilerApi::SampleType)>(&UISystemProfilerApi::EndSample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UISystemProfilerApi*), "EndSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UISystemProfilerApi::SampleType>()});
  }
};
// Writing MetadataGetter for method: UISystemProfilerApi::AddMarker
// Il2CppName: AddMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, UnityEngine::Object*)>(&UISystemProfilerApi::AddMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UISystemProfilerApi*), "AddMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.UISystemProfilerApi/SampleType
#include "UnityEngine/UISystemProfilerApi_SampleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.UISystemProfilerApi/SampleType Layout
UnityEngine::UISystemProfilerApi::SampleType UnityEngine::UISystemProfilerApi::SampleType::_get_Layout() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::SampleType::_get_Layout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::UISystemProfilerApi::SampleType>("UnityEngine", "UISystemProfilerApi/SampleType", "Layout"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.UISystemProfilerApi/SampleType Layout
void UnityEngine::UISystemProfilerApi::SampleType::_set_Layout(UnityEngine::UISystemProfilerApi::SampleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::SampleType::_set_Layout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "UISystemProfilerApi/SampleType", "Layout", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.UISystemProfilerApi/SampleType Render
UnityEngine::UISystemProfilerApi::SampleType UnityEngine::UISystemProfilerApi::SampleType::_get_Render() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::SampleType::_get_Render");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::UISystemProfilerApi::SampleType>("UnityEngine", "UISystemProfilerApi/SampleType", "Render"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.UISystemProfilerApi/SampleType Render
void UnityEngine::UISystemProfilerApi::SampleType::_set_Render(UnityEngine::UISystemProfilerApi::SampleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UISystemProfilerApi::SampleType::_set_Render");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "UISystemProfilerApi/SampleType", "Render", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RemoteSettings
#include "UnityEngine/RemoteSettings.hpp"
// Including type: UnityEngine.RemoteSettings/UpdatedEventHandler
#include "UnityEngine/RemoteSettings_UpdatedEventHandler.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDEB6F8
// [CompilerGeneratedAttribute] Offset: 0xDEB6F8
// Autogenerated static field getter
// Get static field: static private UnityEngine.RemoteSettings/UpdatedEventHandler Updated
UnityEngine::RemoteSettings::UpdatedEventHandler* UnityEngine::RemoteSettings::_get_Updated() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_get_Updated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteSettings::UpdatedEventHandler*>("UnityEngine", "RemoteSettings", "Updated"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.RemoteSettings/UpdatedEventHandler Updated
void UnityEngine::RemoteSettings::_set_Updated(UnityEngine::RemoteSettings::UpdatedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_set_Updated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteSettings", "Updated", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDEB734
// [DebuggerBrowsableAttribute] Offset: 0xDEB734
// Autogenerated static field getter
// Get static field: static private System.Action BeforeFetchFromServer
System::Action* UnityEngine::RemoteSettings::_get_BeforeFetchFromServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_get_BeforeFetchFromServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action*>("UnityEngine", "RemoteSettings", "BeforeFetchFromServer"));
}
// Autogenerated static field setter
// Set static field: static private System.Action BeforeFetchFromServer
void UnityEngine::RemoteSettings::_set_BeforeFetchFromServer(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_set_BeforeFetchFromServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteSettings", "BeforeFetchFromServer", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDEB770
// [DebuggerBrowsableAttribute] Offset: 0xDEB770
// Autogenerated static field getter
// Get static field: static private System.Action`3<System.Boolean,System.Boolean,System.Int32> Completed
System::Action_3<bool, bool, int>* UnityEngine::RemoteSettings::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_get_Completed");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_3<bool, bool, int>*>("UnityEngine", "RemoteSettings", "Completed")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`3<System.Boolean,System.Boolean,System.Int32> Completed
void UnityEngine::RemoteSettings::_set_Completed(System::Action_3<bool, bool, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteSettings", "Completed", value));
}
// Autogenerated method: UnityEngine.RemoteSettings.RemoteSettingsUpdated
void UnityEngine::RemoteSettings::RemoteSettingsUpdated(bool wasLastUpdatedFromServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::RemoteSettingsUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "RemoteSettings", "RemoteSettingsUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wasLastUpdatedFromServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, wasLastUpdatedFromServer);
}
// Autogenerated method: UnityEngine.RemoteSettings.RemoteSettingsBeforeFetchFromServer
void UnityEngine::RemoteSettings::RemoteSettingsBeforeFetchFromServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::RemoteSettingsBeforeFetchFromServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "RemoteSettings", "RemoteSettingsBeforeFetchFromServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.RemoteSettings.RemoteSettingsUpdateCompleted
void UnityEngine::RemoteSettings::RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::RemoteSettingsUpdateCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "RemoteSettings", "RemoteSettingsUpdateCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wasLastUpdatedFromServer), ::il2cpp_utils::ExtractType(settingsChanged), ::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, wasLastUpdatedFromServer, settingsChanged, response);
}
// Writing MetadataGetter for method: RemoteSettings::RemoteSettingsUpdated
// Il2CppName: RemoteSettingsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&RemoteSettings::RemoteSettingsUpdated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings*), "RemoteSettingsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RemoteSettings::RemoteSettingsBeforeFetchFromServer
// Il2CppName: RemoteSettingsBeforeFetchFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RemoteSettings::RemoteSettingsBeforeFetchFromServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings*), "RemoteSettingsBeforeFetchFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RemoteSettings::RemoteSettingsUpdateCompleted
// Il2CppName: RemoteSettingsUpdateCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, bool, int)>(&RemoteSettings::RemoteSettingsUpdateCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings*), "RemoteSettingsUpdateCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.RemoteSettings/UpdatedEventHandler
#include "UnityEngine/RemoteSettings_UpdatedEventHandler.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.RemoteSettings/UpdatedEventHandler.Invoke
void UnityEngine::RemoteSettings::UpdatedEventHandler::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::UpdatedEventHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.RemoteSettings/UpdatedEventHandler.BeginInvoke
System::IAsyncResult* UnityEngine::RemoteSettings::UpdatedEventHandler::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::UpdatedEventHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: UnityEngine.RemoteSettings/UpdatedEventHandler.EndInvoke
void UnityEngine::RemoteSettings::UpdatedEventHandler::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteSettings::UpdatedEventHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: RemoteSettings::UpdatedEventHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteSettings::UpdatedEventHandler::*)(::Il2CppObject*, System::IntPtr)>(&RemoteSettings::UpdatedEventHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings::UpdatedEventHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteSettings::UpdatedEventHandler::*)(::Il2CppObject*, System::IntPtr)>(&RemoteSettings::UpdatedEventHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings::UpdatedEventHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: RemoteSettings::UpdatedEventHandler::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteSettings::UpdatedEventHandler::*)()>(&RemoteSettings::UpdatedEventHandler::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings::UpdatedEventHandler*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RemoteSettings::UpdatedEventHandler::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (RemoteSettings::UpdatedEventHandler::*)(System::AsyncCallback*, ::Il2CppObject*)>(&RemoteSettings::UpdatedEventHandler::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings::UpdatedEventHandler*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RemoteSettings::UpdatedEventHandler::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteSettings::UpdatedEventHandler::*)(System::IAsyncResult*)>(&RemoteSettings::UpdatedEventHandler::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteSettings::UpdatedEventHandler*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RemoteConfigSettings
#include "UnityEngine/RemoteConfigSettings.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.RemoteConfigSettings.RemoteConfigSettingsUpdated
void UnityEngine::RemoteConfigSettings::RemoteConfigSettingsUpdated(UnityEngine::RemoteConfigSettings* rcs, bool wasLastUpdatedFromServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettings::RemoteConfigSettingsUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "RemoteConfigSettings", "RemoteConfigSettingsUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rcs), ::il2cpp_utils::ExtractType(wasLastUpdatedFromServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rcs, wasLastUpdatedFromServer);
}
// Writing MetadataGetter for method: RemoteConfigSettings::RemoteConfigSettingsUpdated
// Il2CppName: RemoteConfigSettingsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::RemoteConfigSettings*, bool)>(&RemoteConfigSettings::RemoteConfigSettingsUpdated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteConfigSettings*), "RemoteConfigSettingsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RemoteConfigSettings*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RemoteConfigSettingsHelper/Tag
#include "UnityEngine/RemoteConfigSettingsHelper_Tag.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kUnknown
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kUnknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kUnknown
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kUnknown(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kIntVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kIntVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kIntVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kIntVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kIntVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kIntVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kIntVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kIntVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kInt64Val
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kInt64Val() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kInt64Val");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kInt64Val"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kInt64Val
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kInt64Val(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kInt64Val");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kInt64Val", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kUInt64Val
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kUInt64Val() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kUInt64Val");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kUInt64Val"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kUInt64Val
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kUInt64Val(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kUInt64Val");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kUInt64Val", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kDoubleVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kDoubleVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kDoubleVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kDoubleVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kDoubleVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kDoubleVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kDoubleVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kDoubleVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kBoolVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kBoolVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kBoolVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kBoolVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kBoolVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kBoolVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kBoolVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kBoolVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kStringVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kStringVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kStringVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kStringVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kStringVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kStringVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kStringVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kStringVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kArrayVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kArrayVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kArrayVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kArrayVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kArrayVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kArrayVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kArrayVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kArrayVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMixedArrayVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMixedArrayVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMixedArrayVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMixedArrayVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMixedArrayVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMixedArrayVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMixedArrayVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMixedArrayVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMapVal
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMapVal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMapVal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMapVal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMapVal
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMapVal(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMapVal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMapVal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMaxTags
UnityEngine::RemoteConfigSettingsHelper::Tag UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMaxTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_get_kMaxTags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RemoteConfigSettingsHelper::Tag>("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMaxTags"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RemoteConfigSettingsHelper/Tag kMaxTags
void UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMaxTags(UnityEngine::RemoteConfigSettingsHelper::Tag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RemoteConfigSettingsHelper::Tag::_set_kMaxTags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RemoteConfigSettingsHelper/Tag", "kMaxTags", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Analytics.AnalyticsSessionState
#include "UnityEngine/Analytics/AnalyticsSessionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionStopped
UnityEngine::Analytics::AnalyticsSessionState UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionStopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionState>("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionStopped"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionStopped
void UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionStopped(UnityEngine::Analytics::AnalyticsSessionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionStopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionStopped", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionStarted
UnityEngine::Analytics::AnalyticsSessionState UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionState>("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionStarted"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionStarted
void UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionStarted(UnityEngine::Analytics::AnalyticsSessionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionPaused
UnityEngine::Analytics::AnalyticsSessionState UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionPaused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionState>("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionPaused"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionPaused
void UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionPaused(UnityEngine::Analytics::AnalyticsSessionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionPaused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionPaused", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionResumed
UnityEngine::Analytics::AnalyticsSessionState UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionResumed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_get_kSessionResumed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionState>("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionResumed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Analytics.AnalyticsSessionState kSessionResumed
void UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionResumed(UnityEngine::Analytics::AnalyticsSessionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionState::_set_kSessionResumed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionState", "kSessionResumed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Analytics.AnalyticsSessionInfo
#include "UnityEngine/Analytics/AnalyticsSessionInfo.hpp"
// Including type: UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged
#include "UnityEngine/Analytics/AnalyticsSessionInfo_SessionStateChanged.hpp"
// Including type: UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged
#include "UnityEngine/Analytics/AnalyticsSessionInfo_IdentityTokenChanged.hpp"
// Including type: UnityEngine.Analytics.AnalyticsSessionState
#include "UnityEngine/Analytics/AnalyticsSessionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDEB7E8
// [CompilerGeneratedAttribute] Offset: 0xDEB7E8
// Autogenerated static field getter
// Get static field: static private UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged sessionStateChanged
UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged* UnityEngine::Analytics::AnalyticsSessionInfo::_get_sessionStateChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::_get_sessionStateChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged*>("UnityEngine.Analytics", "AnalyticsSessionInfo", "sessionStateChanged"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged sessionStateChanged
void UnityEngine::Analytics::AnalyticsSessionInfo::_set_sessionStateChanged(UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::_set_sessionStateChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionInfo", "sessionStateChanged", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDEB824
// [DebuggerBrowsableAttribute] Offset: 0xDEB824
// Autogenerated static field getter
// Get static field: static private UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged identityTokenChanged
UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged* UnityEngine::Analytics::AnalyticsSessionInfo::_get_identityTokenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::_get_identityTokenChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged*>("UnityEngine.Analytics", "AnalyticsSessionInfo", "identityTokenChanged"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged identityTokenChanged
void UnityEngine::Analytics::AnalyticsSessionInfo::_set_identityTokenChanged(UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::_set_identityTokenChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Analytics", "AnalyticsSessionInfo", "identityTokenChanged", value));
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo.CallSessionStateChanged
void UnityEngine::Analytics::AnalyticsSessionInfo::CallSessionStateChanged(UnityEngine::Analytics::AnalyticsSessionState sessionState, int64_t sessionId, int64_t sessionElapsedTime, bool sessionChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::CallSessionStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Analytics", "AnalyticsSessionInfo", "CallSessionStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionState), ::il2cpp_utils::ExtractType(sessionId), ::il2cpp_utils::ExtractType(sessionElapsedTime), ::il2cpp_utils::ExtractType(sessionChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sessionState, sessionId, sessionElapsedTime, sessionChanged);
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo.CallIdentityTokenChanged
void UnityEngine::Analytics::AnalyticsSessionInfo::CallIdentityTokenChanged(::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::CallIdentityTokenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Analytics", "AnalyticsSessionInfo", "CallIdentityTokenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, token);
}
// Writing MetadataGetter for method: AnalyticsSessionInfo::CallSessionStateChanged
// Il2CppName: CallSessionStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Analytics::AnalyticsSessionState, int64_t, int64_t, bool)>(&AnalyticsSessionInfo::CallSessionStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo*), "CallSessionStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Analytics::AnalyticsSessionState>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::CallIdentityTokenChanged
// Il2CppName: CallIdentityTokenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&AnalyticsSessionInfo::CallIdentityTokenChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo*), "CallIdentityTokenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged
#include "UnityEngine/Analytics/AnalyticsSessionInfo_SessionStateChanged.hpp"
// Including type: UnityEngine.Analytics.AnalyticsSessionState
#include "UnityEngine/Analytics/AnalyticsSessionState.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged.Invoke
void UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::Invoke(UnityEngine::Analytics::AnalyticsSessionState sessionState, int64_t sessionId, int64_t sessionElapsedTime, bool sessionChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionState), ::il2cpp_utils::ExtractType(sessionId), ::il2cpp_utils::ExtractType(sessionElapsedTime), ::il2cpp_utils::ExtractType(sessionChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionState, sessionId, sessionElapsedTime, sessionChanged);
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged.BeginInvoke
System::IAsyncResult* UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::BeginInvoke(UnityEngine::Analytics::AnalyticsSessionState sessionState, int64_t sessionId, int64_t sessionElapsedTime, bool sessionChanged, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionState), ::il2cpp_utils::ExtractType(sessionId), ::il2cpp_utils::ExtractType(sessionElapsedTime), ::il2cpp_utils::ExtractType(sessionChanged), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, sessionState, sessionId, sessionElapsedTime, sessionChanged, callback, object);
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/SessionStateChanged.EndInvoke
void UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::SessionStateChanged::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AnalyticsSessionInfo::SessionStateChanged::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::SessionStateChanged::*)(::Il2CppObject*, System::IntPtr)>(&AnalyticsSessionInfo::SessionStateChanged::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::SessionStateChanged*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::SessionStateChanged::*)(::Il2CppObject*, System::IntPtr)>(&AnalyticsSessionInfo::SessionStateChanged::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::SessionStateChanged*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::SessionStateChanged::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::SessionStateChanged::*)(UnityEngine::Analytics::AnalyticsSessionState, int64_t, int64_t, bool)>(&AnalyticsSessionInfo::SessionStateChanged::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::SessionStateChanged*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Analytics::AnalyticsSessionState>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::SessionStateChanged::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AnalyticsSessionInfo::SessionStateChanged::*)(UnityEngine::Analytics::AnalyticsSessionState, int64_t, int64_t, bool, System::AsyncCallback*, ::Il2CppObject*)>(&AnalyticsSessionInfo::SessionStateChanged::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::SessionStateChanged*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Analytics::AnalyticsSessionState>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::SessionStateChanged::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::SessionStateChanged::*)(System::IAsyncResult*)>(&AnalyticsSessionInfo::SessionStateChanged::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::SessionStateChanged*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged
#include "UnityEngine/Analytics/AnalyticsSessionInfo_IdentityTokenChanged.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged.Invoke
void UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::Invoke(::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, token);
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged.BeginInvoke
System::IAsyncResult* UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::BeginInvoke(::Il2CppString* token, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, token, callback, object);
}
// Autogenerated method: UnityEngine.Analytics.AnalyticsSessionInfo/IdentityTokenChanged.EndInvoke
void UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Analytics::AnalyticsSessionInfo::IdentityTokenChanged::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AnalyticsSessionInfo::IdentityTokenChanged::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::IdentityTokenChanged::*)(::Il2CppObject*, System::IntPtr)>(&AnalyticsSessionInfo::IdentityTokenChanged::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::IdentityTokenChanged*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::IdentityTokenChanged::*)(::Il2CppObject*, System::IntPtr)>(&AnalyticsSessionInfo::IdentityTokenChanged::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::IdentityTokenChanged*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::IdentityTokenChanged::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::IdentityTokenChanged::*)(::Il2CppString*)>(&AnalyticsSessionInfo::IdentityTokenChanged::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::IdentityTokenChanged*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::IdentityTokenChanged::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AnalyticsSessionInfo::IdentityTokenChanged::*)(::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&AnalyticsSessionInfo::IdentityTokenChanged::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::IdentityTokenChanged*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AnalyticsSessionInfo::IdentityTokenChanged::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnalyticsSessionInfo::IdentityTokenChanged::*)(System::IAsyncResult*)>(&AnalyticsSessionInfo::IdentityTokenChanged::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnalyticsSessionInfo::IdentityTokenChanged*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.UnityWebRequestAssetBundle
#include "UnityEngine/Networking/UnityWebRequestAssetBundle.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: UnityEngine.CachedAssetBundle
#include "UnityEngine/CachedAssetBundle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle(::Il2CppString* uri) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestAssetBundle", "GetAssetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle(::Il2CppString* uri, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestAssetBundle", "GetAssetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri, crc);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle(::Il2CppString* uri, UnityEngine::CachedAssetBundle cachedAssetBundle, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestAssetBundle::GetAssetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestAssetBundle", "GetAssetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(cachedAssetBundle), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri, cachedAssetBundle, crc);
}
// Writing MetadataGetter for method: UnityWebRequestAssetBundle::GetAssetBundle
// Il2CppName: GetAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*)>(&UnityWebRequestAssetBundle::GetAssetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAssetBundle*), "GetAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequestAssetBundle::GetAssetBundle
// Il2CppName: GetAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*, uint)>(&UnityWebRequestAssetBundle::GetAssetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAssetBundle*), "GetAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequestAssetBundle::GetAssetBundle
// Il2CppName: GetAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*, UnityEngine::CachedAssetBundle, uint)>(&UnityWebRequestAssetBundle::GetAssetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAssetBundle*), "GetAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::CachedAssetBundle>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.DownloadHandlerAssetBundle
#include "UnityEngine/Networking/DownloadHandlerAssetBundle.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.Create
System::IntPtr UnityEngine::Networking::DownloadHandlerAssetBundle::Create(UnityEngine::Networking::DownloadHandlerAssetBundle* obj, ::Il2CppString* url, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerAssetBundle", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, url, crc);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.CreateCached
System::IntPtr UnityEngine::Networking::DownloadHandlerAssetBundle::CreateCached(UnityEngine::Networking::DownloadHandlerAssetBundle* obj, ::Il2CppString* url, ::Il2CppString* name, UnityEngine::Hash128 hash, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::CreateCached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerAssetBundle", "CreateCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, url, name, hash, crc);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.InternalCreateAssetBundle
void UnityEngine::Networking::DownloadHandlerAssetBundle::InternalCreateAssetBundle(::Il2CppString* url, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::InternalCreateAssetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreateAssetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(crc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, url, crc);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.InternalCreateAssetBundleCached
void UnityEngine::Networking::DownloadHandlerAssetBundle::InternalCreateAssetBundleCached(::Il2CppString* url, ::Il2CppString* name, UnityEngine::Hash128 hash, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::InternalCreateAssetBundleCached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreateAssetBundleCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(crc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, url, name, hash, crc);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.get_assetBundle
UnityEngine::AssetBundle* UnityEngine::Networking::DownloadHandlerAssetBundle::get_assetBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::get_assetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_assetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundle*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.CreateCached_Injected
System::IntPtr UnityEngine::Networking::DownloadHandlerAssetBundle::CreateCached_Injected(UnityEngine::Networking::DownloadHandlerAssetBundle* obj, ::Il2CppString* url, ::Il2CppString* name, UnityEngine::Hash128& hash, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::CreateCached_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerAssetBundle", "CreateCached_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, url, name, hash, crc);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.GetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandlerAssetBundle::GetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAssetBundle.GetText
::Il2CppString* UnityEngine::Networking::DownloadHandlerAssetBundle::GetText() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAssetBundle::GetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerAssetBundle*, ::Il2CppString*, uint)>(&DownloadHandlerAssetBundle::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerAssetBundle*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::CreateCached
// Il2CppName: CreateCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerAssetBundle*, ::Il2CppString*, ::Il2CppString*, UnityEngine::Hash128, uint)>(&DownloadHandlerAssetBundle::CreateCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "CreateCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerAssetBundle*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Hash128>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::InternalCreateAssetBundle
// Il2CppName: InternalCreateAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, uint)>(&DownloadHandlerAssetBundle::InternalCreateAssetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "InternalCreateAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::InternalCreateAssetBundleCached
// Il2CppName: InternalCreateAssetBundleCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, ::Il2CppString*, UnityEngine::Hash128, uint)>(&DownloadHandlerAssetBundle::InternalCreateAssetBundleCached)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "InternalCreateAssetBundleCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Hash128>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, uint)>(&DownloadHandlerAssetBundle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, uint)>(&DownloadHandlerAssetBundle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, UnityEngine::CachedAssetBundle, uint)>(&DownloadHandlerAssetBundle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::CachedAssetBundle>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAssetBundle::*)(::Il2CppString*, UnityEngine::CachedAssetBundle, uint)>(&DownloadHandlerAssetBundle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::CachedAssetBundle>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::get_assetBundle
// Il2CppName: get_assetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundle* (DownloadHandlerAssetBundle::*)()>(&DownloadHandlerAssetBundle::get_assetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "get_assetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::CreateCached_Injected
// Il2CppName: CreateCached_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerAssetBundle*, ::Il2CppString*, ::Il2CppString*, UnityEngine::Hash128&, uint)>(&DownloadHandlerAssetBundle::CreateCached_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "CreateCached_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerAssetBundle*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Hash128&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandlerAssetBundle::*)()>(&DownloadHandlerAssetBundle::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAssetBundle::GetText
// Il2CppName: GetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DownloadHandlerAssetBundle::*)()>(&DownloadHandlerAssetBundle::GetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAssetBundle*), "GetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.UnityWebRequestMultimedia
#include "UnityEngine/Networking/UnityWebRequestMultimedia.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: UnityEngine.AudioType
#include "UnityEngine/AudioType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UnityWebRequestMultimedia.GetAudioClip
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestMultimedia::GetAudioClip(::Il2CppString* uri, UnityEngine::AudioType audioType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestMultimedia::GetAudioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestMultimedia", "GetAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(audioType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri, audioType);
}
// Writing MetadataGetter for method: UnityWebRequestMultimedia::GetAudioClip
// Il2CppName: GetAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*, UnityEngine::AudioType)>(&UnityWebRequestMultimedia::GetAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestMultimedia*), "GetAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.DownloadHandlerAudioClip
#include "UnityEngine/Networking/DownloadHandlerAudioClip.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.Create
System::IntPtr UnityEngine::Networking::DownloadHandlerAudioClip::Create(UnityEngine::Networking::DownloadHandlerAudioClip* obj, ::Il2CppString* url, UnityEngine::AudioType audioType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerAudioClip", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(audioType)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, url, audioType);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.InternalCreateAudioClip
void UnityEngine::Networking::DownloadHandlerAudioClip::InternalCreateAudioClip(::Il2CppString* url, UnityEngine::AudioType audioType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::InternalCreateAudioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreateAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(audioType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, url, audioType);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.get_audioClip
UnityEngine::AudioClip* UnityEngine::Networking::DownloadHandlerAudioClip::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::get_audioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.set_streamAudio
void UnityEngine::Networking::DownloadHandlerAudioClip::set_streamAudio(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::set_streamAudio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_streamAudio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.GetContent
UnityEngine::AudioClip* UnityEngine::Networking::DownloadHandlerAudioClip::GetContent(UnityEngine::Networking::UnityWebRequest* www) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::GetContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerAudioClip", "GetContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(www)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, www);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.GetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandlerAudioClip::GetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerAudioClip.GetText
::Il2CppString* UnityEngine::Networking::DownloadHandlerAudioClip::GetText() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerAudioClip::GetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DownloadHandlerAudioClip::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerAudioClip*, ::Il2CppString*, UnityEngine::AudioType)>(&DownloadHandlerAudioClip::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerAudioClip*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioType>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::InternalCreateAudioClip
// Il2CppName: InternalCreateAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAudioClip::*)(::Il2CppString*, UnityEngine::AudioType)>(&DownloadHandlerAudioClip::InternalCreateAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "InternalCreateAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioType>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAudioClip::*)(::Il2CppString*, UnityEngine::AudioType)>(&DownloadHandlerAudioClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAudioClip::*)(::Il2CppString*, UnityEngine::AudioType)>(&DownloadHandlerAudioClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioType>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::get_audioClip
// Il2CppName: get_audioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (DownloadHandlerAudioClip::*)()>(&DownloadHandlerAudioClip::get_audioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "get_audioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::set_streamAudio
// Il2CppName: set_streamAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerAudioClip::*)(bool)>(&DownloadHandlerAudioClip::set_streamAudio)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "set_streamAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::GetContent
// Il2CppName: GetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (*)(UnityEngine::Networking::UnityWebRequest*)>(&DownloadHandlerAudioClip::GetContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "GetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest*>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandlerAudioClip::*)()>(&DownloadHandlerAudioClip::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerAudioClip::GetText
// Il2CppName: GetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DownloadHandlerAudioClip::*)()>(&DownloadHandlerAudioClip::GetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerAudioClip*), "GetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngineInternal.WebRequestUtils
#include "UnityEngineInternal/WebRequestUtils.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.RegularExpressions.Regex domainRegex
System::Text::RegularExpressions::Regex* UnityEngineInternal::WebRequestUtils::_get_domainRegex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::_get_domainRegex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Text::RegularExpressions::Regex*>("UnityEngineInternal", "WebRequestUtils", "domainRegex"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.RegularExpressions.Regex domainRegex
void UnityEngineInternal::WebRequestUtils::_set_domainRegex(System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::_set_domainRegex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "WebRequestUtils", "domainRegex", value));
}
// Autogenerated method: UnityEngineInternal.WebRequestUtils.RedirectTo
::Il2CppString* UnityEngineInternal::WebRequestUtils::RedirectTo(::Il2CppString* baseUri, ::Il2CppString* redirectUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::RedirectTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "WebRequestUtils", "RedirectTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseUri), ::il2cpp_utils::ExtractType(redirectUri)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseUri, redirectUri);
}
// Autogenerated method: UnityEngineInternal.WebRequestUtils.MakeInitialUrl
::Il2CppString* UnityEngineInternal::WebRequestUtils::MakeInitialUrl(::Il2CppString* targetUrl, ::Il2CppString* localUrl) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::MakeInitialUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "WebRequestUtils", "MakeInitialUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetUrl), ::il2cpp_utils::ExtractType(localUrl)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetUrl, localUrl);
}
// Autogenerated method: UnityEngineInternal.WebRequestUtils.MakeUriString
::Il2CppString* UnityEngineInternal::WebRequestUtils::MakeUriString(System::Uri* targetUri, ::Il2CppString* targetUrl, bool prependProtocol) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::MakeUriString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "WebRequestUtils", "MakeUriString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetUri), ::il2cpp_utils::ExtractType(targetUrl), ::il2cpp_utils::ExtractType(prependProtocol)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetUri, targetUrl, prependProtocol);
}
// Autogenerated method: UnityEngineInternal.WebRequestUtils.URLDecode
::Il2CppString* UnityEngineInternal::WebRequestUtils::URLDecode(::Il2CppString* encoded) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::URLDecode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "WebRequestUtils", "URLDecode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encoded)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, encoded);
}
// Autogenerated method: UnityEngineInternal.WebRequestUtils..cctor
void UnityEngineInternal::WebRequestUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::WebRequestUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "WebRequestUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: WebRequestUtils::RedirectTo
// Il2CppName: RedirectTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&WebRequestUtils::RedirectTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebRequestUtils*), "RedirectTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WebRequestUtils::MakeInitialUrl
// Il2CppName: MakeInitialUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&WebRequestUtils::MakeInitialUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebRequestUtils*), "MakeInitialUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WebRequestUtils::MakeUriString
// Il2CppName: MakeUriString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Uri*, ::Il2CppString*, bool)>(&WebRequestUtils::MakeUriString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebRequestUtils*), "MakeUriString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WebRequestUtils::URLDecode
// Il2CppName: URLDecode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&WebRequestUtils::URLDecode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebRequestUtils*), "URLDecode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WebRequestUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WebRequestUtils::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebRequestUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WWWForm
#include "UnityEngine/WWWForm.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.WWWForm.get_DefaultEncoding
System::Text::Encoding* UnityEngine::WWWForm::get_DefaultEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWForm::get_DefaultEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWForm", "get_DefaultEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: WWWForm::get_DefaultEncoding
// Il2CppName: get_DefaultEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (*)()>(&WWWForm::get_DefaultEncoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWForm*), "get_DefaultEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.WWWTranscoder
#include "UnityEngine/WWWTranscoder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] ucHexChars
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_ucHexChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_ucHexChars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "ucHexChars"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] ucHexChars
void UnityEngine::WWWTranscoder::_set_ucHexChars(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_ucHexChars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "ucHexChars", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] lcHexChars
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_lcHexChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_lcHexChars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "lcHexChars"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] lcHexChars
void UnityEngine::WWWTranscoder::_set_lcHexChars(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_lcHexChars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "lcHexChars", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte urlEscapeChar
uint8_t UnityEngine::WWWTranscoder::_get_urlEscapeChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_urlEscapeChar");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("UnityEngine", "WWWTranscoder", "urlEscapeChar"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte urlEscapeChar
void UnityEngine::WWWTranscoder::_set_urlEscapeChar(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_urlEscapeChar");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "urlEscapeChar", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] urlSpace
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_urlSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_urlSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "urlSpace"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] urlSpace
void UnityEngine::WWWTranscoder::_set_urlSpace(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_urlSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "urlSpace", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] dataSpace
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_dataSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_dataSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "dataSpace"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] dataSpace
void UnityEngine::WWWTranscoder::_set_dataSpace(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_dataSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "dataSpace", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] urlForbidden
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_urlForbidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_urlForbidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "urlForbidden"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] urlForbidden
void UnityEngine::WWWTranscoder::_set_urlForbidden(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_urlForbidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "urlForbidden", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte qpEscapeChar
uint8_t UnityEngine::WWWTranscoder::_get_qpEscapeChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_qpEscapeChar");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("UnityEngine", "WWWTranscoder", "qpEscapeChar"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte qpEscapeChar
void UnityEngine::WWWTranscoder::_set_qpEscapeChar(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_qpEscapeChar");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "qpEscapeChar", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] qpSpace
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_qpSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_qpSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "qpSpace"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] qpSpace
void UnityEngine::WWWTranscoder::_set_qpSpace(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_qpSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "qpSpace", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] qpForbidden
::Array<uint8_t>* UnityEngine::WWWTranscoder::_get_qpForbidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_get_qpForbidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("UnityEngine", "WWWTranscoder", "qpForbidden"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] qpForbidden
void UnityEngine::WWWTranscoder::_set_qpForbidden(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::_set_qpForbidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WWWTranscoder", "qpForbidden", value));
}
// Autogenerated method: UnityEngine.WWWTranscoder.Hex2Byte
uint8_t UnityEngine::WWWTranscoder::Hex2Byte(::Array<uint8_t>* b, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::Hex2Byte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "Hex2Byte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, b, offset);
}
// Autogenerated method: UnityEngine.WWWTranscoder.Byte2Hex
::Array<uint8_t>* UnityEngine::WWWTranscoder::Byte2Hex(uint8_t b, ::Array<uint8_t>* hexChars) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::Byte2Hex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "Byte2Hex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(hexChars)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, b, hexChars);
}
// Autogenerated method: UnityEngine.WWWTranscoder.URLEncode
::Array<uint8_t>* UnityEngine::WWWTranscoder::URLEncode(::Array<uint8_t>* toEncode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::URLEncode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "URLEncode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toEncode)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toEncode);
}
// Autogenerated method: UnityEngine.WWWTranscoder.Encode
::Array<uint8_t>* UnityEngine::WWWTranscoder::Encode(::Array<uint8_t>* input, uint8_t escapeChar, ::Array<uint8_t>* space, ::Array<uint8_t>* forbidden, bool uppercase) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(escapeChar), ::il2cpp_utils::ExtractType(space), ::il2cpp_utils::ExtractType(forbidden), ::il2cpp_utils::ExtractType(uppercase)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, escapeChar, space, forbidden, uppercase);
}
// Autogenerated method: UnityEngine.WWWTranscoder.ByteArrayContains
bool UnityEngine::WWWTranscoder::ByteArrayContains(::Array<uint8_t>* array, uint8_t b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::ByteArrayContains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "ByteArrayContains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, array, b);
}
// Autogenerated method: UnityEngine.WWWTranscoder.URLDecode
::Array<uint8_t>* UnityEngine::WWWTranscoder::URLDecode(::Array<uint8_t>* toEncode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::URLDecode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "URLDecode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toEncode)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toEncode);
}
// Autogenerated method: UnityEngine.WWWTranscoder.ByteSubArrayEquals
bool UnityEngine::WWWTranscoder::ByteSubArrayEquals(::Array<uint8_t>* array, int index, ::Array<uint8_t>* comperand) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::ByteSubArrayEquals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "ByteSubArrayEquals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(comperand)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, array, index, comperand);
}
// Autogenerated method: UnityEngine.WWWTranscoder.Decode
::Array<uint8_t>* UnityEngine::WWWTranscoder::Decode(::Array<uint8_t>* input, uint8_t escapeChar, ::Array<uint8_t>* space) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::Decode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", "Decode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(escapeChar), ::il2cpp_utils::ExtractType(space)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, escapeChar, space);
}
// Autogenerated method: UnityEngine.WWWTranscoder..cctor
void UnityEngine::WWWTranscoder::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WWWTranscoder::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "WWWTranscoder", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: WWWTranscoder::Hex2Byte
// Il2CppName: Hex2Byte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(::Array<uint8_t>*, int)>(&WWWTranscoder::Hex2Byte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "Hex2Byte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::Byte2Hex
// Il2CppName: Byte2Hex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(uint8_t, ::Array<uint8_t>*)>(&WWWTranscoder::Byte2Hex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "Byte2Hex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::URLEncode
// Il2CppName: URLEncode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&WWWTranscoder::URLEncode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "URLEncode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, uint8_t, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&WWWTranscoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::ByteArrayContains
// Il2CppName: ByteArrayContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*, uint8_t)>(&WWWTranscoder::ByteArrayContains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "ByteArrayContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::URLDecode
// Il2CppName: URLDecode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&WWWTranscoder::URLDecode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "URLDecode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::ByteSubArrayEquals
// Il2CppName: ByteSubArrayEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*)>(&WWWTranscoder::ByteSubArrayEquals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "ByteSubArrayEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, uint8_t, ::Array<uint8_t>*)>(&WWWTranscoder::Decode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: WWWTranscoder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WWWTranscoder::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WWWTranscoder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Networking.UnityWebRequestAsyncOperation
#include "UnityEngine/Networking/UnityWebRequestAsyncOperation.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UnityWebRequestAsyncOperation.get_webRequest
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestAsyncOperation::get_webRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestAsyncOperation::get_webRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_webRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequestAsyncOperation.set_webRequest
void UnityEngine::Networking::UnityWebRequestAsyncOperation::set_webRequest(UnityEngine::Networking::UnityWebRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestAsyncOperation::set_webRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_webRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: UnityWebRequestAsyncOperation::get_webRequest
// Il2CppName: get_webRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (UnityWebRequestAsyncOperation::*)()>(&UnityWebRequestAsyncOperation::get_webRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAsyncOperation*), "get_webRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequestAsyncOperation::set_webRequest
// Il2CppName: set_webRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequestAsyncOperation::*)(UnityEngine::Networking::UnityWebRequest*)>(&UnityWebRequestAsyncOperation::set_webRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAsyncOperation*), "set_webRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequestAsyncOperation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequestAsyncOperation::*)()>(&UnityWebRequestAsyncOperation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAsyncOperation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequestAsyncOperation::*)()>(&UnityWebRequestAsyncOperation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestAsyncOperation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod
#include "UnityEngine/Networking/UnityWebRequest_UnityWebRequestMethod.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest/UnityWebRequestError
#include "UnityEngine/Networking/UnityWebRequest_UnityWebRequestError.hpp"
// Including type: UnityEngine.Networking.DownloadHandler
#include "UnityEngine/Networking/DownloadHandler.hpp"
// Including type: UnityEngine.Networking.UploadHandler
#include "UnityEngine/Networking/UploadHandler.hpp"
// Including type: UnityEngine.Networking.CertificateHandler
#include "UnityEngine/Networking/CertificateHandler.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: UnityEngine.Networking.UnityWebRequestAsyncOperation
#include "UnityEngine/Networking/UnityWebRequestAsyncOperation.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.GetWebErrorString
::Il2CppString* UnityEngine::Networking::UnityWebRequest::GetWebErrorString(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError err) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::GetWebErrorString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "GetWebErrorString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(err)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, err);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.GetHTTPStatusString
::Il2CppString* UnityEngine::Networking::UnityWebRequest::GetHTTPStatusString(int64_t responseCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::GetHTTPStatusString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "GetHTTPStatusString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(responseCode)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, responseCode);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_disposeCertificateHandlerOnDispose
bool UnityEngine::Networking::UnityWebRequest::get_disposeCertificateHandlerOnDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_disposeCertificateHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposeCertificateHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_disposeCertificateHandlerOnDispose
void UnityEngine::Networking::UnityWebRequest::set_disposeCertificateHandlerOnDispose(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_disposeCertificateHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposeCertificateHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_disposeDownloadHandlerOnDispose
bool UnityEngine::Networking::UnityWebRequest::get_disposeDownloadHandlerOnDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_disposeDownloadHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposeDownloadHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_disposeDownloadHandlerOnDispose
void UnityEngine::Networking::UnityWebRequest::set_disposeDownloadHandlerOnDispose(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_disposeDownloadHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposeDownloadHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_disposeUploadHandlerOnDispose
bool UnityEngine::Networking::UnityWebRequest::get_disposeUploadHandlerOnDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_disposeUploadHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposeUploadHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_disposeUploadHandlerOnDispose
void UnityEngine::Networking::UnityWebRequest::set_disposeUploadHandlerOnDispose(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_disposeUploadHandlerOnDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposeUploadHandlerOnDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Create
System::IntPtr UnityEngine::Networking::UnityWebRequest::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Release
void UnityEngine::Networking::UnityWebRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalDestroy
void UnityEngine::Networking::UnityWebRequest::InternalDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalSetDefaults
void UnityEngine::Networking::UnityWebRequest::InternalSetDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalSetDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalSetDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Dispose
void UnityEngine::Networking::UnityWebRequest::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.DisposeHandlers
void UnityEngine::Networking::UnityWebRequest::DisposeHandlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::DisposeHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.BeginWebRequest
UnityEngine::Networking::UnityWebRequestAsyncOperation* UnityEngine::Networking::UnityWebRequest::BeginWebRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::BeginWebRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginWebRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequestAsyncOperation*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SendWebRequest
UnityEngine::Networking::UnityWebRequestAsyncOperation* UnityEngine::Networking::UnityWebRequest::SendWebRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SendWebRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWebRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequestAsyncOperation*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Abort
void UnityEngine::Networking::UnityWebRequest::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetMethod
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetMethod(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod methodType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, methodType);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalSetMethod
void UnityEngine::Networking::UnityWebRequest::InternalSetMethod(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod methodType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalSetMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalSetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodType);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetCustomMethod
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetCustomMethod(::Il2CppString* customMethodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetCustomMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCustomMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customMethodName)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, customMethodName);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalSetCustomMethod
void UnityEngine::Networking::UnityWebRequest::InternalSetCustomMethod(::Il2CppString* customMethodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalSetCustomMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalSetCustomMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customMethodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, customMethodName);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_method
void UnityEngine::Networking::UnityWebRequest::set_method(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.GetError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::GetError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::GetError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_error
::Il2CppString* UnityEngine::Networking::UnityWebRequest::get_error() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_url
::Il2CppString* UnityEngine::Networking::UnityWebRequest::get_url() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_url");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_url", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_url
void UnityEngine::Networking::UnityWebRequest::set_url(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_url");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_url", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.GetUrl
::Il2CppString* UnityEngine::Networking::UnityWebRequest::GetUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::GetUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetUrl
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetUrl(::Il2CppString* url) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, url);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalSetUrl
void UnityEngine::Networking::UnityWebRequest::InternalSetUrl(::Il2CppString* url) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalSetUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalSetUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, url);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_responseCode
int64_t UnityEngine::Networking::UnityWebRequest::get_responseCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_responseCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_responseCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.IsExecuting
bool UnityEngine::Networking::UnityWebRequest::IsExecuting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::IsExecuting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExecuting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_isModifiable
bool UnityEngine::Networking::UnityWebRequest::get_isModifiable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_isModifiable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isModifiable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_isDone
bool UnityEngine::Networking::UnityWebRequest::get_isDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_isDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_isNetworkError
bool UnityEngine::Networking::UnityWebRequest::get_isNetworkError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_isNetworkError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_isHttpError
bool UnityEngine::Networking::UnityWebRequest::get_isHttpError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_isHttpError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isHttpError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.GetDownloadProgress
float UnityEngine::Networking::UnityWebRequest::GetDownloadProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::GetDownloadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDownloadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_downloadProgress
float UnityEngine::Networking::UnityWebRequest::get_downloadProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_downloadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_downloadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_downloadedBytes
uint64_t UnityEngine::Networking::UnityWebRequest::get_downloadedBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_downloadedBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_downloadedBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetRedirectLimitFromScripting
void UnityEngine::Networking::UnityWebRequest::SetRedirectLimitFromScripting(int limit) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetRedirectLimitFromScripting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRedirectLimitFromScripting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limit)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, limit);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_redirectLimit
void UnityEngine::Networking::UnityWebRequest::set_redirectLimit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_redirectLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_redirectLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.InternalSetRequestHeader
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::InternalSetRequestHeader(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::InternalSetRequestHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalSetRequestHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, name, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetRequestHeader
void UnityEngine::Networking::UnityWebRequest::SetRequestHeader(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetRequestHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRequestHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetUploadHandler
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetUploadHandler(UnityEngine::Networking::UploadHandler* uh) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetUploadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUploadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uh)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, uh);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_uploadHandler
UnityEngine::Networking::UploadHandler* UnityEngine::Networking::UnityWebRequest::get_uploadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_uploadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uploadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UploadHandler*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_uploadHandler
void UnityEngine::Networking::UnityWebRequest::set_uploadHandler(UnityEngine::Networking::UploadHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_uploadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_uploadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetDownloadHandler
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetDownloadHandler(UnityEngine::Networking::DownloadHandler* dh) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetDownloadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDownloadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dh)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, dh);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_downloadHandler
UnityEngine::Networking::DownloadHandler* UnityEngine::Networking::UnityWebRequest::get_downloadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_downloadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_downloadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::DownloadHandler*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_downloadHandler
void UnityEngine::Networking::UnityWebRequest::set_downloadHandler(UnityEngine::Networking::DownloadHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_downloadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_downloadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetCertificateHandler
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetCertificateHandler(UnityEngine::Networking::CertificateHandler* ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetCertificateHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCertificateHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, ch);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.get_certificateHandler
UnityEngine::Networking::CertificateHandler* UnityEngine::Networking::UnityWebRequest::get_certificateHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::get_certificateHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_certificateHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::CertificateHandler*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_certificateHandler
void UnityEngine::Networking::UnityWebRequest::set_certificateHandler(UnityEngine::Networking::CertificateHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_certificateHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_certificateHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.SetTimeoutMsec
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::SetTimeoutMsec(int timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::SetTimeoutMsec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimeoutMsec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError, false>(this, ___internal__method, timeout);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.set_timeout
void UnityEngine::Networking::UnityWebRequest::set_timeout(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::set_timeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Get
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequest::Get(::Il2CppString* uri) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.EscapeURL
::Il2CppString* UnityEngine::Networking::UnityWebRequest::EscapeURL(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::EscapeURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "EscapeURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.EscapeURL
::Il2CppString* UnityEngine::Networking::UnityWebRequest::EscapeURL(::Il2CppString* s, System::Text::Encoding* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::EscapeURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequest", "EscapeURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, e);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequest.Finalize
void UnityEngine::Networking::UnityWebRequest::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityWebRequest::GetWebErrorString
// Il2CppName: GetWebErrorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError)>(&UnityWebRequest::GetWebErrorString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "GetWebErrorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::GetHTTPStatusString
// Il2CppName: GetHTTPStatusString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int64_t)>(&UnityWebRequest::GetHTTPStatusString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "GetHTTPStatusString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_disposeCertificateHandlerOnDispose
// Il2CppName: get_disposeCertificateHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_disposeCertificateHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_disposeCertificateHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_disposeCertificateHandlerOnDispose
// Il2CppName: set_disposeCertificateHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(bool)>(&UnityWebRequest::set_disposeCertificateHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_disposeCertificateHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_disposeDownloadHandlerOnDispose
// Il2CppName: get_disposeDownloadHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_disposeDownloadHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_disposeDownloadHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_disposeDownloadHandlerOnDispose
// Il2CppName: set_disposeDownloadHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(bool)>(&UnityWebRequest::set_disposeDownloadHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_disposeDownloadHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_disposeUploadHandlerOnDispose
// Il2CppName: get_disposeUploadHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_disposeUploadHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_disposeUploadHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_disposeUploadHandlerOnDispose
// Il2CppName: set_disposeUploadHandlerOnDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(bool)>(&UnityWebRequest::set_disposeUploadHandlerOnDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_disposeUploadHandlerOnDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&UnityWebRequest::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalDestroy
// Il2CppName: InternalDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::InternalDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalSetDefaults
// Il2CppName: InternalSetDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::InternalSetDefaults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalSetDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*)>(&UnityWebRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*)>(&UnityWebRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*, UnityEngine::Networking::DownloadHandler*, UnityEngine::Networking::UploadHandler*)>(&UnityWebRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandler*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UploadHandler*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*, UnityEngine::Networking::DownloadHandler*, UnityEngine::Networking::UploadHandler*)>(&UnityWebRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandler*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UploadHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::DisposeHandlers
// Il2CppName: DisposeHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::DisposeHandlers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "DisposeHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::BeginWebRequest
// Il2CppName: BeginWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequestAsyncOperation* (UnityWebRequest::*)()>(&UnityWebRequest::BeginWebRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "BeginWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SendWebRequest
// Il2CppName: SendWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequestAsyncOperation* (UnityWebRequest::*)()>(&UnityWebRequest::SendWebRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SendWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::Abort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetMethod
// Il2CppName: SetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod)>(&UnityWebRequest::SetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalSetMethod
// Il2CppName: InternalSetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod)>(&UnityWebRequest::InternalSetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalSetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetCustomMethod
// Il2CppName: SetCustomMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::SetCustomMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetCustomMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalSetCustomMethod
// Il2CppName: InternalSetCustomMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::InternalSetCustomMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalSetCustomMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_method
// Il2CppName: set_method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::set_method)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::GetError
// Il2CppName: GetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)()>(&UnityWebRequest::GetError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "GetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_error
// Il2CppName: get_error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityWebRequest::*)()>(&UnityWebRequest::get_error)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_url
// Il2CppName: get_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityWebRequest::*)()>(&UnityWebRequest::get_url)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_url
// Il2CppName: set_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::set_url)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::GetUrl
// Il2CppName: GetUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityWebRequest::*)()>(&UnityWebRequest::GetUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "GetUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetUrl
// Il2CppName: SetUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::SetUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalSetUrl
// Il2CppName: InternalSetUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*)>(&UnityWebRequest::InternalSetUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalSetUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_responseCode
// Il2CppName: get_responseCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityWebRequest::*)()>(&UnityWebRequest::get_responseCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_responseCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::IsExecuting
// Il2CppName: IsExecuting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::IsExecuting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "IsExecuting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_isModifiable
// Il2CppName: get_isModifiable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_isModifiable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_isModifiable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_isDone
// Il2CppName: get_isDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_isDone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_isDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_isNetworkError
// Il2CppName: get_isNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_isNetworkError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_isNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_isHttpError
// Il2CppName: get_isHttpError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityWebRequest::*)()>(&UnityWebRequest::get_isHttpError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_isHttpError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::GetDownloadProgress
// Il2CppName: GetDownloadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityWebRequest::*)()>(&UnityWebRequest::GetDownloadProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "GetDownloadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_downloadProgress
// Il2CppName: get_downloadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityWebRequest::*)()>(&UnityWebRequest::get_downloadProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_downloadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_downloadedBytes
// Il2CppName: get_downloadedBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityWebRequest::*)()>(&UnityWebRequest::get_downloadedBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_downloadedBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetRedirectLimitFromScripting
// Il2CppName: SetRedirectLimitFromScripting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(int)>(&UnityWebRequest::SetRedirectLimitFromScripting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetRedirectLimitFromScripting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_redirectLimit
// Il2CppName: set_redirectLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(int)>(&UnityWebRequest::set_redirectLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_redirectLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::InternalSetRequestHeader
// Il2CppName: InternalSetRequestHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*)>(&UnityWebRequest::InternalSetRequestHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "InternalSetRequestHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetRequestHeader
// Il2CppName: SetRequestHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(::Il2CppString*, ::Il2CppString*)>(&UnityWebRequest::SetRequestHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetRequestHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetUploadHandler
// Il2CppName: SetUploadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(UnityEngine::Networking::UploadHandler*)>(&UnityWebRequest::SetUploadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetUploadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UploadHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_uploadHandler
// Il2CppName: get_uploadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UploadHandler* (UnityWebRequest::*)()>(&UnityWebRequest::get_uploadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_uploadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_uploadHandler
// Il2CppName: set_uploadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(UnityEngine::Networking::UploadHandler*)>(&UnityWebRequest::set_uploadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_uploadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UploadHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetDownloadHandler
// Il2CppName: SetDownloadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(UnityEngine::Networking::DownloadHandler*)>(&UnityWebRequest::SetDownloadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetDownloadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_downloadHandler
// Il2CppName: get_downloadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::DownloadHandler* (UnityWebRequest::*)()>(&UnityWebRequest::get_downloadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_downloadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_downloadHandler
// Il2CppName: set_downloadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(UnityEngine::Networking::DownloadHandler*)>(&UnityWebRequest::set_downloadHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_downloadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetCertificateHandler
// Il2CppName: SetCertificateHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(UnityEngine::Networking::CertificateHandler*)>(&UnityWebRequest::SetCertificateHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetCertificateHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::CertificateHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::get_certificateHandler
// Il2CppName: get_certificateHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::CertificateHandler* (UnityWebRequest::*)()>(&UnityWebRequest::get_certificateHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "get_certificateHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_certificateHandler
// Il2CppName: set_certificateHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(UnityEngine::Networking::CertificateHandler*)>(&UnityWebRequest::set_certificateHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_certificateHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::CertificateHandler*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::SetTimeoutMsec
// Il2CppName: SetTimeoutMsec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError (UnityWebRequest::*)(int)>(&UnityWebRequest::SetTimeoutMsec)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "SetTimeoutMsec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::set_timeout
// Il2CppName: set_timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)(int)>(&UnityWebRequest::set_timeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "set_timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*)>(&UnityWebRequest::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::EscapeURL
// Il2CppName: EscapeURL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&UnityWebRequest::EscapeURL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "EscapeURL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::EscapeURL
// Il2CppName: EscapeURL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Text::Encoding*)>(&UnityWebRequest::EscapeURL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "EscapeURL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequest::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityWebRequest::*)()>(&UnityWebRequest::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequest*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod
#include "UnityEngine/Networking/UnityWebRequest_UnityWebRequestMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Get
UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Get");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Get"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Get
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Get(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Get");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Get", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Post
UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Post() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Post");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Post"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Post
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Post(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Post");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Post", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Put
UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Put() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Put");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Put"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Put
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Put(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Put");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Put", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Head
UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Head"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Head
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Head(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Custom
UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestMethod Custom
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Custom(UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestMethod::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestMethod", "Custom", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Networking.UnityWebRequest/UnityWebRequestError
#include "UnityEngine/Networking/UnityWebRequest_UnityWebRequestError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError OK
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "OK"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError OK
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_OK(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Unknown
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Unknown
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Unknown(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SDKError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SDKError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SDKError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SDKError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SDKError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SDKError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SDKError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SDKError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError UnsupportedProtocol
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_UnsupportedProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_UnsupportedProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "UnsupportedProtocol"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError UnsupportedProtocol
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_UnsupportedProtocol(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_UnsupportedProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "UnsupportedProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError MalformattedUrl
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_MalformattedUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_MalformattedUrl");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "MalformattedUrl"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError MalformattedUrl
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_MalformattedUrl(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_MalformattedUrl");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "MalformattedUrl", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotResolveProxy
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotResolveProxy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotResolveProxy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotResolveProxy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotResolveProxy
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotResolveProxy(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotResolveProxy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotResolveProxy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotResolveHost
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotResolveHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotResolveHost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotResolveHost"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotResolveHost
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotResolveHost(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotResolveHost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotResolveHost", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotConnectToHost
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotConnectToHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_CannotConnectToHost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotConnectToHost"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError CannotConnectToHost
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotConnectToHost(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_CannotConnectToHost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "CannotConnectToHost", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError AccessDenied
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_AccessDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_AccessDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "AccessDenied"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError AccessDenied
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_AccessDenied(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_AccessDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "AccessDenied", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError GenericHttpError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_GenericHttpError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_GenericHttpError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "GenericHttpError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError GenericHttpError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_GenericHttpError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_GenericHttpError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "GenericHttpError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError WriteError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_WriteError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_WriteError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "WriteError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError WriteError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_WriteError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_WriteError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "WriteError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError ReadError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_ReadError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_ReadError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "ReadError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError ReadError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_ReadError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_ReadError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "ReadError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError OutOfMemory
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_OutOfMemory() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_OutOfMemory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "OutOfMemory"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError OutOfMemory
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_OutOfMemory(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_OutOfMemory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "OutOfMemory", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Timeout
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Timeout"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Timeout
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Timeout(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError HTTPPostError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_HTTPPostError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_HTTPPostError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "HTTPPostError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError HTTPPostError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_HTTPPostError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_HTTPPostError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "HTTPPostError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCannotConnect
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCannotConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCannotConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCannotConnect"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCannotConnect
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCannotConnect(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCannotConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCannotConnect", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Aborted
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Aborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_Aborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Aborted"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError Aborted
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Aborted(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_Aborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "Aborted", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError TooManyRedirects
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_TooManyRedirects() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_TooManyRedirects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "TooManyRedirects"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError TooManyRedirects
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_TooManyRedirects(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_TooManyRedirects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "TooManyRedirects", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError ReceivedNoData
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_ReceivedNoData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_ReceivedNoData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "ReceivedNoData"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError ReceivedNoData
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_ReceivedNoData(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_ReceivedNoData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "ReceivedNoData", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLNotSupported
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLNotSupported
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLNotSupported(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError FailedToSendData
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_FailedToSendData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_FailedToSendData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "FailedToSendData"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError FailedToSendData
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_FailedToSendData(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_FailedToSendData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "FailedToSendData", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError FailedToReceiveData
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_FailedToReceiveData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_FailedToReceiveData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "FailedToReceiveData"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError FailedToReceiveData
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_FailedToReceiveData(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_FailedToReceiveData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "FailedToReceiveData", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCertificateError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCertificateError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCertificateError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCertificateError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCertificateError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCertificateError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCertificateError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCertificateError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCipherNotAvailable
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCipherNotAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCipherNotAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCipherNotAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCipherNotAvailable
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCipherNotAvailable(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCipherNotAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCipherNotAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCACertError
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCACertError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLCACertError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCACertError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLCACertError
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCACertError(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLCACertError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLCACertError", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError UnrecognizedContentEncoding
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_UnrecognizedContentEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_UnrecognizedContentEncoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "UnrecognizedContentEncoding"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError UnrecognizedContentEncoding
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_UnrecognizedContentEncoding(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_UnrecognizedContentEncoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "UnrecognizedContentEncoding", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError LoginFailed
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_LoginFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_LoginFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "LoginFailed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError LoginFailed
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_LoginFailed(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_LoginFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "LoginFailed", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLShutdownFailed
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLShutdownFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_SSLShutdownFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLShutdownFailed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError SSLShutdownFailed
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLShutdownFailed(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_SSLShutdownFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "SSLShutdownFailed", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError NoInternetConnection
UnityEngine::Networking::UnityWebRequest::UnityWebRequestError UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_NoInternetConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_get_NoInternetConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Networking::UnityWebRequest::UnityWebRequestError>("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "NoInternetConnection"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Networking.UnityWebRequest/UnityWebRequestError NoInternetConnection
void UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_NoInternetConnection(UnityEngine::Networking::UnityWebRequest::UnityWebRequestError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequest::UnityWebRequestError::_set_NoInternetConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Networking", "UnityWebRequest/UnityWebRequestError", "NoInternetConnection", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.CertificateHandler
#include "UnityEngine/Networking/CertificateHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.CertificateHandler.Release
void UnityEngine::Networking::CertificateHandler::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::CertificateHandler::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.CertificateHandler.ValidateCertificate
bool UnityEngine::Networking::CertificateHandler::ValidateCertificate(::Array<uint8_t>* certificateData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::CertificateHandler::ValidateCertificate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificateData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificateData);
}
// Autogenerated method: UnityEngine.Networking.CertificateHandler.ValidateCertificateNative
bool UnityEngine::Networking::CertificateHandler::ValidateCertificateNative(::Array<uint8_t>* certificateData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::CertificateHandler::ValidateCertificateNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificateNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificateData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificateData);
}
// Autogenerated method: UnityEngine.Networking.CertificateHandler.Dispose
void UnityEngine::Networking::CertificateHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::CertificateHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CertificateHandler::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CertificateHandler::*)()>(&CertificateHandler::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CertificateHandler*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CertificateHandler::ValidateCertificate
// Il2CppName: ValidateCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CertificateHandler::*)(::Array<uint8_t>*)>(&CertificateHandler::ValidateCertificate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CertificateHandler*), "ValidateCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CertificateHandler::ValidateCertificateNative
// Il2CppName: ValidateCertificateNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CertificateHandler::*)(::Array<uint8_t>*)>(&CertificateHandler::ValidateCertificateNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CertificateHandler*), "ValidateCertificateNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CertificateHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CertificateHandler::*)()>(&CertificateHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CertificateHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.DownloadHandler
#include "UnityEngine/Networking/DownloadHandler.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.DownloadHandler.Release
void UnityEngine::Networking::DownloadHandler::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.Dispose
void UnityEngine::Networking::DownloadHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.get_text
::Il2CppString* UnityEngine::Networking::DownloadHandler::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.GetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandler::GetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.GetText
::Il2CppString* UnityEngine::Networking::DownloadHandler::GetText() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::GetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.GetTextEncoder
System::Text::Encoding* UnityEngine::Networking::DownloadHandler::GetTextEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::GetTextEncoder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextEncoder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.GetContentType
::Il2CppString* UnityEngine::Networking::DownloadHandler::GetContentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::GetContentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.InternalGetByteArray
::Array<uint8_t>* UnityEngine::Networking::DownloadHandler::InternalGetByteArray(UnityEngine::Networking::DownloadHandler* dh) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::InternalGetByteArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandler", "InternalGetByteArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dh)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dh);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandler.Finalize
void UnityEngine::Networking::DownloadHandler::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandler::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DownloadHandler::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandler::*)()>(&DownloadHandler::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandler::*)()>(&DownloadHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DownloadHandler::*)()>(&DownloadHandler::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandler::*)()>(&DownloadHandler::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::GetText
// Il2CppName: GetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DownloadHandler::*)()>(&DownloadHandler::GetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "GetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::GetTextEncoder
// Il2CppName: GetTextEncoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (DownloadHandler::*)()>(&DownloadHandler::GetTextEncoder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "GetTextEncoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::GetContentType
// Il2CppName: GetContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DownloadHandler::*)()>(&DownloadHandler::GetContentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "GetContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::GetCheckedDownloader
// Il2CppName: GetCheckedDownloader
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DownloadHandler::InternalGetByteArray
// Il2CppName: InternalGetByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(UnityEngine::Networking::DownloadHandler*)>(&DownloadHandler::InternalGetByteArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "InternalGetByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandler*>()});
  }
};
// Writing MetadataGetter for method: DownloadHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandler::*)()>(&DownloadHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandler::*)()>(&DownloadHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandler::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandler::*)()>(&DownloadHandler::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandler*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.DownloadHandlerBuffer
#include "UnityEngine/Networking/DownloadHandlerBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.DownloadHandlerBuffer.Create
System::IntPtr UnityEngine::Networking::DownloadHandlerBuffer::Create(UnityEngine::Networking::DownloadHandlerBuffer* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerBuffer::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerBuffer", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerBuffer.InternalCreateBuffer
void UnityEngine::Networking::DownloadHandlerBuffer::InternalCreateBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerBuffer::InternalCreateBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreateBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerBuffer.InternalGetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandlerBuffer::InternalGetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerBuffer::InternalGetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerBuffer.GetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandlerBuffer::GetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerBuffer::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DownloadHandlerBuffer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerBuffer*)>(&DownloadHandlerBuffer::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerBuffer*>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerBuffer::InternalCreateBuffer
// Il2CppName: InternalCreateBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerBuffer::*)()>(&DownloadHandlerBuffer::InternalCreateBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), "InternalCreateBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerBuffer::InternalGetData
// Il2CppName: InternalGetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandlerBuffer::*)()>(&DownloadHandlerBuffer::InternalGetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), "InternalGetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerBuffer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerBuffer::*)()>(&DownloadHandlerBuffer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerBuffer::*)()>(&DownloadHandlerBuffer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerBuffer::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandlerBuffer::*)()>(&DownloadHandlerBuffer::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerBuffer*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Networking.UploadHandler
#include "UnityEngine/Networking/UploadHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UploadHandler.Release
void UnityEngine::Networking::UploadHandler::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UploadHandler::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UploadHandler.Dispose
void UnityEngine::Networking::UploadHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UploadHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.UploadHandler.Finalize
void UnityEngine::Networking::UploadHandler::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UploadHandler::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UploadHandler::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandler::*)()>(&UploadHandler::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandler*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UploadHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandler::*)()>(&UploadHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UploadHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandler::*)()>(&UploadHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandler::*)()>(&UploadHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UploadHandler::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandler::*)()>(&UploadHandler::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandler*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.UploadHandlerRaw
#include "UnityEngine/Networking/UploadHandlerRaw.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UploadHandlerRaw.Create
System::IntPtr UnityEngine::Networking::UploadHandlerRaw::Create(UnityEngine::Networking::UploadHandlerRaw* self, ::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UploadHandlerRaw::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UploadHandlerRaw", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self), ::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self, data);
}
// Writing MetadataGetter for method: UploadHandlerRaw::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::UploadHandlerRaw*, ::Array<uint8_t>*)>(&UploadHandlerRaw::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandlerRaw*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UploadHandlerRaw*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: UploadHandlerRaw::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandlerRaw::*)(::Array<uint8_t>*)>(&UploadHandlerRaw::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandlerRaw*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadHandlerRaw::*)(::Array<uint8_t>*)>(&UploadHandlerRaw::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadHandlerRaw*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.UnityWebRequestTexture
#include "UnityEngine/Networking/UnityWebRequestTexture.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.UnityWebRequestTexture.GetTexture
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestTexture::GetTexture(::Il2CppString* uri) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestTexture::GetTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestTexture", "GetTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri);
}
// Autogenerated method: UnityEngine.Networking.UnityWebRequestTexture.GetTexture
UnityEngine::Networking::UnityWebRequest* UnityEngine::Networking::UnityWebRequestTexture::GetTexture(::Il2CppString* uri, bool nonReadable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::UnityWebRequestTexture::GetTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "UnityWebRequestTexture", "GetTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(nonReadable)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uri, nonReadable);
}
// Writing MetadataGetter for method: UnityWebRequestTexture::GetTexture
// Il2CppName: GetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*)>(&UnityWebRequestTexture::GetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestTexture*), "GetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityWebRequestTexture::GetTexture
// Il2CppName: GetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Networking::UnityWebRequest* (*)(::Il2CppString*, bool)>(&UnityWebRequestTexture::GetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityWebRequestTexture*), "GetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Networking.DownloadHandlerTexture
#include "UnityEngine/Networking/DownloadHandlerTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.Create
System::IntPtr UnityEngine::Networking::DownloadHandlerTexture::Create(UnityEngine::Networking::DownloadHandlerTexture* obj, bool readable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerTexture", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(readable)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, readable);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.InternalCreateTexture
void UnityEngine::Networking::DownloadHandlerTexture::InternalCreateTexture(bool readable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::InternalCreateTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreateTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(readable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, readable);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.get_texture
UnityEngine::Texture2D* UnityEngine::Networking::DownloadHandlerTexture::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.InternalGetTexture
UnityEngine::Texture2D* UnityEngine::Networking::DownloadHandlerTexture::InternalGetTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::InternalGetTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.InternalGetTextureNative
UnityEngine::Texture2D* UnityEngine::Networking::DownloadHandlerTexture::InternalGetTextureNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::InternalGetTextureNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetTextureNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.GetContent
UnityEngine::Texture2D* UnityEngine::Networking::DownloadHandlerTexture::GetContent(UnityEngine::Networking::UnityWebRequest* www) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::GetContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Networking", "DownloadHandlerTexture", "GetContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(www)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, www);
}
// Autogenerated method: UnityEngine.Networking.DownloadHandlerTexture.GetData
::Array<uint8_t>* UnityEngine::Networking::DownloadHandlerTexture::GetData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::DownloadHandlerTexture::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DownloadHandlerTexture::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(UnityEngine::Networking::DownloadHandlerTexture*, bool)>(&DownloadHandlerTexture::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::DownloadHandlerTexture*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::InternalCreateTexture
// Il2CppName: InternalCreateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerTexture::*)(bool)>(&DownloadHandlerTexture::InternalCreateTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "InternalCreateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerTexture::*)(bool)>(&DownloadHandlerTexture::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DownloadHandlerTexture::*)(bool)>(&DownloadHandlerTexture::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (DownloadHandlerTexture::*)()>(&DownloadHandlerTexture::get_texture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::InternalGetTexture
// Il2CppName: InternalGetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (DownloadHandlerTexture::*)()>(&DownloadHandlerTexture::InternalGetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "InternalGetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::InternalGetTextureNative
// Il2CppName: InternalGetTextureNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (DownloadHandlerTexture::*)()>(&DownloadHandlerTexture::InternalGetTextureNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "InternalGetTextureNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::GetContent
// Il2CppName: GetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (*)(UnityEngine::Networking::UnityWebRequest*)>(&DownloadHandlerTexture::GetContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "GetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::UnityWebRequest*>()});
  }
};
// Writing MetadataGetter for method: DownloadHandlerTexture::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DownloadHandlerTexture::*)()>(&DownloadHandlerTexture::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DownloadHandlerTexture*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.XR.Boundary
#include "UnityEngine/Experimental/XR/Boundary.hpp"
// Including type: UnityEngine.Experimental.XR.Boundary/Type
#include "UnityEngine/Experimental/XR/Boundary_Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.TryGetDimensions
bool UnityEngine::Experimental::XR::Boundary::TryGetDimensions(UnityEngine::Vector3& dimensionsOut, UnityEngine::Experimental::XR::Boundary::Type boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::TryGetDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "TryGetDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dimensionsOut, boundaryType);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.TryGetDimensionsInternal
bool UnityEngine::Experimental::XR::Boundary::TryGetDimensionsInternal(UnityEngine::Vector3& dimensionsOut, UnityEngine::Experimental::XR::Boundary::Type boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::TryGetDimensionsInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "TryGetDimensionsInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dimensionsOut, boundaryType);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.get_visible
bool UnityEngine::Experimental::XR::Boundary::get_visible() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::get_visible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "get_visible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.set_visible
void UnityEngine::Experimental::XR::Boundary::set_visible(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::set_visible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "set_visible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.get_configured
bool UnityEngine::Experimental::XR::Boundary::get_configured() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::get_configured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "get_configured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.TryGetGeometry
bool UnityEngine::Experimental::XR::Boundary::TryGetGeometry(System::Collections::Generic::List_1<UnityEngine::Vector3>* geometry, UnityEngine::Experimental::XR::Boundary::Type boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::TryGetGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "TryGetGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, geometry, boundaryType);
}
// Autogenerated method: UnityEngine.Experimental.XR.Boundary.TryGetGeometryScriptingInternal
bool UnityEngine::Experimental::XR::Boundary::TryGetGeometryScriptingInternal(System::Collections::Generic::List_1<UnityEngine::Vector3>* geometry, UnityEngine::Experimental::XR::Boundary::Type boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::TryGetGeometryScriptingInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.XR", "Boundary", "TryGetGeometryScriptingInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, geometry, boundaryType);
}
// Writing MetadataGetter for method: Boundary::TryGetDimensions
// Il2CppName: TryGetDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3&, UnityEngine::Experimental::XR::Boundary::Type)>(&Boundary::TryGetDimensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "TryGetDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::XR::Boundary::Type>()});
  }
};
// Writing MetadataGetter for method: Boundary::TryGetDimensionsInternal
// Il2CppName: TryGetDimensionsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3&, UnityEngine::Experimental::XR::Boundary::Type)>(&Boundary::TryGetDimensionsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "TryGetDimensionsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::XR::Boundary::Type>()});
  }
};
// Writing MetadataGetter for method: Boundary::get_visible
// Il2CppName: get_visible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Boundary::get_visible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "get_visible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Boundary::set_visible
// Il2CppName: set_visible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Boundary::set_visible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "set_visible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Boundary::get_configured
// Il2CppName: get_configured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Boundary::get_configured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "get_configured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Boundary::TryGetGeometry
// Il2CppName: TryGetGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*, UnityEngine::Experimental::XR::Boundary::Type)>(&Boundary::TryGetGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "TryGetGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::XR::Boundary::Type>()});
  }
};
// Writing MetadataGetter for method: Boundary::TryGetGeometryScriptingInternal
// Il2CppName: TryGetGeometryScriptingInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*, UnityEngine::Experimental::XR::Boundary::Type)>(&Boundary::TryGetGeometryScriptingInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Boundary*), "TryGetGeometryScriptingInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::XR::Boundary::Type>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.XR.Boundary/Type
#include "UnityEngine/Experimental/XR/Boundary_Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.XR.Boundary/Type PlayArea
UnityEngine::Experimental::XR::Boundary::Type UnityEngine::Experimental::XR::Boundary::Type::_get_PlayArea() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::Type::_get_PlayArea");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::XR::Boundary::Type>("UnityEngine.Experimental.XR", "Boundary/Type", "PlayArea"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.XR.Boundary/Type PlayArea
void UnityEngine::Experimental::XR::Boundary::Type::_set_PlayArea(UnityEngine::Experimental::XR::Boundary::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::Type::_set_PlayArea");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.XR", "Boundary/Type", "PlayArea", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.XR.Boundary/Type TrackedArea
UnityEngine::Experimental::XR::Boundary::Type UnityEngine::Experimental::XR::Boundary::Type::_get_TrackedArea() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::Type::_get_TrackedArea");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::XR::Boundary::Type>("UnityEngine.Experimental.XR", "Boundary/Type", "TrackedArea"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.XR.Boundary/Type TrackedArea
void UnityEngine::Experimental::XR::Boundary::Type::_set_TrackedArea(UnityEngine::Experimental::XR::Boundary::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::XR::Boundary::Type::_set_TrackedArea");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.XR", "Boundary/Type", "TrackedArea", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.XRSettings
#include "UnityEngine/XR/XRSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRSettings.get_enabled
bool UnityEngine::XR::XRSettings::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_showDeviceView
bool UnityEngine::XR::XRSettings::get_showDeviceView() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_showDeviceView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_showDeviceView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.set_showDeviceView
void UnityEngine::XR::XRSettings::set_showDeviceView(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::set_showDeviceView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "set_showDeviceView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_eyeTextureResolutionScale
float UnityEngine::XR::XRSettings::get_eyeTextureResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_eyeTextureResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_eyeTextureResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.set_eyeTextureResolutionScale
void UnityEngine::XR::XRSettings::set_eyeTextureResolutionScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::set_eyeTextureResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "set_eyeTextureResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_eyeTextureWidth
int UnityEngine::XR::XRSettings::get_eyeTextureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_eyeTextureWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_eyeTextureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_eyeTextureHeight
int UnityEngine::XR::XRSettings::get_eyeTextureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_eyeTextureHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_eyeTextureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_renderViewportScale
float UnityEngine::XR::XRSettings::get_renderViewportScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_renderViewportScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_renderViewportScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.set_renderViewportScale
void UnityEngine::XR::XRSettings::set_renderViewportScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::set_renderViewportScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "set_renderViewportScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_renderViewportScaleInternal
float UnityEngine::XR::XRSettings::get_renderViewportScaleInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_renderViewportScaleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_renderViewportScaleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRSettings.set_renderViewportScaleInternal
void UnityEngine::XR::XRSettings::set_renderViewportScaleInternal(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::set_renderViewportScaleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "set_renderViewportScaleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRSettings.get_loadedDeviceName
::Il2CppString* UnityEngine::XR::XRSettings::get_loadedDeviceName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRSettings::get_loadedDeviceName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRSettings", "get_loadedDeviceName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: XRSettings::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&XRSettings::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::get_showDeviceView
// Il2CppName: get_showDeviceView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&XRSettings::get_showDeviceView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_showDeviceView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::set_showDeviceView
// Il2CppName: set_showDeviceView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&XRSettings::set_showDeviceView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "set_showDeviceView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XRSettings::get_eyeTextureResolutionScale
// Il2CppName: get_eyeTextureResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&XRSettings::get_eyeTextureResolutionScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_eyeTextureResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::set_eyeTextureResolutionScale
// Il2CppName: set_eyeTextureResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&XRSettings::set_eyeTextureResolutionScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "set_eyeTextureResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: XRSettings::get_eyeTextureWidth
// Il2CppName: get_eyeTextureWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&XRSettings::get_eyeTextureWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_eyeTextureWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::get_eyeTextureHeight
// Il2CppName: get_eyeTextureHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&XRSettings::get_eyeTextureHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_eyeTextureHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::get_renderViewportScale
// Il2CppName: get_renderViewportScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&XRSettings::get_renderViewportScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_renderViewportScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::set_renderViewportScale
// Il2CppName: set_renderViewportScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&XRSettings::set_renderViewportScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "set_renderViewportScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: XRSettings::get_renderViewportScaleInternal
// Il2CppName: get_renderViewportScaleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&XRSettings::get_renderViewportScaleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_renderViewportScaleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRSettings::set_renderViewportScaleInternal
// Il2CppName: set_renderViewportScaleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&XRSettings::set_renderViewportScaleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "set_renderViewportScaleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: XRSettings::get_loadedDeviceName
// Il2CppName: get_loadedDeviceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&XRSettings::get_loadedDeviceName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRSettings*), "get_loadedDeviceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.TrackingSpaceType
#include "UnityEngine/XR/TrackingSpaceType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.TrackingSpaceType Stationary
UnityEngine::XR::TrackingSpaceType UnityEngine::XR::TrackingSpaceType::_get_Stationary() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::TrackingSpaceType::_get_Stationary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::TrackingSpaceType>("UnityEngine.XR", "TrackingSpaceType", "Stationary"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.TrackingSpaceType Stationary
void UnityEngine::XR::TrackingSpaceType::_set_Stationary(UnityEngine::XR::TrackingSpaceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::TrackingSpaceType::_set_Stationary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "TrackingSpaceType", "Stationary", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.TrackingSpaceType RoomScale
UnityEngine::XR::TrackingSpaceType UnityEngine::XR::TrackingSpaceType::_get_RoomScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::TrackingSpaceType::_get_RoomScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::TrackingSpaceType>("UnityEngine.XR", "TrackingSpaceType", "RoomScale"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.TrackingSpaceType RoomScale
void UnityEngine::XR::TrackingSpaceType::_set_RoomScale(UnityEngine::XR::TrackingSpaceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::TrackingSpaceType::_set_RoomScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "TrackingSpaceType", "RoomScale", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.XRDevice
#include "UnityEngine/XR/XRDevice.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.XR.TrackingSpaceType
#include "UnityEngine/XR/TrackingSpaceType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDC8FBC
// [DebuggerBrowsableAttribute] Offset: 0xDC8FBC
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.String> deviceLoaded
System::Action_1<::Il2CppString*>* UnityEngine::XR::XRDevice::_get_deviceLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::_get_deviceLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppString*>*>("UnityEngine.XR", "XRDevice", "deviceLoaded"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.String> deviceLoaded
void UnityEngine::XR::XRDevice::_set_deviceLoaded(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::_set_deviceLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRDevice", "deviceLoaded", value));
}
// Autogenerated method: UnityEngine.XR.XRDevice.get_isPresent
bool UnityEngine::XR::XRDevice::get_isPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::get_isPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", "get_isPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRDevice.get_model
::Il2CppString* UnityEngine::XR::XRDevice::get_model() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::get_model");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", "get_model", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRDevice.GetNativePtr
System::IntPtr UnityEngine::XR::XRDevice::GetNativePtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::GetNativePtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", "GetNativePtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRDevice.SetTrackingSpaceType
bool UnityEngine::XR::XRDevice::SetTrackingSpaceType(UnityEngine::XR::TrackingSpaceType trackingSpaceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::SetTrackingSpaceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", "SetTrackingSpaceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trackingSpaceType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackingSpaceType);
}
// Autogenerated method: UnityEngine.XR.XRDevice.InvokeDeviceLoaded
void UnityEngine::XR::XRDevice::InvokeDeviceLoaded(::Il2CppString* loadedDeviceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::InvokeDeviceLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", "InvokeDeviceLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadedDeviceName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, loadedDeviceName);
}
// Autogenerated method: UnityEngine.XR.XRDevice..cctor
void UnityEngine::XR::XRDevice::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDevice::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDevice", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: XRDevice::get_isPresent
// Il2CppName: get_isPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&XRDevice::get_isPresent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), "get_isPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRDevice::get_model
// Il2CppName: get_model
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&XRDevice::get_model)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), "get_model", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRDevice::GetNativePtr
// Il2CppName: GetNativePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&XRDevice::GetNativePtr)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), "GetNativePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRDevice::SetTrackingSpaceType
// Il2CppName: SetTrackingSpaceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::XR::TrackingSpaceType)>(&XRDevice::SetTrackingSpaceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), "SetTrackingSpaceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::TrackingSpaceType>()});
  }
};
// Writing MetadataGetter for method: XRDevice::InvokeDeviceLoaded
// Il2CppName: InvokeDeviceLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&XRDevice::InvokeDeviceLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), "InvokeDeviceLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XRDevice::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XRDevice::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDevice*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.WSA.WorldAnchor
#include "UnityEngine/XR/WSA/WorldAnchor.hpp"
// Including type: UnityEngine.XR.WSA.WorldAnchor/OnTrackingChangedDelegate
#include "UnityEngine/XR/WSA/WorldAnchor_OnTrackingChangedDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor.Internal_TriggerEventOnTrackingLost
void UnityEngine::XR::WSA::WorldAnchor::Internal_TriggerEventOnTrackingLost(UnityEngine::XR::WSA::WorldAnchor* worldAnchor, bool located) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::Internal_TriggerEventOnTrackingLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR.WSA", "WorldAnchor", "Internal_TriggerEventOnTrackingLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldAnchor), ::il2cpp_utils::ExtractType(located)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, worldAnchor, located);
}
// Writing MetadataGetter for method: WorldAnchor::Internal_TriggerEventOnTrackingLost
// Il2CppName: Internal_TriggerEventOnTrackingLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::XR::WSA::WorldAnchor*, bool)>(&WorldAnchor::Internal_TriggerEventOnTrackingLost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor*), "Internal_TriggerEventOnTrackingLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::WSA::WorldAnchor*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.WSA.WorldAnchor/OnTrackingChangedDelegate
#include "UnityEngine/XR/WSA/WorldAnchor_OnTrackingChangedDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/OnTrackingChangedDelegate.Invoke
void UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::Invoke(UnityEngine::XR::WSA::WorldAnchor* worldAnchor, bool located) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldAnchor), ::il2cpp_utils::ExtractType(located)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldAnchor, located);
}
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/OnTrackingChangedDelegate.BeginInvoke
System::IAsyncResult* UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::BeginInvoke(UnityEngine::XR::WSA::WorldAnchor* worldAnchor, bool located, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldAnchor), ::il2cpp_utils::ExtractType(located), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, worldAnchor, located, callback, object);
}
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/OnTrackingChangedDelegate.EndInvoke
void UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: WorldAnchor::OnTrackingChangedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WorldAnchor::OnTrackingChangedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&WorldAnchor::OnTrackingChangedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor::OnTrackingChangedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WorldAnchor::OnTrackingChangedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&WorldAnchor::OnTrackingChangedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor::OnTrackingChangedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: WorldAnchor::OnTrackingChangedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WorldAnchor::OnTrackingChangedDelegate::*)(UnityEngine::XR::WSA::WorldAnchor*, bool)>(&WorldAnchor::OnTrackingChangedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor::OnTrackingChangedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::WSA::WorldAnchor*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: WorldAnchor::OnTrackingChangedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (WorldAnchor::OnTrackingChangedDelegate::*)(UnityEngine::XR::WSA::WorldAnchor*, bool, System::AsyncCallback*, ::Il2CppObject*)>(&WorldAnchor::OnTrackingChangedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor::OnTrackingChangedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::WSA::WorldAnchor*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: WorldAnchor::OnTrackingChangedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WorldAnchor::OnTrackingChangedDelegate::*)(System::IAsyncResult*)>(&WorldAnchor::OnTrackingChangedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WorldAnchor::OnTrackingChangedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputTracking
#include "UnityEngine/XR/InputTracking.hpp"
// Including type: UnityEngine.XR.InputTracking/TrackingStateEventType
#include "UnityEngine/XR/InputTracking_TrackingStateEventType.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDB6E8C
// [CompilerGeneratedAttribute] Offset: 0xDB6E8C
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingAcquired
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_trackingAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_trackingAcquired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "trackingAcquired"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingAcquired
void UnityEngine::XR::InputTracking::_set_trackingAcquired(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_trackingAcquired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "trackingAcquired", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDB6EC8
// [DebuggerBrowsableAttribute] Offset: 0xDB6EC8
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingLost
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_trackingLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_trackingLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "trackingLost"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingLost
void UnityEngine::XR::InputTracking::_set_trackingLost(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_trackingLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "trackingLost", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDB6F04
// [CompilerGeneratedAttribute] Offset: 0xDB6F04
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeAdded
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_nodeAdded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_nodeAdded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "nodeAdded"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeAdded
void UnityEngine::XR::InputTracking::_set_nodeAdded(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_nodeAdded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "nodeAdded", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDB6F40
// [CompilerGeneratedAttribute] Offset: 0xDB6F40
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeRemoved
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_nodeRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_nodeRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "nodeRemoved"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeRemoved
void UnityEngine::XR::InputTracking::_set_nodeRemoved(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_nodeRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "nodeRemoved", value));
}
// Autogenerated method: UnityEngine.XR.InputTracking.InvokeTrackingEvent
void UnityEngine::XR::InputTracking::InvokeTrackingEvent(UnityEngine::XR::InputTracking::TrackingStateEventType eventType, UnityEngine::XR::XRNode nodeType, int64_t uniqueID, bool tracked) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::InvokeTrackingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "InvokeTrackingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(uniqueID), ::il2cpp_utils::ExtractType(tracked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType, nodeType, uniqueID, tracked);
}
// Autogenerated method: UnityEngine.XR.InputTracking.Recenter
void UnityEngine::XR::InputTracking::Recenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::Recenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "Recenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputTracking.GetNodeStates
void UnityEngine::XR::InputTracking::GetNodeStates(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::GetNodeStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "GetNodeStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeStates)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeStates);
}
// Autogenerated method: UnityEngine.XR.InputTracking.GetNodeStates_Internal
void UnityEngine::XR::InputTracking::GetNodeStates_Internal(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::GetNodeStates_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "GetNodeStates_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeStates)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeStates);
}
// Autogenerated method: UnityEngine.XR.InputTracking..cctor
void UnityEngine::XR::InputTracking::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: InputTracking::InvokeTrackingEvent
// Il2CppName: InvokeTrackingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::XR::InputTracking::TrackingStateEventType, UnityEngine::XR::XRNode, int64_t, bool)>(&InputTracking::InvokeTrackingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputTracking*), "InvokeTrackingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::InputTracking::TrackingStateEventType>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InputTracking::Recenter
// Il2CppName: Recenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InputTracking::Recenter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputTracking*), "Recenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InputTracking::GetNodeStates
// Il2CppName: GetNodeStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>*)>(&InputTracking::GetNodeStates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputTracking*), "GetNodeStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>*>()});
  }
};
// Writing MetadataGetter for method: InputTracking::GetNodeStates_Internal
// Il2CppName: GetNodeStates_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>*)>(&InputTracking::GetNodeStates_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputTracking*), "GetNodeStates_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>*>()});
  }
};
// Writing MetadataGetter for method: InputTracking::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InputTracking::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputTracking*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputTracking/TrackingStateEventType
#include "UnityEngine/XR/InputTracking_TrackingStateEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType NodeAdded
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeAdded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeAdded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeAdded"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType NodeAdded
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeAdded(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeAdded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeAdded", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType NodeRemoved
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeRemoved"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType NodeRemoved
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeRemoved(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeRemoved", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType TrackingAcquired
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingAcquired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingAcquired"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType TrackingAcquired
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingAcquired(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingAcquired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingAcquired", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType TrackingLost
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingLost"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/TrackingStateEventType TrackingLost
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingLost(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingLost", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode LeftEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_LeftEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_LeftEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "LeftEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode LeftEye
void UnityEngine::XR::XRNode::_set_LeftEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_LeftEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "LeftEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode RightEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_RightEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_RightEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "RightEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode RightEye
void UnityEngine::XR::XRNode::_set_RightEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_RightEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "RightEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode CenterEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_CenterEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_CenterEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "CenterEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode CenterEye
void UnityEngine::XR::XRNode::_set_CenterEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_CenterEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "CenterEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode Head
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "Head"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode Head
void UnityEngine::XR::XRNode::_set_Head(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode LeftHand
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode LeftHand
void UnityEngine::XR::XRNode::_set_LeftHand(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode RightHand
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode RightHand
void UnityEngine::XR::XRNode::_set_RightHand(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode GameController
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_GameController() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_GameController");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "GameController"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode GameController
void UnityEngine::XR::XRNode::_set_GameController(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_GameController");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "GameController", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode TrackingReference
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode TrackingReference
void UnityEngine::XR::XRNode::_set_TrackingReference(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode HardwareTracker
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_HardwareTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_HardwareTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "HardwareTracker"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode HardwareTracker
void UnityEngine::XR::XRNode::_set_HardwareTracker(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_HardwareTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "HardwareTracker", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.AvailableTrackingData
#include "UnityEngine/XR/AvailableTrackingData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData None
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData None
void UnityEngine::XR::AvailableTrackingData::_set_None(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData PositionAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_PositionAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_PositionAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "PositionAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData PositionAvailable
void UnityEngine::XR::AvailableTrackingData::_set_PositionAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_PositionAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "PositionAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData RotationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_RotationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_RotationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "RotationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData RotationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_RotationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_RotationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "RotationAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData VelocityAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_VelocityAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_VelocityAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "VelocityAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData VelocityAvailable
void UnityEngine::XR::AvailableTrackingData::_set_VelocityAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_VelocityAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "VelocityAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AngularVelocityAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AngularVelocityAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AngularVelocityAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AngularVelocityAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AngularVelocityAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AngularVelocityAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AngularVelocityAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AngularVelocityAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AccelerationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AccelerationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AccelerationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AccelerationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AccelerationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AccelerationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AccelerationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AccelerationAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AngularAccelerationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AngularAccelerationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AngularAccelerationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AngularAccelerationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AngularAccelerationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AngularAccelerationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AngularAccelerationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AngularAccelerationAvailable", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRNodeState.set_uniqueID
void UnityEngine::XR::XRNodeState::set_uniqueID(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_uniqueID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_uniqueID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.get_nodeType
UnityEngine::XR::XRNode UnityEngine::XR::XRNodeState::get_nodeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::get_nodeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_nodeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::XRNode, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_nodeType
void UnityEngine::XR::XRNodeState::set_nodeType(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_nodeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_nodeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_tracked
void UnityEngine::XR::XRNodeState::set_tracked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_tracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_tracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetPosition
bool UnityEngine::XR::XRNodeState::TryGetPosition(UnityEngine::Vector3& position) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, position);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetRotation
bool UnityEngine::XR::XRNodeState::TryGetRotation(UnityEngine::Quaternion& rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, rotation);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetVelocity
bool UnityEngine::XR::XRNodeState::TryGetVelocity(UnityEngine::Vector3& velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, velocity);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularVelocity
bool UnityEngine::XR::XRNodeState::TryGetAngularVelocity(UnityEngine::Vector3& angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAngularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAngularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, angularVelocity);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAcceleration(UnityEngine::Vector3& acceleration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, acceleration);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAngularAcceleration(UnityEngine::Vector3& angularAcceleration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAngularAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAngularAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, angularAcceleration);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Vector3 inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Vector3& outValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inValue), ::il2cpp_utils::ExtractType(availabilityFlag), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inValue, availabilityFlag, outValue);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Quaternion inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Quaternion& outValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inValue), ::il2cpp_utils::ExtractType(availabilityFlag), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inValue, availabilityFlag, outValue);
}
// Writing MetadataGetter for method: XRNodeState::set_uniqueID
// Il2CppName: set_uniqueID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRNodeState::*)(uint64_t)>(&XRNodeState::set_uniqueID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "set_uniqueID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::get_nodeType
// Il2CppName: get_nodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::XRNode (XRNodeState::*)()>(&XRNodeState::get_nodeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "get_nodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XRNodeState::set_nodeType
// Il2CppName: set_nodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRNodeState::*)(UnityEngine::XR::XRNode)>(&XRNodeState::set_nodeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "set_nodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::set_tracked
// Il2CppName: set_tracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRNodeState::*)(bool)>(&XRNodeState::set_tracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "set_tracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetPosition
// Il2CppName: TryGetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3&)>(&XRNodeState::TryGetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetRotation
// Il2CppName: TryGetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Quaternion&)>(&XRNodeState::TryGetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetVelocity
// Il2CppName: TryGetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3&)>(&XRNodeState::TryGetVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetAngularVelocity
// Il2CppName: TryGetAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3&)>(&XRNodeState::TryGetAngularVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetAcceleration
// Il2CppName: TryGetAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3&)>(&XRNodeState::TryGetAcceleration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGetAngularAcceleration
// Il2CppName: TryGetAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3&)>(&XRNodeState::TryGetAngularAcceleration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGetAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGet
// Il2CppName: TryGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Vector3, UnityEngine::XR::AvailableTrackingData, UnityEngine::Vector3&)>(&XRNodeState::TryGet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::AvailableTrackingData>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: XRNodeState::TryGet
// Il2CppName: TryGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XRNodeState::*)(UnityEngine::Quaternion, UnityEngine::XR::AvailableTrackingData, UnityEngine::Quaternion&)>(&XRNodeState::TryGet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeState), "TryGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::AvailableTrackingData>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputFeatureType
#include "UnityEngine/XR/InputFeatureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Custom
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Custom
void UnityEngine::XR::InputFeatureType::_set_Custom(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Custom", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Binary
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Binary() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Binary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Binary"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Binary
void UnityEngine::XR::InputFeatureType::_set_Binary(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Binary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Binary", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType DiscreteStates
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_DiscreteStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_DiscreteStates");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "DiscreteStates"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType DiscreteStates
void UnityEngine::XR::InputFeatureType::_set_DiscreteStates(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_DiscreteStates");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "DiscreteStates", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis1D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis1D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis1D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis1D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis1D
void UnityEngine::XR::InputFeatureType::_set_Axis1D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis1D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis1D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis2D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis2D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis2D
void UnityEngine::XR::InputFeatureType::_set_Axis2D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis2D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis3D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis3D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis3D
void UnityEngine::XR::InputFeatureType::_set_Axis3D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis3D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Rotation
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Rotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Rotation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Rotation
void UnityEngine::XR::InputFeatureType::_set_Rotation(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Rotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Rotation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Hand
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Hand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Hand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Hand
void UnityEngine::XR::InputFeatureType::_set_Hand(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Hand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Hand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Bone
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Bone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Bone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Bone"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Bone
void UnityEngine::XR::InputFeatureType::_set_Bone(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Bone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Bone", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Eyes
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Eyes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Eyes"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Eyes
void UnityEngine::XR::InputFeatureType::_set_Eyes(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Eyes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Eyes", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType kUnityXRInputFeatureTypeInvalid
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_kUnityXRInputFeatureTypeInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_kUnityXRInputFeatureTypeInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "kUnityXRInputFeatureTypeInvalid"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType kUnityXRInputFeatureTypeInvalid
void UnityEngine::XR::InputFeatureType::_set_kUnityXRInputFeatureTypeInvalid(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_kUnityXRInputFeatureTypeInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "kUnityXRInputFeatureTypeInvalid", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.ConnectionChangeType
#include "UnityEngine/XR/ConnectionChangeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType Connected
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType Connected
void UnityEngine::XR::ConnectionChangeType::_set_Connected(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType Disconnected
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType Disconnected
void UnityEngine::XR::ConnectionChangeType::_set_Disconnected(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType ConfigChange
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_ConfigChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_ConfigChange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "ConfigChange"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType ConfigChange
void UnityEngine::XR::ConnectionChangeType::_set_ConfigChange(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_ConfigChange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "ConfigChange", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.InputFeatureUsage
#include "UnityEngine/XR/InputFeatureUsage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.get_name
::Il2CppString* UnityEngine::XR::InputFeatureUsage::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.get_internalType
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureUsage::get_internalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::get_internalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_internalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::InputFeatureType, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.Equals
bool UnityEngine::XR::InputFeatureUsage::Equals(UnityEngine::XR::InputFeatureUsage other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.Equals
bool UnityEngine::XR::InputFeatureUsage::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.GetHashCode
int UnityEngine::XR::InputFeatureUsage::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: InputFeatureUsage::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InputFeatureUsage::*)()>(&InputFeatureUsage::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputFeatureUsage), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InputFeatureUsage::get_internalType
// Il2CppName: get_internalType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::InputFeatureType (InputFeatureUsage::*)()>(&InputFeatureUsage::get_internalType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputFeatureUsage), "get_internalType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InputFeatureUsage::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InputFeatureUsage::*)(UnityEngine::XR::InputFeatureUsage)>(&InputFeatureUsage::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputFeatureUsage), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::InputFeatureUsage>()});
  }
};
// Writing MetadataGetter for method: InputFeatureUsage::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InputFeatureUsage::*)(::Il2CppObject*)>(&InputFeatureUsage::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputFeatureUsage), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InputFeatureUsage::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InputFeatureUsage::*)()>(&InputFeatureUsage::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputFeatureUsage), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.InputDevice.get_deviceId
uint64_t UnityEngine::XR::InputDevice::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputDevice.Equals
bool UnityEngine::XR::InputDevice::Equals(UnityEngine::XR::InputDevice other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.InputDevice.Equals
bool UnityEngine::XR::InputDevice::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.InputDevice.GetHashCode
int UnityEngine::XR::InputDevice::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: InputDevice::InputDevice
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InputDevice::*)(uint64_t)>(&InputDevice::InputDevice<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InputDevice::*)(uint64_t)>(&InputDevice::InputDevice<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: InputDevice::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (InputDevice::*)()>(&InputDevice::get_deviceId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InputDevice::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InputDevice::*)(UnityEngine::XR::InputDevice)>(&InputDevice::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::InputDevice>()});
  }
};
// Writing MetadataGetter for method: InputDevice::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InputDevice::*)(::Il2CppObject*)>(&InputDevice::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InputDevice::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InputDevice::*)()>(&InputDevice::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevice), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Hand
#include "UnityEngine/XR/Hand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.Hand.get_deviceId
uint64_t UnityEngine::XR::Hand::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Hand.get_featureIndex
uint UnityEngine::XR::Hand::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Hand.Equals
bool UnityEngine::XR::Hand::Equals(UnityEngine::XR::Hand other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Hand.Equals
bool UnityEngine::XR::Hand::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Hand.GetHashCode
int UnityEngine::XR::Hand::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Hand::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Hand::*)()>(&Hand::get_deviceId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hand), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Hand::get_featureIndex
// Il2CppName: get_featureIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Hand::*)()>(&Hand::get_featureIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hand), "get_featureIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Hand::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Hand::*)(UnityEngine::XR::Hand)>(&Hand::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hand), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::Hand>()});
  }
};
// Writing MetadataGetter for method: Hand::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Hand::*)(::Il2CppObject*)>(&Hand::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hand), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Hand::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Hand::*)()>(&Hand::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hand), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Eyes
#include "UnityEngine/XR/Eyes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.Eyes.get_deviceId
uint64_t UnityEngine::XR::Eyes::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Eyes.get_featureIndex
uint UnityEngine::XR::Eyes::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Eyes.Equals
bool UnityEngine::XR::Eyes::Equals(UnityEngine::XR::Eyes other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Eyes.Equals
bool UnityEngine::XR::Eyes::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Eyes.GetHashCode
int UnityEngine::XR::Eyes::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Eyes::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Eyes::*)()>(&Eyes::get_deviceId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Eyes), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Eyes::get_featureIndex
// Il2CppName: get_featureIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Eyes::*)()>(&Eyes::get_featureIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Eyes), "get_featureIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Eyes::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Eyes::*)(UnityEngine::XR::Eyes)>(&Eyes::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Eyes), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::Eyes>()});
  }
};
// Writing MetadataGetter for method: Eyes::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Eyes::*)(::Il2CppObject*)>(&Eyes::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Eyes), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Eyes::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Eyes::*)()>(&Eyes::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Eyes), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Bone
#include "UnityEngine/XR/Bone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.Bone.get_deviceId
uint64_t UnityEngine::XR::Bone::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Bone.get_featureIndex
uint UnityEngine::XR::Bone::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Bone.Equals
bool UnityEngine::XR::Bone::Equals(UnityEngine::XR::Bone other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Bone.Equals
bool UnityEngine::XR::Bone::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Bone.GetHashCode
int UnityEngine::XR::Bone::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Bone::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Bone::*)()>(&Bone::get_deviceId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Bone), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Bone::get_featureIndex
// Il2CppName: get_featureIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Bone::*)()>(&Bone::get_featureIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Bone), "get_featureIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Bone::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Bone::*)(UnityEngine::XR::Bone)>(&Bone::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Bone), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::Bone>()});
  }
};
// Writing MetadataGetter for method: Bone::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Bone::*)(::Il2CppObject*)>(&Bone::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Bone), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Bone::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Bone::*)()>(&Bone::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Bone), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputDevices
#include "UnityEngine/XR/InputDevices.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.XR.ConnectionChangeType
#include "UnityEngine/XR/ConnectionChangeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDB6FB4
// [DebuggerBrowsableAttribute] Offset: 0xDB6FB4
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConnected
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConnected
void UnityEngine::XR::InputDevices::_set_deviceConnected(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceConnected", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDB6FF0
// [DebuggerBrowsableAttribute] Offset: 0xDB6FF0
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceDisconnected
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceDisconnected"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceDisconnected
void UnityEngine::XR::InputDevices::_set_deviceDisconnected(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceDisconnected", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDB702C
// [DebuggerBrowsableAttribute] Offset: 0xDB702C
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConfigChanged
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceConfigChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceConfigChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceConfigChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConfigChanged
void UnityEngine::XR::InputDevices::_set_deviceConfigChanged(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceConfigChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceConfigChanged", value));
}
// Autogenerated method: UnityEngine.XR.InputDevices.InvokeConnectionEvent
void UnityEngine::XR::InputDevices::InvokeConnectionEvent(uint64_t deviceId, UnityEngine::XR::ConnectionChangeType change) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::InvokeConnectionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputDevices", "InvokeConnectionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceId), ::il2cpp_utils::ExtractType(change)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceId, change);
}
// Writing MetadataGetter for method: InputDevices::InvokeConnectionEvent
// Il2CppName: InvokeConnectionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, UnityEngine::XR::ConnectionChangeType)>(&InputDevices::InvokeConnectionEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InputDevices*), "InvokeConnectionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::ConnectionChangeType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRDisplaySubsystemDescriptor
#include "UnityEngine/XR/XRDisplaySubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem
#include "UnityEngine/XR/XRDisplaySubsystem.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem/XRRenderPass
#include "UnityEngine/XR/XRDisplaySubsystem_XRRenderPass.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem/XRMirrorViewBlitDesc
#include "UnityEngine/XR/XRDisplaySubsystem_XRMirrorViewBlitDesc.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDB7068
// [DebuggerBrowsableAttribute] Offset: 0xDB7068
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Boolean> displayFocusChanged
System::Action_1<bool>* UnityEngine::XR::XRDisplaySubsystem::_get_displayFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::_get_displayFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<bool>*>("UnityEngine.XR", "XRDisplaySubsystem", "displayFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Boolean> displayFocusChanged
void UnityEngine::XR::XRDisplaySubsystem::_set_displayFocusChanged(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::_set_displayFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRDisplaySubsystem", "displayFocusChanged", value));
}
// Autogenerated method: UnityEngine.XR.XRDisplaySubsystem.InvokeDisplayFocusChanged
void UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged(bool focus) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDisplaySubsystem", "InvokeDisplayFocusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(focus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, focus);
}
// Writing MetadataGetter for method: XRDisplaySubsystem::InvokeDisplayFocusChanged
// Il2CppName: InvokeDisplayFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&XRDisplaySubsystem::InvokeDisplayFocusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDisplaySubsystem*), "InvokeDisplayFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XRDisplaySubsystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRDisplaySubsystem::*)()>(&XRDisplaySubsystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDisplaySubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRDisplaySubsystem::*)()>(&XRDisplaySubsystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDisplaySubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRDisplaySubsystemDescriptor
#include "UnityEngine/XR/XRDisplaySubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem
#include "UnityEngine/XR/XRDisplaySubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XRDisplaySubsystemDescriptor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRDisplaySubsystemDescriptor::*)()>(&XRDisplaySubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDisplaySubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRDisplaySubsystemDescriptor::*)()>(&XRDisplaySubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRDisplaySubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRInputSubsystemDescriptor
#include "UnityEngine/XR/XRInputSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRInputSubsystem
#include "UnityEngine/XR/XRInputSubsystem.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRInputSubsystem.InvokeTrackingOriginUpdatedEvent
void UnityEngine::XR::XRInputSubsystem::InvokeTrackingOriginUpdatedEvent(System::IntPtr internalPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::InvokeTrackingOriginUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRInputSubsystem", "InvokeTrackingOriginUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(internalPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, internalPtr);
}
// Autogenerated method: UnityEngine.XR.XRInputSubsystem.InvokeBoundaryChangedEvent
void UnityEngine::XR::XRInputSubsystem::InvokeBoundaryChangedEvent(System::IntPtr internalPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::InvokeBoundaryChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRInputSubsystem", "InvokeBoundaryChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(internalPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, internalPtr);
}
// Writing MetadataGetter for method: XRInputSubsystem::InvokeTrackingOriginUpdatedEvent
// Il2CppName: InvokeTrackingOriginUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&XRInputSubsystem::InvokeTrackingOriginUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystem*), "InvokeTrackingOriginUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: XRInputSubsystem::InvokeBoundaryChangedEvent
// Il2CppName: InvokeBoundaryChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&XRInputSubsystem::InvokeBoundaryChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystem*), "InvokeBoundaryChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: XRInputSubsystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRInputSubsystem::*)()>(&XRInputSubsystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRInputSubsystem::*)()>(&XRInputSubsystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRInputSubsystemDescriptor
#include "UnityEngine/XR/XRInputSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRInputSubsystem
#include "UnityEngine/XR/XRInputSubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XRInputSubsystemDescriptor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRInputSubsystemDescriptor::*)()>(&XRInputSubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRInputSubsystemDescriptor::*)()>(&XRInputSubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRInputSubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.MeshId
#include "UnityEngine/XR/MeshId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.XR.MeshId s_InvalidId
UnityEngine::XR::MeshId UnityEngine::XR::MeshId::_get_s_InvalidId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_get_s_InvalidId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshId>("UnityEngine.XR", "MeshId", "s_InvalidId"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.XR.MeshId s_InvalidId
void UnityEngine::XR::MeshId::_set_s_InvalidId(UnityEngine::XR::MeshId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_set_s_InvalidId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshId", "s_InvalidId", value));
}
// Autogenerated method: UnityEngine.XR.MeshId.Equals
bool UnityEngine::XR::MeshId::Equals(UnityEngine::XR::MeshId other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.MeshId..cctor
void UnityEngine::XR::MeshId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "MeshId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.ToString
::Il2CppString* UnityEngine::XR::MeshId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.GetHashCode
int UnityEngine::XR::MeshId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.Equals
bool UnityEngine::XR::MeshId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Writing MetadataGetter for method: MeshId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MeshId::*)(UnityEngine::XR::MeshId)>(&MeshId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::MeshId>()});
  }
};
// Writing MetadataGetter for method: MeshId::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MeshId::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshId), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshId::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MeshId::*)()>(&MeshId::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshId), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MeshId::*)()>(&MeshId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MeshId::*)(::Il2CppObject*)>(&MeshId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.MeshGenerationStatus
#include "UnityEngine/XR/MeshGenerationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus Success
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "Success"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus Success
void UnityEngine::XR::MeshGenerationStatus::_set_Success(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus InvalidMeshId
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_InvalidMeshId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_InvalidMeshId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "InvalidMeshId"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus InvalidMeshId
void UnityEngine::XR::MeshGenerationStatus::_set_InvalidMeshId(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_InvalidMeshId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "InvalidMeshId", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus GenerationAlreadyInProgress
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_GenerationAlreadyInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_GenerationAlreadyInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "GenerationAlreadyInProgress"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus GenerationAlreadyInProgress
void UnityEngine::XR::MeshGenerationStatus::_set_GenerationAlreadyInProgress(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_GenerationAlreadyInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "GenerationAlreadyInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus Canceled
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus Canceled
void UnityEngine::XR::MeshGenerationStatus::_set_Canceled(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus UnknownError
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus UnknownError
void UnityEngine::XR::MeshGenerationStatus::_set_UnknownError(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.HashCodeHelper
#include "UnityEngine/XR/HashCodeHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.HashCodeHelper.Combine
int UnityEngine::XR::HashCodeHelper::Combine(int hash1, int hash2) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::HashCodeHelper::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "HashCodeHelper", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash1), ::il2cpp_utils::ExtractType(hash2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hash1, hash2);
}
// Writing MetadataGetter for method: HashCodeHelper::Combine
// Il2CppName: Combine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&HashCodeHelper::Combine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashCodeHelper*), "Combine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.MeshGenerationResult
#include "UnityEngine/XR/MeshGenerationResult.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.MeshCollider
#include "UnityEngine/MeshCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_MeshId
UnityEngine::XR::MeshId UnityEngine::XR::MeshGenerationResult::get_MeshId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_MeshId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_MeshId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshId, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Mesh
UnityEngine::Mesh* UnityEngine::XR::MeshGenerationResult::get_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_MeshCollider
UnityEngine::MeshCollider* UnityEngine::XR::MeshGenerationResult::get_MeshCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_MeshCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_MeshCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MeshCollider*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Status
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationResult::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshGenerationStatus, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Attributes
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshGenerationResult::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshVertexAttributes, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.Equals
bool UnityEngine::XR::MeshGenerationResult::Equals(UnityEngine::XR::MeshGenerationResult other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.Equals
bool UnityEngine::XR::MeshGenerationResult::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.GetHashCode
int UnityEngine::XR::MeshGenerationResult::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: MeshGenerationResult::get_MeshId
// Il2CppName: get_MeshId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::MeshId (MeshGenerationResult::*)()>(&MeshGenerationResult::get_MeshId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "get_MeshId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::get_Mesh
// Il2CppName: get_Mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (MeshGenerationResult::*)()>(&MeshGenerationResult::get_Mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "get_Mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::get_MeshCollider
// Il2CppName: get_MeshCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshCollider* (MeshGenerationResult::*)()>(&MeshGenerationResult::get_MeshCollider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "get_MeshCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::MeshGenerationStatus (MeshGenerationResult::*)()>(&MeshGenerationResult::get_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::MeshVertexAttributes (MeshGenerationResult::*)()>(&MeshGenerationResult::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MeshGenerationResult::*)(UnityEngine::XR::MeshGenerationResult)>(&MeshGenerationResult::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::MeshGenerationResult>()});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MeshGenerationResult::*)(::Il2CppObject*)>(&MeshGenerationResult::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MeshGenerationResult::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MeshGenerationResult::*)()>(&MeshGenerationResult::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeshGenerationResult), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.MeshVertexAttributes
#include "UnityEngine/XR/MeshVertexAttributes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes None
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes None
void UnityEngine::XR::MeshVertexAttributes::_set_None(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Normals
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Normals() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Normals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Normals"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Normals
void UnityEngine::XR::MeshVertexAttributes::_set_Normals(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Normals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Normals", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Tangents
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Tangents() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Tangents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Tangents"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Tangents
void UnityEngine::XR::MeshVertexAttributes::_set_Tangents(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Tangents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Tangents", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes UVs
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_UVs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_UVs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "UVs"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes UVs
void UnityEngine::XR::MeshVertexAttributes::_set_UVs(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_UVs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "UVs", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Colors
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Colors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Colors"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Colors
void UnityEngine::XR::MeshVertexAttributes::_set_Colors(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Colors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Colors", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRMeshSubsystemDescriptor
#include "UnityEngine/XR/XRMeshSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRMeshSubsystem
#include "UnityEngine/XR/XRMeshSubsystem.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRMeshSubsystem.InvokeMeshReadyDelegate
void UnityEngine::XR::XRMeshSubsystem::InvokeMeshReadyDelegate(UnityEngine::XR::MeshGenerationResult result, System::Action_1<UnityEngine::XR::MeshGenerationResult>* onMeshGenerationComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRMeshSubsystem::InvokeMeshReadyDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeMeshReadyDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(onMeshGenerationComplete)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result, onMeshGenerationComplete);
}
// Writing MetadataGetter for method: XRMeshSubsystem::InvokeMeshReadyDelegate
// Il2CppName: InvokeMeshReadyDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRMeshSubsystem::*)(UnityEngine::XR::MeshGenerationResult, System::Action_1<UnityEngine::XR::MeshGenerationResult>*)>(&XRMeshSubsystem::InvokeMeshReadyDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRMeshSubsystem*), "InvokeMeshReadyDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::MeshGenerationResult>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::XR::MeshGenerationResult>*>()});
  }
};
// Writing MetadataGetter for method: XRMeshSubsystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRMeshSubsystem::*)()>(&XRMeshSubsystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRMeshSubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRMeshSubsystem::*)()>(&XRMeshSubsystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRMeshSubsystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRMeshSubsystemDescriptor
#include "UnityEngine/XR/XRMeshSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRMeshSubsystem
#include "UnityEngine/XR/XRMeshSubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XRMeshSubsystemDescriptor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRMeshSubsystemDescriptor::*)()>(&XRMeshSubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRMeshSubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XRMeshSubsystemDescriptor::*)()>(&XRMeshSubsystemDescriptor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRMeshSubsystemDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.InitializeData
#include "NetEase/Docker/InitializeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.InitializeData.get_InitializeSuccessful
bool NetEase::Docker::InitializeData::get_InitializeSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::get_InitializeSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_InitializeSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.InitializeData.set_InitializeSuccessful
void NetEase::Docker::InitializeData::set_InitializeSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::set_InitializeSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_InitializeSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.InitializeData.set_InitializeCode
void NetEase::Docker::InitializeData::set_InitializeCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::set_InitializeCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_InitializeCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: InitializeData::get_InitializeSuccessful
// Il2CppName: get_InitializeSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InitializeData::*)()>(&InitializeData::get_InitializeSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InitializeData), "get_InitializeSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InitializeData::set_InitializeSuccessful
// Il2CppName: set_InitializeSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InitializeData::*)(bool)>(&InitializeData::set_InitializeSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InitializeData), "set_InitializeSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InitializeData::set_InitializeCode
// Il2CppName: set_InitializeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InitializeData::*)(int)>(&InitializeData::set_InitializeCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InitializeData), "set_InitializeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.LoginData
#include "NetEase/Docker/LoginData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.LoginData.get_LoginSuccessful
bool NetEase::Docker::LoginData::get_LoginSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::get_LoginSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_LoginSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.LoginData.set_LoginSuccessful
void NetEase::Docker::LoginData::set_LoginSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_LoginSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LoginSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.LoginData.set_LoginCode
void NetEase::Docker::LoginData::set_LoginCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_LoginCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LoginCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.LoginData.get_UserName
::Il2CppString* NetEase::Docker::LoginData::get_UserName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::get_UserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_UserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.LoginData.set_UserName
void NetEase::Docker::LoginData::set_UserName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_UserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_UserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: LoginData::get_LoginSuccessful
// Il2CppName: get_LoginSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LoginData::*)()>(&LoginData::get_LoginSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoginData), "get_LoginSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoginData::set_LoginSuccessful
// Il2CppName: set_LoginSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoginData::*)(bool)>(&LoginData::set_LoginSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoginData), "set_LoginSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LoginData::set_LoginCode
// Il2CppName: set_LoginCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoginData::*)(int)>(&LoginData::set_LoginCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoginData), "set_LoginCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LoginData::get_UserName
// Il2CppName: get_UserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LoginData::*)()>(&LoginData::get_UserName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoginData), "get_UserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoginData::set_UserName
// Il2CppName: set_UserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoginData::*)(::Il2CppString*)>(&LoginData::set_UserName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoginData), "set_UserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.LogoutData
#include "NetEase/Docker/LogoutData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.LogoutData.set_LogoutCode
void NetEase::Docker::LogoutData::set_LogoutCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LogoutData::set_LogoutCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LogoutCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: LogoutData::set_LogoutCode
// Il2CppName: set_LogoutCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogoutData::*)(int)>(&LogoutData::set_LogoutCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogoutData), "set_LogoutCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.ReceivedHighscoreData
#include "NetEase/Docker/ReceivedHighscoreData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_FetchingSuccessful
bool NetEase::Docker::ReceivedHighscoreData::get_FetchingSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_FetchingSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_FetchingSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_FetchingSuccessful
void NetEase::Docker::ReceivedHighscoreData::set_FetchingSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_FetchingSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_FetchingSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_HighscoreCode
void NetEase::Docker::ReceivedHighscoreData::set_HighscoreCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_HighscoreCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_HighscoreCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_Track
::Il2CppString* NetEase::Docker::ReceivedHighscoreData::get_Track() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_Track
void NetEase::Docker::ReceivedHighscoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_Scores
System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* NetEase::Docker::ReceivedHighscoreData::get_Scores() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_Scores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Scores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_Scores
void NetEase::Docker::ReceivedHighscoreData::set_Scores(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_Scores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Scores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: ReceivedHighscoreData::get_FetchingSuccessful
// Il2CppName: get_FetchingSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ReceivedHighscoreData::*)()>(&ReceivedHighscoreData::get_FetchingSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "get_FetchingSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::set_FetchingSuccessful
// Il2CppName: set_FetchingSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReceivedHighscoreData::*)(bool)>(&ReceivedHighscoreData::set_FetchingSuccessful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "set_FetchingSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::set_HighscoreCode
// Il2CppName: set_HighscoreCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReceivedHighscoreData::*)(int)>(&ReceivedHighscoreData::set_HighscoreCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "set_HighscoreCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::get_Track
// Il2CppName: get_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ReceivedHighscoreData::*)()>(&ReceivedHighscoreData::get_Track)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "get_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::set_Track
// Il2CppName: set_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReceivedHighscoreData::*)(::Il2CppString*)>(&ReceivedHighscoreData::set_Track)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "set_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::get_Scores
// Il2CppName: get_Scores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* (ReceivedHighscoreData::*)()>(&ReceivedHighscoreData::get_Scores)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "get_Scores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReceivedHighscoreData::set_Scores
// Il2CppName: set_Scores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReceivedHighscoreData::*)(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*)>(&ReceivedHighscoreData::set_Scores)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReceivedHighscoreData), "set_Scores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.ScoreData
#include "NetEase/Docker/ScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.ScoreData.get_Name
::Il2CppString* NetEase::Docker::ScoreData::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_Name
void NetEase::Docker::ScoreData::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ScoreData.get_Score
int NetEase::Docker::ScoreData::get_Score() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::get_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_Score
void NetEase::Docker::ScoreData::set_Score(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_TimeStamp
void NetEase::Docker::ScoreData::set_TimeStamp(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_TimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_TimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: ScoreData::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ScoreData::*)()>(&ScoreData::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreData), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreData::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreData::*)(::Il2CppString*)>(&ScoreData::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreData), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ScoreData::get_Score
// Il2CppName: get_Score
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreData::*)()>(&ScoreData::get_Score)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreData), "get_Score", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreData::set_Score
// Il2CppName: set_Score
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreData::*)(int)>(&ScoreData::set_Score)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreData), "set_Score", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreData::set_TimeStamp
// Il2CppName: set_TimeStamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreData::*)(int64_t)>(&ScoreData::set_TimeStamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreData), "set_TimeStamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.RequestHighscoreData.get_Track
::Il2CppString* NetEase::Docker::RequestHighscoreData::get_Track() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::get_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.RequestHighscoreData.set_Track
void NetEase::Docker::RequestHighscoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.RequestHighscoreData.set_HighscoreType
void NetEase::Docker::RequestHighscoreData::set_HighscoreType(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::set_HighscoreType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_HighscoreType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: RequestHighscoreData::get_Track
// Il2CppName: get_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RequestHighscoreData::*)()>(&RequestHighscoreData::get_Track)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequestHighscoreData), "get_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RequestHighscoreData::set_Track
// Il2CppName: set_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequestHighscoreData::*)(::Il2CppString*)>(&RequestHighscoreData::set_Track)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequestHighscoreData), "set_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RequestHighscoreData::set_HighscoreType
// Il2CppName: set_HighscoreType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequestHighscoreData::*)(::Il2CppString*)>(&RequestHighscoreData::set_HighscoreType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequestHighscoreData), "set_HighscoreType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.UploadScoreData.set_Track
void NetEase::Docker::UploadScoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.UploadScoreData.set_Score
void NetEase::Docker::UploadScoreData::set_Score(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::set_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: UploadScoreData::set_Track
// Il2CppName: set_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadScoreData::*)(::Il2CppString*)>(&UploadScoreData::set_Track)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadScoreData), "set_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UploadScoreData::set_Score
// Il2CppName: set_Score
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UploadScoreData::*)(int)>(&UploadScoreData::set_Score)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UploadScoreData), "set_Score", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.BaseDock
#include "NetEase/Docker/BaseDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.BaseDock.SetInitializeCallback
void NetEase::Docker::BaseDock::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetInitializeCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Initialize
void NetEase::Docker::BaseDock::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetLoginCallback
void NetEase::Docker::BaseDock::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetLoginCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Login
void NetEase::Docker::BaseDock::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Login");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetLogoutCallback
void NetEase::Docker::BaseDock::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetLogoutCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Logout
void NetEase::Docker::BaseDock::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Logout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.UploadScore
void NetEase::Docker::BaseDock::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::UploadScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.BaseDock.WillProvideHighscore
bool NetEase::Docker::BaseDock::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::WillProvideHighscore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetHighscoreReceivedCallback
void NetEase::Docker::BaseDock::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetHighscoreReceivedCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.RequestHighscoreList
void NetEase::Docker::BaseDock::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::RequestHighscoreList");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.BaseDock.UpdateLoop
void NetEase::Docker::BaseDock::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::UpdateLoop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseDock::SetInitializeCallback
// Il2CppName: SetInitializeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(System::Action_1<NetEase::Docker::InitializeData>*)>(&BaseDock::SetInitializeCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "SetInitializeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::InitializeData>*>()});
  }
};
// Writing MetadataGetter for method: BaseDock::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseDock::SetLoginCallback
// Il2CppName: SetLoginCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(System::Action_1<NetEase::Docker::LoginData>*)>(&BaseDock::SetLoginCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "SetLoginCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LoginData>*>()});
  }
};
// Writing MetadataGetter for method: BaseDock::Login
// Il2CppName: Login
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::Login)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "Login", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseDock::SetLogoutCallback
// Il2CppName: SetLogoutCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(System::Action_1<NetEase::Docker::LogoutData>*)>(&BaseDock::SetLogoutCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "SetLogoutCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LogoutData>*>()});
  }
};
// Writing MetadataGetter for method: BaseDock::Logout
// Il2CppName: Logout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::Logout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "Logout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseDock::UploadScore
// Il2CppName: UploadScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(NetEase::Docker::UploadScoreData)>(&BaseDock::UploadScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "UploadScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::UploadScoreData>()});
  }
};
// Writing MetadataGetter for method: BaseDock::WillProvideHighscore
// Il2CppName: WillProvideHighscore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseDock::*)()>(&BaseDock::WillProvideHighscore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "WillProvideHighscore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseDock::SetHighscoreReceivedCallback
// Il2CppName: SetHighscoreReceivedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(System::Action_1<NetEase::Docker::ReceivedHighscoreData>*)>(&BaseDock::SetHighscoreReceivedCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::ReceivedHighscoreData>*>()});
  }
};
// Writing MetadataGetter for method: BaseDock::RequestHighscoreList
// Il2CppName: RequestHighscoreList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)(NetEase::Docker::RequestHighscoreData)>(&BaseDock::RequestHighscoreList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "RequestHighscoreList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::RequestHighscoreData>()});
  }
};
// Writing MetadataGetter for method: BaseDock::UpdateLoop
// Il2CppName: UpdateLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::UpdateLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), "UpdateLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseDock::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseDock::*)()>(&BaseDock::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseDock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.IDock
#include "NetEase/Docker/IDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.IDock.SetInitializeCallback
void NetEase::Docker::IDock::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetInitializeCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Initialize
void NetEase::Docker::IDock::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetLoginCallback
void NetEase::Docker::IDock::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetLoginCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Login
void NetEase::Docker::IDock::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Login");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetLogoutCallback
void NetEase::Docker::IDock::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetLogoutCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Logout
void NetEase::Docker::IDock::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Logout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.UploadScore
void NetEase::Docker::IDock::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::UploadScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.IDock.WillProvideHighscore
bool NetEase::Docker::IDock::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::WillProvideHighscore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetHighscoreReceivedCallback
void NetEase::Docker::IDock::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetHighscoreReceivedCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.RequestHighscoreList
void NetEase::Docker::IDock::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::RequestHighscoreList");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.IDock.UpdateLoop
void NetEase::Docker::IDock::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::UpdateLoop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IDock::SetInitializeCallback
// Il2CppName: SetInitializeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(System::Action_1<NetEase::Docker::InitializeData>*)>(&IDock::SetInitializeCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "SetInitializeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::InitializeData>*>()});
  }
};
// Writing MetadataGetter for method: IDock::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)()>(&IDock::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDock::SetLoginCallback
// Il2CppName: SetLoginCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(System::Action_1<NetEase::Docker::LoginData>*)>(&IDock::SetLoginCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "SetLoginCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LoginData>*>()});
  }
};
// Writing MetadataGetter for method: IDock::Login
// Il2CppName: Login
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)()>(&IDock::Login)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "Login", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDock::SetLogoutCallback
// Il2CppName: SetLogoutCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(System::Action_1<NetEase::Docker::LogoutData>*)>(&IDock::SetLogoutCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "SetLogoutCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LogoutData>*>()});
  }
};
// Writing MetadataGetter for method: IDock::Logout
// Il2CppName: Logout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)()>(&IDock::Logout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "Logout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDock::UploadScore
// Il2CppName: UploadScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(NetEase::Docker::UploadScoreData)>(&IDock::UploadScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "UploadScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::UploadScoreData>()});
  }
};
// Writing MetadataGetter for method: IDock::WillProvideHighscore
// Il2CppName: WillProvideHighscore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IDock::*)()>(&IDock::WillProvideHighscore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "WillProvideHighscore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDock::SetHighscoreReceivedCallback
// Il2CppName: SetHighscoreReceivedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(System::Action_1<NetEase::Docker::ReceivedHighscoreData>*)>(&IDock::SetHighscoreReceivedCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::ReceivedHighscoreData>*>()});
  }
};
// Writing MetadataGetter for method: IDock::RequestHighscoreList
// Il2CppName: RequestHighscoreList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)(NetEase::Docker::RequestHighscoreData)>(&IDock::RequestHighscoreList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "RequestHighscoreList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::RequestHighscoreData>()});
  }
};
// Writing MetadataGetter for method: IDock::UpdateLoop
// Il2CppName: UpdateLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IDock::*)()>(&IDock::UpdateLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDock*), "UpdateLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.VivaDocker
#include "NetEase/Docker/VivaDocker.hpp"
// Including type: NetEase.Docker.IDock
#include "NetEase/Docker/IDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private NetEase.Docker.IDock _activeDock
NetEase::Docker::IDock* NetEase::Docker::VivaDocker::_get__activeDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::_get__activeDock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NetEase::Docker::IDock*>("NetEase.Docker", "VivaDocker", "_activeDock"));
}
// Autogenerated static field setter
// Set static field: static private NetEase.Docker.IDock _activeDock
void NetEase::Docker::VivaDocker::_set__activeDock(NetEase::Docker::IDock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::_set__activeDock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NetEase.Docker", "VivaDocker", "_activeDock", value));
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetInitializeCallback
void NetEase::Docker::VivaDocker::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetInitializeCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Initialize
void NetEase::Docker::VivaDocker::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetLoginCallback
void NetEase::Docker::VivaDocker::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetLoginCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Login
void NetEase::Docker::VivaDocker::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Login");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetLogoutCallback
void NetEase::Docker::VivaDocker::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetLogoutCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Logout
void NetEase::Docker::VivaDocker::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Logout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.UploadScore
void NetEase::Docker::VivaDocker::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::UploadScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.VivaDocker.WillProvideHighscore
bool NetEase::Docker::VivaDocker::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::WillProvideHighscore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetHighscoreReceivedCallback
void NetEase::Docker::VivaDocker::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetHighscoreReceivedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.RequestHighscoreList
void NetEase::Docker::VivaDocker::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::RequestHighscoreList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.VivaDocker.UpdateLoop
void NetEase::Docker::VivaDocker::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::UpdateLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker..cctor
void NetEase::Docker::VivaDocker::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VivaDocker::SetInitializeCallback
// Il2CppName: SetInitializeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<NetEase::Docker::InitializeData>*)>(&VivaDocker::SetInitializeCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "SetInitializeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::InitializeData>*>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivaDocker::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivaDocker::SetLoginCallback
// Il2CppName: SetLoginCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<NetEase::Docker::LoginData>*)>(&VivaDocker::SetLoginCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "SetLoginCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LoginData>*>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::Login
// Il2CppName: Login
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivaDocker::Login)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "Login", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivaDocker::SetLogoutCallback
// Il2CppName: SetLogoutCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<NetEase::Docker::LogoutData>*)>(&VivaDocker::SetLogoutCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "SetLogoutCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::LogoutData>*>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::Logout
// Il2CppName: Logout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivaDocker::Logout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "Logout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivaDocker::UploadScore
// Il2CppName: UploadScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(NetEase::Docker::UploadScoreData)>(&VivaDocker::UploadScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "UploadScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::UploadScoreData>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::WillProvideHighscore
// Il2CppName: WillProvideHighscore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&VivaDocker::WillProvideHighscore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "WillProvideHighscore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivaDocker::SetHighscoreReceivedCallback
// Il2CppName: SetHighscoreReceivedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<NetEase::Docker::ReceivedHighscoreData>*)>(&VivaDocker::SetHighscoreReceivedCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<NetEase::Docker::ReceivedHighscoreData>*>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::RequestHighscoreList
// Il2CppName: RequestHighscoreList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(NetEase::Docker::RequestHighscoreData)>(&VivaDocker::RequestHighscoreList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "RequestHighscoreList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NetEase::Docker::RequestHighscoreData>()});
  }
};
// Writing MetadataGetter for method: VivaDocker::UpdateLoop
// Il2CppName: UpdateLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivaDocker::UpdateLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), "UpdateLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivaDocker::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivaDocker::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivaDocker*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.ButtonState
#include "VRUIControls/ButtonState.hpp"
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRUIControls.ButtonState.get_eventData
VRUIControls::MouseButtonEventData* VRUIControls::ButtonState::get_eventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_eventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::MouseButtonEventData*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_eventData
void VRUIControls::ButtonState::set_eventData(VRUIControls::MouseButtonEventData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_eventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.ButtonState.get_button
UnityEngine::EventSystems::PointerEventData::InputButton VRUIControls::ButtonState::get_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::PointerEventData::InputButton, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_button
void VRUIControls::ButtonState::set_button(UnityEngine::EventSystems::PointerEventData::InputButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.ButtonState.get_pressedValue
float VRUIControls::ButtonState::get_pressedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_pressedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_pressedValue
void VRUIControls::ButtonState::set_pressedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_pressedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pressedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ButtonState::get_eventData
// Il2CppName: get_eventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<VRUIControls::MouseButtonEventData* (ButtonState::*)()>(&ButtonState::get_eventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "get_eventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ButtonState::set_eventData
// Il2CppName: set_eventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ButtonState::*)(VRUIControls::MouseButtonEventData*)>(&ButtonState::set_eventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "set_eventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<VRUIControls::MouseButtonEventData*>()});
  }
};
// Writing MetadataGetter for method: ButtonState::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::PointerEventData::InputButton (ButtonState::*)()>(&ButtonState::get_button)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ButtonState::set_button
// Il2CppName: set_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ButtonState::*)(UnityEngine::EventSystems::PointerEventData::InputButton)>(&ButtonState::set_button)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "set_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData::InputButton>()});
  }
};
// Writing MetadataGetter for method: ButtonState::get_pressedValue
// Il2CppName: get_pressedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ButtonState::*)()>(&ButtonState::get_pressedValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "get_pressedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ButtonState::set_pressedValue
// Il2CppName: set_pressedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ButtonState::*)(float)>(&ButtonState::set_pressedValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), "set_pressedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ButtonState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ButtonState::*)()>(&ButtonState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ButtonState::*)()>(&ButtonState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ButtonState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRUIControls.MouseButtonEventData.PressedThisFrame
bool VRUIControls::MouseButtonEventData::PressedThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::PressedThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PressedThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseButtonEventData.ReleasedThisFrame
bool VRUIControls::MouseButtonEventData::ReleasedThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::ReleasedThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleasedThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MouseButtonEventData::PressedThisFrame
// Il2CppName: PressedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MouseButtonEventData::*)()>(&MouseButtonEventData::PressedThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseButtonEventData*), "PressedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseButtonEventData::ReleasedThisFrame
// Il2CppName: ReleasedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MouseButtonEventData::*)()>(&MouseButtonEventData::ReleasedThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseButtonEventData*), "ReleasedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseButtonEventData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseButtonEventData::*)()>(&MouseButtonEventData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseButtonEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseButtonEventData::*)()>(&MouseButtonEventData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseButtonEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.MouseState
#include "VRUIControls/MouseState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRUIControls.ButtonState
#include "VRUIControls/ButtonState.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/InputButton
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/FramePressState
#include "UnityEngine/EventSystems/PointerEventData_FramePressState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRUIControls.MouseState.AnyPressesThisFrame
bool VRUIControls::MouseState::AnyPressesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::AnyPressesThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnyPressesThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseState.AnyReleasesThisFrame
bool VRUIControls::MouseState::AnyReleasesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::AnyReleasesThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnyReleasesThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseState.GetButtonState
VRUIControls::ButtonState* VRUIControls::MouseState::GetButtonState(UnityEngine::EventSystems::PointerEventData::InputButton button) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::GetButtonState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetButtonState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::ButtonState*, false>(this, ___internal__method, button);
}
// Autogenerated method: VRUIControls.MouseState.SetButtonState
void VRUIControls::MouseState::SetButtonState(UnityEngine::EventSystems::PointerEventData::InputButton button, UnityEngine::EventSystems::PointerEventData::FramePressState stateForMouseButton, UnityEngine::EventSystems::PointerEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::SetButtonState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetButtonState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(stateForMouseButton), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, button, stateForMouseButton, data);
}
// Writing MetadataGetter for method: MouseState::AnyPressesThisFrame
// Il2CppName: AnyPressesThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MouseState::*)()>(&MouseState::AnyPressesThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), "AnyPressesThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseState::AnyReleasesThisFrame
// Il2CppName: AnyReleasesThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MouseState::*)()>(&MouseState::AnyReleasesThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), "AnyReleasesThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseState::GetButtonState
// Il2CppName: GetButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<VRUIControls::ButtonState* (MouseState::*)(UnityEngine::EventSystems::PointerEventData::InputButton)>(&MouseState::GetButtonState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), "GetButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData::InputButton>()});
  }
};
// Writing MetadataGetter for method: MouseState::SetButtonState
// Il2CppName: SetButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseState::*)(UnityEngine::EventSystems::PointerEventData::InputButton, UnityEngine::EventSystems::PointerEventData::FramePressState, UnityEngine::EventSystems::PointerEventData*)>(&MouseState::SetButtonState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), "SetButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData::InputButton>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData::FramePressState>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: MouseState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseState::*)()>(&MouseState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseState::*)()>(&MouseState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.PhysicsRaycasterWithCache
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRUIControls.PhysicsRaycasterWithCache.Raycast
bool VRUIControls::PhysicsRaycasterWithCache::Raycast(UnityEngine::Ray ray, UnityEngine::RaycastHit& hitInfo, float maxDistance, int layerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::Raycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit&>(), ::il2cpp_utils::ExtractType(maxDistance), ::il2cpp_utils::ExtractType(layerMask)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ray, hitInfo, maxDistance, layerMask);
}
// Writing MetadataGetter for method: PhysicsRaycasterWithCache::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PhysicsRaycasterWithCache::*)(UnityEngine::Ray, UnityEngine::RaycastHit&, float, int)>(&PhysicsRaycasterWithCache::Raycast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsRaycasterWithCache*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PhysicsRaycasterWithCache::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsRaycasterWithCache::*)()>(&PhysicsRaycasterWithCache::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsRaycasterWithCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsRaycasterWithCache::*)()>(&PhysicsRaycasterWithCache::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsRaycasterWithCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.PhysicsRaycasterWithCache/CachedRaycast
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PhysicsRaycasterWithCache::CachedRaycast::CachedRaycast
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsRaycasterWithCache::CachedRaycast::*)(bool, UnityEngine::Ray, UnityEngine::RaycastHit, float, int)>(&PhysicsRaycasterWithCache::CachedRaycast::CachedRaycast<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsRaycasterWithCache::CachedRaycast), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsRaycasterWithCache::CachedRaycast::*)(bool, UnityEngine::Ray, UnityEngine::RaycastHit, float, int)>(&PhysicsRaycasterWithCache::CachedRaycast::CachedRaycast<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsRaycasterWithCache::CachedRaycast), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRGraphicRaycaster
#include "VRUIControls/VRGraphicRaycaster.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: VRUIControls.VRGraphicRaycaster/<>c
#include "VRUIControls/VRGraphicRaycaster_--c.hpp"
// Including type: VRUIControls.PhysicsRaycasterWithCache
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPhysics3DRaycastDistance
float VRUIControls::VRGraphicRaycaster::_get_kPhysics3DRaycastDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get_kPhysics3DRaycastDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRGraphicRaycaster", "kPhysics3DRaycastDistance"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPhysics3DRaycastDistance
void VRUIControls::VRGraphicRaycaster::_set_kPhysics3DRaycastDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set_kPhysics3DRaycastDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster", "kPhysics3DRaycastDistance", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE03F0C
// Autogenerated static field getter
// Get static field: static private readonly System.Single[] _ray2DCircleIntersectionDistances
::Array<float>* VRUIControls::VRGraphicRaycaster::_get__ray2DCircleIntersectionDistances() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__ray2DCircleIntersectionDistances");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<float>*>("VRUIControls", "VRGraphicRaycaster", "_ray2DCircleIntersectionDistances"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Single[] _ray2DCircleIntersectionDistances
void VRUIControls::VRGraphicRaycaster::_set__ray2DCircleIntersectionDistances(::Array<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__ray2DCircleIntersectionDistances");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster", "_ray2DCircleIntersectionDistances", value));
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.RaycastCanvas
void VRUIControls::VRGraphicRaycaster::RaycastCanvas(UnityEngine::Canvas* canvas, UnityEngine::Ray ray, float hitDistance, float curvedUIRadius, System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::RaycastCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster", "RaycastCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvas), ::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(hitDistance), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, canvas, ray, hitDistance, curvedUIRadius, results);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.get_eventCamera
UnityEngine::Camera* VRUIControls::VRGraphicRaycaster::get_eventCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::get_eventCamera");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.OnEnable
void VRUIControls::VRGraphicRaycaster::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.Raycast
void VRUIControls::VRGraphicRaycaster::Raycast(UnityEngine::EventSystems::PointerEventData* eventData, System::Collections::Generic::List_1<UnityEngine::EventSystems::RaycastResult>* resultAppendList) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::Raycast");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(resultAppendList)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData, resultAppendList);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster..cctor
void VRUIControls::VRGraphicRaycaster::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VRGraphicRaycaster::RaycastCanvas
// Il2CppName: RaycastCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Canvas*, UnityEngine::Ray, float, float, System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>*)>(&VRGraphicRaycaster::RaycastCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), "RaycastCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>*>()});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::get_eventCamera
// Il2CppName: get_eventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (VRGraphicRaycaster::*)()>(&VRGraphicRaycaster::get_eventCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), "get_eventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::*)()>(&VRGraphicRaycaster::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::*)(UnityEngine::EventSystems::PointerEventData*, System::Collections::Generic::List_1<UnityEngine::EventSystems::RaycastResult>*)>(&VRGraphicRaycaster::Raycast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::EventSystems::RaycastResult>*>()});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::*)()>(&VRGraphicRaycaster::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::*)()>(&VRGraphicRaycaster::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VRGraphicRaycaster::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/VRGraphicRaycastResult
#include "VRUIControls/VRGraphicRaycaster.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRGraphicRaycaster::VRGraphicRaycastResult::VRGraphicRaycastResult
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::VRGraphicRaycastResult::*)(UnityEngine::UI::Graphic*, float, UnityEngine::Vector3, UnityEngine::Vector2)>(&VRGraphicRaycaster::VRGraphicRaycastResult::VRGraphicRaycastResult<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::VRGraphicRaycastResult), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Graphic*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::VRGraphicRaycastResult::*)(UnityEngine::UI::Graphic*, float, UnityEngine::Vector3, UnityEngine::Vector2)>(&VRGraphicRaycaster::VRGraphicRaycastResult::VRGraphicRaycastResult<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::VRGraphicRaycastResult), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Graphic*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/<>c
#include "VRUIControls/VRGraphicRaycaster_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly VRUIControls.VRGraphicRaycaster/<>c <>9
VRUIControls::VRGraphicRaycaster::$$c* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<VRUIControls::VRGraphicRaycaster::$$c*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly VRUIControls.VRGraphicRaycaster/<>c <>9
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9(VRUIControls::VRGraphicRaycaster::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRGraphicRaycastResult> <>9__12_0
System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRGraphicRaycastResult> <>9__12_0
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0(System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0", value)));
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/<>c..cctor
void VRUIControls::VRGraphicRaycaster::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/<>c.<RaycastCanvas>b__12_0
int VRUIControls::VRGraphicRaycaster::$$c::$RaycastCanvas$b__12_0(VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g1, VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g2) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::<RaycastCanvas>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RaycastCanvas>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g1), ::il2cpp_utils::ExtractType(g2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, g1, g2);
}
// Writing MetadataGetter for method: VRGraphicRaycaster::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VRGraphicRaycaster::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::$$c::$RaycastCanvas$b__12_0
// Il2CppName: <RaycastCanvas>b__12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VRGraphicRaycaster::$$c::*)(VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult, VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult)>(&VRGraphicRaycaster::$$c::$RaycastCanvas$b__12_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::$$c*), "<RaycastCanvas>b__12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>(), ::il2cpp_utils::ExtractIndependentType<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>()});
  }
};
// Writing MetadataGetter for method: VRGraphicRaycaster::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::$$c::*)()>(&VRGraphicRaycaster::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRGraphicRaycaster::$$c::*)()>(&VRGraphicRaycaster::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRGraphicRaycaster::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRInputModule
#include "VRUIControls/VRInputModule.hpp"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: VRUIControls.MouseState
#include "VRUIControls/MouseState.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMouseLeftId
int VRUIControls::VRInputModule::_get_kMouseLeftId() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_kMouseLeftId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRInputModule", "kMouseLeftId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMouseLeftId
void VRUIControls::VRInputModule::_set_kMouseLeftId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_kMouseLeftId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMouseLeftId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinPressValue
float VRUIControls::VRInputModule::_get_kMinPressValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_kMinPressValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRInputModule", "kMinPressValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinPressValue
void VRUIControls::VRInputModule::_set_kMinPressValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_kMinPressValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMinPressValue", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE03F6C
// Autogenerated static field getter
// Get static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
System::Comparison_1<UnityEngine::EventSystems::RaycastResult>* VRUIControls::VRInputModule::_get__raycastComparer() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__raycastComparer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Comparison_1<UnityEngine::EventSystems::RaycastResult>*>("VRUIControls", "VRInputModule", "_raycastComparer"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
void VRUIControls::VRInputModule::_set__raycastComparer(System::Comparison_1<UnityEngine::EventSystems::RaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__raycastComparer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "_raycastComparer", value));
}
// Autogenerated method: VRUIControls.VRInputModule.get_useMouseForPressInput
bool VRUIControls::VRInputModule::get_useMouseForPressInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::get_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.set_useMouseForPressInput
void VRUIControls::VRInputModule::set_useMouseForPressInput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::set_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.add_onProcessMousePressEvent
void VRUIControls::VRInputModule::add_onProcessMousePressEvent(System::Action_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::add_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.remove_onProcessMousePressEvent
void VRUIControls::VRInputModule::remove_onProcessMousePressEvent(System::Action_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::remove_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.GetPointerData
bool VRUIControls::VRInputModule::GetPointerData(int id, UnityEngine::EventSystems::PointerEventData*& data, bool create) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetPointerData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointerData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*&>(), ::il2cpp_utils::ExtractType(create)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, id, data, create);
}
// Autogenerated method: VRUIControls.VRInputModule.GetMousePointerEventData
VRUIControls::MouseState* VRUIControls::VRInputModule::GetMousePointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetMousePointerEventData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMousePointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::MouseState*, false>(this, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.GetLastPointerEventData
UnityEngine::EventSystems::PointerEventData* VRUIControls::VRInputModule::GetLastPointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetLastPointerEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::PointerEventData*, false>(this, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.ShouldStartDrag
bool VRUIControls::VRInputModule::ShouldStartDrag(UnityEngine::Vector2 pressPos, UnityEngine::Vector2 currentPos, float threshold, bool useDragThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ShouldStartDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldStartDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pressPos), ::il2cpp_utils::ExtractType(currentPos), ::il2cpp_utils::ExtractType(threshold), ::il2cpp_utils::ExtractType(useDragThreshold)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pressPos, currentPos, threshold, useDragThreshold);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMove
void VRUIControls::VRInputModule::ProcessMove(UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessMove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessDrag
void VRUIControls::VRInputModule::ProcessDrag(UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ClearSelection
void VRUIControls::VRInputModule::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.DeselectIfSelectionChanged
void VRUIControls::VRInputModule::DeselectIfSelectionChanged(UnityEngine::GameObject* currentOverGo, UnityEngine::EventSystems::BaseEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::DeselectIfSelectionChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeselectIfSelectionChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentOverGo), ::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentOverGo, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.SendUpdateEventToSelectedObject
bool VRUIControls::VRInputModule::SendUpdateEventToSelectedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::SendUpdateEventToSelectedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMousePress
void VRUIControls::VRInputModule::ProcessMousePress(VRUIControls::MouseButtonEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessMousePress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMousePress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: VRUIControls.VRInputModule.RaycastComparer
int VRUIControls::VRInputModule::RaycastComparer(UnityEngine::EventSystems::RaycastResult lhs, UnityEngine::EventSystems::RaycastResult rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::RaycastComparer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", "RaycastComparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: VRUIControls.VRInputModule.OnDisable
void VRUIControls::VRInputModule::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.IsPointerOverGameObject
bool VRUIControls::VRInputModule::IsPointerOverGameObject(int pointerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::IsPointerOverGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerOverGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pointerId);
}
// Autogenerated method: VRUIControls.VRInputModule.ToString
::Il2CppString* VRUIControls::VRInputModule::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.Process
void VRUIControls::VRInputModule::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::Process");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.HandlePointerExitAndEnter
void VRUIControls::VRInputModule::HandlePointerExitAndEnter(UnityEngine::EventSystems::PointerEventData* currentPointerData, UnityEngine::GameObject* newEnterTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::HandlePointerExitAndEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerExitAndEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPointerData), ::il2cpp_utils::ExtractType(newEnterTarget)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPointerData, newEnterTarget);
}
// Autogenerated method: VRUIControls.VRInputModule..cctor
void VRUIControls::VRInputModule::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VRInputModule::get_useMouseForPressInput
// Il2CppName: get_useMouseForPressInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRInputModule::*)()>(&VRInputModule::get_useMouseForPressInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "get_useMouseForPressInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::set_useMouseForPressInput
// Il2CppName: set_useMouseForPressInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(bool)>(&VRInputModule::set_useMouseForPressInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "set_useMouseForPressInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::add_onProcessMousePressEvent
// Il2CppName: add_onProcessMousePressEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(System::Action_1<UnityEngine::GameObject*>*)>(&VRInputModule::add_onProcessMousePressEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "add_onProcessMousePressEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::remove_onProcessMousePressEvent
// Il2CppName: remove_onProcessMousePressEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(System::Action_1<UnityEngine::GameObject*>*)>(&VRInputModule::remove_onProcessMousePressEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "remove_onProcessMousePressEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::GetPointerData
// Il2CppName: GetPointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRInputModule::*)(int, UnityEngine::EventSystems::PointerEventData*&, bool)>(&VRInputModule::GetPointerData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "GetPointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::GetMousePointerEventData
// Il2CppName: GetMousePointerEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<VRUIControls::MouseState* (VRInputModule::*)(int)>(&VRInputModule::GetMousePointerEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "GetMousePointerEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::GetLastPointerEventData
// Il2CppName: GetLastPointerEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::PointerEventData* (VRInputModule::*)(int)>(&VRInputModule::GetLastPointerEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "GetLastPointerEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::ShouldStartDrag
// Il2CppName: ShouldStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRInputModule::*)(UnityEngine::Vector2, UnityEngine::Vector2, float, bool)>(&VRInputModule::ShouldStartDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ShouldStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::ProcessMove
// Il2CppName: ProcessMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(UnityEngine::EventSystems::PointerEventData*)>(&VRInputModule::ProcessMove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ProcessMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::ProcessDrag
// Il2CppName: ProcessDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(UnityEngine::EventSystems::PointerEventData*)>(&VRInputModule::ProcessDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ProcessDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)()>(&VRInputModule::ClearSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::DeselectIfSelectionChanged
// Il2CppName: DeselectIfSelectionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(UnityEngine::GameObject*, UnityEngine::EventSystems::BaseEventData*)>(&VRInputModule::DeselectIfSelectionChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "DeselectIfSelectionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::SendUpdateEventToSelectedObject
// Il2CppName: SendUpdateEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRInputModule::*)()>(&VRInputModule::SendUpdateEventToSelectedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::ProcessMousePress
// Il2CppName: ProcessMousePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(VRUIControls::MouseButtonEventData*)>(&VRInputModule::ProcessMousePress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ProcessMousePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<VRUIControls::MouseButtonEventData*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::RaycastComparer
// Il2CppName: RaycastComparer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::EventSystems::RaycastResult, UnityEngine::EventSystems::RaycastResult)>(&VRInputModule::RaycastComparer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "RaycastComparer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::RaycastResult>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::RaycastResult>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)()>(&VRInputModule::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::IsPointerOverGameObject
// Il2CppName: IsPointerOverGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRInputModule::*)(int)>(&VRInputModule::IsPointerOverGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "IsPointerOverGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VRInputModule::*)()>(&VRInputModule::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)()>(&VRInputModule::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::HandlePointerExitAndEnter
// Il2CppName: HandlePointerExitAndEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)(UnityEngine::EventSystems::PointerEventData*, UnityEngine::GameObject*)>(&VRInputModule::HandlePointerExitAndEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), "HandlePointerExitAndEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: VRInputModule::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)()>(&VRInputModule::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRInputModule::*)()>(&VRInputModule::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRInputModule::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VRInputModule::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRInputModule*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE03F8C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
int VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
void VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE03F9C
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* VRUIControls::VRLaserPointer::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("VRUIControls", "VRLaserPointer", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void VRUIControls::VRLaserPointer::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_materialPropertyBlock", value));
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalPosition
void VRUIControls::VRLaserPointer::SetLocalPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalScale
void VRUIControls::VRLaserPointer::SetLocalScale(UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetLocalScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetFadeDistance
void VRUIControls::VRLaserPointer::SetFadeDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetFadeDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFadeDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated method: VRUIControls.VRLaserPointer..cctor
void VRUIControls::VRLaserPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRLaserPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VRLaserPointer::SetLocalPosition
// Il2CppName: SetLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRLaserPointer::*)(UnityEngine::Vector3)>(&VRLaserPointer::SetLocalPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), "SetLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: VRLaserPointer::SetLocalScale
// Il2CppName: SetLocalScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRLaserPointer::*)(UnityEngine::Vector3)>(&VRLaserPointer::SetLocalScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), "SetLocalScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: VRLaserPointer::SetFadeDistance
// Il2CppName: SetFadeDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRLaserPointer::*)(float)>(&VRLaserPointer::SetFadeDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), "SetFadeDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VRLaserPointer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRLaserPointer::*)()>(&VRLaserPointer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRLaserPointer::*)()>(&VRLaserPointer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRLaserPointer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VRLaserPointer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRLaserPointer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kScrollMultiplier
float VRUIControls::VRPointer::_get_kScrollMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get_kScrollMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRPointer", "kScrollMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kScrollMultiplier
void VRUIControls::VRPointer::_set_kScrollMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set_kScrollMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "kScrollMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _lastControllerUsedWasRight
bool VRUIControls::VRPointer::_get__lastControllerUsedWasRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__lastControllerUsedWasRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_lastControllerUsedWasRight"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _lastControllerUsedWasRight
void VRUIControls::VRPointer::_set__lastControllerUsedWasRight(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__lastControllerUsedWasRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_lastControllerUsedWasRight", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _rightControllerWasReleased
bool VRUIControls::VRPointer::_get__rightControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__rightControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_rightControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _rightControllerWasReleased
void VRUIControls::VRPointer::_set__rightControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__rightControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_rightControllerWasReleased", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _leftControllerWasReleased
bool VRUIControls::VRPointer::_get__leftControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__leftControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_leftControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _leftControllerWasReleased
void VRUIControls::VRPointer::_set__leftControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__leftControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_leftControllerWasReleased", value));
}
// Autogenerated method: VRUIControls.VRPointer.get_vrController
GlobalNamespace::VRController* VRUIControls::VRPointer::get_vrController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_vrController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRController*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_cursorPosition
UnityEngine::Vector3 VRUIControls::VRPointer::get_cursorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_cursorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cursorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_eventSystem
UnityEngine::EventSystems::EventSystem* VRUIControls::VRPointer::get_eventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_eventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::EventSystem*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Awake
void VRUIControls::VRPointer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnEnable
void VRUIControls::VRPointer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnDisable
void VRUIControls::VRPointer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.LateUpdate
void VRUIControls::VRPointer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.CreateLaserPointerAndLaserHit
void VRUIControls::VRPointer::CreateLaserPointerAndLaserHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::CreateLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.RefreshLaserPointerAndLaserHit
void VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit(UnityEngine::EventSystems::PointerEventData* pointerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointerData);
}
// Autogenerated method: VRUIControls.VRPointer.OnApplicationFocus
void VRUIControls::VRPointer::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: VRUIControls.VRPointer.DestroyLaserAndHit
void VRUIControls::VRPointer::DestroyLaserAndHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::DestroyLaserAndHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLaserAndHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_state
::Il2CppString* VRUIControls::VRPointer::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Process
void VRUIControls::VRPointer::Process(UnityEngine::EventSystems::PointerEventData* pointerEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointerEventData);
}
// Autogenerated method: VRUIControls.VRPointer..cctor
void VRUIControls::VRPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VRPointer::get_vrController
// Il2CppName: get_vrController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRController* (VRPointer::*)()>(&VRPointer::get_vrController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "get_vrController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::get_cursorPosition
// Il2CppName: get_cursorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRPointer::*)()>(&VRPointer::get_cursorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "get_cursorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::get_eventSystem
// Il2CppName: get_eventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::EventSystem* (VRPointer::*)()>(&VRPointer::get_eventSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "get_eventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::CreateLaserPointerAndLaserHit
// Il2CppName: CreateLaserPointerAndLaserHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::CreateLaserPointerAndLaserHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "CreateLaserPointerAndLaserHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::RefreshLaserPointerAndLaserHit
// Il2CppName: RefreshLaserPointerAndLaserHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)(UnityEngine::EventSystems::PointerEventData*)>(&VRPointer::RefreshLaserPointerAndLaserHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "RefreshLaserPointerAndLaserHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: VRPointer::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)(bool)>(&VRPointer::OnApplicationFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRPointer::DestroyLaserAndHit
// Il2CppName: DestroyLaserAndHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::DestroyLaserAndHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "DestroyLaserAndHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VRPointer::*)()>(&VRPointer::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)(UnityEngine::EventSystems::PointerEventData*)>(&VRPointer::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: VRPointer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRPointer::*)()>(&VRPointer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRPointer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VRPointer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPointer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IGuiRenderable.GuiRender
void Zenject::IGuiRenderable::GuiRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IGuiRenderable::GuiRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuiRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IGuiRenderable::GuiRender
// Il2CppName: GuiRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGuiRenderable::*)()>(&IGuiRenderable::GuiRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGuiRenderable*), "GuiRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IInitializable.Initialize
void Zenject::IInitializable::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInitializable::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IInitializable::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IInitializable::*)()>(&IInitializable::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInitializable*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectableInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectableInfo::*)(bool, ::Il2CppObject*, ::Il2CppString*, System::Type*, ::Il2CppObject*, Zenject::InjectSources)>(&InjectableInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectableInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectableInfo::*)(bool, ::Il2CppObject*, ::Il2CppString*, System::Type*, ::Il2CppObject*, Zenject::InjectSources)>(&InjectableInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectableInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Internal.PreserveAttribute
#include "Zenject/Internal/PreserveAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PreserveAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreserveAttribute::*)()>(&PreserveAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreserveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreserveAttribute::*)()>(&PreserveAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreserveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectAttributeBase
#include "Zenject/InjectAttributeBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectAttributeBase.get_Optional
bool Zenject::InjectAttributeBase::get_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Optional
void Zenject::InjectAttributeBase::set_Optional(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Id
::Il2CppObject* Zenject::InjectAttributeBase::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Id
void Zenject::InjectAttributeBase::set_Id(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Source
Zenject::InjectSources Zenject::InjectAttributeBase::get_Source() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectSources, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Source
void Zenject::InjectAttributeBase::set_Source(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: InjectAttributeBase::get_Optional
// Il2CppName: get_Optional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InjectAttributeBase::*)()>(&InjectAttributeBase::get_Optional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "get_Optional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::set_Optional
// Il2CppName: set_Optional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttributeBase::*)(bool)>(&InjectAttributeBase::set_Optional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "set_Optional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectAttributeBase::*)()>(&InjectAttributeBase::get_Id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::set_Id
// Il2CppName: set_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttributeBase::*)(::Il2CppObject*)>(&InjectAttributeBase::set_Id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "set_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::get_Source
// Il2CppName: get_Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectSources (InjectAttributeBase::*)()>(&InjectAttributeBase::get_Source)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "get_Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::set_Source
// Il2CppName: set_Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttributeBase::*)(Zenject::InjectSources)>(&InjectAttributeBase::set_Source)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), "set_Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>()});
  }
};
// Writing MetadataGetter for method: InjectAttributeBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttributeBase::*)()>(&InjectAttributeBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttributeBase::*)()>(&InjectAttributeBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttributeBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectAttribute
#include "Zenject/InjectAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttribute::*)()>(&InjectAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectAttribute::*)()>(&InjectAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectLocalAttribute
#include "Zenject/InjectLocalAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectLocalAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectLocalAttribute::*)()>(&InjectLocalAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectLocalAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectLocalAttribute::*)()>(&InjectLocalAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectLocalAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectOptionalAttribute
#include "Zenject/InjectOptionalAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectOptionalAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectOptionalAttribute::*)()>(&InjectOptionalAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectOptionalAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectOptionalAttribute::*)()>(&InjectOptionalAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectOptionalAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Any
Zenject::InjectSources Zenject::InjectSources::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Any"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Any
void Zenject::InjectSources::_set_Any(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Local
Zenject::InjectSources Zenject::InjectSources::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Local"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Local
void Zenject::InjectSources::_set_Local(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Local", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Parent
Zenject::InjectSources Zenject::InjectSources::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Parent
void Zenject::InjectSources::_set_Parent(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources AnyParent
Zenject::InjectSources Zenject::InjectSources::_get_AnyParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_AnyParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "AnyParent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources AnyParent
void Zenject::InjectSources::_set_AnyParent(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_AnyParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "AnyParent", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenInjectMethod.Invoke
void Zenject::ZenInjectMethod::Invoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, args);
}
// Autogenerated method: Zenject.ZenInjectMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenInjectMethod::BeginInvoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, obj, args, callback, object);
}
// Autogenerated method: Zenject.ZenInjectMethod.EndInvoke
void Zenject::ZenInjectMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ZenInjectMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenInjectMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenInjectMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenInjectMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenInjectMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenInjectMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenInjectMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ZenInjectMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenInjectMethod::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&ZenInjectMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenInjectMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ZenInjectMethod::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ZenInjectMethod::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*, System::AsyncCallback*, ::Il2CppObject*)>(&ZenInjectMethod::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenInjectMethod*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ZenInjectMethod::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenInjectMethod::*)(System::IAsyncResult*)>(&ZenInjectMethod::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenInjectMethod*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenFactoryMethod.Invoke
::Il2CppObject* Zenject::ZenFactoryMethod::Invoke(::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, args);
}
// Autogenerated method: Zenject.ZenFactoryMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenFactoryMethod::BeginInvoke(::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, args, callback, object);
}
// Autogenerated method: Zenject.ZenFactoryMethod.EndInvoke
::Il2CppObject* Zenject::ZenFactoryMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ZenFactoryMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenFactoryMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenFactoryMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenFactoryMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenFactoryMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenFactoryMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenFactoryMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ZenFactoryMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ZenFactoryMethod::*)(::Array<::Il2CppObject*>*)>(&ZenFactoryMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenFactoryMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ZenFactoryMethod::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ZenFactoryMethod::*)(::Array<::Il2CppObject*>*, System::AsyncCallback*, ::Il2CppObject*)>(&ZenFactoryMethod::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenFactoryMethod*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ZenFactoryMethod::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ZenFactoryMethod::*)(System::IAsyncResult*)>(&ZenFactoryMethod::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenFactoryMethod*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenMemberSetterMethod.Invoke
void Zenject::ZenMemberSetterMethod::Invoke(::Il2CppObject* obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenMemberSetterMethod::BeginInvoke(::Il2CppObject* obj, ::Il2CppObject* value, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, obj, value, callback, object);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.EndInvoke
void Zenject::ZenMemberSetterMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ZenMemberSetterMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenMemberSetterMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenMemberSetterMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenMemberSetterMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenMemberSetterMethod::*)(::Il2CppObject*, System::IntPtr)>(&ZenMemberSetterMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenMemberSetterMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ZenMemberSetterMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenMemberSetterMethod::*)(::Il2CppObject*, ::Il2CppObject*)>(&ZenMemberSetterMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenMemberSetterMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ZenMemberSetterMethod::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ZenMemberSetterMethod::*)(::Il2CppObject*, ::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&ZenMemberSetterMethod::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenMemberSetterMethod*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ZenMemberSetterMethod::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenMemberSetterMethod::*)(System::IAsyncResult*)>(&ZenMemberSetterMethod::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenMemberSetterMethod*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.InjectTypeInfo/InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.InjectTypeInfo/InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.InjectTypeInfo/InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDCB208
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2(System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDCB218
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3(System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3", value));
}
// Autogenerated method: Zenject.InjectTypeInfo.get_BaseTypeInfo
Zenject::InjectTypeInfo* Zenject::InjectTypeInfo::get_BaseTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::get_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.set_BaseTypeInfo
void Zenject::InjectTypeInfo::set_BaseTypeInfo(Zenject::InjectTypeInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::set_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectTypeInfo.get_AllInjectables
System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::get_AllInjectables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::get_AllInjectables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllInjectables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__0
Zenject::InjectableInfo* Zenject::InjectTypeInfo::$get_AllInjectables$b__0(Zenject::InjectTypeInfo::InjectMemberInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::<get_AllInjectables>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectableInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__1
System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::$get_AllInjectables$b__1(Zenject::InjectTypeInfo::InjectMethodInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::<get_AllInjectables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Writing MetadataGetter for method: InjectTypeInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::*)(System::Type*, Zenject::InjectTypeInfo::InjectConstructorInfo*, ::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>*, ::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>*)>(&InjectTypeInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo::InjectConstructorInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::*)(System::Type*, Zenject::InjectTypeInfo::InjectConstructorInfo*, ::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>*, ::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>*)>(&InjectTypeInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo::InjectConstructorInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>*>()});
  }
};
// Writing MetadataGetter for method: InjectTypeInfo::get_BaseTypeInfo
// Il2CppName: get_BaseTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectTypeInfo* (InjectTypeInfo::*)()>(&InjectTypeInfo::get_BaseTypeInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), "get_BaseTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectTypeInfo::set_BaseTypeInfo
// Il2CppName: set_BaseTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::*)(Zenject::InjectTypeInfo*)>(&InjectTypeInfo::set_BaseTypeInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), "set_BaseTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo*>()});
  }
};
// Writing MetadataGetter for method: InjectTypeInfo::get_AllInjectables
// Il2CppName: get_AllInjectables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* (InjectTypeInfo::*)()>(&InjectTypeInfo::get_AllInjectables)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), "get_AllInjectables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectTypeInfo::$get_AllInjectables$b__0
// Il2CppName: <get_AllInjectables>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectableInfo* (*)(Zenject::InjectTypeInfo::InjectMemberInfo*)>(&InjectTypeInfo::$get_AllInjectables$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), "<get_AllInjectables>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo::InjectMemberInfo*>()});
  }
};
// Writing MetadataGetter for method: InjectTypeInfo::$get_AllInjectables$b__1
// Il2CppName: <get_AllInjectables>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* (*)(Zenject::InjectTypeInfo::InjectMethodInfo*)>(&InjectTypeInfo::$get_AllInjectables$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo*), "<get_AllInjectables>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectTypeInfo::InjectMethodInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo/InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectTypeInfo::InjectMemberInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectMemberInfo::*)(Zenject::ZenMemberSetterMethod*, Zenject::InjectableInfo*)>(&InjectTypeInfo::InjectMemberInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectMemberInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenMemberSetterMethod*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectableInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectMemberInfo::*)(Zenject::ZenMemberSetterMethod*, Zenject::InjectableInfo*)>(&InjectTypeInfo::InjectMemberInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectMemberInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenMemberSetterMethod*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InjectableInfo*>()});
  }
};
