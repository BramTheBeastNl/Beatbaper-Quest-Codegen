// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.WSA.WorldAnchor/UnityEngine.XR.WSA.OnTrackingChangedDelegate
#include "UnityEngine/XR/WSA/WorldAnchor_OnTrackingChangedDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/UnityEngine.XR.WSA.OnTrackingChangedDelegate.Invoke
void UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::Invoke(UnityEngine::XR::WSA::WorldAnchor* worldAnchor, bool located) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldAnchor), ::il2cpp_utils::ExtractType(located)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, worldAnchor, located);
}
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/UnityEngine.XR.WSA.OnTrackingChangedDelegate.BeginInvoke
System::IAsyncResult* UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::BeginInvoke(UnityEngine::XR::WSA::WorldAnchor* worldAnchor, bool located, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldAnchor), ::il2cpp_utils::ExtractType(located), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, worldAnchor, located, callback, object);
}
// Autogenerated method: UnityEngine.XR.WSA.WorldAnchor/UnityEngine.XR.WSA.OnTrackingChangedDelegate.EndInvoke
void UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::WSA::WorldAnchor::OnTrackingChangedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputTracking
#include "UnityEngine/XR/InputTracking.hpp"
// Including type: UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType
#include "UnityEngine/XR/InputTracking_TrackingStateEventType.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDD64BC
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingAcquired
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_trackingAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_trackingAcquired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "trackingAcquired"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingAcquired
void UnityEngine::XR::InputTracking::_set_trackingAcquired(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_trackingAcquired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "trackingAcquired", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDD64F8
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingLost
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_trackingLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_trackingLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "trackingLost"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> trackingLost
void UnityEngine::XR::InputTracking::_set_trackingLost(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_trackingLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "trackingLost", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDD6534
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeAdded
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_nodeAdded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_nodeAdded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "nodeAdded"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeAdded
void UnityEngine::XR::InputTracking::_set_nodeAdded(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_nodeAdded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "nodeAdded", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDD6570
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeRemoved
System::Action_1<UnityEngine::XR::XRNodeState>* UnityEngine::XR::InputTracking::_get_nodeRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_get_nodeRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::XRNodeState>*>("UnityEngine.XR", "InputTracking", "nodeRemoved"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.XRNodeState> nodeRemoved
void UnityEngine::XR::InputTracking::_set_nodeRemoved(System::Action_1<UnityEngine::XR::XRNodeState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::_set_nodeRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking", "nodeRemoved", value));
}
// Autogenerated method: UnityEngine.XR.InputTracking..cctor
void UnityEngine::XR::InputTracking::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputTracking.InvokeTrackingEvent
void UnityEngine::XR::InputTracking::InvokeTrackingEvent(UnityEngine::XR::InputTracking::TrackingStateEventType eventType, UnityEngine::XR::XRNode nodeType, int64_t uniqueID, bool tracked) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::InvokeTrackingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "InvokeTrackingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(uniqueID), ::il2cpp_utils::ExtractType(tracked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType, nodeType, uniqueID, tracked);
}
// Autogenerated method: UnityEngine.XR.InputTracking.Recenter
void UnityEngine::XR::InputTracking::Recenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::Recenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "Recenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputTracking.GetNodeStates
void UnityEngine::XR::InputTracking::GetNodeStates(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::GetNodeStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "GetNodeStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeStates)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeStates);
}
// Autogenerated method: UnityEngine.XR.InputTracking.GetNodeStates_Internal
void UnityEngine::XR::InputTracking::GetNodeStates_Internal(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::GetNodeStates_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputTracking", "GetNodeStates_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeStates)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeStates);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType
#include "UnityEngine/XR/InputTracking_TrackingStateEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType NodeAdded
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeAdded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeAdded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeAdded"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType NodeAdded
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeAdded(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeAdded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeAdded", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType NodeRemoved
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_NodeRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeRemoved"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType NodeRemoved
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeRemoved(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_NodeRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "NodeRemoved", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType TrackingAcquired
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingAcquired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingAcquired"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType TrackingAcquired
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingAcquired(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingAcquired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingAcquired", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType TrackingLost
UnityEngine::XR::InputTracking::TrackingStateEventType UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_TrackingLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputTracking::TrackingStateEventType>("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingLost"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputTracking/UnityEngine.XR.TrackingStateEventType TrackingLost
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingLost(UnityEngine::XR::InputTracking::TrackingStateEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_TrackingLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputTracking/TrackingStateEventType", "TrackingLost", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int UnityEngine::XR::InputTracking::TrackingStateEventType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void UnityEngine::XR::InputTracking::TrackingStateEventType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputTracking::TrackingStateEventType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode LeftEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_LeftEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_LeftEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "LeftEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode LeftEye
void UnityEngine::XR::XRNode::_set_LeftEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_LeftEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "LeftEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode RightEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_RightEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_RightEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "RightEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode RightEye
void UnityEngine::XR::XRNode::_set_RightEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_RightEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "RightEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode CenterEye
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_CenterEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_CenterEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "CenterEye"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode CenterEye
void UnityEngine::XR::XRNode::_set_CenterEye(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_CenterEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "CenterEye", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode Head
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "Head"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode Head
void UnityEngine::XR::XRNode::_set_Head(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode LeftHand
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode LeftHand
void UnityEngine::XR::XRNode::_set_LeftHand(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode RightHand
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode RightHand
void UnityEngine::XR::XRNode::_set_RightHand(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode GameController
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_GameController() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_GameController");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "GameController"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode GameController
void UnityEngine::XR::XRNode::_set_GameController(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_GameController");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "GameController", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode TrackingReference
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode TrackingReference
void UnityEngine::XR::XRNode::_set_TrackingReference(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.XRNode HardwareTracker
UnityEngine::XR::XRNode UnityEngine::XR::XRNode::_get_HardwareTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_HardwareTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::XRNode>("UnityEngine.XR", "XRNode", "HardwareTracker"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.XRNode HardwareTracker
void UnityEngine::XR::XRNode::_set_HardwareTracker(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_HardwareTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRNode", "HardwareTracker", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int UnityEngine::XR::XRNode::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void UnityEngine::XR::XRNode::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNode::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.AvailableTrackingData
#include "UnityEngine/XR/AvailableTrackingData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData None
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData None
void UnityEngine::XR::AvailableTrackingData::_set_None(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData PositionAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_PositionAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_PositionAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "PositionAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData PositionAvailable
void UnityEngine::XR::AvailableTrackingData::_set_PositionAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_PositionAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "PositionAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData RotationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_RotationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_RotationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "RotationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData RotationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_RotationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_RotationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "RotationAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData VelocityAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_VelocityAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_VelocityAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "VelocityAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData VelocityAvailable
void UnityEngine::XR::AvailableTrackingData::_set_VelocityAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_VelocityAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "VelocityAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AngularVelocityAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AngularVelocityAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AngularVelocityAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AngularVelocityAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AngularVelocityAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AngularVelocityAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AngularVelocityAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AngularVelocityAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AccelerationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AccelerationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AccelerationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AccelerationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AccelerationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AccelerationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AccelerationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AccelerationAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.AvailableTrackingData AngularAccelerationAvailable
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::AvailableTrackingData::_get_AngularAccelerationAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_AngularAccelerationAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::AvailableTrackingData>("UnityEngine.XR", "AvailableTrackingData", "AngularAccelerationAvailable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.AvailableTrackingData AngularAccelerationAvailable
void UnityEngine::XR::AvailableTrackingData::_set_AngularAccelerationAvailable(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_AngularAccelerationAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "AvailableTrackingData", "AngularAccelerationAvailable", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int UnityEngine::XR::AvailableTrackingData::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void UnityEngine::XR::AvailableTrackingData::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::AvailableTrackingData::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.XRNode m_Type
UnityEngine::XR::XRNode UnityEngine::XR::XRNodeState::_get_m_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Type");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Type"))->offset;
  return *reinterpret_cast<UnityEngine::XR::XRNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.XR.XRNode m_Type
void UnityEngine::XR::XRNodeState::_set_m_Type(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Type");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Type"))->offset;
  *reinterpret_cast<UnityEngine::XR::XRNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.AvailableTrackingData m_AvailableFields
UnityEngine::XR::AvailableTrackingData UnityEngine::XR::XRNodeState::_get_m_AvailableFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_AvailableFields");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AvailableFields"))->offset;
  return *reinterpret_cast<UnityEngine::XR::AvailableTrackingData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.XR.AvailableTrackingData m_AvailableFields
void UnityEngine::XR::XRNodeState::_set_m_AvailableFields(UnityEngine::XR::AvailableTrackingData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_AvailableFields");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AvailableFields"))->offset;
  *reinterpret_cast<UnityEngine::XR::AvailableTrackingData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Position
UnityEngine::Vector3 UnityEngine::XR::XRNodeState::_get_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Vector3 m_Position
void UnityEngine::XR::XRNodeState::_set_m_Position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_Rotation
UnityEngine::Quaternion UnityEngine::XR::XRNodeState::_get_m_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rotation"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Quaternion m_Rotation
void UnityEngine::XR::XRNodeState::_set_m_Rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rotation"))->offset;
  *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Velocity
UnityEngine::Vector3 UnityEngine::XR::XRNodeState::_get_m_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Velocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Vector3 m_Velocity
void UnityEngine::XR::XRNodeState::_set_m_Velocity(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Velocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_AngularVelocity
UnityEngine::Vector3 UnityEngine::XR::XRNodeState::_get_m_AngularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_AngularVelocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularVelocity"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Vector3 m_AngularVelocity
void UnityEngine::XR::XRNodeState::_set_m_AngularVelocity(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_AngularVelocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularVelocity"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Acceleration
UnityEngine::Vector3 UnityEngine::XR::XRNodeState::_get_m_Acceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Acceleration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Acceleration"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Vector3 m_Acceleration
void UnityEngine::XR::XRNodeState::_set_m_Acceleration(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Acceleration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Acceleration"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_AngularAcceleration
UnityEngine::Vector3 UnityEngine::XR::XRNodeState::_get_m_AngularAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_AngularAcceleration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularAcceleration"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Vector3 m_AngularAcceleration
void UnityEngine::XR::XRNodeState::_set_m_AngularAcceleration(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_AngularAcceleration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularAcceleration"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_Tracked
int UnityEngine::XR::XRNodeState::_get_m_Tracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_Tracked");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tracked"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 m_Tracked
void UnityEngine::XR::XRNodeState::_set_m_Tracked(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_Tracked");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tracked"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_UniqueID
uint64_t UnityEngine::XR::XRNodeState::_get_m_UniqueID() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_get_m_UniqueID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UniqueID"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_UniqueID
void UnityEngine::XR::XRNodeState::_set_m_UniqueID(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::_set_m_UniqueID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UniqueID"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_uniqueID
void UnityEngine::XR::XRNodeState::set_uniqueID(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_uniqueID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_uniqueID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.get_nodeType
UnityEngine::XR::XRNode UnityEngine::XR::XRNodeState::get_nodeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::get_nodeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_nodeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::XRNode, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_nodeType
void UnityEngine::XR::XRNodeState::set_nodeType(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_nodeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_nodeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_tracked
void UnityEngine::XR::XRNodeState::set_tracked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::set_tracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_tracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetPosition
bool UnityEngine::XR::XRNodeState::TryGetPosition(ByRef<UnityEngine::Vector3> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(position));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetRotation
bool UnityEngine::XR::XRNodeState::TryGetRotation(ByRef<UnityEngine::Quaternion> rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(rotation));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetVelocity
bool UnityEngine::XR::XRNodeState::TryGetVelocity(ByRef<UnityEngine::Vector3> velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(velocity));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularVelocity
bool UnityEngine::XR::XRNodeState::TryGetAngularVelocity(ByRef<UnityEngine::Vector3> angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAngularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAngularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(angularVelocity));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAcceleration(ByRef<UnityEngine::Vector3> acceleration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(acceleration));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAngularAcceleration(ByRef<UnityEngine::Vector3> angularAcceleration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGetAngularAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetAngularAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(angularAcceleration));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Vector3 inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, ByRef<UnityEngine::Vector3> outValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inValue), ::il2cpp_utils::ExtractType(availabilityFlag), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inValue, availabilityFlag, byref(outValue));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Quaternion inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, ByRef<UnityEngine::Quaternion> outValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRNodeState::TryGet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inValue), ::il2cpp_utils::ExtractType(availabilityFlag), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inValue, availabilityFlag, byref(outValue));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputFeatureType
#include "UnityEngine/XR/InputFeatureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Custom
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Custom
void UnityEngine::XR::InputFeatureType::_set_Custom(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Custom", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Binary
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Binary() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Binary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Binary"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Binary
void UnityEngine::XR::InputFeatureType::_set_Binary(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Binary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Binary", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType DiscreteStates
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_DiscreteStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_DiscreteStates");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "DiscreteStates"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType DiscreteStates
void UnityEngine::XR::InputFeatureType::_set_DiscreteStates(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_DiscreteStates");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "DiscreteStates", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis1D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis1D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis1D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis1D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis1D
void UnityEngine::XR::InputFeatureType::_set_Axis1D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis1D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis1D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis2D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis2D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis2D
void UnityEngine::XR::InputFeatureType::_set_Axis2D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis2D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Axis3D
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Axis3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Axis3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Axis3D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Axis3D
void UnityEngine::XR::InputFeatureType::_set_Axis3D(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Axis3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Axis3D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Rotation
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Rotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Rotation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Rotation
void UnityEngine::XR::InputFeatureType::_set_Rotation(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Rotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Rotation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Hand
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Hand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Hand"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Hand
void UnityEngine::XR::InputFeatureType::_set_Hand(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Hand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Hand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Bone
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Bone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Bone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Bone"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Bone
void UnityEngine::XR::InputFeatureType::_set_Bone(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Bone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Bone", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType Eyes
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_Eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_Eyes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "Eyes"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType Eyes
void UnityEngine::XR::InputFeatureType::_set_Eyes(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_Eyes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "Eyes", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.InputFeatureType kUnityXRInputFeatureTypeInvalid
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureType::_get_kUnityXRInputFeatureTypeInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_kUnityXRInputFeatureTypeInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::InputFeatureType>("UnityEngine.XR", "InputFeatureType", "kUnityXRInputFeatureTypeInvalid"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.InputFeatureType kUnityXRInputFeatureTypeInvalid
void UnityEngine::XR::InputFeatureType::_set_kUnityXRInputFeatureTypeInvalid(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_kUnityXRInputFeatureTypeInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputFeatureType", "kUnityXRInputFeatureTypeInvalid", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint UnityEngine::XR::InputFeatureType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void UnityEngine::XR::InputFeatureType::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.ConnectionChangeType
#include "UnityEngine/XR/ConnectionChangeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType Connected
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType Connected
void UnityEngine::XR::ConnectionChangeType::_set_Connected(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType Disconnected
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType Disconnected
void UnityEngine::XR::ConnectionChangeType::_set_Disconnected(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.ConnectionChangeType ConfigChange
UnityEngine::XR::ConnectionChangeType UnityEngine::XR::ConnectionChangeType::_get_ConfigChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_ConfigChange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::ConnectionChangeType>("UnityEngine.XR", "ConnectionChangeType", "ConfigChange"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.ConnectionChangeType ConfigChange
void UnityEngine::XR::ConnectionChangeType::_set_ConfigChange(UnityEngine::XR::ConnectionChangeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_ConfigChange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "ConnectionChangeType", "ConfigChange", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
uint UnityEngine::XR::ConnectionChangeType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.UInt32 value__
void UnityEngine::XR::ConnectionChangeType::_set_value__(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::ConnectionChangeType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.InputFeatureUsage
#include "UnityEngine/XR/InputFeatureUsage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.String m_Name
::Il2CppString* UnityEngine::XR::InputFeatureUsage::_get_m_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::_get_m_Name");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Name"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: System.String m_Name
void UnityEngine::XR::InputFeatureUsage::_set_m_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::_set_m_Name");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Name"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.XR.InputFeatureType m_InternalType
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureUsage::_get_m_InternalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::_get_m_InternalType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalType"))->offset;
  return *reinterpret_cast<UnityEngine::XR::InputFeatureType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: UnityEngine.XR.InputFeatureType m_InternalType
void UnityEngine::XR::InputFeatureUsage::_set_m_InternalType(UnityEngine::XR::InputFeatureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::_set_m_InternalType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalType"))->offset;
  *reinterpret_cast<UnityEngine::XR::InputFeatureType*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.get_name
::Il2CppString* UnityEngine::XR::InputFeatureUsage::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.get_internalType
UnityEngine::XR::InputFeatureType UnityEngine::XR::InputFeatureUsage::get_internalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::get_internalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_internalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::InputFeatureType, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.Equals
bool UnityEngine::XR::InputFeatureUsage::Equals(UnityEngine::XR::InputFeatureUsage other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.Equals
bool UnityEngine::XR::InputFeatureUsage::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.InputFeatureUsage.GetHashCode
int UnityEngine::XR::InputFeatureUsage::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputFeatureUsage::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_DeviceId
uint64_t UnityEngine::XR::InputDevice::_get_m_DeviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::_get_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_DeviceId
void UnityEngine::XR::InputDevice::_set_m_DeviceId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::_set_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Initialized
bool UnityEngine::XR::InputDevice::_get_m_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::_get_m_Initialized");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean m_Initialized
void UnityEngine::XR::InputDevice::_set_m_Initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::_set_m_Initialized");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Initialized"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.InputDevice.get_deviceId
uint64_t UnityEngine::XR::InputDevice::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.InputDevice.Equals
bool UnityEngine::XR::InputDevice::Equals(UnityEngine::XR::InputDevice other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.InputDevice.Equals
bool UnityEngine::XR::InputDevice::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.InputDevice.GetHashCode
int UnityEngine::XR::InputDevice::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevice::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Hand
#include "UnityEngine/XR/Hand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_DeviceId
uint64_t UnityEngine::XR::Hand::_get_m_DeviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::_get_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_DeviceId
void UnityEngine::XR::Hand::_set_m_DeviceId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::_set_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 m_FeatureIndex
uint UnityEngine::XR::Hand::_get_m_FeatureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::_get_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 m_FeatureIndex
void UnityEngine::XR::Hand::_set_m_FeatureIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::_set_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.Hand.get_deviceId
uint64_t UnityEngine::XR::Hand::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Hand.get_featureIndex
uint UnityEngine::XR::Hand::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Hand.Equals
bool UnityEngine::XR::Hand::Equals(UnityEngine::XR::Hand other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Hand.Equals
bool UnityEngine::XR::Hand::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Hand.GetHashCode
int UnityEngine::XR::Hand::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Hand::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Eyes
#include "UnityEngine/XR/Eyes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_DeviceId
uint64_t UnityEngine::XR::Eyes::_get_m_DeviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::_get_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_DeviceId
void UnityEngine::XR::Eyes::_set_m_DeviceId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::_set_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 m_FeatureIndex
uint UnityEngine::XR::Eyes::_get_m_FeatureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::_get_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 m_FeatureIndex
void UnityEngine::XR::Eyes::_set_m_FeatureIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::_set_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.Eyes.get_deviceId
uint64_t UnityEngine::XR::Eyes::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Eyes.get_featureIndex
uint UnityEngine::XR::Eyes::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Eyes.Equals
bool UnityEngine::XR::Eyes::Equals(UnityEngine::XR::Eyes other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Eyes.Equals
bool UnityEngine::XR::Eyes::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Eyes.GetHashCode
int UnityEngine::XR::Eyes::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Eyes::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.Bone
#include "UnityEngine/XR/Bone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_DeviceId
uint64_t UnityEngine::XR::Bone::_get_m_DeviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::_get_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_DeviceId
void UnityEngine::XR::Bone::_set_m_DeviceId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::_set_m_DeviceId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeviceId"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 m_FeatureIndex
uint UnityEngine::XR::Bone::_get_m_FeatureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::_get_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 m_FeatureIndex
void UnityEngine::XR::Bone::_set_m_FeatureIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::_set_m_FeatureIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FeatureIndex"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.Bone.get_deviceId
uint64_t UnityEngine::XR::Bone::get_deviceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::get_deviceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deviceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Bone.get_featureIndex
uint UnityEngine::XR::Bone::get_featureIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::get_featureIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_featureIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.Bone.Equals
bool UnityEngine::XR::Bone::Equals(UnityEngine::XR::Bone other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.Bone.Equals
bool UnityEngine::XR::Bone::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.Bone.GetHashCode
int UnityEngine::XR::Bone::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::Bone::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.InputDevices
#include "UnityEngine/XR/InputDevices.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.XR.ConnectionChangeType
#include "UnityEngine/XR/ConnectionChangeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDD65E4
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConnected
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConnected
void UnityEngine::XR::InputDevices::_set_deviceConnected(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceConnected", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDD6620
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceDisconnected
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceDisconnected"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceDisconnected
void UnityEngine::XR::InputDevices::_set_deviceDisconnected(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceDisconnected", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xDD665C
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConfigChanged
System::Action_1<UnityEngine::XR::InputDevice>* UnityEngine::XR::InputDevices::_get_deviceConfigChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_get_deviceConfigChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::XR::InputDevice>*>("UnityEngine.XR", "InputDevices", "deviceConfigChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.XR.InputDevice> deviceConfigChanged
void UnityEngine::XR::InputDevices::_set_deviceConfigChanged(System::Action_1<UnityEngine::XR::InputDevice>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::_set_deviceConfigChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "InputDevices", "deviceConfigChanged", value));
}
// Autogenerated method: UnityEngine.XR.InputDevices.InvokeConnectionEvent
void UnityEngine::XR::InputDevices::InvokeConnectionEvent(uint64_t deviceId, UnityEngine::XR::ConnectionChangeType change) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::InputDevices::InvokeConnectionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "InputDevices", "InvokeConnectionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceId), ::il2cpp_utils::ExtractType(change)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceId, change);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRDisplaySubsystemDescriptor
#include "UnityEngine/XR/XRDisplaySubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem
#include "UnityEngine/XR/XRDisplaySubsystem.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem/UnityEngine.XR.XRRenderPass
#include "UnityEngine/XR/XRDisplaySubsystem_XRRenderPass.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem/UnityEngine.XR.XRMirrorViewBlitDesc
#include "UnityEngine/XR/XRDisplaySubsystem_XRMirrorViewBlitDesc.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDD6698
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Boolean> displayFocusChanged
System::Action_1<bool>* UnityEngine::XR::XRDisplaySubsystem::_get_displayFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::_get_displayFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<bool>*>("UnityEngine.XR", "XRDisplaySubsystem", "displayFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Boolean> displayFocusChanged
void UnityEngine::XR::XRDisplaySubsystem::_set_displayFocusChanged(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::_set_displayFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "XRDisplaySubsystem", "displayFocusChanged", value));
}
// Autogenerated method: UnityEngine.XR.XRDisplaySubsystem.InvokeDisplayFocusChanged
void UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged(bool focus) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRDisplaySubsystem", "InvokeDisplayFocusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(focus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, focus);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRDisplaySubsystemDescriptor
#include "UnityEngine/XR/XRDisplaySubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem
#include "UnityEngine/XR/XRDisplaySubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRInputSubsystemDescriptor
#include "UnityEngine/XR/XRInputSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRInputSubsystem
#include "UnityEngine/XR/XRInputSubsystem.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.XR.XRInputSubsystem> trackingOriginUpdated
System::Action_1<UnityEngine::XR::XRInputSubsystem*>* UnityEngine::XR::XRInputSubsystem::_get_trackingOriginUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::_get_trackingOriginUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingOriginUpdated"))->offset;
  return *reinterpret_cast<System::Action_1<UnityEngine::XR::XRInputSubsystem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<UnityEngine.XR.XRInputSubsystem> trackingOriginUpdated
void UnityEngine::XR::XRInputSubsystem::_set_trackingOriginUpdated(System::Action_1<UnityEngine::XR::XRInputSubsystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::_set_trackingOriginUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingOriginUpdated"))->offset;
  *reinterpret_cast<System::Action_1<UnityEngine::XR::XRInputSubsystem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.XR.XRInputSubsystem> boundaryChanged
System::Action_1<UnityEngine::XR::XRInputSubsystem*>* UnityEngine::XR::XRInputSubsystem::_get_boundaryChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::_get_boundaryChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boundaryChanged"))->offset;
  return *reinterpret_cast<System::Action_1<UnityEngine::XR::XRInputSubsystem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<UnityEngine.XR.XRInputSubsystem> boundaryChanged
void UnityEngine::XR::XRInputSubsystem::_set_boundaryChanged(System::Action_1<UnityEngine::XR::XRInputSubsystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::_set_boundaryChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boundaryChanged"))->offset;
  *reinterpret_cast<System::Action_1<UnityEngine::XR::XRInputSubsystem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.XRInputSubsystem.InvokeTrackingOriginUpdatedEvent
void UnityEngine::XR::XRInputSubsystem::InvokeTrackingOriginUpdatedEvent(System::IntPtr internalPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::InvokeTrackingOriginUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRInputSubsystem", "InvokeTrackingOriginUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(internalPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, internalPtr);
}
// Autogenerated method: UnityEngine.XR.XRInputSubsystem.InvokeBoundaryChangedEvent
void UnityEngine::XR::XRInputSubsystem::InvokeBoundaryChangedEvent(System::IntPtr internalPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRInputSubsystem::InvokeBoundaryChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "XRInputSubsystem", "InvokeBoundaryChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(internalPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, internalPtr);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRInputSubsystemDescriptor
#include "UnityEngine/XR/XRInputSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRInputSubsystem
#include "UnityEngine/XR/XRInputSubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.MeshId
#include "UnityEngine/XR/MeshId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.XR.MeshId s_InvalidId
UnityEngine::XR::MeshId UnityEngine::XR::MeshId::_get_s_InvalidId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_get_s_InvalidId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshId>("UnityEngine.XR", "MeshId", "s_InvalidId"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.XR.MeshId s_InvalidId
void UnityEngine::XR::MeshId::_set_s_InvalidId(UnityEngine::XR::MeshId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_set_s_InvalidId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshId", "s_InvalidId", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_SubId1
uint64_t UnityEngine::XR::MeshId::_get_m_SubId1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_get_m_SubId1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SubId1"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_SubId1
void UnityEngine::XR::MeshId::_set_m_SubId1(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_set_m_SubId1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SubId1"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 m_SubId2
uint64_t UnityEngine::XR::MeshId::_get_m_SubId2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_get_m_SubId2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SubId2"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt64 m_SubId2
void UnityEngine::XR::MeshId::_set_m_SubId2(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::_set_m_SubId2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SubId2"))->offset;
  *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.MeshId..cctor
void UnityEngine::XR::MeshId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "MeshId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.Equals
bool UnityEngine::XR::MeshId::Equals(UnityEngine::XR::MeshId other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.MeshId.ToString
::Il2CppString* UnityEngine::XR::MeshId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.GetHashCode
int UnityEngine::XR::MeshId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshId.Equals
bool UnityEngine::XR::MeshId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.MeshGenerationStatus
#include "UnityEngine/XR/MeshGenerationStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus Success
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "Success"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus Success
void UnityEngine::XR::MeshGenerationStatus::_set_Success(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus InvalidMeshId
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_InvalidMeshId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_InvalidMeshId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "InvalidMeshId"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus InvalidMeshId
void UnityEngine::XR::MeshGenerationStatus::_set_InvalidMeshId(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_InvalidMeshId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "InvalidMeshId", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus GenerationAlreadyInProgress
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_GenerationAlreadyInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_GenerationAlreadyInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "GenerationAlreadyInProgress"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus GenerationAlreadyInProgress
void UnityEngine::XR::MeshGenerationStatus::_set_GenerationAlreadyInProgress(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_GenerationAlreadyInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "GenerationAlreadyInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus Canceled
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus Canceled
void UnityEngine::XR::MeshGenerationStatus::_set_Canceled(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshGenerationStatus UnknownError
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationStatus::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshGenerationStatus>("UnityEngine.XR", "MeshGenerationStatus", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshGenerationStatus UnknownError
void UnityEngine::XR::MeshGenerationStatus::_set_UnknownError(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshGenerationStatus", "UnknownError", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int UnityEngine::XR::MeshGenerationStatus::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void UnityEngine::XR::MeshGenerationStatus::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationStatus::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.HashCodeHelper
#include "UnityEngine/XR/HashCodeHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.HashCodeHelper.Combine
int UnityEngine::XR::HashCodeHelper::Combine(int hash1, int hash2) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::HashCodeHelper::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR", "HashCodeHelper", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash1), ::il2cpp_utils::ExtractType(hash2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hash1, hash2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.XR.MeshGenerationResult
#include "UnityEngine/XR/MeshGenerationResult.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.MeshCollider
#include "UnityEngine/MeshCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.XR.MeshId <MeshId>k__BackingField
UnityEngine::XR::MeshId UnityEngine::XR::MeshGenerationResult::_get_$MeshId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_get_$MeshId$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MeshId>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::XR::MeshId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly UnityEngine.XR.MeshId <MeshId>k__BackingField
void UnityEngine::XR::MeshGenerationResult::_set_$MeshId$k__BackingField(UnityEngine::XR::MeshId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_set_$MeshId$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MeshId>k__BackingField"))->offset;
  *reinterpret_cast<UnityEngine::XR::MeshId*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Mesh <Mesh>k__BackingField
UnityEngine::Mesh* UnityEngine::XR::MeshGenerationResult::_get_$Mesh$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_get_$Mesh$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Mesh>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly UnityEngine.Mesh <Mesh>k__BackingField
void UnityEngine::XR::MeshGenerationResult::_set_$Mesh$k__BackingField(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_set_$Mesh$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Mesh>k__BackingField"))->offset;
  *reinterpret_cast<UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.MeshCollider <MeshCollider>k__BackingField
UnityEngine::MeshCollider* UnityEngine::XR::MeshGenerationResult::_get_$MeshCollider$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_get_$MeshCollider$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MeshCollider>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::MeshCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly UnityEngine.MeshCollider <MeshCollider>k__BackingField
void UnityEngine::XR::MeshGenerationResult::_set_$MeshCollider$k__BackingField(UnityEngine::MeshCollider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_set_$MeshCollider$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MeshCollider>k__BackingField"))->offset;
  *reinterpret_cast<UnityEngine::MeshCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.XR.MeshGenerationStatus <Status>k__BackingField
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationResult::_get_$Status$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_get_$Status$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Status>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::XR::MeshGenerationStatus*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly UnityEngine.XR.MeshGenerationStatus <Status>k__BackingField
void UnityEngine::XR::MeshGenerationResult::_set_$Status$k__BackingField(UnityEngine::XR::MeshGenerationStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_set_$Status$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Status>k__BackingField"))->offset;
  *reinterpret_cast<UnityEngine::XR::MeshGenerationStatus*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.XR.MeshVertexAttributes <Attributes>k__BackingField
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshGenerationResult::_get_$Attributes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_get_$Attributes$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Attributes>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::XR::MeshVertexAttributes*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly UnityEngine.XR.MeshVertexAttributes <Attributes>k__BackingField
void UnityEngine::XR::MeshGenerationResult::_set_$Attributes$k__BackingField(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::_set_$Attributes$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Attributes>k__BackingField"))->offset;
  *reinterpret_cast<UnityEngine::XR::MeshVertexAttributes*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_MeshId
UnityEngine::XR::MeshId UnityEngine::XR::MeshGenerationResult::get_MeshId() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_MeshId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_MeshId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshId, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Mesh
UnityEngine::Mesh* UnityEngine::XR::MeshGenerationResult::get_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_MeshCollider
UnityEngine::MeshCollider* UnityEngine::XR::MeshGenerationResult::get_MeshCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_MeshCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_MeshCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MeshCollider*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Status
UnityEngine::XR::MeshGenerationStatus UnityEngine::XR::MeshGenerationResult::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshGenerationStatus, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.get_Attributes
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshGenerationResult::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::get_Attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::MeshVertexAttributes, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.Equals
bool UnityEngine::XR::MeshGenerationResult::Equals(UnityEngine::XR::MeshGenerationResult other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.Equals
bool UnityEngine::XR::MeshGenerationResult::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.XR.MeshGenerationResult.GetHashCode
int UnityEngine::XR::MeshGenerationResult::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshGenerationResult::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.MeshVertexAttributes
#include "UnityEngine/XR/MeshVertexAttributes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes None
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes None
void UnityEngine::XR::MeshVertexAttributes::_set_None(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Normals
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Normals() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Normals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Normals"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Normals
void UnityEngine::XR::MeshVertexAttributes::_set_Normals(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Normals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Normals", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Tangents
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Tangents() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Tangents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Tangents"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Tangents
void UnityEngine::XR::MeshVertexAttributes::_set_Tangents(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Tangents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Tangents", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes UVs
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_UVs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_UVs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "UVs"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes UVs
void UnityEngine::XR::MeshVertexAttributes::_set_UVs(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_UVs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "UVs", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.XR.MeshVertexAttributes Colors
UnityEngine::XR::MeshVertexAttributes UnityEngine::XR::MeshVertexAttributes::_get_Colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_Colors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::XR::MeshVertexAttributes>("UnityEngine.XR", "MeshVertexAttributes", "Colors"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.XR.MeshVertexAttributes Colors
void UnityEngine::XR::MeshVertexAttributes::_set_Colors(UnityEngine::XR::MeshVertexAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_Colors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.XR", "MeshVertexAttributes", "Colors", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int UnityEngine::XR::MeshVertexAttributes::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void UnityEngine::XR::MeshVertexAttributes::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::MeshVertexAttributes::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRMeshSubsystemDescriptor
#include "UnityEngine/XR/XRMeshSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRMeshSubsystem
#include "UnityEngine/XR/XRMeshSubsystem.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRMeshSubsystem.InvokeMeshReadyDelegate
void UnityEngine::XR::XRMeshSubsystem::InvokeMeshReadyDelegate(UnityEngine::XR::MeshGenerationResult result, System::Action_1<UnityEngine::XR::MeshGenerationResult>* onMeshGenerationComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::XR::XRMeshSubsystem::InvokeMeshReadyDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeMeshReadyDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(onMeshGenerationComplete)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, result, onMeshGenerationComplete);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRMeshSubsystemDescriptor
#include "UnityEngine/XR/XRMeshSubsystemDescriptor.hpp"
// Including type: UnityEngine.XR.XRMeshSubsystem
#include "UnityEngine/XR/XRMeshSubsystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.InitializeData
#include "NetEase/Docker/InitializeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <InitializeSuccessful>k__BackingField
bool NetEase::Docker::InitializeData::_get_$InitializeSuccessful$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::_get_$InitializeSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitializeSuccessful>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <InitializeSuccessful>k__BackingField
void NetEase::Docker::InitializeData::_set_$InitializeSuccessful$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::_set_$InitializeSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitializeSuccessful>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <InitializeCode>k__BackingField
int NetEase::Docker::InitializeData::_get_$InitializeCode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::_get_$InitializeCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitializeCode>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <InitializeCode>k__BackingField
void NetEase::Docker::InitializeData::_set_$InitializeCode$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::_set_$InitializeCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitializeCode>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.InitializeData.get_InitializeSuccessful
bool NetEase::Docker::InitializeData::get_InitializeSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::get_InitializeSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_InitializeSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.InitializeData.set_InitializeSuccessful
void NetEase::Docker::InitializeData::set_InitializeSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::set_InitializeSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_InitializeSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.InitializeData.set_InitializeCode
void NetEase::Docker::InitializeData::set_InitializeCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::InitializeData::set_InitializeCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_InitializeCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.LoginData
#include "NetEase/Docker/LoginData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <LoginSuccessful>k__BackingField
bool NetEase::Docker::LoginData::_get_$LoginSuccessful$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_get_$LoginSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LoginSuccessful>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <LoginSuccessful>k__BackingField
void NetEase::Docker::LoginData::_set_$LoginSuccessful$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_set_$LoginSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LoginSuccessful>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <LoginCode>k__BackingField
int NetEase::Docker::LoginData::_get_$LoginCode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_get_$LoginCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LoginCode>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <LoginCode>k__BackingField
void NetEase::Docker::LoginData::_set_$LoginCode$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_set_$LoginCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LoginCode>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <UserName>k__BackingField
::Il2CppString* NetEase::Docker::LoginData::_get_$UserName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_get_$UserName$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UserName>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <UserName>k__BackingField
void NetEase::Docker::LoginData::_set_$UserName$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::_set_$UserName$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UserName>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.LoginData.get_LoginSuccessful
bool NetEase::Docker::LoginData::get_LoginSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::get_LoginSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_LoginSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.LoginData.set_LoginSuccessful
void NetEase::Docker::LoginData::set_LoginSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_LoginSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LoginSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.LoginData.set_LoginCode
void NetEase::Docker::LoginData::set_LoginCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_LoginCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LoginCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.LoginData.get_UserName
::Il2CppString* NetEase::Docker::LoginData::get_UserName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::get_UserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_UserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.LoginData.set_UserName
void NetEase::Docker::LoginData::set_UserName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LoginData::set_UserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_UserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.LogoutData
#include "NetEase/Docker/LogoutData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <LogoutCode>k__BackingField
int NetEase::Docker::LogoutData::_get_$LogoutCode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LogoutData::_get_$LogoutCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LogoutCode>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <LogoutCode>k__BackingField
void NetEase::Docker::LogoutData::_set_$LogoutCode$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LogoutData::_set_$LogoutCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LogoutCode>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.LogoutData.set_LogoutCode
void NetEase::Docker::LogoutData::set_LogoutCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::LogoutData::set_LogoutCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_LogoutCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.ReceivedHighscoreData
#include "NetEase/Docker/ReceivedHighscoreData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <FetchingSuccessful>k__BackingField
bool NetEase::Docker::ReceivedHighscoreData::_get_$FetchingSuccessful$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_get_$FetchingSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FetchingSuccessful>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <FetchingSuccessful>k__BackingField
void NetEase::Docker::ReceivedHighscoreData::_set_$FetchingSuccessful$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_set_$FetchingSuccessful$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FetchingSuccessful>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <HighscoreCode>k__BackingField
int NetEase::Docker::ReceivedHighscoreData::_get_$HighscoreCode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_get_$HighscoreCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HighscoreCode>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <HighscoreCode>k__BackingField
void NetEase::Docker::ReceivedHighscoreData::_set_$HighscoreCode$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_set_$HighscoreCode$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HighscoreCode>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <Track>k__BackingField
::Il2CppString* NetEase::Docker::ReceivedHighscoreData::_get_$Track$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_get_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Track>k__BackingField
void NetEase::Docker::ReceivedHighscoreData::_set_$Track$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_set_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<NetEase.Docker.ScoreData> <Scores>k__BackingField
System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* NetEase::Docker::ReceivedHighscoreData::_get_$Scores$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_get_$Scores$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Scores>k__BackingField"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Collections.Generic.List`1<NetEase.Docker.ScoreData> <Scores>k__BackingField
void NetEase::Docker::ReceivedHighscoreData::_set_$Scores$k__BackingField(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::_set_$Scores$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Scores>k__BackingField"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_FetchingSuccessful
bool NetEase::Docker::ReceivedHighscoreData::get_FetchingSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_FetchingSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_FetchingSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_FetchingSuccessful
void NetEase::Docker::ReceivedHighscoreData::set_FetchingSuccessful(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_FetchingSuccessful");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_FetchingSuccessful", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_HighscoreCode
void NetEase::Docker::ReceivedHighscoreData::set_HighscoreCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_HighscoreCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_HighscoreCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_Track
::Il2CppString* NetEase::Docker::ReceivedHighscoreData::get_Track() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_Track
void NetEase::Docker::ReceivedHighscoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.get_Scores
System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* NetEase::Docker::ReceivedHighscoreData::get_Scores() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::get_Scores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Scores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ReceivedHighscoreData.set_Scores
void NetEase::Docker::ReceivedHighscoreData::set_Scores(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ReceivedHighscoreData::set_Scores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Scores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.ScoreData
#include "NetEase/Docker/ScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::Il2CppString* NetEase::Docker::ScoreData::_get_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_get_$Name$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Name>k__BackingField
void NetEase::Docker::ScoreData::_set_$Name$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_set_$Name$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Score>k__BackingField
int NetEase::Docker::ScoreData::_get_$Score$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_get_$Score$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Score>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <Score>k__BackingField
void NetEase::Docker::ScoreData::_set_$Score$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_set_$Score$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Score>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 <TimeStamp>k__BackingField
int64_t NetEase::Docker::ScoreData::_get_$TimeStamp$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_get_$TimeStamp$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TimeStamp>k__BackingField"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int64 <TimeStamp>k__BackingField
void NetEase::Docker::ScoreData::_set_$TimeStamp$k__BackingField(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::_set_$TimeStamp$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TimeStamp>k__BackingField"))->offset;
  *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.ScoreData.get_Name
::Il2CppString* NetEase::Docker::ScoreData::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_Name
void NetEase::Docker::ScoreData::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ScoreData.get_Score
int NetEase::Docker::ScoreData::get_Score() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::get_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_Score
void NetEase::Docker::ScoreData::set_Score(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.ScoreData.set_TimeStamp
void NetEase::Docker::ScoreData::set_TimeStamp(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::ScoreData::set_TimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_TimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Track>k__BackingField
::Il2CppString* NetEase::Docker::RequestHighscoreData::_get_$Track$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::_get_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Track>k__BackingField
void NetEase::Docker::RequestHighscoreData::_set_$Track$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::_set_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <HighscoreType>k__BackingField
::Il2CppString* NetEase::Docker::RequestHighscoreData::_get_$HighscoreType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::_get_$HighscoreType$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HighscoreType>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <HighscoreType>k__BackingField
void NetEase::Docker::RequestHighscoreData::_set_$HighscoreType$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::_set_$HighscoreType$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HighscoreType>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.RequestHighscoreData.get_Track
::Il2CppString* NetEase::Docker::RequestHighscoreData::get_Track() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::get_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: NetEase.Docker.RequestHighscoreData.set_Track
void NetEase::Docker::RequestHighscoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.RequestHighscoreData.set_HighscoreType
void NetEase::Docker::RequestHighscoreData::set_HighscoreType(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::RequestHighscoreData::set_HighscoreType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_HighscoreType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Track>k__BackingField
::Il2CppString* NetEase::Docker::UploadScoreData::_get_$Track$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Track>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$Track$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$Track$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Track>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Difficulty>k__BackingField
int NetEase::Docker::UploadScoreData::_get_$Difficulty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$Difficulty$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Difficulty>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <Difficulty>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$Difficulty$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$Difficulty$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Difficulty>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Score>k__BackingField
int NetEase::Docker::UploadScoreData::_get_$Score$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$Score$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Score>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <Score>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$Score$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$Score$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Score>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 <TimeStamp>k__BackingField
int64_t NetEase::Docker::UploadScoreData::_get_$TimeStamp$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$TimeStamp$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TimeStamp>k__BackingField"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int64 <TimeStamp>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$TimeStamp$k__BackingField(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$TimeStamp$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TimeStamp>k__BackingField"))->offset;
  *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <PlayedUntilEnd>k__BackingField
bool NetEase::Docker::UploadScoreData::_get_$PlayedUntilEnd$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$PlayedUntilEnd$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PlayedUntilEnd>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <PlayedUntilEnd>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$PlayedUntilEnd$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$PlayedUntilEnd$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PlayedUntilEnd>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <AccuracyPercentage>k__BackingField
float NetEase::Docker::UploadScoreData::_get_$AccuracyPercentage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$AccuracyPercentage$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AccuracyPercentage>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <AccuracyPercentage>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$AccuracyPercentage$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$AccuracyPercentage$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AccuracyPercentage>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoOfHits>k__BackingField
int NetEase::Docker::UploadScoreData::_get_$NoOfHits$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$NoOfHits$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfHits>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <NoOfHits>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$NoOfHits$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$NoOfHits$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfHits>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoOfMisses>k__BackingField
int NetEase::Docker::UploadScoreData::_get_$NoOfMisses$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$NoOfMisses$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfMisses>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <NoOfMisses>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$NoOfMisses$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$NoOfMisses$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfMisses>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoOfBombsHit>k__BackingField
int NetEase::Docker::UploadScoreData::_get_$NoOfBombsHit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_get_$NoOfBombsHit$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfBombsHit>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <NoOfBombsHit>k__BackingField
void NetEase::Docker::UploadScoreData::_set_$NoOfBombsHit$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::_set_$NoOfBombsHit$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoOfBombsHit>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.UploadScoreData.set_Track
void NetEase::Docker::UploadScoreData::set_Track(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::set_Track");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Track", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: NetEase.Docker.UploadScoreData.set_Score
void NetEase::Docker::UploadScoreData::set_Score(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::UploadScoreData::set_Score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.BaseDock
#include "NetEase/Docker/BaseDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NetEase.Docker.InitializeData> OnInitFinished
System::Action_1<NetEase::Docker::InitializeData>* NetEase::Docker::BaseDock::_get_OnInitFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_get_OnInitFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnInitFinished"))->offset;
  return *reinterpret_cast<System::Action_1<NetEase::Docker::InitializeData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<NetEase.Docker.InitializeData> OnInitFinished
void NetEase::Docker::BaseDock::_set_OnInitFinished(System::Action_1<NetEase::Docker::InitializeData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_set_OnInitFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnInitFinished"))->offset;
  *reinterpret_cast<System::Action_1<NetEase::Docker::InitializeData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NetEase.Docker.LoginData> OnLoginFinished
System::Action_1<NetEase::Docker::LoginData>* NetEase::Docker::BaseDock::_get_OnLoginFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_get_OnLoginFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnLoginFinished"))->offset;
  return *reinterpret_cast<System::Action_1<NetEase::Docker::LoginData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<NetEase.Docker.LoginData> OnLoginFinished
void NetEase::Docker::BaseDock::_set_OnLoginFinished(System::Action_1<NetEase::Docker::LoginData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_set_OnLoginFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnLoginFinished"))->offset;
  *reinterpret_cast<System::Action_1<NetEase::Docker::LoginData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NetEase.Docker.LogoutData> OnLogoutFinished
System::Action_1<NetEase::Docker::LogoutData>* NetEase::Docker::BaseDock::_get_OnLogoutFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_get_OnLogoutFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnLogoutFinished"))->offset;
  return *reinterpret_cast<System::Action_1<NetEase::Docker::LogoutData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<NetEase.Docker.LogoutData> OnLogoutFinished
void NetEase::Docker::BaseDock::_set_OnLogoutFinished(System::Action_1<NetEase::Docker::LogoutData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_set_OnLogoutFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnLogoutFinished"))->offset;
  *reinterpret_cast<System::Action_1<NetEase::Docker::LogoutData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<NetEase.Docker.ReceivedHighscoreData> OnHighscoreReceived
System::Action_1<NetEase::Docker::ReceivedHighscoreData>* NetEase::Docker::BaseDock::_get_OnHighscoreReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_get_OnHighscoreReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHighscoreReceived"))->offset;
  return *reinterpret_cast<System::Action_1<NetEase::Docker::ReceivedHighscoreData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<NetEase.Docker.ReceivedHighscoreData> OnHighscoreReceived
void NetEase::Docker::BaseDock::_set_OnHighscoreReceived(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::_set_OnHighscoreReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHighscoreReceived"))->offset;
  *reinterpret_cast<System::Action_1<NetEase::Docker::ReceivedHighscoreData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NetEase.Docker.BaseDock.SetInitializeCallback
void NetEase::Docker::BaseDock::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetInitializeCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Initialize
void NetEase::Docker::BaseDock::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetLoginCallback
void NetEase::Docker::BaseDock::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetLoginCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Login
void NetEase::Docker::BaseDock::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Login");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetLogoutCallback
void NetEase::Docker::BaseDock::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetLogoutCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.Logout
void NetEase::Docker::BaseDock::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::Logout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.UploadScore
void NetEase::Docker::BaseDock::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::UploadScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.BaseDock.WillProvideHighscore
bool NetEase::Docker::BaseDock::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::WillProvideHighscore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.BaseDock.SetHighscoreReceivedCallback
void NetEase::Docker::BaseDock::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::SetHighscoreReceivedCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.BaseDock.RequestHighscoreList
void NetEase::Docker::BaseDock::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::RequestHighscoreList");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.BaseDock.UpdateLoop
void NetEase::Docker::BaseDock::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::BaseDock::UpdateLoop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.IDock
#include "NetEase/Docker/IDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEase.Docker.IDock.SetInitializeCallback
void NetEase::Docker::IDock::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetInitializeCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Initialize
void NetEase::Docker::IDock::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetLoginCallback
void NetEase::Docker::IDock::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetLoginCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Login
void NetEase::Docker::IDock::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Login");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetLogoutCallback
void NetEase::Docker::IDock::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetLogoutCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.Logout
void NetEase::Docker::IDock::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::Logout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.UploadScore
void NetEase::Docker::IDock::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::UploadScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.IDock.WillProvideHighscore
bool NetEase::Docker::IDock::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::WillProvideHighscore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: NetEase.Docker.IDock.SetHighscoreReceivedCallback
void NetEase::Docker::IDock::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::SetHighscoreReceivedCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.IDock.RequestHighscoreList
void NetEase::Docker::IDock::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::RequestHighscoreList");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.IDock.UpdateLoop
void NetEase::Docker::IDock::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::IDock::UpdateLoop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEase.Docker.VivaDocker
#include "NetEase/Docker/VivaDocker.hpp"
// Including type: NetEase.Docker.IDock
#include "NetEase/Docker/IDock.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NetEase.Docker.UploadScoreData
#include "NetEase/Docker/UploadScoreData.hpp"
// Including type: NetEase.Docker.RequestHighscoreData
#include "NetEase/Docker/RequestHighscoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private NetEase.Docker.IDock _activeDock
NetEase::Docker::IDock* NetEase::Docker::VivaDocker::_get__activeDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::_get__activeDock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NetEase::Docker::IDock*>("NetEase.Docker", "VivaDocker", "_activeDock"));
}
// Autogenerated static field setter
// Set static field: static private NetEase.Docker.IDock _activeDock
void NetEase::Docker::VivaDocker::_set__activeDock(NetEase::Docker::IDock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::_set__activeDock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NetEase.Docker", "VivaDocker", "_activeDock", value));
}
// Autogenerated method: NetEase.Docker.VivaDocker..cctor
void NetEase::Docker::VivaDocker::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetInitializeCallback
void NetEase::Docker::VivaDocker::SetInitializeCallback(System::Action_1<NetEase::Docker::InitializeData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetInitializeCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetInitializeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Initialize
void NetEase::Docker::VivaDocker::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetLoginCallback
void NetEase::Docker::VivaDocker::SetLoginCallback(System::Action_1<NetEase::Docker::LoginData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetLoginCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetLoginCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Login
void NetEase::Docker::VivaDocker::Login() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Login");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Login", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetLogoutCallback
void NetEase::Docker::VivaDocker::SetLogoutCallback(System::Action_1<NetEase::Docker::LogoutData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetLogoutCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetLogoutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.Logout
void NetEase::Docker::VivaDocker::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::Logout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "Logout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.UploadScore
void NetEase::Docker::VivaDocker::UploadScore(NetEase::Docker::UploadScoreData scoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::UploadScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "UploadScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scoreData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, scoreData);
}
// Autogenerated method: NetEase.Docker.VivaDocker.WillProvideHighscore
bool NetEase::Docker::VivaDocker::WillProvideHighscore() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::WillProvideHighscore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "WillProvideHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetEase.Docker.VivaDocker.SetHighscoreReceivedCallback
void NetEase::Docker::VivaDocker::SetHighscoreReceivedCallback(System::Action_1<NetEase::Docker::ReceivedHighscoreData>* callbackAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::SetHighscoreReceivedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "SetHighscoreReceivedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callbackAction);
}
// Autogenerated method: NetEase.Docker.VivaDocker.RequestHighscoreList
void NetEase::Docker::VivaDocker::RequestHighscoreList(NetEase::Docker::RequestHighscoreData highscoreRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::RequestHighscoreList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "RequestHighscoreList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, highscoreRequest);
}
// Autogenerated method: NetEase.Docker.VivaDocker.UpdateLoop
void NetEase::Docker::VivaDocker::UpdateLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NetEase::Docker::VivaDocker::UpdateLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NetEase.Docker", "VivaDocker", "UpdateLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.ButtonState
#include "VRUIControls/ButtonState.hpp"
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton _button
UnityEngine::EventSystems::PointerEventData::InputButton VRUIControls::ButtonState::_get__button() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_get__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  return *reinterpret_cast<UnityEngine::EventSystems::PointerEventData::InputButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton _button
void VRUIControls::ButtonState::_set__button(UnityEngine::EventSystems::PointerEventData::InputButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_set__button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_button"))->offset;
  *reinterpret_cast<UnityEngine::EventSystems::PointerEventData::InputButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.MouseButtonEventData _eventData
VRUIControls::MouseButtonEventData* VRUIControls::ButtonState::_get__eventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_get__eventData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventData"))->offset;
  return *reinterpret_cast<VRUIControls::MouseButtonEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRUIControls.MouseButtonEventData _eventData
void VRUIControls::ButtonState::_set__eventData(VRUIControls::MouseButtonEventData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_set__eventData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventData"))->offset;
  *reinterpret_cast<VRUIControls::MouseButtonEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _pressedValue
float VRUIControls::ButtonState::_get__pressedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_get__pressedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pressedValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _pressedValue
void VRUIControls::ButtonState::_set__pressedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::_set__pressedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pressedValue"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.ButtonState.get_eventData
VRUIControls::MouseButtonEventData* VRUIControls::ButtonState::get_eventData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_eventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::MouseButtonEventData*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_eventData
void VRUIControls::ButtonState::set_eventData(VRUIControls::MouseButtonEventData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_eventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: VRUIControls.ButtonState.get_button
UnityEngine::EventSystems::PointerEventData::InputButton VRUIControls::ButtonState::get_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::PointerEventData::InputButton, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_button
void VRUIControls::ButtonState::set_button(UnityEngine::EventSystems::PointerEventData::InputButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: VRUIControls.ButtonState.get_pressedValue
float VRUIControls::ButtonState::get_pressedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::get_pressedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.ButtonState.set_pressedValue
void VRUIControls::ButtonState::set_pressedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::ButtonState::set_pressedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pressedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState buttonState
UnityEngine::EventSystems::PointerEventData::FramePressState VRUIControls::MouseButtonEventData::_get_buttonState() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::_get_buttonState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonState"))->offset;
  return *reinterpret_cast<UnityEngine::EventSystems::PointerEventData::FramePressState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState buttonState
void VRUIControls::MouseButtonEventData::_set_buttonState(UnityEngine::EventSystems::PointerEventData::FramePressState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::_set_buttonState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonState"))->offset;
  *reinterpret_cast<UnityEngine::EventSystems::PointerEventData::FramePressState*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.EventSystems.PointerEventData buttonData
UnityEngine::EventSystems::PointerEventData* VRUIControls::MouseButtonEventData::_get_buttonData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::_get_buttonData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonData"))->offset;
  return *reinterpret_cast<UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public UnityEngine.EventSystems.PointerEventData buttonData
void VRUIControls::MouseButtonEventData::_set_buttonData(UnityEngine::EventSystems::PointerEventData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::_set_buttonData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonData"))->offset;
  *reinterpret_cast<UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.MouseButtonEventData.PressedThisFrame
bool VRUIControls::MouseButtonEventData::PressedThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::PressedThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PressedThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseButtonEventData.ReleasedThisFrame
bool VRUIControls::MouseButtonEventData::ReleasedThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseButtonEventData::ReleasedThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleasedThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.MouseState
#include "VRUIControls/MouseState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRUIControls.ButtonState
#include "VRUIControls/ButtonState.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState
#include "UnityEngine/EventSystems/PointerEventData_FramePressState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VRUIControls.ButtonState> _trackedButtons
System::Collections::Generic::List_1<VRUIControls::ButtonState*>* VRUIControls::MouseState::_get__trackedButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::_get__trackedButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackedButtons"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::ButtonState*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Collections.Generic.List`1<VRUIControls.ButtonState> _trackedButtons
void VRUIControls::MouseState::_set__trackedButtons(System::Collections::Generic::List_1<VRUIControls::ButtonState*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::_set__trackedButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackedButtons"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::ButtonState*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.MouseState.AnyPressesThisFrame
bool VRUIControls::MouseState::AnyPressesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::AnyPressesThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnyPressesThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseState.AnyReleasesThisFrame
bool VRUIControls::MouseState::AnyReleasesThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::AnyReleasesThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnyReleasesThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.MouseState.GetButtonState
VRUIControls::ButtonState* VRUIControls::MouseState::GetButtonState(UnityEngine::EventSystems::PointerEventData::InputButton button) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::GetButtonState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetButtonState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::ButtonState*, false>(___instance_arg, ___internal__method, button);
}
// Autogenerated method: VRUIControls.MouseState.SetButtonState
void VRUIControls::MouseState::SetButtonState(UnityEngine::EventSystems::PointerEventData::InputButton button, UnityEngine::EventSystems::PointerEventData::FramePressState stateForMouseButton, UnityEngine::EventSystems::PointerEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::MouseState::SetButtonState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetButtonState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(stateForMouseButton), ::il2cpp_utils::ExtractType(data)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, button, stateForMouseButton, data);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.PhysicsRaycasterWithCache
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<VRUIControls.PhysicsRaycasterWithCache/VRUIControls.CachedRaycast> _cachedRaycasts
System::Collections::Generic::List_1<VRUIControls::PhysicsRaycasterWithCache::CachedRaycast>* VRUIControls::PhysicsRaycasterWithCache::_get__cachedRaycasts() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::_get__cachedRaycasts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cachedRaycasts"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::PhysicsRaycasterWithCache::CachedRaycast>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<VRUIControls.PhysicsRaycasterWithCache/VRUIControls.CachedRaycast> _cachedRaycasts
void VRUIControls::PhysicsRaycasterWithCache::_set__cachedRaycasts(System::Collections::Generic::List_1<VRUIControls::PhysicsRaycasterWithCache::CachedRaycast>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::_set__cachedRaycasts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cachedRaycasts"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::PhysicsRaycasterWithCache::CachedRaycast>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastFrameCount
int VRUIControls::PhysicsRaycasterWithCache::_get__lastFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::_get__lastFrameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 _lastFrameCount
void VRUIControls::PhysicsRaycasterWithCache::_set__lastFrameCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::_set__lastFrameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameCount"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.PhysicsRaycasterWithCache.Raycast
bool VRUIControls::PhysicsRaycasterWithCache::Raycast(UnityEngine::Ray ray, ByRef<UnityEngine::RaycastHit> hitInfo, float maxDistance, int layerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::Raycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit&>(), ::il2cpp_utils::ExtractType(maxDistance), ::il2cpp_utils::ExtractType(layerMask)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, ray, byref(hitInfo), maxDistance, layerMask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.PhysicsRaycasterWithCache/VRUIControls.CachedRaycast
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean wasHit
bool VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_wasHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_wasHit");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasHit"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Boolean wasHit
void VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_wasHit(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_wasHit");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasHit"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Ray ray
UnityEngine::Ray VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_ray() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_ray");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ray"))->offset;
  return *reinterpret_cast<UnityEngine::Ray*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly UnityEngine.Ray ray
void VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_ray(UnityEngine::Ray value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_ray");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ray"))->offset;
  *reinterpret_cast<UnityEngine::Ray*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.RaycastHit hitInfo
UnityEngine::RaycastHit VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_hitInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_hitInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitInfo"))->offset;
  return *reinterpret_cast<UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly UnityEngine.RaycastHit hitInfo
void VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_hitInfo(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_hitInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitInfo"))->offset;
  *reinterpret_cast<UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single maxDistance
float VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_maxDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_maxDistance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Single maxDistance
void VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_maxDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_maxDistance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistance"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 layerMask
int VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_layerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_get_layerMask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Int32 layerMask
void VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_layerMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::PhysicsRaycasterWithCache::CachedRaycast::_set_layerMask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRGraphicRaycaster
#include "VRUIControls/VRGraphicRaycaster.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c
#include "VRUIControls/VRGraphicRaycaster_--c.hpp"
// Including type: VRUIControls.PhysicsRaycasterWithCache
#include "VRUIControls/PhysicsRaycasterWithCache.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPhysics3DRaycastDistance
float VRUIControls::VRGraphicRaycaster::_get_kPhysics3DRaycastDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get_kPhysics3DRaycastDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRGraphicRaycaster", "kPhysics3DRaycastDistance"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPhysics3DRaycastDistance
void VRUIControls::VRGraphicRaycaster::_set_kPhysics3DRaycastDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set_kPhysics3DRaycastDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster", "kPhysics3DRaycastDistance", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE21388
// Autogenerated static field getter
// Get static field: static private readonly System.Single[] _ray2DCircleIntersectionDistances
::Array<float>* VRUIControls::VRGraphicRaycaster::_get__ray2DCircleIntersectionDistances() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__ray2DCircleIntersectionDistances");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<float>*>("VRUIControls", "VRGraphicRaycaster", "_ray2DCircleIntersectionDistances"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Single[] _ray2DCircleIntersectionDistances
void VRUIControls::VRGraphicRaycaster::_set__ray2DCircleIntersectionDistances(::Array<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__ray2DCircleIntersectionDistances");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster", "_ray2DCircleIntersectionDistances", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask _blockingMask
UnityEngine::LayerMask VRUIControls::VRGraphicRaycaster::_get__blockingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__blockingMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blockingMask"))->offset;
  return *reinterpret_cast<UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.LayerMask _blockingMask
void VRUIControls::VRGraphicRaycaster::_set__blockingMask(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__blockingMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blockingMask"))->offset;
  *reinterpret_cast<UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly VRUIControls.PhysicsRaycasterWithCache _physicsRaycaster
VRUIControls::PhysicsRaycasterWithCache* VRUIControls::VRGraphicRaycaster::_get__physicsRaycaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__physicsRaycaster");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_physicsRaycaster"))->offset;
  return *reinterpret_cast<VRUIControls::PhysicsRaycasterWithCache**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly VRUIControls.PhysicsRaycasterWithCache _physicsRaycaster
void VRUIControls::VRGraphicRaycaster::_set__physicsRaycaster(VRUIControls::PhysicsRaycasterWithCache* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__physicsRaycaster");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_physicsRaycaster"))->offset;
  *reinterpret_cast<VRUIControls::PhysicsRaycasterWithCache**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Canvas _canvas
UnityEngine::Canvas* VRUIControls::VRGraphicRaycaster::_get__canvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__canvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvas"))->offset;
  return *reinterpret_cast<UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Canvas _canvas
void VRUIControls::VRGraphicRaycaster::_set__canvas(UnityEngine::Canvas* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__canvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canvas"))->offset;
  *reinterpret_cast<UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> _raycastResults
System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* VRUIControls::VRGraphicRaycaster::_get__raycastResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__raycastResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raycastResults"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> _raycastResults
void VRUIControls::VRGraphicRaycaster::_set__raycastResults(System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__raycastResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raycastResults"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly HMUI.CurvedCanvasSettingsHelper _curvedCanvasSettingsHelper
HMUI::CurvedCanvasSettingsHelper* VRUIControls::VRGraphicRaycaster::_get__curvedCanvasSettingsHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_get__curvedCanvasSettingsHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curvedCanvasSettingsHelper"))->offset;
  return *reinterpret_cast<HMUI::CurvedCanvasSettingsHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly HMUI.CurvedCanvasSettingsHelper _curvedCanvasSettingsHelper
void VRUIControls::VRGraphicRaycaster::_set__curvedCanvasSettingsHelper(HMUI::CurvedCanvasSettingsHelper* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::_set__curvedCanvasSettingsHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_curvedCanvasSettingsHelper"))->offset;
  *reinterpret_cast<HMUI::CurvedCanvasSettingsHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.RaycastCanvas
void VRUIControls::VRGraphicRaycaster::RaycastCanvas(UnityEngine::Canvas* canvas, UnityEngine::Ray ray, float hitDistance, float curvedUIRadius, System::Collections::Generic::List_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::RaycastCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster", "RaycastCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvas), ::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(hitDistance), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, canvas, ray, hitDistance, curvedUIRadius, results);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.get_eventCamera
UnityEngine::Camera* VRUIControls::VRGraphicRaycaster::get_eventCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::get_eventCamera");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster..cctor
void VRUIControls::VRGraphicRaycaster::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.OnEnable
void VRUIControls::VRGraphicRaycaster::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster.Raycast
void VRUIControls::VRGraphicRaycaster::Raycast(UnityEngine::EventSystems::PointerEventData* eventData, System::Collections::Generic::List_1<UnityEngine::EventSystems::RaycastResult>* resultAppendList) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::Raycast");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(resultAppendList)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, eventData, resultAppendList);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult
#include "VRUIControls/VRGraphicRaycaster.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.UI.Graphic graphic
UnityEngine::UI::Graphic* VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_graphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_graphic");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "graphic"))->offset;
  return *reinterpret_cast<UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly UnityEngine.UI.Graphic graphic
void VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_graphic(UnityEngine::UI::Graphic* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_graphic");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "graphic"))->offset;
  *reinterpret_cast<UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single distance
float VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_distance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Single distance
void VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_distance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_distance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 position
UnityEngine::Vector3 VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly UnityEngine.Vector3 position
void VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector2 insideRootCanvasPosition
UnityEngine::Vector2 VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_insideRootCanvasPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_get_insideRootCanvasPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "insideRootCanvasPosition"))->offset;
  return *reinterpret_cast<UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly UnityEngine.Vector2 insideRootCanvasPosition
void VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_insideRootCanvasPosition(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::_set_insideRootCanvasPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "insideRootCanvasPosition"))->offset;
  *reinterpret_cast<UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c
#include "VRUIControls/VRGraphicRaycaster_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly VRUIControls.VRGraphicRaycaster/VRUIControls.<>c <>9
VRUIControls::VRGraphicRaycaster::$$c* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<VRUIControls::VRGraphicRaycaster::$$c*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly VRUIControls.VRGraphicRaycaster/VRUIControls.<>c <>9
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9(VRUIControls::VRGraphicRaycaster::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> <>9__12_0
System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> <>9__12_0
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0(System::Comparison_1<VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0", value)));
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c..cctor
void VRUIControls::VRGraphicRaycaster::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c.<RaycastCanvas>b__12_0
int VRUIControls::VRGraphicRaycaster::$$c::$RaycastCanvas$b__12_0(VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g1, VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g2) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRGraphicRaycaster::$$c::<RaycastCanvas>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RaycastCanvas>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g1), ::il2cpp_utils::ExtractType(g2)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, g1, g2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRInputModule
#include "VRUIControls/VRInputModule.hpp"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: VRUIControls.MouseState
#include "VRUIControls/MouseState.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMouseLeftId
int VRUIControls::VRInputModule::_get_kMouseLeftId() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_kMouseLeftId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRInputModule", "kMouseLeftId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMouseLeftId
void VRUIControls::VRInputModule::_set_kMouseLeftId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_kMouseLeftId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMouseLeftId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinPressValue
float VRUIControls::VRInputModule::_get_kMinPressValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_kMinPressValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRInputModule", "kMinPressValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinPressValue
void VRUIControls::VRInputModule::_set_kMinPressValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_kMinPressValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMinPressValue", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE213E8
// Autogenerated static field getter
// Get static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
System::Comparison_1<UnityEngine::EventSystems::RaycastResult>* VRUIControls::VRInputModule::_get__raycastComparer() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__raycastComparer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Comparison_1<UnityEngine::EventSystems::RaycastResult>*>("VRUIControls", "VRInputModule", "_raycastComparer"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
void VRUIControls::VRInputModule::_set__raycastComparer(System::Comparison_1<UnityEngine::EventSystems::RaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__raycastComparer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "_raycastComparer", value));
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRPointer _vrPointer
VRUIControls::VRPointer* VRUIControls::VRInputModule::_get__vrPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__vrPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPointer"))->offset;
  return *reinterpret_cast<VRUIControls::VRPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRUIControls.VRPointer _vrPointer
void VRUIControls::VRInputModule::_set__vrPointer(VRUIControls::VRPointer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__vrPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPointer"))->offset;
  *reinterpret_cast<VRUIControls::VRPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
Libraries::HM::HMLib::VR::HapticPresetSO* VRUIControls::VRInputModule::_get__rumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__rumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblePreset"))->offset;
  return *reinterpret_cast<Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
void VRUIControls::VRInputModule::_set__rumblePreset(Libraries::HM::HMLib::VR::HapticPresetSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__rumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblePreset"))->offset;
  *reinterpret_cast<Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
GlobalNamespace::HapticFeedbackController* VRUIControls::VRInputModule::_get__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly HapticFeedbackController _hapticFeedbackController
void VRUIControls::VRInputModule::_set__hapticFeedbackController(GlobalNamespace::HapticFeedbackController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  *reinterpret_cast<GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <useMouseForPressInput>k__BackingField
bool VRUIControls::VRInputModule::_get_$useMouseForPressInput$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_$useMouseForPressInput$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<useMouseForPressInput>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <useMouseForPressInput>k__BackingField
void VRUIControls::VRInputModule::_set_$useMouseForPressInput$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_$useMouseForPressInput$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<useMouseForPressInput>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.GameObject> onProcessMousePressEvent
System::Action_1<UnityEngine::GameObject*>* VRUIControls::VRInputModule::_get_onProcessMousePressEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get_onProcessMousePressEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onProcessMousePressEvent"))->offset;
  return *reinterpret_cast<System::Action_1<UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<UnityEngine.GameObject> onProcessMousePressEvent
void VRUIControls::VRInputModule::_set_onProcessMousePressEvent(System::Action_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set_onProcessMousePressEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onProcessMousePressEvent"))->offset;
  *reinterpret_cast<System::Action_1<UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.PointerEventData> _pointerData
System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::PointerEventData*>* VRUIControls::VRInputModule::_get__pointerData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::PointerEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.PointerEventData> _pointerData
void VRUIControls::VRInputModule::_set__pointerData(System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::PointerEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  *reinterpret_cast<System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::PointerEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Component> _componentList
System::Collections::Generic::List_1<UnityEngine::Component*>* VRUIControls::VRInputModule::_get__componentList() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__componentList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_componentList"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<UnityEngine::Component*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Component> _componentList
void VRUIControls::VRInputModule::_set__componentList(System::Collections::Generic::List_1<UnityEngine::Component*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__componentList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_componentList"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<UnityEngine::Component*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly VRUIControls.MouseState _mouseState
VRUIControls::MouseState* VRUIControls::VRInputModule::_get__mouseState() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_get__mouseState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mouseState"))->offset;
  return *reinterpret_cast<VRUIControls::MouseState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly VRUIControls.MouseState _mouseState
void VRUIControls::VRInputModule::_set__mouseState(VRUIControls::MouseState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::_set__mouseState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mouseState"))->offset;
  *reinterpret_cast<VRUIControls::MouseState**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.VRInputModule.get_useMouseForPressInput
bool VRUIControls::VRInputModule::get_useMouseForPressInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::get_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.set_useMouseForPressInput
void VRUIControls::VRInputModule::set_useMouseForPressInput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::set_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.add_onProcessMousePressEvent
void VRUIControls::VRInputModule::add_onProcessMousePressEvent(System::Action_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::add_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.remove_onProcessMousePressEvent
void VRUIControls::VRInputModule::remove_onProcessMousePressEvent(System::Action_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::remove_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.GetPointerData
bool VRUIControls::VRInputModule::GetPointerData(int id, ByRef<UnityEngine::EventSystems::PointerEventData*> data, bool create) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetPointerData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointerData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*&>(), ::il2cpp_utils::ExtractType(create)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, id, byref(data), create);
}
// Autogenerated method: VRUIControls.VRInputModule.GetMousePointerEventData
VRUIControls::MouseState* VRUIControls::VRInputModule::GetMousePointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetMousePointerEventData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMousePointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<VRUIControls::MouseState*, false>(___instance_arg, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.GetLastPointerEventData
UnityEngine::EventSystems::PointerEventData* VRUIControls::VRInputModule::GetLastPointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::GetLastPointerEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::PointerEventData*, false>(___instance_arg, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.ShouldStartDrag
bool VRUIControls::VRInputModule::ShouldStartDrag(UnityEngine::Vector2 pressPos, UnityEngine::Vector2 currentPos, float threshold, bool useDragThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ShouldStartDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldStartDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pressPos), ::il2cpp_utils::ExtractType(currentPos), ::il2cpp_utils::ExtractType(threshold), ::il2cpp_utils::ExtractType(useDragThreshold)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, pressPos, currentPos, threshold, useDragThreshold);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMove
void VRUIControls::VRInputModule::ProcessMove(UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessMove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessDrag
void VRUIControls::VRInputModule::ProcessDrag(UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ClearSelection
void VRUIControls::VRInputModule::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.DeselectIfSelectionChanged
void VRUIControls::VRInputModule::DeselectIfSelectionChanged(UnityEngine::GameObject* currentOverGo, UnityEngine::EventSystems::BaseEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::DeselectIfSelectionChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeselectIfSelectionChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentOverGo), ::il2cpp_utils::ExtractType(pointerEvent)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, currentOverGo, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.SendUpdateEventToSelectedObject
bool VRUIControls::VRInputModule::SendUpdateEventToSelectedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::SendUpdateEventToSelectedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMousePress
void VRUIControls::VRInputModule::ProcessMousePress(VRUIControls::MouseButtonEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ProcessMousePress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMousePress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, data);
}
// Autogenerated method: VRUIControls.VRInputModule.RaycastComparer
int VRUIControls::VRInputModule::RaycastComparer(UnityEngine::EventSystems::RaycastResult lhs, UnityEngine::EventSystems::RaycastResult rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::RaycastComparer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", "RaycastComparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: VRUIControls.VRInputModule..cctor
void VRUIControls::VRInputModule::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.OnDisable
void VRUIControls::VRInputModule::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.IsPointerOverGameObject
bool VRUIControls::VRInputModule::IsPointerOverGameObject(int pointerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::IsPointerOverGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerOverGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerId)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, pointerId);
}
// Autogenerated method: VRUIControls.VRInputModule.ToString
::Il2CppString* VRUIControls::VRInputModule::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.Process
void VRUIControls::VRInputModule::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::Process");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.HandlePointerExitAndEnter
void VRUIControls::VRInputModule::HandlePointerExitAndEnter(UnityEngine::EventSystems::PointerEventData* currentPointerData, UnityEngine::GameObject* newEnterTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRInputModule::HandlePointerExitAndEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerExitAndEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPointerData), ::il2cpp_utils::ExtractType(newEnterTarget)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, currentPointerData, newEnterTarget);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE21408
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
int VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
void VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE21418
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* VRUIControls::VRLaserPointer::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("VRUIControls", "VRLaserPointer", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void VRUIControls::VRLaserPointer::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _renderer
UnityEngine::MeshRenderer* VRUIControls::VRLaserPointer::_get__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_get__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.MeshRenderer _renderer
void VRUIControls::VRLaserPointer::_set__renderer(UnityEngine::MeshRenderer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::_set__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  *reinterpret_cast<UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalPosition
void VRUIControls::VRLaserPointer::SetLocalPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, position);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalScale
void VRUIControls::VRLaserPointer::SetLocalScale(UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetLocalScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, scale);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetFadeDistance
void VRUIControls::VRLaserPointer::SetFadeDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::SetFadeDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFadeDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, distance);
}
// Autogenerated method: VRUIControls.VRLaserPointer..cctor
void VRUIControls::VRLaserPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRLaserPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRLaserPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kScrollMultiplier
float VRUIControls::VRPointer::_get_kScrollMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get_kScrollMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRPointer", "kScrollMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kScrollMultiplier
void VRUIControls::VRPointer::_set_kScrollMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set_kScrollMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "kScrollMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _lastControllerUsedWasRight
bool VRUIControls::VRPointer::_get__lastControllerUsedWasRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__lastControllerUsedWasRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_lastControllerUsedWasRight"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _lastControllerUsedWasRight
void VRUIControls::VRPointer::_set__lastControllerUsedWasRight(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__lastControllerUsedWasRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_lastControllerUsedWasRight", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _rightControllerWasReleased
bool VRUIControls::VRPointer::_get__rightControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__rightControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_rightControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _rightControllerWasReleased
void VRUIControls::VRPointer::_set__rightControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__rightControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_rightControllerWasReleased", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _leftControllerWasReleased
bool VRUIControls::VRPointer::_get__leftControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__leftControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_leftControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _leftControllerWasReleased
void VRUIControls::VRPointer::_set__leftControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__leftControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_leftControllerWasReleased", value));
}
// Autogenerated instance field getter
// Get instance field: private VRController _leftVRController
GlobalNamespace::VRController* VRUIControls::VRPointer::_get__leftVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__leftVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftVRController"))->offset;
  return *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRController _leftVRController
void VRUIControls::VRPointer::_set__leftVRController(GlobalNamespace::VRController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__leftVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftVRController"))->offset;
  *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private VRController _rightVRController
GlobalNamespace::VRController* VRUIControls::VRPointer::_get__rightVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__rightVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightVRController"))->offset;
  return *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRController _rightVRController
void VRUIControls::VRPointer::_set__rightVRController(GlobalNamespace::VRController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__rightVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightVRController"))->offset;
  *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRLaserPointer _laserPointerPrefab
VRUIControls::VRLaserPointer* VRUIControls::VRPointer::_get__laserPointerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__laserPointerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerPrefab"))->offset;
  return *reinterpret_cast<VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRUIControls.VRLaserPointer _laserPointerPrefab
void VRUIControls::VRPointer::_set__laserPointerPrefab(VRUIControls::VRLaserPointer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__laserPointerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerPrefab"))->offset;
  *reinterpret_cast<VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _cursorPrefab
UnityEngine::Transform* VRUIControls::VRPointer::_get__cursorPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__cursorPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorPrefab"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Transform _cursorPrefab
void VRUIControls::VRPointer::_set__cursorPrefab(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__cursorPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorPrefab"))->offset;
  *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultLaserPointerLength
float VRUIControls::VRPointer::_get__defaultLaserPointerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__defaultLaserPointerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultLaserPointerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _defaultLaserPointerLength
void VRUIControls::VRPointer::_set__defaultLaserPointerLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__defaultLaserPointerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultLaserPointerLength"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _laserPointerWidth
float VRUIControls::VRPointer::_get__laserPointerWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__laserPointerWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _laserPointerWidth
void VRUIControls::VRPointer::_set__laserPointerWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__laserPointerWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerWidth"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRLaserPointer _laserPointer
VRUIControls::VRLaserPointer* VRUIControls::VRPointer::_get__laserPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__laserPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointer"))->offset;
  return *reinterpret_cast<VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRUIControls.VRLaserPointer _laserPointer
void VRUIControls::VRPointer::_set__laserPointer(VRUIControls::VRLaserPointer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__laserPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointer"))->offset;
  *reinterpret_cast<VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _cursorTransform
UnityEngine::Transform* VRUIControls::VRPointer::_get__cursorTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__cursorTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.Transform _cursorTransform
void VRUIControls::VRPointer::_set__cursorTransform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__cursorTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorTransform"))->offset;
  *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _eventSystem
UnityEngine::EventSystems::EventSystem* VRUIControls::VRPointer::_get__eventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__eventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventSystem"))->offset;
  return *reinterpret_cast<UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.EventSystems.EventSystem _eventSystem
void VRUIControls::VRPointer::_set__eventSystem(UnityEngine::EventSystems::EventSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__eventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventSystem"))->offset;
  *reinterpret_cast<UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private VRController _vrController
GlobalNamespace::VRController* VRUIControls::VRPointer::_get__vrController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__vrController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrController"))->offset;
  return *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private VRController _vrController
void VRUIControls::VRPointer::_set__vrController(GlobalNamespace::VRController* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__vrController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrController"))->offset;
  *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.PointerEventData _pointerData
UnityEngine::EventSystems::PointerEventData* VRUIControls::VRPointer::_get__pointerData() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_get__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  return *reinterpret_cast<UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private UnityEngine.EventSystems.PointerEventData _pointerData
void VRUIControls::VRPointer::_set__pointerData(UnityEngine::EventSystems::PointerEventData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::_set__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  *reinterpret_cast<UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: VRUIControls.VRPointer.get_vrController
GlobalNamespace::VRController* VRUIControls::VRPointer::get_vrController() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_vrController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRController*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_cursorPosition
UnityEngine::Vector3 VRUIControls::VRPointer::get_cursorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_cursorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cursorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_eventSystem
UnityEngine::EventSystems::EventSystem* VRUIControls::VRPointer::get_eventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_eventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::EventSystem*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_state
::Il2CppString* VRUIControls::VRPointer::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Awake
void VRUIControls::VRPointer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnEnable
void VRUIControls::VRPointer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnDisable
void VRUIControls::VRPointer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.LateUpdate
void VRUIControls::VRPointer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.CreateLaserPointerAndLaserHit
void VRUIControls::VRPointer::CreateLaserPointerAndLaserHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::CreateLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.RefreshLaserPointerAndLaserHit
void VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit(UnityEngine::EventSystems::PointerEventData* pointerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerData)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pointerData);
}
// Autogenerated method: VRUIControls.VRPointer.OnApplicationFocus
void VRUIControls::VRPointer::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, hasFocus);
}
// Autogenerated method: VRUIControls.VRPointer.DestroyLaserAndHit
void VRUIControls::VRPointer::DestroyLaserAndHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::DestroyLaserAndHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLaserAndHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Process
void VRUIControls::VRPointer::Process(UnityEngine::EventSystems::PointerEventData* pointerEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEventData)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pointerEventData);
}
// Autogenerated method: VRUIControls.VRPointer..cctor
void VRUIControls::VRPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IGuiRenderable.GuiRender
void Zenject::IGuiRenderable::GuiRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IGuiRenderable::GuiRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuiRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IInitializable.Initialize
void Zenject::IInitializable::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInitializable::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean Optional
bool Zenject::InjectableInfo::_get_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_Optional");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Optional"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Boolean Optional
void Zenject::InjectableInfo::_set_Optional(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_Optional");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Optional"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object Identifier
::Il2CppObject* Zenject::InjectableInfo::_get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_Identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Object Identifier
void Zenject::InjectableInfo::_set_Identifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_Identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Identifier"))->offset;
  *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectSources SourceType
Zenject::InjectSources Zenject::InjectableInfo::_get_SourceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_SourceType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SourceType"))->offset;
  return *reinterpret_cast<Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectSources SourceType
void Zenject::InjectableInfo::_set_SourceType(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_SourceType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SourceType"))->offset;
  *reinterpret_cast<Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String MemberName
::Il2CppString* Zenject::InjectableInfo::_get_MemberName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_MemberName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.String MemberName
void Zenject::InjectableInfo::_set_MemberName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_MemberName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberName"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Type MemberType
System::Type* Zenject::InjectableInfo::_get_MemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_MemberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Type MemberType
void Zenject::InjectableInfo::_set_MemberType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_MemberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberType"))->offset;
  *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object DefaultValue
::Il2CppObject* Zenject::InjectableInfo::_get_DefaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_get_DefaultValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Object DefaultValue
void Zenject::InjectableInfo::_set_DefaultValue(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectableInfo::_set_DefaultValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultValue"))->offset;
  *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Internal.PreserveAttribute
#include "Zenject/Internal/PreserveAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectAttributeBase
#include "Zenject/InjectAttributeBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Optional>k__BackingField
bool Zenject::InjectAttributeBase::_get_$Optional$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_get_$Optional$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Optional>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <Optional>k__BackingField
void Zenject::InjectAttributeBase::_set_$Optional$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_set_$Optional$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Optional>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Object <Id>k__BackingField
::Il2CppObject* Zenject::InjectAttributeBase::_get_$Id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_get_$Id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Id>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Object <Id>k__BackingField
void Zenject::InjectAttributeBase::_set_$Id$k__BackingField(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_set_$Id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Id>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InjectSources <Source>k__BackingField
Zenject::InjectSources Zenject::InjectAttributeBase::_get_$Source$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_get_$Source$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Source>k__BackingField"))->offset;
  return *reinterpret_cast<Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private Zenject.InjectSources <Source>k__BackingField
void Zenject::InjectAttributeBase::_set_$Source$k__BackingField(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::_set_$Source$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Source>k__BackingField"))->offset;
  *reinterpret_cast<Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Optional
bool Zenject::InjectAttributeBase::get_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Optional
void Zenject::InjectAttributeBase::set_Optional(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Id
::Il2CppObject* Zenject::InjectAttributeBase::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Id
void Zenject::InjectAttributeBase::set_Id(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Source
Zenject::InjectSources Zenject::InjectAttributeBase::get_Source() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::get_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectSources, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Source
void Zenject::InjectAttributeBase::set_Source(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::set_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectAttribute
#include "Zenject/InjectAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectLocalAttribute
#include "Zenject/InjectLocalAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectOptionalAttribute
#include "Zenject/InjectOptionalAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Any
Zenject::InjectSources Zenject::InjectSources::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Any"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Any
void Zenject::InjectSources::_set_Any(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Local
Zenject::InjectSources Zenject::InjectSources::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Local"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Local
void Zenject::InjectSources::_set_Local(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Local", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Parent
Zenject::InjectSources Zenject::InjectSources::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Parent
void Zenject::InjectSources::_set_Parent(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources AnyParent
Zenject::InjectSources Zenject::InjectSources::_get_AnyParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_AnyParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InjectSources>("Zenject", "InjectSources", "AnyParent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources AnyParent
void Zenject::InjectSources::_set_AnyParent(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_AnyParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "AnyParent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int Zenject::InjectSources::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void Zenject::InjectSources::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectSources::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenInjectMethod.Invoke
void Zenject::ZenInjectMethod::Invoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, obj, args);
}
// Autogenerated method: Zenject.ZenInjectMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenInjectMethod::BeginInvoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, obj, args, callback, object);
}
// Autogenerated method: Zenject.ZenInjectMethod.EndInvoke
void Zenject::ZenInjectMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenInjectMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenFactoryMethod.Invoke
::Il2CppObject* Zenject::ZenFactoryMethod::Invoke(::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method, args);
}
// Autogenerated method: Zenject.ZenFactoryMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenFactoryMethod::BeginInvoke(::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, args, callback, object);
}
// Autogenerated method: Zenject.ZenFactoryMethod.EndInvoke
::Il2CppObject* Zenject::ZenFactoryMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenFactoryMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenMemberSetterMethod.Invoke
void Zenject::ZenMemberSetterMethod::Invoke(::Il2CppObject* obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, obj, value);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.BeginInvoke
System::IAsyncResult* Zenject::ZenMemberSetterMethod::BeginInvoke(::Il2CppObject* obj, ::Il2CppObject* value, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, obj, value, callback, object);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.EndInvoke
void Zenject::ZenMemberSetterMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenMemberSetterMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2(System::Func_2<Zenject::InjectTypeInfo::InjectMemberInfo*, Zenject::InjectableInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3(System::Func_2<Zenject::InjectTypeInfo::InjectMethodInfo*, System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Type Type
System::Type* Zenject::InjectTypeInfo::_get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Type Type
void Zenject::InjectTypeInfo::_set_Type(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMethodInfo[] InjectMethods
::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>* Zenject::InjectTypeInfo::_get_InjectMethods() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_InjectMethods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMethods"))->offset;
  return *reinterpret_cast<::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMethodInfo[] InjectMethods
void Zenject::InjectTypeInfo::_set_InjectMethods(::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_InjectMethods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMethods"))->offset;
  *reinterpret_cast<::Array<Zenject::InjectTypeInfo::InjectMethodInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMemberInfo[] InjectMembers
::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>* Zenject::InjectTypeInfo::_get_InjectMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_InjectMembers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMembers"))->offset;
  return *reinterpret_cast<::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMemberInfo[] InjectMembers
void Zenject::InjectTypeInfo::_set_InjectMembers(::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_InjectMembers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMembers"))->offset;
  *reinterpret_cast<::Array<Zenject::InjectTypeInfo::InjectMemberInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo InjectConstructor
Zenject::InjectTypeInfo::InjectConstructorInfo* Zenject::InjectTypeInfo::_get_InjectConstructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_InjectConstructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectConstructor"))->offset;
  return *reinterpret_cast<Zenject::InjectTypeInfo::InjectConstructorInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo InjectConstructor
void Zenject::InjectTypeInfo::_set_InjectConstructor(Zenject::InjectTypeInfo::InjectConstructorInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_InjectConstructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectConstructor"))->offset;
  *reinterpret_cast<Zenject::InjectTypeInfo::InjectConstructorInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InjectTypeInfo <BaseTypeInfo>k__BackingField
Zenject::InjectTypeInfo* Zenject::InjectTypeInfo::_get_$BaseTypeInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_get_$BaseTypeInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseTypeInfo>k__BackingField"))->offset;
  return *reinterpret_cast<Zenject::InjectTypeInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private Zenject.InjectTypeInfo <BaseTypeInfo>k__BackingField
void Zenject::InjectTypeInfo::_set_$BaseTypeInfo$k__BackingField(Zenject::InjectTypeInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::_set_$BaseTypeInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseTypeInfo>k__BackingField"))->offset;
  *reinterpret_cast<Zenject::InjectTypeInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: Zenject.InjectTypeInfo.get_BaseTypeInfo
Zenject::InjectTypeInfo* Zenject::InjectTypeInfo::get_BaseTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::get_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.set_BaseTypeInfo
void Zenject::InjectTypeInfo::set_BaseTypeInfo(Zenject::InjectTypeInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::set_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectTypeInfo.get_AllInjectables
System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::get_AllInjectables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::get_AllInjectables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllInjectables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__0
Zenject::InjectableInfo* Zenject::InjectTypeInfo::$get_AllInjectables$b__0(Zenject::InjectTypeInfo::InjectMemberInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::<get_AllInjectables>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectableInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__1
System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::$get_AllInjectables$b__1(Zenject::InjectTypeInfo::InjectMethodInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::<get_AllInjectables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectableInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenMemberSetterMethod Setter
Zenject::ZenMemberSetterMethod* Zenject::InjectTypeInfo::InjectMemberInfo::_get_Setter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMemberInfo::_get_Setter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Setter"))->offset;
  return *reinterpret_cast<Zenject::ZenMemberSetterMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.ZenMemberSetterMethod Setter
void Zenject::InjectTypeInfo::InjectMemberInfo::_set_Setter(Zenject::ZenMemberSetterMethod* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMemberInfo::_set_Setter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Setter"))->offset;
  *reinterpret_cast<Zenject::ZenMemberSetterMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo Info
Zenject::InjectableInfo* Zenject::InjectTypeInfo::InjectMemberInfo::_get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMemberInfo::_get_Info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Info"))->offset;
  return *reinterpret_cast<Zenject::InjectableInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectableInfo Info
void Zenject::InjectTypeInfo::InjectMemberInfo::_set_Info(Zenject::InjectableInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMemberInfo::_set_Info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Info"))->offset;
  *reinterpret_cast<Zenject::InjectableInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenFactoryMethod Factory
Zenject::ZenFactoryMethod* Zenject::InjectTypeInfo::InjectConstructorInfo::_get_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectConstructorInfo::_get_Factory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Factory"))->offset;
  return *reinterpret_cast<Zenject::ZenFactoryMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.ZenFactoryMethod Factory
void Zenject::InjectTypeInfo::InjectConstructorInfo::_set_Factory(Zenject::ZenFactoryMethod* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectConstructorInfo::_set_Factory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Factory"))->offset;
  *reinterpret_cast<Zenject::ZenFactoryMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo[] Parameters
::Array<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::InjectConstructorInfo::_get_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectConstructorInfo::_get_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::Array<Zenject::InjectableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectableInfo[] Parameters
void Zenject::InjectTypeInfo::InjectConstructorInfo::_set_Parameters(::Array<Zenject::InjectableInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectConstructorInfo::_set_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  *reinterpret_cast<::Array<Zenject::InjectableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String Name
::Il2CppString* Zenject::InjectTypeInfo::InjectMethodInfo::_get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_get_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.String Name
void Zenject::InjectTypeInfo::InjectMethodInfo::_set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_set_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenInjectMethod Action
Zenject::ZenInjectMethod* Zenject::InjectTypeInfo::InjectMethodInfo::_get_Action() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_get_Action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Action"))->offset;
  return *reinterpret_cast<Zenject::ZenInjectMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.ZenInjectMethod Action
void Zenject::InjectTypeInfo::InjectMethodInfo::_set_Action(Zenject::ZenInjectMethod* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_set_Action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Action"))->offset;
  *reinterpret_cast<Zenject::ZenInjectMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo[] Parameters
::Array<Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::InjectMethodInfo::_get_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_get_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::Array<Zenject::InjectableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly Zenject.InjectableInfo[] Parameters
void Zenject::InjectTypeInfo::InjectMethodInfo::_set_Parameters(::Array<Zenject::InjectableInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectTypeInfo::InjectMethodInfo::_set_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  *reinterpret_cast<::Array<Zenject::InjectableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IPoolable.OnDespawned
void Zenject::IPoolable::OnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPoolable::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.IPoolable.OnSpawned
void Zenject::IPoolable::OnSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPoolable::OnSpawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ITickable.Tick
void Zenject::ITickable::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ITickable::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IFixedTickable.FixedTick
void Zenject::IFixedTickable::FixedTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IFixedTickable::FixedTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateTickable.LateTick
void Zenject::ILateTickable::LateTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ILateTickable::LateTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateDisposable.LateDispose
void Zenject::ILateDisposable::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ILateDisposable::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CanBeNullAttribute
#include "JetBrains/Annotations/CanBeNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemNotNullAttribute
#include "JetBrains/Annotations/ItemNotNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemCanBeNullAttribute
#include "JetBrains/Annotations/ItemCanBeNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.StringFormatMethodAttribute
#include "JetBrains/Annotations/StringFormatMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <FormatParameterName>k__BackingField
::Il2CppString* JetBrains::Annotations::StringFormatMethodAttribute::_get_$FormatParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::_get_$FormatParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FormatParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <FormatParameterName>k__BackingField
void JetBrains::Annotations::StringFormatMethodAttribute::_set_$FormatParameterName$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::_set_$FormatParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FormatParameterName>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.get_FormatParameterName
::Il2CppString* JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.set_FormatParameterName
void JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.ValueProviderAttribute
#include "JetBrains/Annotations/ValueProviderAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
::Il2CppString* JetBrains::Annotations::ValueProviderAttribute::_get_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::_get_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Name>k__BackingField
void JetBrains::Annotations::ValueProviderAttribute::_set_$Name$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::_set_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.get_Name
::Il2CppString* JetBrains::Annotations::ValueProviderAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.set_Name
void JetBrains::Annotations::ValueProviderAttribute::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InvokerParameterNameAttribute
#include "JetBrains/Annotations/InvokerParameterNameAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute
#include "JetBrains/Annotations/NotifyPropertyChangedInvocatorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <ParameterName>k__BackingField
::Il2CppString* JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::_get_$ParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::_get_$ParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <ParameterName>k__BackingField
void JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::_set_$ParameterName$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::_set_$ParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParameterName>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.get_ParameterName
::Il2CppString* JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.set_ParameterName
void JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.ContractAnnotationAttribute
#include "JetBrains/Annotations/ContractAnnotationAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Contract>k__BackingField
::Il2CppString* JetBrains::Annotations::ContractAnnotationAttribute::_get_$Contract$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::_get_$Contract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Contract>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Contract>k__BackingField
void JetBrains::Annotations::ContractAnnotationAttribute::_set_$Contract$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::_set_$Contract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Contract>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ForceFullStates>k__BackingField
bool JetBrains::Annotations::ContractAnnotationAttribute::_get_$ForceFullStates$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::_get_$ForceFullStates$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForceFullStates>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <ForceFullStates>k__BackingField
void JetBrains::Annotations::ContractAnnotationAttribute::_set_$ForceFullStates$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::_set_$ForceFullStates$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForceFullStates>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_Contract
::Il2CppString* JetBrains::Annotations::ContractAnnotationAttribute::get_Contract() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_Contract
void JetBrains::Annotations::ContractAnnotationAttribute::set_Contract(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_ForceFullStates
bool JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_ForceFullStates
void JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LocalizationRequiredAttribute
#include "JetBrains/Annotations/LocalizationRequiredAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Required>k__BackingField
bool JetBrains::Annotations::LocalizationRequiredAttribute::_get_$Required$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::_get_$Required$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Required>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean <Required>k__BackingField
void JetBrains::Annotations::LocalizationRequiredAttribute::_set_$Required$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::_set_$Required$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Required>k__BackingField"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.get_Required
bool JetBrains::Annotations::LocalizationRequiredAttribute::get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::get_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.set_Required
void JetBrains::Annotations::LocalizationRequiredAttribute::set_Required(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::set_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CannotApplyEqualityOperatorAttribute
#include "JetBrains/Annotations/CannotApplyEqualityOperatorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.BaseTypeRequiredAttribute
#include "JetBrains/Annotations/BaseTypeRequiredAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <BaseType>k__BackingField
System::Type* JetBrains::Annotations::BaseTypeRequiredAttribute::_get_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::_get_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Type <BaseType>k__BackingField
void JetBrains::Annotations::BaseTypeRequiredAttribute::_set_$BaseType$k__BackingField(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::_set_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.get_BaseType
System::Type* JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.set_BaseType
void JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MeansImplicitUseAttribute
#include "JetBrains/Annotations/MeansImplicitUseAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::MeansImplicitUseAttribute::_get_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::_get_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::ImplicitUseKindFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField
void JetBrains::Annotations::MeansImplicitUseAttribute::_set_$UseKindFlags$k__BackingField(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::_set_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  *reinterpret_cast<JetBrains::Annotations::ImplicitUseKindFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::MeansImplicitUseAttribute::_get_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::_get_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<JetBrains::Annotations::ImplicitUseTargetFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField
void JetBrains::Annotations::MeansImplicitUseAttribute::_set_$TargetFlags$k__BackingField(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::_set_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  *reinterpret_cast<JetBrains::Annotations::ImplicitUseTargetFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_UseKindFlags
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::ImplicitUseKindFlags, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_UseKindFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_TargetFlags
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::ImplicitUseTargetFlags, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_TargetFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.PublicAPIAttribute
#include "JetBrains/Annotations/PublicAPIAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Comment>k__BackingField
::Il2CppString* JetBrains::Annotations::PublicAPIAttribute::_get_$Comment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::_get_$Comment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Comment>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Comment>k__BackingField
void JetBrains::Annotations::PublicAPIAttribute::_set_$Comment$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::_set_$Comment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Comment>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.get_Comment
::Il2CppString* JetBrains::Annotations::PublicAPIAttribute::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.set_Comment
void JetBrains::Annotations::PublicAPIAttribute::set_Comment(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InstantHandleAttribute
#include "JetBrains/Annotations/InstantHandleAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PureAttribute
#include "JetBrains/Annotations/PureAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.MustUseReturnValueAttribute
#include "JetBrains/Annotations/MustUseReturnValueAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Justification>k__BackingField
::Il2CppString* JetBrains::Annotations::MustUseReturnValueAttribute::_get_$Justification$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::_get_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Justification>k__BackingField
void JetBrains::Annotations::MustUseReturnValueAttribute::_set_$Justification$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::_set_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.get_Justification
::Il2CppString* JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.set_Justification
void JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ProvidesContextAttribute
#include "JetBrains/Annotations/ProvidesContextAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.PathReferenceAttribute
#include "JetBrains/Annotations/PathReferenceAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BasePath>k__BackingField
::Il2CppString* JetBrains::Annotations::PathReferenceAttribute::_get_$BasePath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::_get_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <BasePath>k__BackingField
void JetBrains::Annotations::PathReferenceAttribute::_set_$BasePath$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::_set_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.get_BasePath
::Il2CppString* JetBrains::Annotations::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.set_BasePath
void JetBrains::Annotations::PathReferenceAttribute::set_BasePath(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.SourceTemplateAttribute
#include "JetBrains/Annotations/SourceTemplateAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.MacroAttribute
#include "JetBrains/Annotations/MacroAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Expression>k__BackingField
::Il2CppString* JetBrains::Annotations::MacroAttribute::_get_$Expression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_get_$Expression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Expression>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Expression>k__BackingField
void JetBrains::Annotations::MacroAttribute::_set_$Expression$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_set_$Expression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Expression>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Editable>k__BackingField
int JetBrains::Annotations::MacroAttribute::_get_$Editable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_get_$Editable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Editable>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <Editable>k__BackingField
void JetBrains::Annotations::MacroAttribute::_set_$Editable$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_set_$Editable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Editable>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <Target>k__BackingField
::Il2CppString* JetBrains::Annotations::MacroAttribute::_get_$Target$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_get_$Target$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Target>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <Target>k__BackingField
void JetBrains::Annotations::MacroAttribute::_set_$Target$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::_set_$Target$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Target>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Expression
::Il2CppString* JetBrains::Annotations::MacroAttribute::get_Expression() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Expression
void JetBrains::Annotations::MacroAttribute::set_Expression(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Editable
int JetBrains::Annotations::MacroAttribute::get_Editable() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Editable
void JetBrains::Annotations::MacroAttribute::set_Editable(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Target
::Il2CppString* JetBrains::Annotations::MacroAttribute::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Target
void JetBrains::Annotations::MacroAttribute::set_Target(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
