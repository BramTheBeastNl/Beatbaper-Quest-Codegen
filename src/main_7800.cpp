// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Diagnostics.Process/StreamReadMode
#include "System/Diagnostics/Process.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/StreamReadMode undefined
System::Diagnostics::Process::StreamReadMode System::Diagnostics::Process::StreamReadMode::_get_undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_get_undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::StreamReadMode>("System.Diagnostics", "Process/StreamReadMode", "undefined"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/StreamReadMode undefined
void System::Diagnostics::Process::StreamReadMode::_set_undefined(System::Diagnostics::Process::StreamReadMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_set_undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/StreamReadMode", "undefined", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/StreamReadMode syncMode
System::Diagnostics::Process::StreamReadMode System::Diagnostics::Process::StreamReadMode::_get_syncMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_get_syncMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::StreamReadMode>("System.Diagnostics", "Process/StreamReadMode", "syncMode"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/StreamReadMode syncMode
void System::Diagnostics::Process::StreamReadMode::_set_syncMode(System::Diagnostics::Process::StreamReadMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_set_syncMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/StreamReadMode", "syncMode", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/StreamReadMode asyncMode
System::Diagnostics::Process::StreamReadMode System::Diagnostics::Process::StreamReadMode::_get_asyncMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_get_asyncMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::StreamReadMode>("System.Diagnostics", "Process/StreamReadMode", "asyncMode"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/StreamReadMode asyncMode
void System::Diagnostics::Process::StreamReadMode::_set_asyncMode(System::Diagnostics::Process::StreamReadMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::StreamReadMode::_set_asyncMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/StreamReadMode", "asyncMode", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Diagnostics.Process/State
#include "System/Diagnostics/Process_State.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State HaveId
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_HaveId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_HaveId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "HaveId"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State HaveId
void System::Diagnostics::Process::State::_set_HaveId(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_HaveId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "HaveId", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State IsLocal
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_IsLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_IsLocal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "IsLocal"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State IsLocal
void System::Diagnostics::Process::State::_set_IsLocal(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_IsLocal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "IsLocal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State IsNt
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_IsNt() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_IsNt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "IsNt"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State IsNt
void System::Diagnostics::Process::State::_set_IsNt(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_IsNt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "IsNt", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State HaveProcessInfo
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_HaveProcessInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_HaveProcessInfo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "HaveProcessInfo"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State HaveProcessInfo
void System::Diagnostics::Process::State::_set_HaveProcessInfo(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_HaveProcessInfo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "HaveProcessInfo", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State Exited
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_Exited() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_Exited");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "Exited"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State Exited
void System::Diagnostics::Process::State::_set_Exited(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_Exited");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "Exited", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State Associated
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_Associated() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_Associated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "Associated"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State Associated
void System::Diagnostics::Process::State::_set_Associated(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_Associated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "Associated", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State IsWin2k
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_IsWin2k() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_IsWin2k");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "IsWin2k"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State IsWin2k
void System::Diagnostics::Process::State::_set_IsWin2k(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_IsWin2k");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "IsWin2k", value));
}
// Autogenerated static field getter
// Get static field: static public System.Diagnostics.Process/State HaveNtProcessInfo
System::Diagnostics::Process::State System::Diagnostics::Process::State::_get_HaveNtProcessInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_get_HaveNtProcessInfo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Process::State>("System.Diagnostics", "Process/State", "HaveNtProcessInfo"));
}
// Autogenerated static field setter
// Set static field: static public System.Diagnostics.Process/State HaveNtProcessInfo
void System::Diagnostics::Process::State::_set_HaveNtProcessInfo(System::Diagnostics::Process::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Process::State::_set_HaveNtProcessInfo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Process/State", "HaveNtProcessInfo", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Diagnostics.ProcessThreadTimes
#include "System/Diagnostics/ProcessThreadTimes.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Diagnostics.ProcessThreadTimes.get_TotalProcessorTime
System::TimeSpan System::Diagnostics::ProcessThreadTimes::get_TotalProcessorTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::ProcessThreadTimes::get_TotalProcessorTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TotalProcessorTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ProcessThreadTimes::get_TotalProcessorTime
// Il2CppName: get_TotalProcessorTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TimeSpan (ProcessThreadTimes::*)()>(&ProcessThreadTimes::get_TotalProcessorTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), "get_TotalProcessorTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProcessThreadTimes::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessThreadTimes::*)()>(&ProcessThreadTimes::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessThreadTimes::*)()>(&ProcessThreadTimes::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Diagnostics.ProcessWaitHandle
#include "System/Diagnostics/ProcessWaitHandle.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeProcessHandle
#include "Microsoft/Win32/SafeHandles/SafeProcessHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ProcessWaitHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessWaitHandle::*)(Microsoft::Win32::SafeHandles::SafeProcessHandle*)>(&ProcessWaitHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProcessWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeProcessHandle*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessWaitHandle::*)(Microsoft::Win32::SafeHandles::SafeProcessHandle*)>(&ProcessWaitHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProcessWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::SafeHandles::SafeProcessHandle*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.DefaultTraceListener
#include "System/Diagnostics/DefaultTraceListener.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Boolean OnWin32
bool System::Diagnostics::DefaultTraceListener::_get_OnWin32() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_get_OnWin32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Diagnostics", "DefaultTraceListener", "OnWin32"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Boolean OnWin32
void System::Diagnostics::DefaultTraceListener::_set_OnWin32(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_set_OnWin32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "DefaultTraceListener", "OnWin32", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String MonoTracePrefix
::Il2CppString* System::Diagnostics::DefaultTraceListener::_get_MonoTracePrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_get_MonoTracePrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.Diagnostics", "DefaultTraceListener", "MonoTracePrefix"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String MonoTracePrefix
void System::Diagnostics::DefaultTraceListener::_set_MonoTracePrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_set_MonoTracePrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "DefaultTraceListener", "MonoTracePrefix", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String MonoTraceFile
::Il2CppString* System::Diagnostics::DefaultTraceListener::_get_MonoTraceFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_get_MonoTraceFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.Diagnostics", "DefaultTraceListener", "MonoTraceFile"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String MonoTraceFile
void System::Diagnostics::DefaultTraceListener::_set_MonoTraceFile(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::_set_MonoTraceFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "DefaultTraceListener", "MonoTraceFile", value));
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener..cctor
void System::Diagnostics::DefaultTraceListener::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Diagnostics", "DefaultTraceListener", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.GetPrefix
::Il2CppString* System::Diagnostics::DefaultTraceListener::GetPrefix(::Il2CppString* var, ::Il2CppString* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::GetPrefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Diagnostics", "DefaultTraceListener", "GetPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(var), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, var, target);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.get_LogFileName
::Il2CppString* System::Diagnostics::DefaultTraceListener::get_LogFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::get_LogFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LogFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteWindowsDebugString
void System::Diagnostics::DefaultTraceListener::WriteWindowsDebugString(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteWindowsDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Diagnostics", "DefaultTraceListener", "WriteWindowsDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteDebugString
void System::Diagnostics::DefaultTraceListener::WriteDebugString(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteMonoTrace
void System::Diagnostics::DefaultTraceListener::WriteMonoTrace(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteMonoTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMonoTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WritePrefix
void System::Diagnostics::DefaultTraceListener::WritePrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WritePrefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteImpl
void System::Diagnostics::DefaultTraceListener::WriteImpl(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteImpl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteLogFile
void System::Diagnostics::DefaultTraceListener::WriteLogFile(::Il2CppString* message, ::Il2CppString* logFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteLogFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLogFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logFile)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, logFile);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.Fail
void System::Diagnostics::DefaultTraceListener::Fail(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::Fail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.Fail
void System::Diagnostics::DefaultTraceListener::Fail(::Il2CppString* message, ::Il2CppString* detailMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::Fail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(detailMessage)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, detailMessage);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.Write
void System::Diagnostics::DefaultTraceListener::Write(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: System.Diagnostics.DefaultTraceListener.WriteLine
void System::Diagnostics::DefaultTraceListener::WriteLine(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::DefaultTraceListener::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: DefaultTraceListener::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DefaultTraceListener::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::GetPrefix
// Il2CppName: GetPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&DefaultTraceListener::GetPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "GetPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::get_LogFileName
// Il2CppName: get_LogFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DefaultTraceListener::*)()>(&DefaultTraceListener::get_LogFileName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "get_LogFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteWindowsDebugString
// Il2CppName: WriteWindowsDebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&DefaultTraceListener::WriteWindowsDebugString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteWindowsDebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteDebugString
// Il2CppName: WriteDebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::WriteDebugString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteDebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteMonoTrace
// Il2CppName: WriteMonoTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::WriteMonoTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteMonoTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WritePrefix
// Il2CppName: WritePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)()>(&DefaultTraceListener::WritePrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WritePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteImpl
// Il2CppName: WriteImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::WriteImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteLogFile
// Il2CppName: WriteLogFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*, ::Il2CppString*)>(&DefaultTraceListener::WriteLogFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteLogFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)()>(&DefaultTraceListener::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)()>(&DefaultTraceListener::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::Fail
// Il2CppName: Fail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::Fail)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "Fail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::Fail
// Il2CppName: Fail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*, ::Il2CppString*)>(&DefaultTraceListener::Fail)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "Fail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultTraceListener::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTraceListener::*)(::Il2CppString*)>(&DefaultTraceListener::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTraceListener*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.MonitoringDescriptionAttribute
#include "System/Diagnostics/MonitoringDescriptionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Diagnostics.MonitoringDescriptionAttribute.get_Description
::Il2CppString* System::Diagnostics::MonitoringDescriptionAttribute::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::MonitoringDescriptionAttribute::get_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonitoringDescriptionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonitoringDescriptionAttribute::*)(::Il2CppString*)>(&MonitoringDescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonitoringDescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonitoringDescriptionAttribute::*)(::Il2CppString*)>(&MonitoringDescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonitoringDescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonitoringDescriptionAttribute::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonitoringDescriptionAttribute::*)()>(&MonitoringDescriptionAttribute::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonitoringDescriptionAttribute*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Int64 Frequency
int64_t System::Diagnostics::Stopwatch::_get_Frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::_get_Frequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Diagnostics", "Stopwatch", "Frequency"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int64 Frequency
void System::Diagnostics::Stopwatch::_set_Frequency(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::_set_Frequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Stopwatch", "Frequency", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Boolean IsHighResolution
bool System::Diagnostics::Stopwatch::_get_IsHighResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::_get_IsHighResolution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Diagnostics", "Stopwatch", "IsHighResolution"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Boolean IsHighResolution
void System::Diagnostics::Stopwatch::_set_IsHighResolution(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::_set_IsHighResolution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Diagnostics", "Stopwatch", "IsHighResolution", value));
}
// Autogenerated method: System.Diagnostics.Stopwatch.GetTimestamp
int64_t System::Diagnostics::Stopwatch::GetTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::GetTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Diagnostics", "Stopwatch", "GetTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.get_Elapsed
System::TimeSpan System::Diagnostics::Stopwatch::get_Elapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::get_Elapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Elapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.get_ElapsedMilliseconds
int64_t System::Diagnostics::Stopwatch::get_ElapsedMilliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::get_ElapsedMilliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElapsedMilliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.get_ElapsedTicks
int64_t System::Diagnostics::Stopwatch::get_ElapsedTicks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::get_ElapsedTicks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElapsedTicks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.get_IsRunning
bool System::Diagnostics::Stopwatch::get_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::get_IsRunning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.Reset
void System::Diagnostics::Stopwatch::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.Start
void System::Diagnostics::Stopwatch::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch.Stop
void System::Diagnostics::Stopwatch::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Diagnostics.Stopwatch..cctor
void System::Diagnostics::Stopwatch::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Stopwatch::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Diagnostics", "Stopwatch", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Stopwatch::GetTimestamp
// Il2CppName: GetTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&Stopwatch::GetTimestamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "GetTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::get_Elapsed
// Il2CppName: get_Elapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TimeSpan (Stopwatch::*)()>(&Stopwatch::get_Elapsed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "get_Elapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::get_ElapsedMilliseconds
// Il2CppName: get_ElapsedMilliseconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stopwatch::*)()>(&Stopwatch::get_ElapsedMilliseconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "get_ElapsedMilliseconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::get_ElapsedTicks
// Il2CppName: get_ElapsedTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stopwatch::*)()>(&Stopwatch::get_ElapsedTicks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "get_ElapsedTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stopwatch::*)()>(&Stopwatch::get_IsRunning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stopwatch::*)()>(&Stopwatch::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stopwatch::*)()>(&Stopwatch::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stopwatch::*)()>(&Stopwatch::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Stopwatch::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stopwatch::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stopwatch::*)()>(&Stopwatch::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stopwatch::*)()>(&Stopwatch::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stopwatch*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.ArrayConverter
#include "System/ComponentModel/ArrayConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ArrayConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArrayConverter::*)()>(&ArrayConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArrayConverter::*)()>(&ArrayConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.BooleanConverter
#include "System/ComponentModel/BooleanConverter.hpp"
// Including type: System.ComponentModel.TypeConverter/StandardValuesCollection
#include "System/ComponentModel/TypeConverter_StandardValuesCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.ComponentModel.TypeConverter/StandardValuesCollection values
System::ComponentModel::TypeConverter::StandardValuesCollection* System::ComponentModel::BooleanConverter::_get_values() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BooleanConverter::_get_values");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::TypeConverter::StandardValuesCollection*>("System.ComponentModel", "BooleanConverter", "values"));
}
// Autogenerated static field setter
// Set static field: static private System.ComponentModel.TypeConverter/StandardValuesCollection values
void System::ComponentModel::BooleanConverter::_set_values(System::ComponentModel::TypeConverter::StandardValuesCollection* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BooleanConverter::_set_values");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "BooleanConverter", "values", value));
}
// Writing MetadataGetter for method: BooleanConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BooleanConverter::*)()>(&BooleanConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BooleanConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BooleanConverter::*)()>(&BooleanConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BooleanConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.BrowsableAttribute
#include "System/ComponentModel/BrowsableAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.BrowsableAttribute Yes
System::ComponentModel::BrowsableAttribute* System::ComponentModel::BrowsableAttribute::_get_Yes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_get_Yes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::BrowsableAttribute*>("System.ComponentModel", "BrowsableAttribute", "Yes"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.BrowsableAttribute Yes
void System::ComponentModel::BrowsableAttribute::_set_Yes(System::ComponentModel::BrowsableAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_set_Yes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "BrowsableAttribute", "Yes", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.BrowsableAttribute No
System::ComponentModel::BrowsableAttribute* System::ComponentModel::BrowsableAttribute::_get_No() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_get_No");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::BrowsableAttribute*>("System.ComponentModel", "BrowsableAttribute", "No"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.BrowsableAttribute No
void System::ComponentModel::BrowsableAttribute::_set_No(System::ComponentModel::BrowsableAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_set_No");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "BrowsableAttribute", "No", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.BrowsableAttribute Default
System::ComponentModel::BrowsableAttribute* System::ComponentModel::BrowsableAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::BrowsableAttribute*>("System.ComponentModel", "BrowsableAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.BrowsableAttribute Default
void System::ComponentModel::BrowsableAttribute::_set_Default(System::ComponentModel::BrowsableAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "BrowsableAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.BrowsableAttribute.get_Browsable
bool System::ComponentModel::BrowsableAttribute::get_Browsable() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::get_Browsable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Browsable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.BrowsableAttribute..cctor
void System::ComponentModel::BrowsableAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "BrowsableAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.BrowsableAttribute.Equals
bool System::ComponentModel::BrowsableAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.BrowsableAttribute.GetHashCode
int System::ComponentModel::BrowsableAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::BrowsableAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BrowsableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BrowsableAttribute::*)(bool)>(&BrowsableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BrowsableAttribute::*)(bool)>(&BrowsableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BrowsableAttribute::get_Browsable
// Il2CppName: get_Browsable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BrowsableAttribute::*)()>(&BrowsableAttribute::get_Browsable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), "get_Browsable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BrowsableAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BrowsableAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BrowsableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BrowsableAttribute::*)(::Il2CppObject*)>(&BrowsableAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BrowsableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BrowsableAttribute::*)()>(&BrowsableAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.CollectionConverter
#include "System/ComponentModel/CollectionConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CollectionConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionConverter::*)()>(&CollectionConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionConverter::*)()>(&CollectionConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.Component
#include "System/ComponentModel/Component.hpp"
// Including type: System.ComponentModel.ISite
#include "System/ComponentModel/ISite.hpp"
// Including type: System.ComponentModel.EventHandlerList
#include "System/ComponentModel/EventHandlerList.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Object EventDisposed
::Il2CppObject* System::ComponentModel::Component::_get_EventDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::_get_EventDisposed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.ComponentModel", "Component", "EventDisposed"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object EventDisposed
void System::ComponentModel::Component::_set_EventDisposed(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::_set_EventDisposed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "Component", "EventDisposed", value));
}
// Autogenerated method: System.ComponentModel.Component.get_CanRaiseEvents
bool System::ComponentModel::Component::get_CanRaiseEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::get_CanRaiseEvents");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRaiseEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component.get_CanRaiseEventsInternal
bool System::ComponentModel::Component::get_CanRaiseEventsInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::get_CanRaiseEventsInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRaiseEventsInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component.Dispose
void System::ComponentModel::Component::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component.Dispose
void System::ComponentModel::Component::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.ComponentModel.Component.GetService
::Il2CppObject* System::ComponentModel::Component::GetService(System::Type* service) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::GetService");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(service)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, service);
}
// Autogenerated method: System.ComponentModel.Component.get_DesignMode
bool System::ComponentModel::Component::get_DesignMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::get_DesignMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DesignMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component..cctor
void System::ComponentModel::Component::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "Component", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component.Finalize
void System::ComponentModel::Component::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Component.ToString
::Il2CppString* System::ComponentModel::Component::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Component::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Component::get_CanRaiseEvents
// Il2CppName: get_CanRaiseEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Component::*)()>(&Component::get_CanRaiseEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_CanRaiseEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::get_CanRaiseEventsInternal
// Il2CppName: get_CanRaiseEventsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Component::*)()>(&Component::get_CanRaiseEventsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_CanRaiseEventsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)(bool)>(&Component::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Component::GetService
// Il2CppName: GetService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Component::*)(System::Type*)>(&Component::GetService)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Component::get_DesignMode
// Il2CppName: get_DesignMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Component::*)()>(&Component::get_DesignMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_DesignMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Component::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Component::*)()>(&Component::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.DecimalConverter
#include "System/ComponentModel/DecimalConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DecimalConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DecimalConverter::*)()>(&DecimalConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DecimalConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DecimalConverter::*)()>(&DecimalConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DecimalConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DefaultEventAttribute
#include "System/ComponentModel/DefaultEventAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DefaultEventAttribute Default
System::ComponentModel::DefaultEventAttribute* System::ComponentModel::DefaultEventAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DefaultEventAttribute*>("System.ComponentModel", "DefaultEventAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DefaultEventAttribute Default
void System::ComponentModel::DefaultEventAttribute::_set_Default(System::ComponentModel::DefaultEventAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DefaultEventAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.DefaultEventAttribute.get_Name
::Il2CppString* System::ComponentModel::DefaultEventAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DefaultEventAttribute..cctor
void System::ComponentModel::DefaultEventAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DefaultEventAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DefaultEventAttribute.Equals
bool System::ComponentModel::DefaultEventAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DefaultEventAttribute.GetHashCode
int System::ComponentModel::DefaultEventAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultEventAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DefaultEventAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultEventAttribute::*)(::Il2CppString*)>(&DefaultEventAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultEventAttribute::*)(::Il2CppString*)>(&DefaultEventAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultEventAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DefaultEventAttribute::*)()>(&DefaultEventAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultEventAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DefaultEventAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultEventAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultEventAttribute::*)(::Il2CppObject*)>(&DefaultEventAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DefaultEventAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DefaultEventAttribute::*)()>(&DefaultEventAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultEventAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DefaultPropertyAttribute
#include "System/ComponentModel/DefaultPropertyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DefaultPropertyAttribute Default
System::ComponentModel::DefaultPropertyAttribute* System::ComponentModel::DefaultPropertyAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DefaultPropertyAttribute*>("System.ComponentModel", "DefaultPropertyAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DefaultPropertyAttribute Default
void System::ComponentModel::DefaultPropertyAttribute::_set_Default(System::ComponentModel::DefaultPropertyAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DefaultPropertyAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.DefaultPropertyAttribute.get_Name
::Il2CppString* System::ComponentModel::DefaultPropertyAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DefaultPropertyAttribute..cctor
void System::ComponentModel::DefaultPropertyAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DefaultPropertyAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DefaultPropertyAttribute.Equals
bool System::ComponentModel::DefaultPropertyAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DefaultPropertyAttribute.GetHashCode
int System::ComponentModel::DefaultPropertyAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultPropertyAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DefaultPropertyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultPropertyAttribute::*)(::Il2CppString*)>(&DefaultPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultPropertyAttribute::*)(::Il2CppString*)>(&DefaultPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultPropertyAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DefaultPropertyAttribute::*)()>(&DefaultPropertyAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultPropertyAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DefaultPropertyAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultPropertyAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultPropertyAttribute::*)(::Il2CppObject*)>(&DefaultPropertyAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DefaultPropertyAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DefaultPropertyAttribute::*)()>(&DefaultPropertyAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultPropertyAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DefaultValueAttribute
#include "System/ComponentModel/DefaultValueAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.DefaultValueAttribute.get_Value
::Il2CppObject* System::ComponentModel::DefaultValueAttribute::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultValueAttribute::get_Value");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DefaultValueAttribute.Equals
bool System::ComponentModel::DefaultValueAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultValueAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DefaultValueAttribute.GetHashCode
int System::ComponentModel::DefaultValueAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DefaultValueAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DefaultValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(bool)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(bool)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppString*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppString*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppObject*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppObject*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DefaultValueAttribute::*)()>(&DefaultValueAttribute::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultValueAttribute::*)(::Il2CppObject*)>(&DefaultValueAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DefaultValueAttribute::*)()>(&DefaultValueAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DescriptionAttribute
#include "System/ComponentModel/DescriptionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DescriptionAttribute Default
System::ComponentModel::DescriptionAttribute* System::ComponentModel::DescriptionAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DescriptionAttribute*>("System.ComponentModel", "DescriptionAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DescriptionAttribute Default
void System::ComponentModel::DescriptionAttribute::_set_Default(System::ComponentModel::DescriptionAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DescriptionAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.DescriptionAttribute.get_Description
::Il2CppString* System::ComponentModel::DescriptionAttribute::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::get_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DescriptionAttribute.get_DescriptionValue
::Il2CppString* System::ComponentModel::DescriptionAttribute::get_DescriptionValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::get_DescriptionValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DescriptionValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DescriptionAttribute..cctor
void System::ComponentModel::DescriptionAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DescriptionAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DescriptionAttribute.Equals
bool System::ComponentModel::DescriptionAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DescriptionAttribute.GetHashCode
int System::ComponentModel::DescriptionAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DescriptionAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DescriptionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DescriptionAttribute::*)(::Il2CppString*)>(&DescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DescriptionAttribute::*)(::Il2CppString*)>(&DescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DescriptionAttribute::*)()>(&DescriptionAttribute::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::get_DescriptionValue
// Il2CppName: get_DescriptionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DescriptionAttribute::*)()>(&DescriptionAttribute::get_DescriptionValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), "get_DescriptionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DescriptionAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DescriptionAttribute::*)()>(&DescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DescriptionAttribute::*)()>(&DescriptionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DescriptionAttribute::*)(::Il2CppObject*)>(&DescriptionAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DescriptionAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DescriptionAttribute::*)()>(&DescriptionAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DescriptionAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DesignerAttribute
#include "System/ComponentModel/DesignerAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.DesignerAttribute.Equals
bool System::ComponentModel::DesignerAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DesignerAttribute.GetHashCode
int System::ComponentModel::DesignerAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DesignerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerAttribute::*)(::Il2CppString*)>(&DesignerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerAttribute::*)(::Il2CppString*)>(&DesignerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DesignerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerAttribute::*)(::Il2CppString*, System::Type*)>(&DesignerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerAttribute::*)(::Il2CppString*, System::Type*)>(&DesignerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: DesignerAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DesignerAttribute::*)(::Il2CppObject*)>(&DesignerAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DesignerAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DesignerAttribute::*)()>(&DesignerAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DesignerCategoryAttribute
#include "System/ComponentModel/DesignerCategoryAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Component
System::ComponentModel::DesignerCategoryAttribute* System::ComponentModel::DesignerCategoryAttribute::_get_Component() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_get_Component");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerCategoryAttribute*>("System.ComponentModel", "DesignerCategoryAttribute", "Component"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Component
void System::ComponentModel::DesignerCategoryAttribute::_set_Component(System::ComponentModel::DesignerCategoryAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_set_Component");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerCategoryAttribute", "Component", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Default
System::ComponentModel::DesignerCategoryAttribute* System::ComponentModel::DesignerCategoryAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerCategoryAttribute*>("System.ComponentModel", "DesignerCategoryAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Default
void System::ComponentModel::DesignerCategoryAttribute::_set_Default(System::ComponentModel::DesignerCategoryAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerCategoryAttribute", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Form
System::ComponentModel::DesignerCategoryAttribute* System::ComponentModel::DesignerCategoryAttribute::_get_Form() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_get_Form");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerCategoryAttribute*>("System.ComponentModel", "DesignerCategoryAttribute", "Form"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Form
void System::ComponentModel::DesignerCategoryAttribute::_set_Form(System::ComponentModel::DesignerCategoryAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_set_Form");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerCategoryAttribute", "Form", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Generic
System::ComponentModel::DesignerCategoryAttribute* System::ComponentModel::DesignerCategoryAttribute::_get_Generic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_get_Generic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerCategoryAttribute*>("System.ComponentModel", "DesignerCategoryAttribute", "Generic"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerCategoryAttribute Generic
void System::ComponentModel::DesignerCategoryAttribute::_set_Generic(System::ComponentModel::DesignerCategoryAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::_set_Generic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerCategoryAttribute", "Generic", value));
}
// Autogenerated method: System.ComponentModel.DesignerCategoryAttribute..cctor
void System::ComponentModel::DesignerCategoryAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DesignerCategoryAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DesignerCategoryAttribute.Equals
bool System::ComponentModel::DesignerCategoryAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DesignerCategoryAttribute.GetHashCode
int System::ComponentModel::DesignerCategoryAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerCategoryAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DesignerCategoryAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerCategoryAttribute::*)(::Il2CppString*)>(&DesignerCategoryAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerCategoryAttribute::*)(::Il2CppString*)>(&DesignerCategoryAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DesignerCategoryAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DesignerCategoryAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DesignerCategoryAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerCategoryAttribute::*)()>(&DesignerCategoryAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerCategoryAttribute::*)()>(&DesignerCategoryAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DesignerCategoryAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DesignerCategoryAttribute::*)(::Il2CppObject*)>(&DesignerCategoryAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DesignerCategoryAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DesignerCategoryAttribute::*)()>(&DesignerCategoryAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerCategoryAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.DesignerSerializationVisibility
#include "System/ComponentModel/DesignerSerializationVisibility.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.DesignerSerializationVisibility Hidden
System::ComponentModel::DesignerSerializationVisibility System::ComponentModel::DesignerSerializationVisibility::_get_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_get_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibility>("System.ComponentModel", "DesignerSerializationVisibility", "Hidden"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.DesignerSerializationVisibility Hidden
void System::ComponentModel::DesignerSerializationVisibility::_set_Hidden(System::ComponentModel::DesignerSerializationVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_set_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibility", "Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.DesignerSerializationVisibility Visible
System::ComponentModel::DesignerSerializationVisibility System::ComponentModel::DesignerSerializationVisibility::_get_Visible() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_get_Visible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibility>("System.ComponentModel", "DesignerSerializationVisibility", "Visible"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.DesignerSerializationVisibility Visible
void System::ComponentModel::DesignerSerializationVisibility::_set_Visible(System::ComponentModel::DesignerSerializationVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_set_Visible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibility", "Visible", value));
}
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.DesignerSerializationVisibility Content
System::ComponentModel::DesignerSerializationVisibility System::ComponentModel::DesignerSerializationVisibility::_get_Content() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_get_Content");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibility>("System.ComponentModel", "DesignerSerializationVisibility", "Content"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.DesignerSerializationVisibility Content
void System::ComponentModel::DesignerSerializationVisibility::_set_Content(System::ComponentModel::DesignerSerializationVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibility::_set_Content");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibility", "Content", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DesignerSerializationVisibilityAttribute
#include "System/ComponentModel/DesignerSerializationVisibilityAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Content
System::ComponentModel::DesignerSerializationVisibilityAttribute* System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Content() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Content");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibilityAttribute*>("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Content"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Content
void System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Content(System::ComponentModel::DesignerSerializationVisibilityAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Content");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Content", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Hidden
System::ComponentModel::DesignerSerializationVisibilityAttribute* System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibilityAttribute*>("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Hidden"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Hidden
void System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Hidden(System::ComponentModel::DesignerSerializationVisibilityAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Visible
System::ComponentModel::DesignerSerializationVisibilityAttribute* System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Visible() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Visible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibilityAttribute*>("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Visible"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Visible
void System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Visible(System::ComponentModel::DesignerSerializationVisibilityAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Visible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Visible", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Default
System::ComponentModel::DesignerSerializationVisibilityAttribute* System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DesignerSerializationVisibilityAttribute*>("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Default
void System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Default(System::ComponentModel::DesignerSerializationVisibilityAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DesignerSerializationVisibilityAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.DesignerSerializationVisibilityAttribute.get_Visibility
System::ComponentModel::DesignerSerializationVisibility System::ComponentModel::DesignerSerializationVisibilityAttribute::get_Visibility() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::get_Visibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Visibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::ComponentModel::DesignerSerializationVisibility, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DesignerSerializationVisibilityAttribute..cctor
void System::ComponentModel::DesignerSerializationVisibilityAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DesignerSerializationVisibilityAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals
bool System::ComponentModel::DesignerSerializationVisibilityAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode
int System::ComponentModel::DesignerSerializationVisibilityAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DesignerSerializationVisibilityAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DesignerSerializationVisibilityAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerSerializationVisibilityAttribute::*)(System::ComponentModel::DesignerSerializationVisibility)>(&DesignerSerializationVisibilityAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ComponentModel::DesignerSerializationVisibility>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesignerSerializationVisibilityAttribute::*)(System::ComponentModel::DesignerSerializationVisibility)>(&DesignerSerializationVisibilityAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ComponentModel::DesignerSerializationVisibility>()});
  }
};
// Writing MetadataGetter for method: DesignerSerializationVisibilityAttribute::get_Visibility
// Il2CppName: get_Visibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::ComponentModel::DesignerSerializationVisibility (DesignerSerializationVisibilityAttribute::*)()>(&DesignerSerializationVisibilityAttribute::get_Visibility)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), "get_Visibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DesignerSerializationVisibilityAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DesignerSerializationVisibilityAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DesignerSerializationVisibilityAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DesignerSerializationVisibilityAttribute::*)(::Il2CppObject*)>(&DesignerSerializationVisibilityAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DesignerSerializationVisibilityAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DesignerSerializationVisibilityAttribute::*)()>(&DesignerSerializationVisibilityAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesignerSerializationVisibilityAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.DisplayNameAttribute
#include "System/ComponentModel/DisplayNameAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.DisplayNameAttribute Default
System::ComponentModel::DisplayNameAttribute* System::ComponentModel::DisplayNameAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::DisplayNameAttribute*>("System.ComponentModel", "DisplayNameAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.DisplayNameAttribute Default
void System::ComponentModel::DisplayNameAttribute::_set_Default(System::ComponentModel::DisplayNameAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "DisplayNameAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.DisplayNameAttribute.get_DisplayName
::Il2CppString* System::ComponentModel::DisplayNameAttribute::get_DisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::get_DisplayName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DisplayNameAttribute.get_DisplayNameValue
::Il2CppString* System::ComponentModel::DisplayNameAttribute::get_DisplayNameValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::get_DisplayNameValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayNameValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.DisplayNameAttribute..cctor
void System::ComponentModel::DisplayNameAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "DisplayNameAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.DisplayNameAttribute.Equals
bool System::ComponentModel::DisplayNameAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.DisplayNameAttribute.GetHashCode
int System::ComponentModel::DisplayNameAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::DisplayNameAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DisplayNameAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisplayNameAttribute::*)(::Il2CppString*)>(&DisplayNameAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisplayNameAttribute::*)(::Il2CppString*)>(&DisplayNameAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DisplayNameAttribute::*)()>(&DisplayNameAttribute::get_DisplayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::get_DisplayNameValue
// Il2CppName: get_DisplayNameValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DisplayNameAttribute::*)()>(&DisplayNameAttribute::get_DisplayNameValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), "get_DisplayNameValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DisplayNameAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisplayNameAttribute::*)()>(&DisplayNameAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisplayNameAttribute::*)()>(&DisplayNameAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisplayNameAttribute::*)(::Il2CppObject*)>(&DisplayNameAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DisplayNameAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DisplayNameAttribute::*)()>(&DisplayNameAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisplayNameAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.DoubleConverter
#include "System/ComponentModel/DoubleConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DoubleConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoubleConverter::*)()>(&DoubleConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoubleConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoubleConverter::*)()>(&DoubleConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoubleConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.EditorBrowsableAttribute
#include "System/ComponentModel/EditorBrowsableAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.EditorBrowsableAttribute.Equals
bool System::ComponentModel::EditorBrowsableAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.EditorBrowsableAttribute.GetHashCode
int System::ComponentModel::EditorBrowsableAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EditorBrowsableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditorBrowsableAttribute::*)(System::ComponentModel::EditorBrowsableState)>(&EditorBrowsableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditorBrowsableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ComponentModel::EditorBrowsableState>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditorBrowsableAttribute::*)(System::ComponentModel::EditorBrowsableState)>(&EditorBrowsableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditorBrowsableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ComponentModel::EditorBrowsableState>()});
  }
};
// Writing MetadataGetter for method: EditorBrowsableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EditorBrowsableAttribute::*)(::Il2CppObject*)>(&EditorBrowsableAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditorBrowsableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: EditorBrowsableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (EditorBrowsableAttribute::*)()>(&EditorBrowsableAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditorBrowsableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.EditorBrowsableState
#include "System/ComponentModel/EditorBrowsableState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.EditorBrowsableState Always
System::ComponentModel::EditorBrowsableState System::ComponentModel::EditorBrowsableState::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::EditorBrowsableState>("System.ComponentModel", "EditorBrowsableState", "Always"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.EditorBrowsableState Always
void System::ComponentModel::EditorBrowsableState::_set_Always(System::ComponentModel::EditorBrowsableState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "EditorBrowsableState", "Always", value));
}
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.EditorBrowsableState Never
System::ComponentModel::EditorBrowsableState System::ComponentModel::EditorBrowsableState::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::EditorBrowsableState>("System.ComponentModel", "EditorBrowsableState", "Never"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.EditorBrowsableState Never
void System::ComponentModel::EditorBrowsableState::_set_Never(System::ComponentModel::EditorBrowsableState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "EditorBrowsableState", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public System.ComponentModel.EditorBrowsableState Advanced
System::ComponentModel::EditorBrowsableState System::ComponentModel::EditorBrowsableState::_get_Advanced() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_get_Advanced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::EditorBrowsableState>("System.ComponentModel", "EditorBrowsableState", "Advanced"));
}
// Autogenerated static field setter
// Set static field: static public System.ComponentModel.EditorBrowsableState Advanced
void System::ComponentModel::EditorBrowsableState::_set_Advanced(System::ComponentModel::EditorBrowsableState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EditorBrowsableState::_set_Advanced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "EditorBrowsableState", "Advanced", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.EnumConverter
#include "System/ComponentModel/EnumConverter.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.ComponentModel.TypeConverter/StandardValuesCollection
#include "System/ComponentModel/TypeConverter_StandardValuesCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: EnumConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumConverter::*)(System::Type*)>(&EnumConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumConverter::*)(System::Type*)>(&EnumConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.EventHandlerList
#include "System/ComponentModel/EventHandlerList.hpp"
// Including type: System.ComponentModel.EventHandlerList/ListEntry
#include "System/ComponentModel/EventHandlerList_ListEntry.hpp"
// Including type: System.ComponentModel.Component
#include "System/ComponentModel/Component.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.EventHandlerList.get_Item
System::Delegate* System::ComponentModel::EventHandlerList::get_Item(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EventHandlerList::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::Delegate*, false>(this, ___internal__method, key);
}
// Autogenerated method: System.ComponentModel.EventHandlerList.Find
System::ComponentModel::EventHandlerList::ListEntry* System::ComponentModel::EventHandlerList::Find(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::EventHandlerList::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::ComponentModel::EventHandlerList::ListEntry*, false>(this, ___internal__method, key);
}
// Writing MetadataGetter for method: EventHandlerList::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Delegate* (EventHandlerList::*)(::Il2CppObject*)>(&EventHandlerList::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventHandlerList*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: EventHandlerList::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::ComponentModel::EventHandlerList::ListEntry* (EventHandlerList::*)(::Il2CppObject*)>(&EventHandlerList::Find)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventHandlerList*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.IContainer
#include "System/ComponentModel/IContainer.hpp"
// Including type: System.ComponentModel.IComponent
#include "System/ComponentModel/IComponent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.IContainer.Remove
void System::ComponentModel::IContainer::Remove(System::ComponentModel::IComponent* component) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::IContainer::Remove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, component);
}
// Writing MetadataGetter for method: IContainer::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IContainer::*)(System::ComponentModel::IComponent*)>(&IContainer::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IContainer*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ComponentModel::IComponent*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.ISite
#include "System/ComponentModel/ISite.hpp"
// Including type: System.ComponentModel.IContainer
#include "System/ComponentModel/IContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.ISite.get_Container
System::ComponentModel::IContainer* System::ComponentModel::ISite::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ISite::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::ComponentModel::IContainer*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.ISite.get_DesignMode
bool System::ComponentModel::ISite::get_DesignMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ISite::get_DesignMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DesignMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.ISite.get_Name
::Il2CppString* System::ComponentModel::ISite::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ISite::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ISite::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::ComponentModel::IContainer* (ISite::*)()>(&ISite::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISite*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ISite::get_DesignMode
// Il2CppName: get_DesignMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ISite::*)()>(&ISite::get_DesignMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISite*), "get_DesignMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ISite::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ISite::*)()>(&ISite::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISite*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.ISynchronizeInvoke
#include "System/ComponentModel/ISynchronizeInvoke.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.ISynchronizeInvoke.get_InvokeRequired
bool System::ComponentModel::ISynchronizeInvoke::get_InvokeRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ISynchronizeInvoke::get_InvokeRequired");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InvokeRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.ISynchronizeInvoke.BeginInvoke
System::IAsyncResult* System::ComponentModel::ISynchronizeInvoke::BeginInvoke(System::Delegate* method, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ISynchronizeInvoke::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, method, args);
}
// Writing MetadataGetter for method: ISynchronizeInvoke::get_InvokeRequired
// Il2CppName: get_InvokeRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ISynchronizeInvoke::*)()>(&ISynchronizeInvoke::get_InvokeRequired)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISynchronizeInvoke*), "get_InvokeRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ISynchronizeInvoke::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ISynchronizeInvoke::*)(System::Delegate*, ::Array<::Il2CppObject*>*)>(&ISynchronizeInvoke::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISynchronizeInvoke*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.Int16Converter
#include "System/ComponentModel/Int16Converter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Int16Converter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int16Converter::*)()>(&Int16Converter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int16Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int16Converter::*)()>(&Int16Converter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int16Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.Int32Converter
#include "System/ComponentModel/Int32Converter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Int32Converter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int32Converter::*)()>(&Int32Converter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int32Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int32Converter::*)()>(&Int32Converter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int32Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.Int64Converter
#include "System/ComponentModel/Int64Converter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Int64Converter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int64Converter::*)()>(&Int64Converter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int64Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Int64Converter::*)()>(&Int64Converter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Int64Converter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.ReferenceConverter
#include "System/ComponentModel/ReferenceConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String none
::Il2CppString* System::ComponentModel::ReferenceConverter::_get_none() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ReferenceConverter::_get_none");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.ComponentModel", "ReferenceConverter", "none"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String none
void System::ComponentModel::ReferenceConverter::_set_none(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ReferenceConverter::_set_none");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "ReferenceConverter", "none", value));
}
// Autogenerated method: System.ComponentModel.ReferenceConverter..cctor
void System::ComponentModel::ReferenceConverter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::ReferenceConverter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "ReferenceConverter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ReferenceConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ReferenceConverter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReferenceConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.SingleConverter
#include "System/ComponentModel/SingleConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SingleConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleConverter::*)()>(&SingleConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleConverter::*)()>(&SingleConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.StringConverter
#include "System/ComponentModel/StringConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: StringConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringConverter::*)()>(&StringConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringConverter::*)()>(&StringConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.TimeSpanConverter
#include "System/ComponentModel/TimeSpanConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TimeSpanConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeSpanConverter::*)()>(&TimeSpanConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeSpanConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeSpanConverter::*)()>(&TimeSpanConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeSpanConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.TypeConverter
#include "System/ComponentModel/TypeConverter.hpp"
// Including type: System.ComponentModel.TypeConverter/StandardValuesCollection
#include "System/ComponentModel/TypeConverter_StandardValuesCollection.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String s_UseCompatibleTypeConverterBehavior
::Il2CppString* System::ComponentModel::TypeConverter::_get_s_UseCompatibleTypeConverterBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverter::_get_s_UseCompatibleTypeConverterBehavior");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.ComponentModel", "TypeConverter", "s_UseCompatibleTypeConverterBehavior"));
}
// Autogenerated static field setter
// Set static field: static private System.String s_UseCompatibleTypeConverterBehavior
void System::ComponentModel::TypeConverter::_set_s_UseCompatibleTypeConverterBehavior(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverter::_set_s_UseCompatibleTypeConverterBehavior");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "TypeConverter", "s_UseCompatibleTypeConverterBehavior", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean useCompatibleTypeConversion
bool System::ComponentModel::TypeConverter::_get_useCompatibleTypeConversion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverter::_get_useCompatibleTypeConversion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.ComponentModel", "TypeConverter", "useCompatibleTypeConversion"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean useCompatibleTypeConversion
void System::ComponentModel::TypeConverter::_set_useCompatibleTypeConversion(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverter::_set_useCompatibleTypeConversion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "TypeConverter", "useCompatibleTypeConversion", value));
}
// Writing MetadataGetter for method: TypeConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverter::*)()>(&TypeConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverter::*)()>(&TypeConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.TypeConverterAttribute
#include "System/ComponentModel/TypeConverterAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.ComponentModel.TypeConverterAttribute Default
System::ComponentModel::TypeConverterAttribute* System::ComponentModel::TypeConverterAttribute::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::ComponentModel::TypeConverterAttribute*>("System.ComponentModel", "TypeConverterAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.ComponentModel.TypeConverterAttribute Default
void System::ComponentModel::TypeConverterAttribute::_set_Default(System::ComponentModel::TypeConverterAttribute* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "TypeConverterAttribute", "Default", value));
}
// Autogenerated method: System.ComponentModel.TypeConverterAttribute.get_ConverterTypeName
::Il2CppString* System::ComponentModel::TypeConverterAttribute::get_ConverterTypeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::get_ConverterTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConverterTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.TypeConverterAttribute..cctor
void System::ComponentModel::TypeConverterAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "TypeConverterAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.TypeConverterAttribute.Equals
bool System::ComponentModel::TypeConverterAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.ComponentModel.TypeConverterAttribute.GetHashCode
int System::ComponentModel::TypeConverterAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::TypeConverterAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TypeConverterAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverterAttribute::*)(System::Type*)>(&TypeConverterAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverterAttribute::*)(System::Type*)>(&TypeConverterAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeConverterAttribute::get_ConverterTypeName
// Il2CppName: get_ConverterTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeConverterAttribute::*)()>(&TypeConverterAttribute::get_ConverterTypeName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), "get_ConverterTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeConverterAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TypeConverterAttribute::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeConverterAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverterAttribute::*)()>(&TypeConverterAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeConverterAttribute::*)()>(&TypeConverterAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeConverterAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeConverterAttribute::*)(::Il2CppObject*)>(&TypeConverterAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TypeConverterAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TypeConverterAttribute::*)()>(&TypeConverterAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeConverterAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.Win32Exception
#include "System/ComponentModel/Win32Exception.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean s_ErrorMessagesInitialized
bool System::ComponentModel::Win32Exception::_get_s_ErrorMessagesInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::_get_s_ErrorMessagesInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.ComponentModel", "Win32Exception", "s_ErrorMessagesInitialized"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean s_ErrorMessagesInitialized
void System::ComponentModel::Win32Exception::_set_s_ErrorMessagesInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::_set_s_ErrorMessagesInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "Win32Exception", "s_ErrorMessagesInitialized", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> s_ErrorMessage
System::Collections::Generic::Dictionary_2<int, ::Il2CppString*>* System::ComponentModel::Win32Exception::_get_s_ErrorMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::_get_s_ErrorMessage");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int, ::Il2CppString*>*>("System.ComponentModel", "Win32Exception", "s_ErrorMessage")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> s_ErrorMessage
void System::ComponentModel::Win32Exception::_set_s_ErrorMessage(System::Collections::Generic::Dictionary_2<int, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::_set_s_ErrorMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.ComponentModel", "Win32Exception", "s_ErrorMessage", value));
}
// Autogenerated method: System.ComponentModel.Win32Exception.get_NativeErrorCode
int System::ComponentModel::Win32Exception::get_NativeErrorCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::get_NativeErrorCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NativeErrorCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.ComponentModel.Win32Exception.GetErrorMessage
::Il2CppString* System::ComponentModel::Win32Exception::GetErrorMessage(int error) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::GetErrorMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "Win32Exception", "GetErrorMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: System.ComponentModel.Win32Exception.InitializeErrorMessages
void System::ComponentModel::Win32Exception::InitializeErrorMessages() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::InitializeErrorMessages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "Win32Exception", "InitializeErrorMessages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.ComponentModel.Win32Exception.GetObjectData
void System::ComponentModel::Win32Exception::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.ComponentModel.Win32Exception..cctor
void System::ComponentModel::Win32Exception::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Win32Exception::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.ComponentModel", "Win32Exception", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Win32Exception::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(int)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(int)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Win32Exception::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(int, ::Il2CppString*)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(int, ::Il2CppString*)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Win32Exception::get_NativeErrorCode
// Il2CppName: get_NativeErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Win32Exception::*)()>(&Win32Exception::get_NativeErrorCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), "get_NativeErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Win32Exception::GetErrorMessage
// Il2CppName: GetErrorMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&Win32Exception::GetErrorMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), "GetErrorMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Win32Exception::InitializeErrorMessages
// Il2CppName: InitializeErrorMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Win32Exception::InitializeErrorMessages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), "InitializeErrorMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Win32Exception::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)()>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)()>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Win32Exception::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&Win32Exception::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: Win32Exception::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Win32Exception::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&Win32Exception::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: Win32Exception::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Win32Exception::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Win32Exception*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.BaseNumberConverter
#include "System/ComponentModel/BaseNumberConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BaseNumberConverter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNumberConverter::*)()>(&BaseNumberConverter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNumberConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNumberConverter::*)()>(&BaseNumberConverter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNumberConverter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.ComponentModel.Design.IDesignerHost
#include "System/ComponentModel/Design/IDesignerHost.hpp"
// Including type: System.ComponentModel.IComponent
#include "System/ComponentModel/IComponent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.ComponentModel.Design.IDesignerHost.get_RootComponent
System::ComponentModel::IComponent* System::ComponentModel::Design::IDesignerHost::get_RootComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::ComponentModel::Design::IDesignerHost::get_RootComponent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::ComponentModel::IComponent*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IDesignerHost::get_RootComponent
// Il2CppName: get_RootComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::ComponentModel::IComponent* (IDesignerHost::*)()>(&IDesignerHost::get_RootComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDesignerHost*), "get_RootComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute
#include "System/ComponentModel/Design/Serialization/RootDesignerSerializerAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RootDesignerSerializerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootDesignerSerializerAttribute::*)(::Il2CppString*, ::Il2CppString*, bool)>(&RootDesignerSerializerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootDesignerSerializerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootDesignerSerializerAttribute::*)(::Il2CppString*, ::Il2CppString*, bool)>(&RootDesignerSerializerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootDesignerSerializerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Authentication.AuthenticationException
#include "System/Security/Authentication/AuthenticationException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AuthenticationException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)()>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)()>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticationException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(::Il2CppString*)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(::Il2CppString*)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AuthenticationException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(::Il2CppString*, System::Exception*)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(::Il2CppString*, System::Exception*)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: AuthenticationException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&AuthenticationException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols None
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols None
void System::Security::Authentication::SslProtocols::_set_None(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Ssl2
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Ssl2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Ssl2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Ssl2"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Ssl2
void System::Security::Authentication::SslProtocols::_set_Ssl2(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Ssl2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Ssl2", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Ssl3
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Ssl3() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Ssl3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Ssl3"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Ssl3
void System::Security::Authentication::SslProtocols::_set_Ssl3(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Ssl3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Ssl3", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Tls
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Tls() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Tls");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Tls"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Tls
void System::Security::Authentication::SslProtocols::_set_Tls(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Tls");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Tls", value));
}
// [MonoTODOAttribute] Offset: 0xD88864
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Tls11
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Tls11() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Tls11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Tls11"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Tls11
void System::Security::Authentication::SslProtocols::_set_Tls11(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Tls11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Tls11", value));
}
// [MonoTODOAttribute] Offset: 0xD8889C
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Tls12
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Tls12() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Tls12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Tls12"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Tls12
void System::Security::Authentication::SslProtocols::_set_Tls12(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Tls12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Tls12", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.SslProtocols Default
System::Security::Authentication::SslProtocols System::Security::Authentication::SslProtocols::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::SslProtocols>("System.Security.Authentication", "SslProtocols", "Default"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.SslProtocols Default
void System::Security::Authentication::SslProtocols::_set_Default(System::Security::Authentication::SslProtocols value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::SslProtocols::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication", "SslProtocols", "Default", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
#include "System/Security/Authentication/ExtendedProtection/ExtendedProtectionPolicy.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy::System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.ToString
::Il2CppString* System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ExtendedProtectionPolicy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtendedProtectionPolicy::*)(System::Security::Authentication::ExtendedProtection::PolicyEnforcement)>(&ExtendedProtectionPolicy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Authentication::ExtendedProtection::PolicyEnforcement>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtendedProtectionPolicy::*)(System::Security::Authentication::ExtendedProtection::PolicyEnforcement)>(&ExtendedProtectionPolicy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Authentication::ExtendedProtection::PolicyEnforcement>()});
  }
};
// Writing MetadataGetter for method: ExtendedProtectionPolicy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtendedProtectionPolicy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ExtendedProtectionPolicy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtendedProtectionPolicy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ExtendedProtectionPolicy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: ExtendedProtectionPolicy::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtendedProtectionPolicy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&ExtendedProtectionPolicy::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: ExtendedProtectionPolicy::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ExtendedProtectionPolicy::*)()>(&ExtendedProtectionPolicy::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtendedProtectionPolicy*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Authentication.ExtendedProtection.PolicyEnforcement
#include "System/Security/Authentication/ExtendedProtection/PolicyEnforcement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement Never
System::Security::Authentication::ExtendedProtection::PolicyEnforcement System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::ExtendedProtection::PolicyEnforcement>("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "Never"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement Never
void System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_Never(System::Security::Authentication::ExtendedProtection::PolicyEnforcement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement WhenSupported
System::Security::Authentication::ExtendedProtection::PolicyEnforcement System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_WhenSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_WhenSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::ExtendedProtection::PolicyEnforcement>("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "WhenSupported"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement WhenSupported
void System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_WhenSupported(System::Security::Authentication::ExtendedProtection::PolicyEnforcement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_WhenSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "WhenSupported", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement Always
System::Security::Authentication::ExtendedProtection::PolicyEnforcement System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Authentication::ExtendedProtection::PolicyEnforcement>("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "Always"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Authentication.ExtendedProtection.PolicyEnforcement Always
void System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_Always(System::Security::Authentication::ExtendedProtection::PolicyEnforcement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Authentication::ExtendedProtection::PolicyEnforcement::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Authentication.ExtendedProtection", "PolicyEnforcement", "Always", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.OidGroup
#include "System/Security/Cryptography/OidGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup All
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "All"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup All
void System::Security::Cryptography::OidGroup::_set_All(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "All", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup HashAlgorithm
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_HashAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_HashAlgorithm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "HashAlgorithm"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup HashAlgorithm
void System::Security::Cryptography::OidGroup::_set_HashAlgorithm(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_HashAlgorithm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "HashAlgorithm", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup EncryptionAlgorithm
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_EncryptionAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_EncryptionAlgorithm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "EncryptionAlgorithm"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup EncryptionAlgorithm
void System::Security::Cryptography::OidGroup::_set_EncryptionAlgorithm(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_EncryptionAlgorithm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "EncryptionAlgorithm", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup PublicKeyAlgorithm
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_PublicKeyAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_PublicKeyAlgorithm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "PublicKeyAlgorithm"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup PublicKeyAlgorithm
void System::Security::Cryptography::OidGroup::_set_PublicKeyAlgorithm(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_PublicKeyAlgorithm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "PublicKeyAlgorithm", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup SignatureAlgorithm
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_SignatureAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_SignatureAlgorithm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "SignatureAlgorithm"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup SignatureAlgorithm
void System::Security::Cryptography::OidGroup::_set_SignatureAlgorithm(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_SignatureAlgorithm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "SignatureAlgorithm", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup Attribute
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_Attribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "Attribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup Attribute
void System::Security::Cryptography::OidGroup::_set_Attribute(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_Attribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "Attribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup ExtensionOrAttribute
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_ExtensionOrAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_ExtensionOrAttribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "ExtensionOrAttribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup ExtensionOrAttribute
void System::Security::Cryptography::OidGroup::_set_ExtensionOrAttribute(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_ExtensionOrAttribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "ExtensionOrAttribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup EnhancedKeyUsage
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_EnhancedKeyUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_EnhancedKeyUsage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "EnhancedKeyUsage"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup EnhancedKeyUsage
void System::Security::Cryptography::OidGroup::_set_EnhancedKeyUsage(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_EnhancedKeyUsage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "EnhancedKeyUsage", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup Policy
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_Policy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_Policy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "Policy"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup Policy
void System::Security::Cryptography::OidGroup::_set_Policy(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_Policy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "Policy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup Template
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_Template() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_Template");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "Template"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup Template
void System::Security::Cryptography::OidGroup::_set_Template(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_Template");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "Template", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.OidGroup KeyDerivationFunction
System::Security::Cryptography::OidGroup System::Security::Cryptography::OidGroup::_get_KeyDerivationFunction() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_get_KeyDerivationFunction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::OidGroup>("System.Security.Cryptography", "OidGroup", "KeyDerivationFunction"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.OidGroup KeyDerivationFunction
void System::Security::Cryptography::OidGroup::_set_KeyDerivationFunction(System::Security::Cryptography::OidGroup value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidGroup::_set_KeyDerivationFunction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "OidGroup", "KeyDerivationFunction", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.Oid.get_Value
::Il2CppString* System::Security::Cryptography::Oid::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::Oid::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.Oid.set_Value
void System::Security::Cryptography::Oid::set_Value(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::Oid::set_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.Oid.get_FriendlyName
::Il2CppString* System::Security::Cryptography::Oid::get_FriendlyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::Oid::get_FriendlyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FriendlyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Oid::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Oid::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*, System::Security::Cryptography::OidGroup, bool)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*, System::Security::Cryptography::OidGroup, bool)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Oid::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*, ::Il2CppString*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*, ::Il2CppString*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Oid::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(System::Security::Cryptography::Oid*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(System::Security::Cryptography::Oid*)>(&Oid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>()});
  }
};
// Writing MetadataGetter for method: Oid::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Oid::*)()>(&Oid::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oid::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)(::Il2CppString*)>(&Oid::set_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Oid::get_FriendlyName
// Il2CppName: get_FriendlyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Oid::*)()>(&Oid::get_FriendlyName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), "get_FriendlyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oid::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)()>(&Oid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oid::*)()>(&Oid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.OidCollection
#include "System/Security/Cryptography/OidCollection.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Array
#include "System/Array.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.OidCollection.Add
int System::Security::Cryptography::OidCollection::Add(System::Security::Cryptography::Oid* oid) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidCollection::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oid)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, oid);
}
// Autogenerated method: System.Security.Cryptography.OidCollection.get_Item
System::Security::Cryptography::Oid* System::Security::Cryptography::OidCollection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Security.Cryptography.OidCollection.get_Count
int System::Security::Cryptography::OidCollection::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidCollection::get_Count");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.OidCollection.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* System::Security::Cryptography::OidCollection::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidCollection::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.OidCollection.System.Collections.ICollection.CopyTo
void System::Security::Cryptography::OidCollection::System_Collections_ICollection_CopyTo(System::Array* array, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidCollection::System.Collections.ICollection.CopyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
}
// Writing MetadataGetter for method: OidCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OidCollection::*)(System::Security::Cryptography::Oid*)>(&OidCollection::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>()});
  }
};
// Writing MetadataGetter for method: OidCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (OidCollection::*)(int)>(&OidCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OidCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OidCollection::*)()>(&OidCollection::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OidCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (OidCollection::*)()>(&OidCollection::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OidCollection::System_Collections_ICollection_CopyTo
// Il2CppName: System.Collections.ICollection.CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidCollection::*)(System::Array*, int)>(&OidCollection::System_Collections_ICollection_CopyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OidCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidCollection::*)()>(&OidCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidCollection::*)()>(&OidCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.OidEnumerator
#include "System/Security/Cryptography/OidEnumerator.hpp"
// Including type: System.Security.Cryptography.OidCollection
#include "System/Security/Cryptography/OidCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.OidEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* System::Security::Cryptography::OidEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.OidEnumerator.MoveNext
bool System::Security::Cryptography::OidEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.OidEnumerator.Reset
void System::Security::Cryptography::OidEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::OidEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OidEnumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidEnumerator::*)(System::Security::Cryptography::OidCollection*)>(&OidEnumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidCollection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidEnumerator::*)(System::Security::Cryptography::OidCollection*)>(&OidEnumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidCollection*>()});
  }
};
// Writing MetadataGetter for method: OidEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OidEnumerator::*)()>(&OidEnumerator::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OidEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OidEnumerator::*)()>(&OidEnumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OidEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OidEnumerator::*)()>(&OidEnumerator::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OidEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.CAPI
#include "System/Security/Cryptography/CAPI.hpp"
// Including type: System.Security.Cryptography.OidGroup
#include "System/Security/Cryptography/OidGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.CAPI.CryptFindOIDInfoNameFromKey
::Il2CppString* System::Security::Cryptography::CAPI::CryptFindOIDInfoNameFromKey(::Il2CppString* key, System::Security::Cryptography::OidGroup oidGroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::CAPI::CryptFindOIDInfoNameFromKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography", "CAPI", "CryptFindOIDInfoNameFromKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(oidGroup)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, oidGroup);
}
// Autogenerated method: System.Security.Cryptography.CAPI.CryptFindOIDInfoKeyFromName
::Il2CppString* System::Security::Cryptography::CAPI::CryptFindOIDInfoKeyFromName(::Il2CppString* name, System::Security::Cryptography::OidGroup oidGroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::CAPI::CryptFindOIDInfoKeyFromName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography", "CAPI", "CryptFindOIDInfoKeyFromName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(oidGroup)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, oidGroup);
}
// Writing MetadataGetter for method: CAPI::CryptFindOIDInfoNameFromKey
// Il2CppName: CryptFindOIDInfoNameFromKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Security::Cryptography::OidGroup)>(&CAPI::CryptFindOIDInfoNameFromKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CAPI*), "CryptFindOIDInfoNameFromKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>()});
  }
};
// Writing MetadataGetter for method: CAPI::CryptFindOIDInfoKeyFromName
// Il2CppName: CryptFindOIDInfoKeyFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Security::Cryptography::OidGroup)>(&CAPI::CryptFindOIDInfoKeyFromName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CAPI*), "CryptFindOIDInfoKeyFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.AsnDecodeStatus
#include "System/Security/Cryptography/AsnDecodeStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus NotDecoded
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_NotDecoded() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_NotDecoded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "NotDecoded"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus NotDecoded
void System::Security::Cryptography::AsnDecodeStatus::_set_NotDecoded(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_NotDecoded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "NotDecoded", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus Ok
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus Ok
void System::Security::Cryptography::AsnDecodeStatus::_set_Ok(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "Ok", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus BadAsn
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_BadAsn() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_BadAsn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "BadAsn"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus BadAsn
void System::Security::Cryptography::AsnDecodeStatus::_set_BadAsn(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_BadAsn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "BadAsn", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus BadTag
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_BadTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_BadTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "BadTag"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus BadTag
void System::Security::Cryptography::AsnDecodeStatus::_set_BadTag(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_BadTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "BadTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus BadLength
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_BadLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_BadLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "BadLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus BadLength
void System::Security::Cryptography::AsnDecodeStatus::_set_BadLength(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_BadLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "BadLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.AsnDecodeStatus InformationNotAvailable
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::AsnDecodeStatus::_get_InformationNotAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_get_InformationNotAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AsnDecodeStatus>("System.Security.Cryptography", "AsnDecodeStatus", "InformationNotAvailable"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.AsnDecodeStatus InformationNotAvailable
void System::Security::Cryptography::AsnDecodeStatus::_set_InformationNotAvailable(System::Security::Cryptography::AsnDecodeStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnDecodeStatus::_set_InformationNotAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "AsnDecodeStatus", "InformationNotAvailable", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.AsnEncodedData
#include "System/Security/Cryptography/AsnEncodedData.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.get_Oid
System::Security::Cryptography::Oid* System::Security::Cryptography::AsnEncodedData::get_Oid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::get_Oid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Oid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.set_Oid
void System::Security::Cryptography::AsnEncodedData::set_Oid(System::Security::Cryptography::Oid* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::set_Oid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Oid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.get_RawData
::Array<uint8_t>* System::Security::Cryptography::AsnEncodedData::get_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::get_RawData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.set_RawData
void System::Security::Cryptography::AsnEncodedData::set_RawData(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::set_RawData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RawData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.CopyFrom
void System::Security::Cryptography::AsnEncodedData::CopyFrom(System::Security::Cryptography::AsnEncodedData* asnEncodedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::CopyFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asnEncodedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asnEncodedData);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.Format
::Il2CppString* System::Security::Cryptography::AsnEncodedData::Format(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::Format");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.ToString
::Il2CppString* System::Security::Cryptography::AsnEncodedData::ToString(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.Default
::Il2CppString* System::Security::Cryptography::AsnEncodedData::Default(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.BasicConstraintsExtension
::Il2CppString* System::Security::Cryptography::AsnEncodedData::BasicConstraintsExtension(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::BasicConstraintsExtension");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BasicConstraintsExtension", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.EnhancedKeyUsageExtension
::Il2CppString* System::Security::Cryptography::AsnEncodedData::EnhancedKeyUsageExtension(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::EnhancedKeyUsageExtension");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnhancedKeyUsageExtension", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.KeyUsageExtension
::Il2CppString* System::Security::Cryptography::AsnEncodedData::KeyUsageExtension(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::KeyUsageExtension");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyUsageExtension", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.SubjectKeyIdentifierExtension
::Il2CppString* System::Security::Cryptography::AsnEncodedData::SubjectKeyIdentifierExtension(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::SubjectKeyIdentifierExtension");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubjectKeyIdentifierExtension", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.SubjectAltName
::Il2CppString* System::Security::Cryptography::AsnEncodedData::SubjectAltName(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::SubjectAltName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubjectAltName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Autogenerated method: System.Security.Cryptography.AsnEncodedData.NetscapeCertType
::Il2CppString* System::Security::Cryptography::AsnEncodedData::NetscapeCertType(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::AsnEncodedData::NetscapeCertType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NetscapeCertType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Writing MetadataGetter for method: AsnEncodedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(::Il2CppString*, ::Array<uint8_t>*)>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(::Il2CppString*, ::Array<uint8_t>*)>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(System::Security::Cryptography::Oid*, ::Array<uint8_t>*)>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(System::Security::Cryptography::Oid*, ::Array<uint8_t>*)>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::get_Oid
// Il2CppName: get_Oid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (AsnEncodedData::*)()>(&AsnEncodedData::get_Oid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "get_Oid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::set_Oid
// Il2CppName: set_Oid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(System::Security::Cryptography::Oid*)>(&AsnEncodedData::set_Oid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "set_Oid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::Oid*>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::get_RawData
// Il2CppName: get_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (AsnEncodedData::*)()>(&AsnEncodedData::get_RawData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "get_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::set_RawData
// Il2CppName: set_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(::Array<uint8_t>*)>(&AsnEncodedData::set_RawData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "set_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)(System::Security::Cryptography::AsnEncodedData*)>(&AsnEncodedData::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::Default
// Il2CppName: Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::Default)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::BasicConstraintsExtension
// Il2CppName: BasicConstraintsExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::BasicConstraintsExtension)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "BasicConstraintsExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::EnhancedKeyUsageExtension
// Il2CppName: EnhancedKeyUsageExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::EnhancedKeyUsageExtension)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "EnhancedKeyUsageExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::KeyUsageExtension
// Il2CppName: KeyUsageExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::KeyUsageExtension)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "KeyUsageExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::SubjectKeyIdentifierExtension
// Il2CppName: SubjectKeyIdentifierExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::SubjectKeyIdentifierExtension)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "SubjectKeyIdentifierExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::SubjectAltName
// Il2CppName: SubjectAltName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::SubjectAltName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "SubjectAltName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::NetscapeCertType
// Il2CppName: NetscapeCertType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AsnEncodedData::*)(bool)>(&AsnEncodedData::NetscapeCertType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), "NetscapeCertType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsnEncodedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)()>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsnEncodedData::*)()>(&AsnEncodedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsnEncodedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.OpenFlags
#include "System/Security/Cryptography/X509Certificates/OpenFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadOnly
System::Security::Cryptography::X509Certificates::OpenFlags System::Security::Cryptography::X509Certificates::OpenFlags::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::OpenFlags>("System.Security.Cryptography.X509Certificates", "OpenFlags", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadOnly
void System::Security::Cryptography::X509Certificates::OpenFlags::_set_ReadOnly(System::Security::Cryptography::X509Certificates::OpenFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "OpenFlags", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadWrite
System::Security::Cryptography::X509Certificates::OpenFlags System::Security::Cryptography::X509Certificates::OpenFlags::_get_ReadWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_get_ReadWrite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::OpenFlags>("System.Security.Cryptography.X509Certificates", "OpenFlags", "ReadWrite"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadWrite
void System::Security::Cryptography::X509Certificates::OpenFlags::_set_ReadWrite(System::Security::Cryptography::X509Certificates::OpenFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_set_ReadWrite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "OpenFlags", "ReadWrite", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags MaxAllowed
System::Security::Cryptography::X509Certificates::OpenFlags System::Security::Cryptography::X509Certificates::OpenFlags::_get_MaxAllowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_get_MaxAllowed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::OpenFlags>("System.Security.Cryptography.X509Certificates", "OpenFlags", "MaxAllowed"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags MaxAllowed
void System::Security::Cryptography::X509Certificates::OpenFlags::_set_MaxAllowed(System::Security::Cryptography::X509Certificates::OpenFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_set_MaxAllowed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "OpenFlags", "MaxAllowed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags OpenExistingOnly
System::Security::Cryptography::X509Certificates::OpenFlags System::Security::Cryptography::X509Certificates::OpenFlags::_get_OpenExistingOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_get_OpenExistingOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::OpenFlags>("System.Security.Cryptography.X509Certificates", "OpenFlags", "OpenExistingOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags OpenExistingOnly
void System::Security::Cryptography::X509Certificates::OpenFlags::_set_OpenExistingOnly(System::Security::Cryptography::X509Certificates::OpenFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_set_OpenExistingOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "OpenFlags", "OpenExistingOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags IncludeArchived
System::Security::Cryptography::X509Certificates::OpenFlags System::Security::Cryptography::X509Certificates::OpenFlags::_get_IncludeArchived() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_get_IncludeArchived");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::OpenFlags>("System.Security.Cryptography.X509Certificates", "OpenFlags", "IncludeArchived"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags IncludeArchived
void System::Security::Cryptography::X509Certificates::OpenFlags::_set_IncludeArchived(System::Security::Cryptography::X509Certificates::OpenFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::OpenFlags::_set_IncludeArchived");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "OpenFlags", "IncludeArchived", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.StoreLocation
#include "System/Security/Cryptography/X509Certificates/StoreLocation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreLocation CurrentUser
System::Security::Cryptography::X509Certificates::StoreLocation System::Security::Cryptography::X509Certificates::StoreLocation::_get_CurrentUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreLocation::_get_CurrentUser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreLocation>("System.Security.Cryptography.X509Certificates", "StoreLocation", "CurrentUser"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreLocation CurrentUser
void System::Security::Cryptography::X509Certificates::StoreLocation::_set_CurrentUser(System::Security::Cryptography::X509Certificates::StoreLocation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreLocation::_set_CurrentUser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreLocation", "CurrentUser", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreLocation LocalMachine
System::Security::Cryptography::X509Certificates::StoreLocation System::Security::Cryptography::X509Certificates::StoreLocation::_get_LocalMachine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreLocation::_get_LocalMachine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreLocation>("System.Security.Cryptography.X509Certificates", "StoreLocation", "LocalMachine"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreLocation LocalMachine
void System::Security::Cryptography::X509Certificates::StoreLocation::_set_LocalMachine(System::Security::Cryptography::X509Certificates::StoreLocation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreLocation::_set_LocalMachine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreLocation", "LocalMachine", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.StoreName
#include "System/Security/Cryptography/X509Certificates/StoreName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName AddressBook
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_AddressBook() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_AddressBook");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "AddressBook"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName AddressBook
void System::Security::Cryptography::X509Certificates::StoreName::_set_AddressBook(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_AddressBook");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "AddressBook", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName AuthRoot
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_AuthRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_AuthRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "AuthRoot"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName AuthRoot
void System::Security::Cryptography::X509Certificates::StoreName::_set_AuthRoot(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_AuthRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "AuthRoot", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName CertificateAuthority
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_CertificateAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_CertificateAuthority");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "CertificateAuthority"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName CertificateAuthority
void System::Security::Cryptography::X509Certificates::StoreName::_set_CertificateAuthority(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_CertificateAuthority");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "CertificateAuthority", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName Disallowed
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_Disallowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_Disallowed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "Disallowed"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName Disallowed
void System::Security::Cryptography::X509Certificates::StoreName::_set_Disallowed(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_Disallowed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "Disallowed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName My
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_My() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_My");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "My"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName My
void System::Security::Cryptography::X509Certificates::StoreName::_set_My(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_My");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "My", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName Root
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_Root() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_Root");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "Root"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName Root
void System::Security::Cryptography::X509Certificates::StoreName::_set_Root(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_Root");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "Root", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName TrustedPeople
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_TrustedPeople() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_TrustedPeople");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "TrustedPeople"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName TrustedPeople
void System::Security::Cryptography::X509Certificates::StoreName::_set_TrustedPeople(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_TrustedPeople");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "TrustedPeople", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.StoreName TrustedPublisher
System::Security::Cryptography::X509Certificates::StoreName System::Security::Cryptography::X509Certificates::StoreName::_get_TrustedPublisher() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_get_TrustedPublisher");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::StoreName>("System.Security.Cryptography.X509Certificates", "StoreName", "TrustedPublisher"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.StoreName TrustedPublisher
void System::Security::Cryptography::X509Certificates::StoreName::_set_TrustedPublisher(System::Security::Cryptography::X509Certificates::StoreName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::StoreName::_set_TrustedPublisher");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "StoreName", "TrustedPublisher", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedNameFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags None
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags None
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_None(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags Reversed
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_Reversed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_Reversed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "Reversed"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags Reversed
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_Reversed(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_Reversed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "Reversed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseSemicolons
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseSemicolons() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseSemicolons");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseSemicolons"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseSemicolons
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseSemicolons(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseSemicolons");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseSemicolons", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags DoNotUsePlusSign
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_DoNotUsePlusSign() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_DoNotUsePlusSign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "DoNotUsePlusSign"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags DoNotUsePlusSign
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_DoNotUsePlusSign(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_DoNotUsePlusSign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "DoNotUsePlusSign", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags DoNotUseQuotes
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_DoNotUseQuotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_DoNotUseQuotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "DoNotUseQuotes"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags DoNotUseQuotes
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_DoNotUseQuotes(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_DoNotUseQuotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "DoNotUseQuotes", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseCommas
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseCommas() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseCommas");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseCommas"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseCommas
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseCommas(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseCommas");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseCommas", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseNewLines
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseNewLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseNewLines");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseNewLines"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseNewLines
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseNewLines(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseNewLines");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseNewLines", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseUTF8Encoding
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseUTF8Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseUTF8Encoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseUTF8Encoding"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseUTF8Encoding
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseUTF8Encoding(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseUTF8Encoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseUTF8Encoding", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseT61Encoding
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseT61Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_UseT61Encoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseT61Encoding"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags UseT61Encoding
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseT61Encoding(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_UseT61Encoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "UseT61Encoding", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags ForceUTF8Encoding
System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_ForceUTF8Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_get_ForceUTF8Encoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "ForceUTF8Encoding"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags ForceUTF8Encoding
void System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_ForceUTF8Encoding(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags::_set_ForceUTF8Encoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X500DistinguishedNameFlags", "ForceUTF8Encoding", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
#include "System/Security/Cryptography/X509Certificates/X509ChainStatusFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NoError
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NoError() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NoError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NoError"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NoError
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NoError(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NoError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NoError", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotTimeValid
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotTimeValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotTimeValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotTimeValid
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotTimeValid(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotTimeValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotTimeValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotTimeNested
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotTimeNested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotTimeNested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotTimeNested"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotTimeNested
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotTimeNested(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotTimeNested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotTimeNested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags Revoked
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_Revoked() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_Revoked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "Revoked"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags Revoked
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_Revoked(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_Revoked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "Revoked", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotSignatureValid
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotSignatureValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotSignatureValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotSignatureValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotSignatureValid
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotSignatureValid(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotSignatureValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotSignatureValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotValidForUsage
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotValidForUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NotValidForUsage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotValidForUsage"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NotValidForUsage
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotValidForUsage(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NotValidForUsage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NotValidForUsage", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags UntrustedRoot
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_UntrustedRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_UntrustedRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "UntrustedRoot"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags UntrustedRoot
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_UntrustedRoot(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_UntrustedRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "UntrustedRoot", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags RevocationStatusUnknown
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_RevocationStatusUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_RevocationStatusUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "RevocationStatusUnknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags RevocationStatusUnknown
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_RevocationStatusUnknown(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_RevocationStatusUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "RevocationStatusUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags Cyclic
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_Cyclic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_Cyclic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "Cyclic"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags Cyclic
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_Cyclic(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_Cyclic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "Cyclic", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidExtension
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidExtension() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidExtension");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidExtension"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidExtension
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidExtension(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidExtension");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidExtension", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidPolicyConstraints
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidPolicyConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidPolicyConstraints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidPolicyConstraints"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidPolicyConstraints
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidPolicyConstraints(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidPolicyConstraints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidPolicyConstraints", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidBasicConstraints
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidBasicConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidBasicConstraints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidBasicConstraints"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidBasicConstraints
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidBasicConstraints(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidBasicConstraints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidBasicConstraints", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidNameConstraints
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidNameConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_InvalidNameConstraints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidNameConstraints"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags InvalidNameConstraints
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidNameConstraints(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_InvalidNameConstraints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "InvalidNameConstraints", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotSupportedNameConstraint
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotSupportedNameConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotSupportedNameConstraint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotSupportedNameConstraint"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotSupportedNameConstraint
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotSupportedNameConstraint(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotSupportedNameConstraint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotSupportedNameConstraint", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotDefinedNameConstraint
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotDefinedNameConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotDefinedNameConstraint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotDefinedNameConstraint"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotDefinedNameConstraint
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotDefinedNameConstraint(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotDefinedNameConstraint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotDefinedNameConstraint", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotPermittedNameConstraint
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotPermittedNameConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotPermittedNameConstraint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotPermittedNameConstraint"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotPermittedNameConstraint
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotPermittedNameConstraint(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotPermittedNameConstraint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotPermittedNameConstraint", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasExcludedNameConstraint
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasExcludedNameConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasExcludedNameConstraint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasExcludedNameConstraint"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasExcludedNameConstraint
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasExcludedNameConstraint(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasExcludedNameConstraint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasExcludedNameConstraint", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags PartialChain
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_PartialChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_PartialChain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "PartialChain"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags PartialChain
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_PartialChain(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_PartialChain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "PartialChain", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotTimeValid
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotTimeValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotTimeValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotTimeValid
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotTimeValid(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotTimeValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotTimeValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotSignatureValid
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotSignatureValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotSignatureValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotSignatureValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotSignatureValid
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotSignatureValid(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotSignatureValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotSignatureValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotValidForUsage
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotValidForUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_CtlNotValidForUsage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotValidForUsage"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CtlNotValidForUsage
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotValidForUsage(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_CtlNotValidForUsage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "CtlNotValidForUsage", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags OfflineRevocation
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_OfflineRevocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_OfflineRevocation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "OfflineRevocation"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags OfflineRevocation
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_OfflineRevocation(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_OfflineRevocation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "OfflineRevocation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NoIssuanceChainPolicy
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NoIssuanceChainPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_NoIssuanceChainPolicy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NoIssuanceChainPolicy"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags NoIssuanceChainPolicy
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NoIssuanceChainPolicy(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_NoIssuanceChainPolicy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "NoIssuanceChainPolicy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags ExplicitDistrust
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_ExplicitDistrust() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_ExplicitDistrust");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "ExplicitDistrust"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags ExplicitDistrust
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_ExplicitDistrust(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_ExplicitDistrust");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "ExplicitDistrust", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotSupportedCriticalExtension
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotSupportedCriticalExtension() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasNotSupportedCriticalExtension");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotSupportedCriticalExtension"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasNotSupportedCriticalExtension
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotSupportedCriticalExtension(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasNotSupportedCriticalExtension");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasNotSupportedCriticalExtension", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasWeakSignature
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasWeakSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_get_HasWeakSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasWeakSignature"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags HasWeakSignature
void System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasWeakSignature(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatusFlags::_set_HasWeakSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags", "HasWeakSignature", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509FindType
#include "System/Security/Cryptography/X509Certificates/X509FindType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByThumbprint
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByThumbprint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByThumbprint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByThumbprint"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByThumbprint
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByThumbprint(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByThumbprint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByThumbprint", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectName
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectName
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectName(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectDistinguishedName
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectDistinguishedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectDistinguishedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectDistinguishedName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectDistinguishedName
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectDistinguishedName(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectDistinguishedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectDistinguishedName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByIssuerName
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByIssuerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByIssuerName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByIssuerName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByIssuerName
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByIssuerName(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByIssuerName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByIssuerName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByIssuerDistinguishedName
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByIssuerDistinguishedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByIssuerDistinguishedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByIssuerDistinguishedName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByIssuerDistinguishedName
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByIssuerDistinguishedName(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByIssuerDistinguishedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByIssuerDistinguishedName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySerialNumber
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySerialNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySerialNumber"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySerialNumber
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySerialNumber(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySerialNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySerialNumber", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeValid
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeValid
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeValid(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeNotYetValid
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeNotYetValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeNotYetValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeNotYetValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeNotYetValid
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeNotYetValid(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeNotYetValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeNotYetValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeExpired
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeExpired() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTimeExpired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeExpired"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTimeExpired
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeExpired(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTimeExpired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTimeExpired", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTemplateName
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTemplateName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByTemplateName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTemplateName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByTemplateName
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTemplateName(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByTemplateName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByTemplateName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByApplicationPolicy
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByApplicationPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByApplicationPolicy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByApplicationPolicy"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByApplicationPolicy
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByApplicationPolicy(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByApplicationPolicy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByApplicationPolicy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByCertificatePolicy
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByCertificatePolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByCertificatePolicy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByCertificatePolicy"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByCertificatePolicy
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByCertificatePolicy(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByCertificatePolicy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByCertificatePolicy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByExtension
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByExtension() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByExtension");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByExtension"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByExtension
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByExtension(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByExtension");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByExtension", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByKeyUsage
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByKeyUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindByKeyUsage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByKeyUsage"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindByKeyUsage
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByKeyUsage(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindByKeyUsage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindByKeyUsage", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectKeyIdentifier
System::Security::Cryptography::X509Certificates::X509FindType System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectKeyIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_get_FindBySubjectKeyIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509FindType>("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectKeyIdentifier"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509FindType FindBySubjectKeyIdentifier
void System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectKeyIdentifier(System::Security::Cryptography::X509Certificates::X509FindType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509FindType::_set_FindBySubjectKeyIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509FindType", "FindBySubjectKeyIdentifier", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509KeyUsageFlags
#include "System/Security/Cryptography/X509Certificates/X509KeyUsageFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags None
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags None
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_None(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags EncipherOnly
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_EncipherOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_EncipherOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "EncipherOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags EncipherOnly
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_EncipherOnly(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_EncipherOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "EncipherOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags CrlSign
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_CrlSign() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_CrlSign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "CrlSign"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags CrlSign
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_CrlSign(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_CrlSign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "CrlSign", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyCertSign
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyCertSign() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyCertSign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyCertSign"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyCertSign
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyCertSign(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyCertSign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyCertSign", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyAgreement
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyAgreement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyAgreement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyAgreement"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyAgreement
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyAgreement(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyAgreement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyAgreement", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DataEncipherment
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DataEncipherment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DataEncipherment");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DataEncipherment"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DataEncipherment
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DataEncipherment(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DataEncipherment");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DataEncipherment", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyEncipherment
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyEncipherment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_KeyEncipherment");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyEncipherment"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyEncipherment
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyEncipherment(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_KeyEncipherment");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "KeyEncipherment", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags NonRepudiation
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_NonRepudiation() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_NonRepudiation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "NonRepudiation"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags NonRepudiation
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_NonRepudiation(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_NonRepudiation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "NonRepudiation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DigitalSignature
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DigitalSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DigitalSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DigitalSignature"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DigitalSignature
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DigitalSignature(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DigitalSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DigitalSignature", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DecipherOnly
System::Security::Cryptography::X509Certificates::X509KeyUsageFlags System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DecipherOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_get_DecipherOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509KeyUsageFlags>("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DecipherOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags DecipherOnly
void System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DecipherOnly(System::Security::Cryptography::X509Certificates::X509KeyUsageFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509KeyUsageFlags::_set_DecipherOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509KeyUsageFlags", "DecipherOnly", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509NameType
#include "System/Security/Cryptography/X509Certificates/X509NameType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType SimpleName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_SimpleName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_SimpleName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "SimpleName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType SimpleName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_SimpleName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_SimpleName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "SimpleName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType EmailName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_EmailName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_EmailName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "EmailName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType EmailName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_EmailName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_EmailName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "EmailName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType UpnName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_UpnName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_UpnName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "UpnName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType UpnName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_UpnName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_UpnName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "UpnName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType DnsName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_DnsName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_DnsName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "DnsName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType DnsName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_DnsName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_DnsName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "DnsName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType DnsFromAlternativeName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_DnsFromAlternativeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_DnsFromAlternativeName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "DnsFromAlternativeName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType DnsFromAlternativeName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_DnsFromAlternativeName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_DnsFromAlternativeName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "DnsFromAlternativeName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509NameType UrlName
System::Security::Cryptography::X509Certificates::X509NameType System::Security::Cryptography::X509Certificates::X509NameType::_get_UrlName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_get_UrlName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509NameType>("System.Security.Cryptography.X509Certificates", "X509NameType", "UrlName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509NameType UrlName
void System::Security::Cryptography::X509Certificates::X509NameType::_set_UrlName(System::Security::Cryptography::X509Certificates::X509NameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509NameType::_set_UrlName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509NameType", "UrlName", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509RevocationFlag
#include "System/Security/Cryptography/X509Certificates/X509RevocationFlag.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag EndCertificateOnly
System::Security::Cryptography::X509Certificates::X509RevocationFlag System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_EndCertificateOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_EndCertificateOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationFlag>("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "EndCertificateOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag EndCertificateOnly
void System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_EndCertificateOnly(System::Security::Cryptography::X509Certificates::X509RevocationFlag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_EndCertificateOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "EndCertificateOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag EntireChain
System::Security::Cryptography::X509Certificates::X509RevocationFlag System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_EntireChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_EntireChain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationFlag>("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "EntireChain"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag EntireChain
void System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_EntireChain(System::Security::Cryptography::X509Certificates::X509RevocationFlag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_EntireChain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "EntireChain", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag ExcludeRoot
System::Security::Cryptography::X509Certificates::X509RevocationFlag System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_ExcludeRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_get_ExcludeRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationFlag>("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "ExcludeRoot"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationFlag ExcludeRoot
void System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_ExcludeRoot(System::Security::Cryptography::X509Certificates::X509RevocationFlag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationFlag::_set_ExcludeRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationFlag", "ExcludeRoot", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509RevocationMode
#include "System/Security/Cryptography/X509Certificates/X509RevocationMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode NoCheck
System::Security::Cryptography::X509Certificates::X509RevocationMode System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_NoCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_NoCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationMode>("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "NoCheck"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode NoCheck
void System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_NoCheck(System::Security::Cryptography::X509Certificates::X509RevocationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_NoCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "NoCheck", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode Online
System::Security::Cryptography::X509Certificates::X509RevocationMode System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_Online() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_Online");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationMode>("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "Online"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode Online
void System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_Online(System::Security::Cryptography::X509Certificates::X509RevocationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_Online");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "Online", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode Offline
System::Security::Cryptography::X509Certificates::X509RevocationMode System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_Offline() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_get_Offline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509RevocationMode>("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "Offline"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509RevocationMode Offline
void System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_Offline(System::Security::Cryptography::X509Certificates::X509RevocationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509RevocationMode::_set_Offline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509RevocationMode", "Offline", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm
#include "System/Security/Cryptography/X509Certificates/X509SubjectKeyIdentifierHashAlgorithm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm Sha1
System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_Sha1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_Sha1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm>("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "Sha1"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm Sha1
void System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_Sha1(System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_Sha1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "Sha1", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm ShortSha1
System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_ShortSha1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_ShortSha1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm>("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "ShortSha1"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm ShortSha1
void System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_ShortSha1(System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_ShortSha1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "ShortSha1", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm CapiSha1
System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_CapiSha1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_get_CapiSha1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm>("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "CapiSha1"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm CapiSha1
void System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_CapiSha1(System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509SubjectKeyIdentifierHashAlgorithm::_set_CapiSha1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509SubjectKeyIdentifierHashAlgorithm", "CapiSha1", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509VerificationFlags
#include "System/Security/Cryptography/X509Certificates/X509VerificationFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags NoFlag
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_NoFlag() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_NoFlag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "NoFlag"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags NoFlag
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_NoFlag(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_NoFlag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "NoFlag", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreNotTimeValid
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreNotTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreNotTimeValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreNotTimeValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreNotTimeValid
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreNotTimeValid(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreNotTimeValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreNotTimeValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCtlNotTimeValid
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCtlNotTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCtlNotTimeValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCtlNotTimeValid"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCtlNotTimeValid
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCtlNotTimeValid(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCtlNotTimeValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCtlNotTimeValid", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreNotTimeNested
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreNotTimeNested() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreNotTimeNested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreNotTimeNested"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreNotTimeNested
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreNotTimeNested(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreNotTimeNested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreNotTimeNested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidBasicConstraints
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidBasicConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidBasicConstraints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidBasicConstraints"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidBasicConstraints
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidBasicConstraints(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidBasicConstraints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidBasicConstraints", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags AllowUnknownCertificateAuthority
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_AllowUnknownCertificateAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_AllowUnknownCertificateAuthority");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "AllowUnknownCertificateAuthority"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags AllowUnknownCertificateAuthority
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_AllowUnknownCertificateAuthority(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_AllowUnknownCertificateAuthority");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "AllowUnknownCertificateAuthority", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreWrongUsage
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreWrongUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreWrongUsage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreWrongUsage"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreWrongUsage
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreWrongUsage(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreWrongUsage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreWrongUsage", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidName
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidName"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidName
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidName(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidPolicy
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreInvalidPolicy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidPolicy"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreInvalidPolicy
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidPolicy(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreInvalidPolicy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreInvalidPolicy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreEndRevocationUnknown
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreEndRevocationUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreEndRevocationUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreEndRevocationUnknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreEndRevocationUnknown
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreEndRevocationUnknown(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreEndRevocationUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreEndRevocationUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCtlSignerRevocationUnknown
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCtlSignerRevocationUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCtlSignerRevocationUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCtlSignerRevocationUnknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCtlSignerRevocationUnknown
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCtlSignerRevocationUnknown(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCtlSignerRevocationUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCtlSignerRevocationUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCertificateAuthorityRevocationUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreCertificateAuthorityRevocationUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCertificateAuthorityRevocationUnknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCertificateAuthorityRevocationUnknown(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreCertificateAuthorityRevocationUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreCertificateAuthorityRevocationUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreRootRevocationUnknown
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreRootRevocationUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_IgnoreRootRevocationUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreRootRevocationUnknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags IgnoreRootRevocationUnknown
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreRootRevocationUnknown(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_IgnoreRootRevocationUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "IgnoreRootRevocationUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags AllFlags
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_AllFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_get_AllFlags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::X509Certificates::X509VerificationFlags>("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "AllFlags"));
}
// Autogenerated static field setter
// Set static field: static public System.Security.Cryptography.X509Certificates.X509VerificationFlags AllFlags
void System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_AllFlags(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509VerificationFlags::_set_AllFlags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509VerificationFlags", "AllFlags", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Utils
#include "System/Security/Cryptography/X509Certificates/X509Utils.hpp"
// Including type: System.Security.Cryptography.OidGroup
#include "System/Security/Cryptography/OidGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Utils.FindOidInfo
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Utils::FindOidInfo(uint keyType, ::Il2CppString* keyValue, System::Security::Cryptography::OidGroup oidGroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Utils::FindOidInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Utils", "FindOidInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyType), ::il2cpp_utils::ExtractType(keyValue), ::il2cpp_utils::ExtractType(oidGroup)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keyType, keyValue, oidGroup);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Utils.FindOidInfoWithFallback
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Utils::FindOidInfoWithFallback(uint key, ::Il2CppString* value, System::Security::Cryptography::OidGroup group) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Utils::FindOidInfoWithFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Utils", "FindOidInfoWithFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(group)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, value, group);
}
// Writing MetadataGetter for method: X509Utils::FindOidInfo
// Il2CppName: FindOidInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(uint, ::Il2CppString*, System::Security::Cryptography::OidGroup)>(&X509Utils::FindOidInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Utils*), "FindOidInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>()});
  }
};
// Writing MetadataGetter for method: X509Utils::FindOidInfoWithFallback
// Il2CppName: FindOidInfoWithFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(uint, ::Il2CppString*, System::Security::Cryptography::OidGroup)>(&X509Utils::FindOidInfoWithFallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Utils*), "FindOidInfoWithFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::OidGroup>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.PublicKey
#include "System/Security/Cryptography/X509Certificates/PublicKey.hpp"
// Including type: System.Security.Cryptography.AsymmetricAlgorithm
#include "System/Security/Cryptography/AsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.AsnEncodedData
#include "System/Security/Cryptography/AsnEncodedData.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
// Including type: Mono.Security.X509.X509Certificate
#include "Mono/Security/X509/X509Certificate.hpp"
// Including type: System.Security.Cryptography.DSA
#include "System/Security/Cryptography/DSA.hpp"
// Including type: System.Security.Cryptography.RSA
#include "System/Security/Cryptography/RSA.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] Empty
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::PublicKey::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "PublicKey", "Empty"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] Empty
void System::Security::Cryptography::X509Certificates::PublicKey::_set_Empty(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "PublicKey", "Empty", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.get_EncodedKeyValue
System::Security::Cryptography::AsnEncodedData* System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedKeyValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedKeyValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EncodedKeyValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsnEncodedData*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.get_EncodedParameters
System::Security::Cryptography::AsnEncodedData* System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EncodedParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsnEncodedData*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.get_Key
System::Security::Cryptography::AsymmetricAlgorithm* System::Security::Cryptography::X509Certificates::PublicKey::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::get_Key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsymmetricAlgorithm*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.get_Oid
System::Security::Cryptography::Oid* System::Security::Cryptography::X509Certificates::PublicKey::get_Oid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::get_Oid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Oid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.GetUnsignedBigInteger
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::PublicKey::GetUnsignedBigInteger(::Array<uint8_t>* integer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::GetUnsignedBigInteger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "PublicKey", "GetUnsignedBigInteger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(integer)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, integer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.DecodeDSA
System::Security::Cryptography::DSA* System::Security::Cryptography::X509Certificates::PublicKey::DecodeDSA(::Array<uint8_t>* rawPublicKey, ::Array<uint8_t>* rawParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::DecodeDSA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "PublicKey", "DecodeDSA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawPublicKey), ::il2cpp_utils::ExtractType(rawParameters)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::DSA*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawPublicKey, rawParameters);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey.DecodeRSA
System::Security::Cryptography::RSA* System::Security::Cryptography::X509Certificates::PublicKey::DecodeRSA(::Array<uint8_t>* rawPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::DecodeRSA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "PublicKey", "DecodeRSA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::RSA*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawPublicKey);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.PublicKey..cctor
void System::Security::Cryptography::X509Certificates::PublicKey::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::PublicKey::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "PublicKey", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PublicKey::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicKey::*)(Mono::Security::X509::X509Certificate*)>(&PublicKey::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicKey::*)(Mono::Security::X509::X509Certificate*)>(&PublicKey::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
// Writing MetadataGetter for method: PublicKey::get_EncodedKeyValue
// Il2CppName: get_EncodedKeyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsnEncodedData* (PublicKey::*)()>(&PublicKey::get_EncodedKeyValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "get_EncodedKeyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PublicKey::get_EncodedParameters
// Il2CppName: get_EncodedParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsnEncodedData* (PublicKey::*)()>(&PublicKey::get_EncodedParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "get_EncodedParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PublicKey::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsymmetricAlgorithm* (PublicKey::*)()>(&PublicKey::get_Key)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PublicKey::get_Oid
// Il2CppName: get_Oid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (PublicKey::*)()>(&PublicKey::get_Oid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "get_Oid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PublicKey::GetUnsignedBigInteger
// Il2CppName: GetUnsignedBigInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&PublicKey::GetUnsignedBigInteger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "GetUnsignedBigInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: PublicKey::DecodeDSA
// Il2CppName: DecodeDSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::DSA* (*)(::Array<uint8_t>*, ::Array<uint8_t>*)>(&PublicKey::DecodeDSA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "DecodeDSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: PublicKey::DecodeRSA
// Il2CppName: DecodeRSA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::RSA* (*)(::Array<uint8_t>*)>(&PublicKey::DecodeRSA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), "DecodeRSA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: PublicKey::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PublicKey::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicKey*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedName.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedNameFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.Decode
::Il2CppString* System::Security::Cryptography::X509Certificates::X500DistinguishedName::Decode(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::Decode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Decode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flag)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, flag);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.GetSeparator
::Il2CppString* System::Security::Cryptography::X509Certificates::X500DistinguishedName::GetSeparator(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::GetSeparator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X500DistinguishedName", "GetSeparator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flag)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flag);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.DecodeRawData
void System::Security::Cryptography::X509Certificates::X500DistinguishedName::DecodeRawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::DecodeRawData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodeRawData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.Canonize
::Il2CppString* System::Security::Cryptography::X509Certificates::X500DistinguishedName::Canonize(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::Canonize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X500DistinguishedName", "Canonize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.AreEqual
bool System::Security::Cryptography::X509Certificates::X500DistinguishedName::AreEqual(System::Security::Cryptography::X509Certificates::X500DistinguishedName* name1, System::Security::Cryptography::X509Certificates::X500DistinguishedName* name2) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::AreEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X500DistinguishedName", "AreEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name1), ::il2cpp_utils::ExtractType(name2)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name1, name2);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X500DistinguishedName.Format
::Il2CppString* System::Security::Cryptography::X509Certificates::X500DistinguishedName::Format(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X500DistinguishedName::Format");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Writing MetadataGetter for method: X500DistinguishedName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X500DistinguishedName::*)(::Array<uint8_t>*)>(&X500DistinguishedName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X500DistinguishedName::*)(::Array<uint8_t>*)>(&X500DistinguishedName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X500DistinguishedName::*)(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags)>(&X500DistinguishedName::Decode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>()});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::GetSeparator
// Il2CppName: GetSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags)>(&X500DistinguishedName::GetSeparator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "GetSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X500DistinguishedNameFlags>()});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::DecodeRawData
// Il2CppName: DecodeRawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X500DistinguishedName::*)()>(&X500DistinguishedName::DecodeRawData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "DecodeRawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::Canonize
// Il2CppName: Canonize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&X500DistinguishedName::Canonize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "Canonize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::AreEqual
// Il2CppName: AreEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Security::Cryptography::X509Certificates::X500DistinguishedName*, System::Security::Cryptography::X509Certificates::X500DistinguishedName*)>(&X500DistinguishedName::AreEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "AreEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X500DistinguishedName*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X500DistinguishedName*>()});
  }
};
// Writing MetadataGetter for method: X500DistinguishedName::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X500DistinguishedName::*)(bool)>(&X500DistinguishedName::Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X500DistinguishedName*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension
#include "System/Security/Cryptography/X509Certificates/X509BasicConstraintsExtension.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.String oid
::Il2CppString* System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_get_oid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_get_oid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.Security.Cryptography.X509Certificates", "X509BasicConstraintsExtension", "oid"));
}
// Autogenerated static field setter
// Set static field: static System.String oid
void System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_set_oid(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_set_oid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509BasicConstraintsExtension", "oid", value));
}
// Autogenerated static field getter
// Get static field: static System.String friendlyName
::Il2CppString* System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_get_friendlyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_get_friendlyName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.Security.Cryptography.X509Certificates", "X509BasicConstraintsExtension", "friendlyName"));
}
// Autogenerated static field setter
// Set static field: static System.String friendlyName
void System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_set_friendlyName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::_set_friendlyName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509BasicConstraintsExtension", "friendlyName", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.get_CertificateAuthority
bool System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_CertificateAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_CertificateAuthority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CertificateAuthority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.get_HasPathLengthConstraint
bool System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_HasPathLengthConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_HasPathLengthConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasPathLengthConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.get_PathLengthConstraint
int System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_PathLengthConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::get_PathLengthConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PathLengthConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.Decode
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::Decode(::Array<uint8_t>* extension) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::Decode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Decode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(extension)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsnDecodeStatus, false>(this, ___internal__method, extension);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.Encode
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::Encode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom
void System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::CopyFrom(System::Security::Cryptography::AsnEncodedData* asnEncodedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::CopyFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asnEncodedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asnEncodedData);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::ToString(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509BasicConstraintsExtension::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Writing MetadataGetter for method: X509BasicConstraintsExtension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)(System::Security::Cryptography::AsnEncodedData*, bool)>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)(System::Security::Cryptography::AsnEncodedData*, bool)>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)(bool, bool, int, bool)>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)(bool, bool, int, bool)>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::get_CertificateAuthority
// Il2CppName: get_CertificateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::get_CertificateAuthority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "get_CertificateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::get_HasPathLengthConstraint
// Il2CppName: get_HasPathLengthConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::get_HasPathLengthConstraint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "get_HasPathLengthConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::get_PathLengthConstraint
// Il2CppName: get_PathLengthConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::get_PathLengthConstraint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "get_PathLengthConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsnDecodeStatus (X509BasicConstraintsExtension::*)(::Array<uint8_t>*)>(&X509BasicConstraintsExtension::Decode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)()>(&X509BasicConstraintsExtension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509BasicConstraintsExtension::*)(System::Security::Cryptography::AsnEncodedData*)>(&X509BasicConstraintsExtension::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>()});
  }
};
// Writing MetadataGetter for method: X509BasicConstraintsExtension::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509BasicConstraintsExtension::*)(bool)>(&X509BasicConstraintsExtension::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509BasicConstraintsExtension*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Impl
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Impl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
#include "System/Security/Cryptography/X509Certificates/X509ExtensionCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedName.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Security.Cryptography.AsymmetricAlgorithm
#include "System/Security/Cryptography/AsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.X509Certificates.PublicKey
#include "System/Security/Cryptography/X509Certificates/PublicKey.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509NameType
#include "System/Security/Cryptography/X509Certificates/X509NameType.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Mono.Security.X509.X509Certificate
#include "Mono/Security/X509/X509Certificate.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
#include "System/Security/Cryptography/X509Certificates/X509KeyStorageFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] signedData
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2::_get_signedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::_get_signedData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "X509Certificate2", "signedData"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] signedData
void System::Security::Cryptography::X509Certificates::X509Certificate2::_set_signedData(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::_set_signedData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2", "signedData", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_Impl
System::Security::Cryptography::X509Certificates::X509Certificate2Impl* System::Security::Cryptography::X509Certificates::X509Certificate2::get_Impl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_Impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Impl*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_Extensions
System::Security::Cryptography::X509Certificates::X509ExtensionCollection* System::Security::Cryptography::X509Certificates::X509Certificate2::get_Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_Extensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Extensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ExtensionCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_IssuerName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2::get_IssuerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_IssuerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IssuerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_NotAfter
System::DateTime System::Security::Cryptography::X509Certificates::X509Certificate2::get_NotAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_NotAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NotAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_NotBefore
System::DateTime System::Security::Cryptography::X509Certificates::X509Certificate2::get_NotBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_NotBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NotBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_PrivateKey
System::Security::Cryptography::AsymmetricAlgorithm* System::Security::Cryptography::X509Certificates::X509Certificate2::get_PrivateKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_PrivateKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsymmetricAlgorithm*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.set_PrivateKey
void System::Security::Cryptography::X509Certificates::X509Certificate2::set_PrivateKey(System::Security::Cryptography::AsymmetricAlgorithm* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::set_PrivateKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_PublicKey
System::Security::Cryptography::X509Certificates::PublicKey* System::Security::Cryptography::X509Certificates::X509Certificate2::get_PublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_PublicKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PublicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::PublicKey*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_SerialNumber
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2::get_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_SerialNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SerialNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_SignatureAlgorithm
System::Security::Cryptography::Oid* System::Security::Cryptography::X509Certificates::X509Certificate2::get_SignatureAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_SignatureAlgorithm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignatureAlgorithm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_SubjectName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2::get_SubjectName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_SubjectName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubjectName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_Thumbprint
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2::get_Thumbprint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_Thumbprint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Thumbprint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_Version
int System::Security::Cryptography::X509Certificates::X509Certificate2::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_Version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2::GetNameInfo(System::Security::Cryptography::X509Certificates::X509NameType nameType, bool forIssuer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::GetNameInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNameInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameType), ::il2cpp_utils::ExtractType(forIssuer)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, nameType, forIssuer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.AppendBuffer
void System::Security::Cryptography::X509Certificates::X509Certificate2::AppendBuffer(System::Text::StringBuilder* sb, ::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::AppendBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Certificate2", "AppendBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, buffer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
bool System::Security::Cryptography::X509Certificates::X509Certificate2::Verify() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::Verify");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Verify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.get_MonoCertificate
Mono::Security::X509::X509Certificate* System::Security::Cryptography::X509Certificates::X509Certificate2::get_MonoCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::get_MonoCertificate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MonoCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::X509::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2..cctor
void System::Security::Cryptography::X509Certificates::X509Certificate2::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Certificate2", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.Import
void System::Security::Cryptography::X509Certificates::X509Certificate2::Import(::Array<uint8_t>* rawData, ::Il2CppString* password, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::Import");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Import", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawData), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(keyStorageFlags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rawData, password, keyStorageFlags);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.Import
void System::Security::Cryptography::X509Certificates::X509Certificate2::Import(::Il2CppString* fileName, ::Il2CppString* password, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::Import");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Import", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(keyStorageFlags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fileName, password, keyStorageFlags);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
void System::Security::Cryptography::X509Certificates::X509Certificate2::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2::ToString(bool verbose) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verbose)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, verbose);
}
// Writing MetadataGetter for method: X509Certificate2::get_Impl
// Il2CppName: get_Impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Impl* (X509Certificate2::*)()>(&X509Certificate2::get_Impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_Impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Il2CppString*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Il2CppString*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_Extensions
// Il2CppName: get_Extensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ExtensionCollection* (X509Certificate2::*)()>(&X509Certificate2::get_Extensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_Extensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_IssuerName
// Il2CppName: get_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2::*)()>(&X509Certificate2::get_IssuerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_NotAfter
// Il2CppName: get_NotAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (X509Certificate2::*)()>(&X509Certificate2::get_NotAfter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_NotAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_NotBefore
// Il2CppName: get_NotBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (X509Certificate2::*)()>(&X509Certificate2::get_NotBefore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_NotBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_PrivateKey
// Il2CppName: get_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsymmetricAlgorithm* (X509Certificate2::*)()>(&X509Certificate2::get_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::set_PrivateKey
// Il2CppName: set_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(System::Security::Cryptography::AsymmetricAlgorithm*)>(&X509Certificate2::set_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "set_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsymmetricAlgorithm*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_PublicKey
// Il2CppName: get_PublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::PublicKey* (X509Certificate2::*)()>(&X509Certificate2::get_PublicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_PublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_SerialNumber
// Il2CppName: get_SerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2::*)()>(&X509Certificate2::get_SerialNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_SerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_SignatureAlgorithm
// Il2CppName: get_SignatureAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (X509Certificate2::*)()>(&X509Certificate2::get_SignatureAlgorithm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_SignatureAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_SubjectName
// Il2CppName: get_SubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2::*)()>(&X509Certificate2::get_SubjectName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_SubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_Thumbprint
// Il2CppName: get_Thumbprint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2::*)()>(&X509Certificate2::get_Thumbprint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_Thumbprint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509Certificate2::*)()>(&X509Certificate2::get_Version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::GetNameInfo
// Il2CppName: GetNameInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2::*)(System::Security::Cryptography::X509Certificates::X509NameType, bool)>(&X509Certificate2::GetNameInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "GetNameInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509NameType>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::AppendBuffer
// Il2CppName: AppendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, ::Array<uint8_t>*)>(&X509Certificate2::AppendBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "AppendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::Verify
// Il2CppName: Verify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2::*)()>(&X509Certificate2::Verify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "Verify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::get_MonoCertificate
// Il2CppName: get_MonoCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::X509::X509Certificate* (X509Certificate2::*)()>(&X509Certificate2::get_MonoCertificate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "get_MonoCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509Certificate2::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)()>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)()>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Array<uint8_t>*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Array<uint8_t>*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(System::Security::Cryptography::X509Certificates::X509Certificate*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(System::Security::Cryptography::X509Certificates::X509Certificate*)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&X509Certificate2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Array<uint8_t>*, ::Il2CppString*, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags)>(&X509Certificate2::Import)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509KeyStorageFlags>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)(::Il2CppString*, ::Il2CppString*, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags)>(&X509Certificate2::Import)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509KeyStorageFlags>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2::*)()>(&X509Certificate2::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2::*)()>(&X509Certificate2::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2::*)(bool)>(&X509Certificate2::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Collection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509FindType
#include "System/Security/Cryptography/X509Certificates/X509FindType.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Enumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String[] newline_split
::Array<::Il2CppString*>* System::Security::Cryptography::X509Certificates::X509Certificate2Collection::_get_newline_split() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::_get_newline_split");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("System.Security.Cryptography.X509Certificates", "X509Certificate2Collection", "newline_split"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] newline_split
void System::Security::Cryptography::X509Certificates::X509Certificate2Collection::_set_newline_split(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::_set_newline_split");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2Collection", "newline_split", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.get_Item
System::Security::Cryptography::X509Certificates::X509Certificate2* System::Security::Cryptography::X509Certificates::X509Certificate2Collection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Add
int System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Add(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange
void System::Security::Cryptography::X509Certificates::X509Certificate2Collection::AddRange(System::Security::Cryptography::X509Certificates::X509Certificate2Collection* certificates) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::AddRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificates)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, certificates);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Contains
bool System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Contains(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find
System::Security::Cryptography::X509Certificates::X509Certificate2Collection* System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Find(System::Security::Cryptography::X509Certificates::X509FindType findType, ::Il2CppObject* findValue, bool validOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(findType), ::il2cpp_utils::ExtractType(findValue), ::il2cpp_utils::ExtractType(validOnly)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, false>(this, ___internal__method, findType, findValue, validOnly);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection.GetEnumerator
System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator* System::Security::Cryptography::X509Certificates::X509Certificate2Collection::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection..cctor
void System::Security::Cryptography::X509Certificates::X509Certificate2Collection::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Certificate2Collection", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: X509Certificate2Collection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509Certificate2Collection::*)(int)>(&X509Certificate2Collection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2Collection::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::AddRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2Collection::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509FindType, ::Il2CppObject*, bool)>(&X509Certificate2Collection::Find)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509FindType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator* (X509Certificate2Collection::*)()>(&X509Certificate2Collection::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509Certificate2Collection::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Collection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)()>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)()>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Enumerator.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Collection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.get_Current
System::Security::Cryptography::X509Certificates::X509Certificate2* System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.MoveNext
bool System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::MoveNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System.Collections.IEnumerator.MoveNext
bool System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System_Collections_IEnumerator_MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System.Collections.IEnumerator.MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System.Collections.IEnumerator.Reset
void System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509Certificate2Enumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Enumerator::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Enumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Enumerator::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Enumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509Certificate2Enumerator::*)()>(&X509Certificate2Enumerator::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2Enumerator::*)()>(&X509Certificate2Enumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (X509Certificate2Enumerator::*)()>(&X509Certificate2Enumerator::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Enumerator::System_Collections_IEnumerator_MoveNext
// Il2CppName: System.Collections.IEnumerator.MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2Enumerator::*)()>(&X509Certificate2Enumerator::System_Collections_IEnumerator_MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Enumerator::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Enumerator::*)()>(&X509Certificate2Enumerator::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Enumerator*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Impl
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Impl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
#include "System/Security/Cryptography/X509Certificates/X509ExtensionCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedName.hpp"
// Including type: System.Security.Cryptography.AsymmetricAlgorithm
#include "System/Security/Cryptography/AsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.X509Certificates.PublicKey
#include "System/Security/Cryptography/X509Certificates/PublicKey.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateImplCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509NameType
#include "System/Security/Cryptography/X509Certificates/X509NameType.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
#include "System/Security/Cryptography/X509Certificates/X509KeyStorageFlags.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_Extensions
System::Security::Cryptography::X509Certificates::X509ExtensionCollection* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_Extensions");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Extensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ExtensionCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_IssuerName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_IssuerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_IssuerName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IssuerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_PrivateKey
System::Security::Cryptography::AsymmetricAlgorithm* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_PrivateKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_PrivateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsymmetricAlgorithm*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.set_PrivateKey
void System::Security::Cryptography::X509Certificates::X509Certificate2Impl::set_PrivateKey(System::Security::Cryptography::AsymmetricAlgorithm* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::set_PrivateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_PublicKey
System::Security::Cryptography::X509Certificates::PublicKey* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_PublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_PublicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PublicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::PublicKey*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_SignatureAlgorithm
System::Security::Cryptography::Oid* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_SignatureAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_SignatureAlgorithm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignatureAlgorithm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_SubjectName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_SubjectName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_SubjectName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubjectName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_Version
int System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_Version");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_IntermediateCertificates
System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_IntermediateCertificates() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_IntermediateCertificates");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IntermediateCertificates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.get_FallbackImpl
System::Security::Cryptography::X509Certificates::X509Certificate2Impl* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_FallbackImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::get_FallbackImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FallbackImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Impl*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.GetNameInfo
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2Impl::GetNameInfo(System::Security::Cryptography::X509Certificates::X509NameType nameType, bool forIssuer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::GetNameInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNameInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameType), ::il2cpp_utils::ExtractType(forIssuer)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, nameType, forIssuer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.Import
void System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Import(::Array<uint8_t>* rawData, ::Il2CppString* password, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Import");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Import", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawData), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(keyStorageFlags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rawData, password, keyStorageFlags);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.Verify
bool System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Verify(System::Security::Cryptography::X509Certificates::X509Certificate2* thisCertificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Verify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Verify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisCertificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, thisCertificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2Impl.Reset
void System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Impl::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509Certificate2Impl::get_Extensions
// Il2CppName: get_Extensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ExtensionCollection* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_Extensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_Extensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_IssuerName
// Il2CppName: get_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_IssuerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_PrivateKey
// Il2CppName: get_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsymmetricAlgorithm* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::set_PrivateKey
// Il2CppName: set_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Impl::*)(System::Security::Cryptography::AsymmetricAlgorithm*)>(&X509Certificate2Impl::set_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "set_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsymmetricAlgorithm*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_PublicKey
// Il2CppName: get_PublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::PublicKey* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_PublicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_PublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_SignatureAlgorithm
// Il2CppName: get_SignatureAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_SignatureAlgorithm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_SignatureAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_SubjectName
// Il2CppName: get_SubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_SubjectName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_SubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_Version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_IntermediateCertificates
// Il2CppName: get_IntermediateCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_IntermediateCertificates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_IntermediateCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::get_FallbackImpl
// Il2CppName: get_FallbackImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Impl* (X509Certificate2Impl::*)()>(&X509Certificate2Impl::get_FallbackImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "get_FallbackImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::GetNameInfo
// Il2CppName: GetNameInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2Impl::*)(System::Security::Cryptography::X509Certificates::X509NameType, bool)>(&X509Certificate2Impl::GetNameInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "GetNameInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509NameType>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Impl::*)(::Array<uint8_t>*, ::Il2CppString*, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags)>(&X509Certificate2Impl::Import)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509KeyStorageFlags>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::Verify
// Il2CppName: Verify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2Impl::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2Impl::Verify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "Verify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Impl::*)()>(&X509Certificate2Impl::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2Impl::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Impl::*)()>(&X509Certificate2Impl::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Impl::*)()>(&X509Certificate2Impl::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2Impl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono
#include "System/Security/Cryptography/X509Certificates/X509Certificate2ImplMono.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
#include "System/Security/Cryptography/X509Certificates/X509ExtensionCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.PublicKey
#include "System/Security/Cryptography/X509Certificates/PublicKey.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedName.hpp"
// Including type: System.Security.Cryptography.Oid
#include "System/Security/Cryptography/Oid.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateImplCollection.hpp"
// Including type: Mono.Security.X509.X509Certificate
#include "Mono/Security/X509/X509Certificate.hpp"
// Including type: Mono.Security.ASN1
#include "Mono/Security/ASN1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Security.Cryptography.AsymmetricAlgorithm
#include "System/Security/Cryptography/AsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509NameType
#include "System/Security/Cryptography/X509Certificates/X509NameType.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
#include "System/Security/Cryptography/X509Certificates/X509KeyStorageFlags.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String empty_error
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_empty_error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_empty_error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "empty_error"));
}
// Autogenerated static field setter
// Set static field: static private System.String empty_error
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_empty_error(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_empty_error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "empty_error", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] commonName
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_commonName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_commonName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "commonName"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] commonName
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_commonName(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_commonName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "commonName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] email
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_email() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_email");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "email"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] email
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_email(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_email");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "email", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] signedData
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_signedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_get_signedData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "signedData"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] signedData
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_signedData(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_set_signedData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "signedData", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Find
Mono::Security::ASN1* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Find(::Array<uint8_t>* oid, Mono::Security::ASN1* dn) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oid), ::il2cpp_utils::ExtractType(dn)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::ASN1*, false>(this, ___internal__method, oid, dn);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetValueAsString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValueAsString(Mono::Security::ASN1* pair) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValueAsString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValueAsString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pair)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pair);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.ImportPkcs12
Mono::Security::X509::X509Certificate* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ImportPkcs12(::Array<uint8_t>* rawData, ::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ImportPkcs12");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImportPkcs12", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawData), ::il2cpp_utils::ExtractType(password)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::X509::X509Certificate*, false>(this, ___internal__method, rawData, password);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.AppendBuffer
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::AppendBuffer(System::Text::StringBuilder* sb, ::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::AppendBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", "AppendBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, buffer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_MonoCertificate
Mono::Security::X509::X509Certificate* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_MonoCertificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_MonoCertificate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MonoCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::X509::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono..cctor
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Certificate2ImplMono", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_IsValid
bool System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Clone
System::Security::Cryptography::X509Certificates::X509CertificateImpl* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateImpl*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetIssuerName
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetIssuerName(bool legacyV1Mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetIssuerName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIssuerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legacyV1Mode)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, legacyV1Mode);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetSubjectName
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetSubjectName(bool legacyV1Mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetSubjectName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSubjectName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legacyV1Mode)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, legacyV1Mode);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetRawCertData
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetRawCertData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetRawCertData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawCertData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetCertHash
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetCertHash(bool lazy) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetCertHash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCertHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lazy)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, lazy);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetValidFrom
System::DateTime System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValidFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValidFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValidFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetValidUntil
System::DateTime System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValidUntil() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetValidUntil");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValidUntil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Equals
bool System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Equals(System::Security::Cryptography::X509Certificates::X509CertificateImpl* other, bool& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other, result);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetSerialNumber
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetSerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetSerialNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSerialNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_Extensions
System::Security::Cryptography::X509Certificates::X509ExtensionCollection* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_Extensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_Extensions");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Extensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ExtensionCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_IssuerName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IssuerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IssuerName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IssuerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_PrivateKey
System::Security::Cryptography::AsymmetricAlgorithm* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_PrivateKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_PrivateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsymmetricAlgorithm*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.set_PrivateKey
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::set_PrivateKey(System::Security::Cryptography::AsymmetricAlgorithm* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::set_PrivateKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrivateKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_PublicKey
System::Security::Cryptography::X509Certificates::PublicKey* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_PublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_PublicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PublicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::PublicKey*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_SignatureAlgorithm
System::Security::Cryptography::Oid* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_SignatureAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_SignatureAlgorithm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignatureAlgorithm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::Oid*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_SubjectName
System::Security::Cryptography::X509Certificates::X500DistinguishedName* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_SubjectName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_SubjectName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubjectName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X500DistinguishedName*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_Version
int System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_Version");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.GetNameInfo
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetNameInfo(System::Security::Cryptography::X509Certificates::X509NameType nameType, bool forIssuer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::GetNameInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNameInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameType), ::il2cpp_utils::ExtractType(forIssuer)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, nameType, forIssuer);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Import
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Import(::Array<uint8_t>* rawData, ::Il2CppString* password, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Import");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Import", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawData), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(keyStorageFlags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rawData, password, keyStorageFlags);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Reset
void System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ToString(bool verbose) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verbose)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, verbose);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.Verify
bool System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Verify(System::Security::Cryptography::X509Certificates::X509Certificate2* thisCertificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::Verify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Verify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisCertificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, thisCertificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_IntermediateCertificates
System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IntermediateCertificates() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_IntermediateCertificates");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IntermediateCertificates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono.get_FallbackImpl
System::Security::Cryptography::X509Certificates::X509Certificate2Impl* System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_FallbackImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono::get_FallbackImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FallbackImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Impl*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509Certificate2ImplMono::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(Mono::Security::X509::X509Certificate*)>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(Mono::Security::X509::X509Certificate*)>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::ASN1* (X509Certificate2ImplMono::*)(::Array<uint8_t>*, Mono::Security::ASN1*)>(&X509Certificate2ImplMono::Find)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<Mono::Security::ASN1*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetValueAsString
// Il2CppName: GetValueAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)(Mono::Security::ASN1*)>(&X509Certificate2ImplMono::GetValueAsString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetValueAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::ASN1*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::ImportPkcs12
// Il2CppName: ImportPkcs12
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::X509::X509Certificate* (X509Certificate2ImplMono::*)(::Array<uint8_t>*, ::Il2CppString*)>(&X509Certificate2ImplMono::ImportPkcs12)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "ImportPkcs12", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::AppendBuffer
// Il2CppName: AppendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, ::Array<uint8_t>*)>(&X509Certificate2ImplMono::AppendBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "AppendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_MonoCertificate
// Il2CppName: get_MonoCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::X509::X509Certificate* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_MonoCertificate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_MonoCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509Certificate2ImplMono::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateImpl* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetIssuerName
// Il2CppName: GetIssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)(bool)>(&X509Certificate2ImplMono::GetIssuerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetIssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetSubjectName
// Il2CppName: GetSubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)(bool)>(&X509Certificate2ImplMono::GetSubjectName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetSubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetRawCertData
// Il2CppName: GetRawCertData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::GetRawCertData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetRawCertData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetCertHash
// Il2CppName: GetCertHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (X509Certificate2ImplMono::*)(bool)>(&X509Certificate2ImplMono::GetCertHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetCertHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetValidFrom
// Il2CppName: GetValidFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::GetValidFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetValidFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetValidUntil
// Il2CppName: GetValidUntil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::GetValidUntil)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetValidUntil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2ImplMono::*)(System::Security::Cryptography::X509Certificates::X509CertificateImpl*, bool&)>(&X509Certificate2ImplMono::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateImpl*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetSerialNumber
// Il2CppName: GetSerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::GetSerialNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetSerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_Extensions
// Il2CppName: get_Extensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ExtensionCollection* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_Extensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_Extensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_IssuerName
// Il2CppName: get_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_IssuerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_PrivateKey
// Il2CppName: get_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsymmetricAlgorithm* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::set_PrivateKey
// Il2CppName: set_PrivateKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(System::Security::Cryptography::AsymmetricAlgorithm*)>(&X509Certificate2ImplMono::set_PrivateKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "set_PrivateKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsymmetricAlgorithm*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_PublicKey
// Il2CppName: get_PublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::PublicKey* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_PublicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_PublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_SignatureAlgorithm
// Il2CppName: get_SignatureAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::Oid* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_SignatureAlgorithm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_SignatureAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_SubjectName
// Il2CppName: get_SubjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X500DistinguishedName* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_SubjectName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_SubjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_Version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::GetNameInfo
// Il2CppName: GetNameInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)(System::Security::Cryptography::X509Certificates::X509NameType, bool)>(&X509Certificate2ImplMono::GetNameInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "GetNameInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509NameType>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)(::Array<uint8_t>*, ::Il2CppString*, System::Security::Cryptography::X509Certificates::X509KeyStorageFlags)>(&X509Certificate2ImplMono::Import)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509KeyStorageFlags>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Certificate2ImplMono::*)(bool)>(&X509Certificate2ImplMono::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::Verify
// Il2CppName: Verify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2ImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2ImplMono::Verify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "Verify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_IntermediateCertificates
// Il2CppName: get_IntermediateCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_IntermediateCertificates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_IntermediateCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Certificate2ImplMono::get_FallbackImpl
// Il2CppName: get_FallbackImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Impl* (X509Certificate2ImplMono::*)()>(&X509Certificate2ImplMono::get_FallbackImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Certificate2ImplMono*), "get_FallbackImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection_X509CertificateEnumerator.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection.get_Item
System::Security::Cryptography::X509Certificates::X509Certificate* System::Security::Cryptography::X509Certificates::X509CertificateCollection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add
int System::Security::Cryptography::X509Certificates::X509CertificateCollection::Add(System::Security::Cryptography::X509Certificates::X509Certificate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange
void System::Security::Cryptography::X509Certificates::X509CertificateCollection::AddRange(System::Security::Cryptography::X509Certificates::X509CertificateCollection* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::AddRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator
System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator* System::Security::Cryptography::X509Certificates::X509CertificateCollection::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode
int System::Security::Cryptography::X509Certificates::X509CertificateCollection::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509CertificateCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509CertificateCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509CertificateCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate* (X509CertificateCollection::*)(int)>(&X509CertificateCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509CertificateCollection::*)(System::Security::Cryptography::X509Certificates::X509Certificate*)>(&X509CertificateCollection::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509CertificateCollection::AddRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator* (X509CertificateCollection::*)()>(&X509CertificateCollection::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::*)()>(&X509CertificateCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::*)()>(&X509CertificateCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509CertificateCollection::*)()>(&X509CertificateCollection::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection_X509CertificateEnumerator.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator.get_Current
System::Security::Cryptography::X509Certificates::X509Certificate* System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator.System.Collections.IEnumerator.MoveNext
bool System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System.Collections.IEnumerator.MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator.System.Collections.IEnumerator.Reset
void System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateCollection/X509CertificateEnumerator.MoveNext
bool System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateCollection::X509CertificateEnumerator::MoveNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::X509CertificateEnumerator::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509CertificateCollection::X509CertificateEnumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::X509CertificateEnumerator::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509CertificateCollection::X509CertificateEnumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate* (X509CertificateCollection::X509CertificateEnumerator::*)()>(&X509CertificateCollection::X509CertificateEnumerator::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (X509CertificateCollection::X509CertificateEnumerator::*)()>(&X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_MoveNext
// Il2CppName: System.Collections.IEnumerator.MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509CertificateCollection::X509CertificateEnumerator::*)()>(&X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateCollection::X509CertificateEnumerator::*)()>(&X509CertificateCollection::X509CertificateEnumerator::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateCollection::X509CertificateEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509CertificateCollection::X509CertificateEnumerator::*)()>(&X509CertificateCollection::X509CertificateEnumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateCollection::X509CertificateEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateImplCollection.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateImpl
#include "System/Security/Cryptography/X509Certificates/X509CertificateImpl.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.get_Count
int System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.get_Item
System::Security::Cryptography::X509Certificates::X509CertificateImpl* System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateImpl*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.Add
void System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Add(System::Security::Cryptography::X509Certificates::X509CertificateImpl* impl, bool takeOwnership) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(impl), ::il2cpp_utils::ExtractType(takeOwnership)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, impl, takeOwnership);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.Clone
System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.Dispose
void System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.Dispose
void System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection.Finalize
void System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509CertificateImplCollection::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509CertificateImplCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*)>(&X509CertificateImplCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*)>(&X509CertificateImplCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateImpl* (X509CertificateImplCollection::*)(int)>(&X509CertificateImplCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)(System::Security::Cryptography::X509Certificates::X509CertificateImpl*, bool)>(&X509CertificateImplCollection::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateImpl*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)(bool)>(&X509CertificateImplCollection::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateImplCollection::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateImplCollection::*)()>(&X509CertificateImplCollection::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateImplCollection*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImpl
#include "System/Security/Cryptography/X509Certificates/X509ChainImpl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
#include "System/Security/Cryptography/X509Certificates/X509ChainElementCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainPolicy
#include "System/Security/Cryptography/X509Certificates/X509ChainPolicy.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.get_Impl
System::Security::Cryptography::X509Certificates::X509ChainImpl* System::Security::Cryptography::X509Certificates::X509Chain::get_Impl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::get_Impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainImpl*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.get_ChainElements
System::Security::Cryptography::X509Certificates::X509ChainElementCollection* System::Security::Cryptography::X509Certificates::X509Chain::get_ChainElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::get_ChainElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElementCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.get_ChainPolicy
System::Security::Cryptography::X509Certificates::X509ChainPolicy* System::Security::Cryptography::X509Certificates::X509Chain::get_ChainPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::get_ChainPolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainPolicy*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.set_ChainPolicy
void System::Security::Cryptography::X509Certificates::X509Chain::set_ChainPolicy(System::Security::Cryptography::X509Certificates::X509ChainPolicy* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::set_ChainPolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.get_ChainStatus
::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* System::Security::Cryptography::X509Certificates::X509Chain::get_ChainStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::get_ChainStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.Build
bool System::Security::Cryptography::X509Certificates::X509Chain::Build(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::Build");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Build", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.Create
System::Security::Cryptography::X509Certificates::X509Chain* System::Security::Cryptography::X509Certificates::X509Chain::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509Chain", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Chain*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.Dispose
void System::Security::Cryptography::X509Certificates::X509Chain::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.Dispose
void System::Security::Cryptography::X509Certificates::X509Chain::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Chain.Finalize
void System::Security::Cryptography::X509Certificates::X509Chain::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Chain::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509Chain::get_Impl
// Il2CppName: get_Impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainImpl* (X509Chain::*)()>(&X509Chain::get_Impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "get_Impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)(bool)>(&X509Chain::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)(bool)>(&X509Chain::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Chain::get_ChainElements
// Il2CppName: get_ChainElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElementCollection* (X509Chain::*)()>(&X509Chain::get_ChainElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "get_ChainElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::get_ChainPolicy
// Il2CppName: get_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainPolicy* (X509Chain::*)()>(&X509Chain::get_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "get_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::set_ChainPolicy
// Il2CppName: set_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)(System::Security::Cryptography::X509Certificates::X509ChainPolicy*)>(&X509Chain::set_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "set_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainPolicy*>()});
  }
};
// Writing MetadataGetter for method: X509Chain::get_ChainStatus
// Il2CppName: get_ChainStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* (X509Chain::*)()>(&X509Chain::get_ChainStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "get_ChainStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Chain::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Chain::Build)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509Chain::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Chain* (*)()>(&X509Chain::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)()>(&X509Chain::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)(bool)>(&X509Chain::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Chain::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)()>(&X509Chain::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)()>(&X509Chain::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Chain::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Chain::*)()>(&X509Chain::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Chain*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElement
#include "System/Security/Cryptography/X509Certificates/X509ChainElement.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.get_Certificate
System::Security::Cryptography::X509Certificates::X509Certificate2* System::Security::Cryptography::X509Certificates::X509ChainElement::get_Certificate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::get_Certificate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Certificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.get_ChainElementStatus
::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* System::Security::Cryptography::X509Certificates::X509ChainElement::get_ChainElementStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::get_ChainElementStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainElementStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.get_StatusFlags
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainElement::get_StatusFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::get_StatusFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StatusFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.set_StatusFlags
void System::Security::Cryptography::X509Certificates::X509ChainElement::set_StatusFlags(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::set_StatusFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StatusFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.Count
int System::Security::Cryptography::X509Certificates::X509ChainElement::Count(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, flags);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.Set
void System::Security::Cryptography::X509Certificates::X509ChainElement::Set(::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* status, int& position, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flags, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(mask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, status, position, flags, mask);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElement.UncompressFlags
void System::Security::Cryptography::X509Certificates::X509ChainElement::UncompressFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElement::UncompressFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UncompressFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509ChainElement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElement::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainElement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElement::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainElement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainElement::get_Certificate
// Il2CppName: get_Certificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509ChainElement::*)()>(&X509ChainElement::get_Certificate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "get_Certificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElement::get_ChainElementStatus
// Il2CppName: get_ChainElementStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* (X509ChainElement::*)()>(&X509ChainElement::get_ChainElementStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "get_ChainElementStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElement::get_StatusFlags
// Il2CppName: get_StatusFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (X509ChainElement::*)()>(&X509ChainElement::get_StatusFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "get_StatusFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElement::set_StatusFlags
// Il2CppName: set_StatusFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElement::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainElement::set_StatusFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "set_StatusFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainElement::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509ChainElement::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainElement::Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainElement::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElement::*)(::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*, int&, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainElement::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainElement::UncompressFlags
// Il2CppName: UncompressFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElement::*)()>(&X509ChainElement::UncompressFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElement*), "UncompressFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
#include "System/Security/Cryptography/X509Certificates/X509ChainElementCollection.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElement
#include "System/Security/Cryptography/X509Certificates/X509ChainElement.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator
#include "System/Security/Cryptography/X509Certificates/X509ChainElementEnumerator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.get_Count
int System::Security::Cryptography::X509Certificates::X509ChainElementCollection::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::get_Count");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.get_Item
System::Security::Cryptography::X509Certificates::X509ChainElement* System::Security::Cryptography::X509Certificates::X509ChainElementCollection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElement*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System.Collections.ICollection.CopyTo
void System::Security::Cryptography::X509Certificates::X509ChainElementCollection::System_Collections_ICollection_CopyTo(System::Array* array, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::System.Collections.ICollection.CopyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.GetEnumerator
System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator* System::Security::Cryptography::X509Certificates::X509ChainElementCollection::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* System::Security::Cryptography::X509Certificates::X509ChainElementCollection::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Add
void System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Add(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Clear
void System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Contains
bool System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Contains(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementCollection::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Writing MetadataGetter for method: X509ChainElementCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509ChainElementCollection::*)()>(&X509ChainElementCollection::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElement* (X509ChainElementCollection::*)(int)>(&X509ChainElementCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::System_Collections_ICollection_CopyTo
// Il2CppName: System.Collections.ICollection.CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementCollection::*)(System::Array*, int)>(&X509ChainElementCollection::System_Collections_ICollection_CopyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator* (X509ChainElementCollection::*)()>(&X509ChainElementCollection::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (X509ChainElementCollection::*)()>(&X509ChainElementCollection::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementCollection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainElementCollection::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementCollection::*)()>(&X509ChainElementCollection::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainElementCollection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainElementCollection::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainElementCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementCollection::*)()>(&X509ChainElementCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementCollection::*)()>(&X509ChainElementCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator
#include "System/Security/Cryptography/X509Certificates/X509ChainElementEnumerator.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElement
#include "System/Security/Cryptography/X509Certificates/X509ChainElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.get_Current
System::Security::Cryptography::X509Certificates::X509ChainElement* System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElement*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.MoveNext
bool System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Reset
void System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainElementEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509ChainElementEnumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementEnumerator::*)(System::Collections::IEnumerable*)>(&X509ChainElementEnumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementEnumerator::*)(System::Collections::IEnumerable*)>(&X509ChainElementEnumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>()});
  }
};
// Writing MetadataGetter for method: X509ChainElementEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElement* (X509ChainElementEnumerator::*)()>(&X509ChainElementEnumerator::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (X509ChainElementEnumerator::*)()>(&X509ChainElementEnumerator::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainElementEnumerator::*)()>(&X509ChainElementEnumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainElementEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainElementEnumerator::*)()>(&X509ChainElementEnumerator::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainElementEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImpl
#include "System/Security/Cryptography/X509Certificates/X509ChainImpl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
#include "System/Security/Cryptography/X509Certificates/X509ChainElementCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainPolicy
#include "System/Security/Cryptography/X509Certificates/X509ChainPolicy.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.get_IsValid
bool System::Security::Cryptography::X509Certificates::X509ChainImpl::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::get_IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.get_ChainElements
System::Security::Cryptography::X509Certificates::X509ChainElementCollection* System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainElements");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElementCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.get_ChainPolicy
System::Security::Cryptography::X509Certificates::X509ChainPolicy* System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainPolicy*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.set_ChainPolicy
void System::Security::Cryptography::X509Certificates::X509ChainImpl::set_ChainPolicy(System::Security::Cryptography::X509Certificates::X509ChainPolicy* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::set_ChainPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.get_ChainStatus
::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::get_ChainStatus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.Build
bool System::Security::Cryptography::X509Certificates::X509ChainImpl::Build(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::Build");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Build", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.Reset
void System::Security::Cryptography::X509Certificates::X509ChainImpl::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.Dispose
void System::Security::Cryptography::X509Certificates::X509ChainImpl::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.Dispose
void System::Security::Cryptography::X509Certificates::X509ChainImpl::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImpl.Finalize
void System::Security::Cryptography::X509Certificates::X509ChainImpl::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImpl::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509ChainImpl::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImpl::*)()>(&X509ChainImpl::get_IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::get_ChainElements
// Il2CppName: get_ChainElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElementCollection* (X509ChainImpl::*)()>(&X509ChainImpl::get_ChainElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "get_ChainElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::get_ChainPolicy
// Il2CppName: get_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainPolicy* (X509ChainImpl::*)()>(&X509ChainImpl::get_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "get_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::set_ChainPolicy
// Il2CppName: set_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)(System::Security::Cryptography::X509Certificates::X509ChainPolicy*)>(&X509ChainImpl::set_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "set_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainPolicy*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::get_ChainStatus
// Il2CppName: get_ChainStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* (X509ChainImpl::*)()>(&X509ChainImpl::get_ChainStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "get_ChainStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImpl::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImpl::Build)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)()>(&X509ChainImpl::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)()>(&X509ChainImpl::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)(bool)>(&X509ChainImpl::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)()>(&X509ChainImpl::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImpl::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)()>(&X509ChainImpl::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImpl::*)()>(&X509ChainImpl::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImpl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImplMono
#include "System/Security/Cryptography/X509Certificates/X509ChainImplMono.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
#include "System/Security/Cryptography/X509Certificates/X509ChainElementCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainPolicy
#include "System/Security/Cryptography/X509Certificates/X509ChainPolicy.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
#include "System/Security/Cryptography/X509Certificates/X500DistinguishedName.hpp"
// Including type: System.Security.Cryptography.AsymmetricAlgorithm
#include "System/Security/Cryptography/AsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainElement
#include "System/Security/Cryptography/X509Certificates/X509ChainElement.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Collection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Store
#include "System/Security/Cryptography/X509Certificates/X509Store.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
// Including type: Mono.Security.X509.X509Crl/X509CrlEntry
#include "Mono/Security/X509/X509Crl_X509CrlEntry.hpp"
// Including type: Mono.Security.X509.X509Extension
#include "Mono/Security/X509/X509Extension.hpp"
// Including type: Mono.Security.X509.X509Store
#include "Mono/Security/X509/X509Store.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* System::Security::Cryptography::X509Certificates::X509ChainImplMono::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*>("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "Empty"));
}
// Autogenerated static field setter
// Set static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::_set_Empty(::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "Empty", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_Roots
System::Security::Cryptography::X509Certificates::X509Certificate2Collection* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_Roots() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_Roots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Roots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_CertificateAuthorities
System::Security::Cryptography::X509Certificates::X509Certificate2Collection* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateAuthorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateAuthorities");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CertificateAuthorities", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_LMRootStore
System::Security::Cryptography::X509Certificates::X509Store* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMRootStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMRootStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LMRootStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Store*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_UserRootStore
System::Security::Cryptography::X509Certificates::X509Store* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserRootStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserRootStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserRootStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Store*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_LMCAStore
System::Security::Cryptography::X509Certificates::X509Store* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMCAStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMCAStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LMCAStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Store*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_UserCAStore
System::Security::Cryptography::X509Certificates::X509Store* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserCAStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserCAStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserCAStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Store*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_CertificateCollection
System::Security::Cryptography::X509Certificates::X509Certificate2Collection* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CertificateCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.BuildChainFrom
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainImplMono::BuildChainFrom(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::BuildChainFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildChainFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.SelectBestFromCollection
System::Security::Cryptography::X509Certificates::X509Certificate2* System::Security::Cryptography::X509Certificates::X509ChainImplMono::SelectBestFromCollection(System::Security::Cryptography::X509Certificates::X509Certificate2* child, System::Security::Cryptography::X509Certificates::X509Certificate2Collection* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::SelectBestFromCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBestFromCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2*, false>(this, ___internal__method, child, c);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.FindParent
System::Security::Cryptography::X509Certificates::X509Certificate2* System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindParent(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2*, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.IsChainComplete
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsChainComplete(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsChainComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsChainComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.IsSelfIssued
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSelfIssued(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSelfIssued");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSelfIssued", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.ValidateChain
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::ValidateChain(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::ValidateChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flag)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flag);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.Process
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::Process(int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, n);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.PrepareForNextCertificate
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::PrepareForNextCertificate(int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::PrepareForNextCertificate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareForNextCertificate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, n);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.WrapUp
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::WrapUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::WrapUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrapUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.ProcessCertificateExtensions
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCertificateExtensions(System::Security::Cryptography::X509Certificates::X509ChainElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCertificateExtensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessCertificateExtensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.IsSignedWith
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSignedWith(System::Security::Cryptography::X509Certificates::X509Certificate2* _signed, System::Security::Cryptography::AsymmetricAlgorithm* pubkey) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSignedWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSignedWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_signed), ::il2cpp_utils::ExtractType(pubkey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, _signed, pubkey);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.GetSubjectKeyIdentifier
::Il2CppString* System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetSubjectKeyIdentifier(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetSubjectKeyIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSubjectKeyIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.GetAuthorityKeyIdentifier
::Il2CppString* System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.GetAuthorityKeyIdentifier
::Il2CppString* System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier(Mono::Security::X509::X509Crl* crl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(crl)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, crl);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.GetAuthorityKeyIdentifier
::Il2CppString* System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier(Mono::Security::X509::X509Extension* ext) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ext)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ext);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.CheckRevocationOnChain
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocationOnChain(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocationOnChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckRevocationOnChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flag)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flag);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.CheckRevocation
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, int ca, bool online) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckRevocation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(ca), ::il2cpp_utils::ExtractType(online)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, false>(this, ___internal__method, certificate, ca, online);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.CheckRevocation
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, System::Security::Cryptography::X509Certificates::X509Certificate2* ca_cert, bool online) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckRevocation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(ca_cert), ::il2cpp_utils::ExtractType(online)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, false>(this, ___internal__method, certificate, ca_cert, online);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.CheckCrls
Mono::Security::X509::X509Crl* System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckCrls(::Il2CppString* subject, ::Il2CppString* ski, Mono::Security::X509::X509Store* store) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckCrls");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", "CheckCrls", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(ski), ::il2cpp_utils::ExtractType(store)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::X509::X509Crl*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, subject, ski, store);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.FindCrl
Mono::Security::X509::X509Crl* System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindCrl(System::Security::Cryptography::X509Certificates::X509Certificate2* caCertificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindCrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindCrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caCertificate)})));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::X509::X509Crl*, false>(this, ___internal__method, caCertificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.ProcessCrlExtensions
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlExtensions(Mono::Security::X509::X509Crl* crl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlExtensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessCrlExtensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(crl)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, crl);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.ProcessCrlEntryExtensions
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlEntryExtensions(Mono::Security::X509::X509Crl::X509CrlEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlEntryExtensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessCrlEntryExtensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, entry);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono..cctor
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainImplMono", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_IsValid
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_ChainElements
System::Security::Cryptography::X509Certificates::X509ChainElementCollection* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainElements");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainElementCollection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_ChainPolicy
System::Security::Cryptography::X509Certificates::X509ChainPolicy* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainPolicy*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.set_ChainPolicy
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy(System::Security::Cryptography::X509Certificates::X509ChainPolicy* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChainPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.get_ChainStatus
::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainStatus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChainStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.Build
bool System::Security::Cryptography::X509Certificates::X509ChainImplMono::Build(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::Build");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Build", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, certificate);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainImplMono.Reset
void System::Security::Cryptography::X509Certificates::X509ChainImplMono::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainImplMono::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509ChainImplMono::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(bool)>(&X509ChainImplMono::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(bool)>(&X509ChainImplMono::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_Roots
// Il2CppName: get_Roots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_Roots)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_Roots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_CertificateAuthorities
// Il2CppName: get_CertificateAuthorities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_CertificateAuthorities)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_CertificateAuthorities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_LMRootStore
// Il2CppName: get_LMRootStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Store* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_LMRootStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_LMRootStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_UserRootStore
// Il2CppName: get_UserRootStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Store* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_UserRootStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_UserRootStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_LMCAStore
// Il2CppName: get_LMCAStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Store* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_LMCAStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_LMCAStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_UserCAStore
// Il2CppName: get_UserCAStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Store* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_UserCAStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_UserCAStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_CertificateCollection
// Il2CppName: get_CertificateCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_CertificateCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_CertificateCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::BuildChainFrom
// Il2CppName: BuildChainFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::BuildChainFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "BuildChainFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::SelectBestFromCollection
// Il2CppName: SelectBestFromCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509ChainImplMono::SelectBestFromCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "SelectBestFromCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::FindParent
// Il2CppName: FindParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::FindParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "FindParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::IsChainComplete
// Il2CppName: IsChainComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::IsChainComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "IsChainComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::IsSelfIssued
// Il2CppName: IsSelfIssued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::IsSelfIssued)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "IsSelfIssued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::ValidateChain
// Il2CppName: ValidateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainImplMono::ValidateChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "ValidateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(int)>(&X509ChainImplMono::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::PrepareForNextCertificate
// Il2CppName: PrepareForNextCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(int)>(&X509ChainImplMono::PrepareForNextCertificate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "PrepareForNextCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::WrapUp
// Il2CppName: WrapUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)()>(&X509ChainImplMono::WrapUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "WrapUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::ProcessCertificateExtensions
// Il2CppName: ProcessCertificateExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509ChainElement*)>(&X509ChainImplMono::ProcessCertificateExtensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "ProcessCertificateExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainElement*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::IsSignedWith
// Il2CppName: IsSignedWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, System::Security::Cryptography::AsymmetricAlgorithm*)>(&X509ChainImplMono::IsSignedWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "IsSignedWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsymmetricAlgorithm*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::GetSubjectKeyIdentifier
// Il2CppName: GetSubjectKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::GetSubjectKeyIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "GetSubjectKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(Mono::Security::X509::X509Crl*)>(&X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Crl*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(Mono::Security::X509::X509Extension*)>(&X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Extension*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::CheckRevocationOnChain
// Il2CppName: CheckRevocationOnChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainImplMono::CheckRevocationOnChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "CheckRevocationOnChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::CheckRevocation
// Il2CppName: CheckRevocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, int, bool)>(&X509ChainImplMono::CheckRevocation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "CheckRevocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::CheckRevocation
// Il2CppName: CheckRevocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, System::Security::Cryptography::X509Certificates::X509Certificate2*, bool)>(&X509ChainImplMono::CheckRevocation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "CheckRevocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::CheckCrls
// Il2CppName: CheckCrls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::X509::X509Crl* (*)(::Il2CppString*, ::Il2CppString*, Mono::Security::X509::X509Store*)>(&X509ChainImplMono::CheckCrls)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "CheckCrls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Store*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::FindCrl
// Il2CppName: FindCrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Security::X509::X509Crl* (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::FindCrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "FindCrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::ProcessCrlExtensions
// Il2CppName: ProcessCrlExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(Mono::Security::X509::X509Crl*)>(&X509ChainImplMono::ProcessCrlExtensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "ProcessCrlExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Crl*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::ProcessCrlEntryExtensions
// Il2CppName: ProcessCrlEntryExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(Mono::Security::X509::X509Crl::X509CrlEntry*)>(&X509ChainImplMono::ProcessCrlEntryExtensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "ProcessCrlEntryExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Crl::X509CrlEntry*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509ChainImplMono::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)()>(&X509ChainImplMono::get_IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_ChainElements
// Il2CppName: get_ChainElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainElementCollection* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_ChainElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_ChainElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_ChainPolicy
// Il2CppName: get_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainPolicy* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::set_ChainPolicy
// Il2CppName: set_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509ChainPolicy*)>(&X509ChainImplMono::set_ChainPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "set_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainPolicy*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::get_ChainStatus
// Il2CppName: get_ChainStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* (X509ChainImplMono::*)()>(&X509ChainImplMono::get_ChainStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "get_ChainStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509ChainImplMono::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509ChainImplMono::Build)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
  }
};
// Writing MetadataGetter for method: X509ChainImplMono::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainImplMono::*)()>(&X509ChainImplMono::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainImplMono*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Security.Cryptography.X509Certificates.X509ChainPolicy
#include "System/Security/Cryptography/X509Certificates/X509ChainPolicy.hpp"
// Including type: System.Security.Cryptography.OidCollection
#include "System/Security/Cryptography/OidCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
#include "System/Security/Cryptography/X509Certificates/X509Certificate2Collection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.get_ExtraStore
System::Security::Cryptography::X509Certificates::X509Certificate2Collection* System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_ExtraStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_ExtraStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtraStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.get_RevocationFlag
System::Security::Cryptography::X509Certificates::X509RevocationFlag System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_RevocationFlag() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_RevocationFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RevocationFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509RevocationFlag, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.set_RevocationFlag
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_RevocationFlag(System::Security::Cryptography::X509Certificates::X509RevocationFlag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_RevocationFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RevocationFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.get_RevocationMode
System::Security::Cryptography::X509Certificates::X509RevocationMode System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_RevocationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_RevocationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RevocationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509RevocationMode, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.set_RevocationMode
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_RevocationMode(System::Security::Cryptography::X509Certificates::X509RevocationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_RevocationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RevocationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.set_UrlRetrievalTimeout
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_UrlRetrievalTimeout(System::TimeSpan value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_UrlRetrievalTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UrlRetrievalTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.get_VerificationFlags
System::Security::Cryptography::X509Certificates::X509VerificationFlags System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_VerificationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_VerificationFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VerificationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509VerificationFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.set_VerificationFlags
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_VerificationFlags(System::Security::Cryptography::X509Certificates::X509VerificationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_VerificationFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VerificationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.get_VerificationTime
System::DateTime System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_VerificationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::get_VerificationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VerificationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.set_VerificationTime
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_VerificationTime(System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::set_VerificationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VerificationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainPolicy.Reset
void System::Security::Cryptography::X509Certificates::X509ChainPolicy::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainPolicy::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509ChainPolicy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509ChainPolicy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&X509ChainPolicy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509CertificateCollection*>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::get_ExtraStore
// Il2CppName: get_ExtraStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509ChainPolicy::*)()>(&X509ChainPolicy::get_ExtraStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "get_ExtraStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::get_RevocationFlag
// Il2CppName: get_RevocationFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509RevocationFlag (X509ChainPolicy::*)()>(&X509ChainPolicy::get_RevocationFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "get_RevocationFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::set_RevocationFlag
// Il2CppName: set_RevocationFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::Security::Cryptography::X509Certificates::X509RevocationFlag)>(&X509ChainPolicy::set_RevocationFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "set_RevocationFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509RevocationFlag>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::get_RevocationMode
// Il2CppName: get_RevocationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509RevocationMode (X509ChainPolicy::*)()>(&X509ChainPolicy::get_RevocationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "get_RevocationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::set_RevocationMode
// Il2CppName: set_RevocationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::Security::Cryptography::X509Certificates::X509RevocationMode)>(&X509ChainPolicy::set_RevocationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "set_RevocationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509RevocationMode>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::set_UrlRetrievalTimeout
// Il2CppName: set_UrlRetrievalTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::TimeSpan)>(&X509ChainPolicy::set_UrlRetrievalTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "set_UrlRetrievalTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::get_VerificationFlags
// Il2CppName: get_VerificationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509VerificationFlags (X509ChainPolicy::*)()>(&X509ChainPolicy::get_VerificationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "get_VerificationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::set_VerificationFlags
// Il2CppName: set_VerificationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::Security::Cryptography::X509Certificates::X509VerificationFlags)>(&X509ChainPolicy::set_VerificationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "set_VerificationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509VerificationFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::get_VerificationTime
// Il2CppName: get_VerificationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (X509ChainPolicy::*)()>(&X509ChainPolicy::get_VerificationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "get_VerificationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::set_VerificationTime
// Il2CppName: set_VerificationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)(System::DateTime)>(&X509ChainPolicy::set_VerificationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "set_VerificationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)()>(&X509ChainPolicy::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainPolicy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)()>(&X509ChainPolicy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainPolicy::*)()>(&X509ChainPolicy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainPolicy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainStatus
#include "System/Security/Cryptography/X509Certificates/X509ChainStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainStatus.get_Status
System::Security::Cryptography::X509Certificates::X509ChainStatusFlags System::Security::Cryptography::X509Certificates::X509ChainStatus::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatus::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags, false>(*this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainStatus.set_Status
void System::Security::Cryptography::X509Certificates::X509ChainStatus::set_Status(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatus::set_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainStatus.set_StatusInformation
void System::Security::Cryptography::X509Certificates::X509ChainStatus::set_StatusInformation(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatus::set_StatusInformation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_StatusInformation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ChainStatus.GetInformation
::Il2CppString* System::Security::Cryptography::X509Certificates::X509ChainStatus::GetInformation(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ChainStatus::GetInformation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ChainStatus", "GetInformation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags);
}
// Writing MetadataGetter for method: X509ChainStatus::X509ChainStatus
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainStatus::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainStatus::X509ChainStatus<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainStatus::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainStatus::X509ChainStatus<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainStatus::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (X509ChainStatus::*)()>(&X509ChainStatus::get_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ChainStatus::set_Status
// Il2CppName: set_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainStatus::*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainStatus::set_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), "set_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Writing MetadataGetter for method: X509ChainStatus::set_StatusInformation
// Il2CppName: set_StatusInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ChainStatus::*)(::Il2CppString*)>(&X509ChainStatus::set_StatusInformation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), "set_StatusInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509ChainStatus::GetInformation
// Il2CppName: GetInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&X509ChainStatus::GetInformation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ChainStatus), "GetInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatusFlags>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension
#include "System/Security/Cryptography/X509Certificates/X509EnhancedKeyUsageExtension.hpp"
// Including type: System.Security.Cryptography.OidCollection
#include "System/Security/Cryptography/OidCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.Decode
System::Security::Cryptography::AsnDecodeStatus System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::Decode(::Array<uint8_t>* extension) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::Decode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Decode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(extension)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::AsnDecodeStatus, false>(this, ___internal__method, extension);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.CopyFrom
void System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::CopyFrom(System::Security::Cryptography::AsnEncodedData* asnEncodedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::CopyFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asnEncodedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asnEncodedData);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.ToString
::Il2CppString* System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::ToString(bool multiLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509EnhancedKeyUsageExtension::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiLine)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, multiLine);
}
// Writing MetadataGetter for method: X509EnhancedKeyUsageExtension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509EnhancedKeyUsageExtension::*)(System::Security::Cryptography::AsnEncodedData*, bool)>(&X509EnhancedKeyUsageExtension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509EnhancedKeyUsageExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509EnhancedKeyUsageExtension::*)(System::Security::Cryptography::AsnEncodedData*, bool)>(&X509EnhancedKeyUsageExtension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509EnhancedKeyUsageExtension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509EnhancedKeyUsageExtension::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::AsnDecodeStatus (X509EnhancedKeyUsageExtension::*)(::Array<uint8_t>*)>(&X509EnhancedKeyUsageExtension::Decode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509EnhancedKeyUsageExtension*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509EnhancedKeyUsageExtension::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509EnhancedKeyUsageExtension::*)(System::Security::Cryptography::AsnEncodedData*)>(&X509EnhancedKeyUsageExtension::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509EnhancedKeyUsageExtension*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>()});
  }
};
// Writing MetadataGetter for method: X509EnhancedKeyUsageExtension::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509EnhancedKeyUsageExtension::*)(bool)>(&X509EnhancedKeyUsageExtension::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509EnhancedKeyUsageExtension*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509Extension
#include "System/Security/Cryptography/X509Certificates/X509Extension.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Extension.get_Critical
bool System::Security::Cryptography::X509Certificates::X509Extension::get_Critical() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Extension::get_Critical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Critical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Extension.set_Critical
void System::Security::Cryptography::X509Certificates::X509Extension::set_Critical(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Extension::set_Critical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Critical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Extension.FormatUnkownData
::Il2CppString* System::Security::Cryptography::X509Certificates::X509Extension::FormatUnkownData(::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Extension::FormatUnkownData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatUnkownData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom
void System::Security::Cryptography::X509Certificates::X509Extension::CopyFrom(System::Security::Cryptography::AsnEncodedData* asnEncodedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Extension::CopyFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asnEncodedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asnEncodedData);
}
// Writing MetadataGetter for method: X509Extension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)(::Il2CppString*, ::Array<uint8_t>*, bool)>(&X509Extension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)(::Il2CppString*, ::Array<uint8_t>*, bool)>(&X509Extension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Extension::get_Critical
// Il2CppName: get_Critical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Extension::*)()>(&X509Extension::get_Critical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), "get_Critical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Extension::set_Critical
// Il2CppName: set_Critical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)(bool)>(&X509Extension::set_Critical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), "set_Critical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: X509Extension::FormatUnkownData
// Il2CppName: FormatUnkownData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509Extension::*)(::Array<uint8_t>*)>(&X509Extension::FormatUnkownData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), "FormatUnkownData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509Extension::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)()>(&X509Extension::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)()>(&X509Extension::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509Extension::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Extension::*)(System::Security::Cryptography::AsnEncodedData*)>(&X509Extension::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509Extension*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::AsnEncodedData*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
#include "System/Security/Cryptography/X509Certificates/X509ExtensionCollection.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: Mono.Security.X509.X509Certificate
#include "Mono/Security/X509/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Extension
#include "System/Security/Cryptography/X509Certificates/X509Extension.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator
#include "System/Security/Cryptography/X509Certificates/X509ExtensionEnumerator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] Empty
::Array<uint8_t>* System::Security::Cryptography::X509Certificates::X509ExtensionCollection::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography.X509Certificates", "X509ExtensionCollection", "Empty"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] Empty
void System::Security::Cryptography::X509Certificates::X509ExtensionCollection::_set_Empty(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography.X509Certificates", "X509ExtensionCollection", "Empty", value));
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection.get_Count
int System::Security::Cryptography::X509Certificates::X509ExtensionCollection::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::get_Count");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection.get_Item
System::Security::Cryptography::X509Certificates::X509Extension* System::Security::Cryptography::X509Certificates::X509ExtensionCollection::get_Item(::Il2CppString* oid) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oid)})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509Extension*, false>(this, ___internal__method, oid);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System.Collections.ICollection.CopyTo
void System::Security::Cryptography::X509Certificates::X509ExtensionCollection::System_Collections_ICollection_CopyTo(System::Array* array, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::System.Collections.ICollection.CopyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection.GetEnumerator
System::Security::Cryptography::X509Certificates::X509ExtensionEnumerator* System::Security::Cryptography::X509Certificates::X509ExtensionCollection::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Cryptography::X509Certificates::X509ExtensionEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* System::Security::Cryptography::X509Certificates::X509ExtensionCollection::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: System.Security.Cryptography.X509Certificates.X509ExtensionCollection..cctor
void System::Security::Cryptography::X509Certificates::X509ExtensionCollection::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509ExtensionCollection::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Security.Cryptography.X509Certificates", "X509ExtensionCollection", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: X509ExtensionCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ExtensionCollection::*)(Mono::Security::X509::X509Certificate*)>(&X509ExtensionCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ExtensionCollection::*)(Mono::Security::X509::X509Certificate*)>(&X509ExtensionCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Security::X509::X509Certificate*>()});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509ExtensionCollection::*)()>(&X509ExtensionCollection::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Extension* (X509ExtensionCollection::*)(::Il2CppString*)>(&X509ExtensionCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::System_Collections_ICollection_CopyTo
// Il2CppName: System.Collections.ICollection.CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509ExtensionCollection::*)(System::Array*, int)>(&X509ExtensionCollection::System_Collections_ICollection_CopyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509ExtensionEnumerator* (X509ExtensionCollection::*)()>(&X509ExtensionCollection::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (X509ExtensionCollection::*)()>(&X509ExtensionCollection::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509ExtensionCollection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509ExtensionCollection::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509ExtensionCollection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
